
beacon_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d24  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e0  08009e38  08009e38  0000ae38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a618  0800a618  0000c1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a618  0800a618  0000b618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a620  0800a620  0000c1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a620  0800a620  0000b620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a624  0800a624  0000b624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800a628  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a4  200001e8  0800a810  0000c1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b8c  0800a810  0000cb8c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4ec  00000000  00000000  0000c211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002de6  00000000  00000000  000176fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba8  00000000  00000000  0001a4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a5  00000000  00000000  0001b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ab45  00000000  00000000  0001b935  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014595  00000000  00000000  0003647a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086017  00000000  00000000  0004aa0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0a26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000414c  00000000  00000000  000d0a6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d4bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08009e1c 	.word	0x08009e1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08009e1c 	.word	0x08009e1c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	@ 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dea:	2afd      	cmp	r2, #253	@ 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	@ 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	@ 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	@ 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_fcmpun>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800112c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001130:	d102      	bne.n	8001138 <__aeabi_fcmpun+0x14>
 8001132:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001136:	d108      	bne.n	800114a <__aeabi_fcmpun+0x26>
 8001138:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800113c:	d102      	bne.n	8001144 <__aeabi_fcmpun+0x20>
 800113e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001142:	d102      	bne.n	800114a <__aeabi_fcmpun+0x26>
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4770      	bx	lr
 800114a:	f04f 0001 	mov.w	r0, #1
 800114e:	4770      	bx	lr

08001150 <__aeabi_d2lz>:
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	2200      	movs	r2, #0
 8001154:	2300      	movs	r3, #0
 8001156:	4604      	mov	r4, r0
 8001158:	460d      	mov	r5, r1
 800115a:	f7ff fc39 	bl	80009d0 <__aeabi_dcmplt>
 800115e:	b928      	cbnz	r0, 800116c <__aeabi_d2lz+0x1c>
 8001160:	4620      	mov	r0, r4
 8001162:	4629      	mov	r1, r5
 8001164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001168:	f000 b80a 	b.w	8001180 <__aeabi_d2ulz>
 800116c:	4620      	mov	r0, r4
 800116e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001172:	f000 f805 	bl	8001180 <__aeabi_d2ulz>
 8001176:	4240      	negs	r0, r0
 8001178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800117c:	bd38      	pop	{r3, r4, r5, pc}
 800117e:	bf00      	nop

08001180 <__aeabi_d2ulz>:
 8001180:	b5d0      	push	{r4, r6, r7, lr}
 8001182:	2200      	movs	r2, #0
 8001184:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <__aeabi_d2ulz+0x34>)
 8001186:	4606      	mov	r6, r0
 8001188:	460f      	mov	r7, r1
 800118a:	f7ff f9af 	bl	80004ec <__aeabi_dmul>
 800118e:	f7ff fc85 	bl	8000a9c <__aeabi_d2uiz>
 8001192:	4604      	mov	r4, r0
 8001194:	f7ff f930 	bl	80003f8 <__aeabi_ui2d>
 8001198:	2200      	movs	r2, #0
 800119a:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <__aeabi_d2ulz+0x38>)
 800119c:	f7ff f9a6 	bl	80004ec <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4630      	mov	r0, r6
 80011a6:	4639      	mov	r1, r7
 80011a8:	f7fe ffe8 	bl	800017c <__aeabi_dsub>
 80011ac:	f7ff fc76 	bl	8000a9c <__aeabi_d2uiz>
 80011b0:	4621      	mov	r1, r4
 80011b2:	bdd0      	pop	{r4, r6, r7, pc}
 80011b4:	3df00000 	.word	0x3df00000
 80011b8:	41f00000 	.word	0x41f00000

080011bc <apInit>:

void StopMode(void);


void apInit(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  cliOpen(_DEF_UART2, 57600);
 80011c0:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 80011c4:	2001      	movs	r0, #1
 80011c6:	f000 fdab 	bl	8001d20 <cliOpen>

  ledOn(0);
 80011ca:	2000      	movs	r0, #0
 80011cc:	f001 fc70 	bl	8002ab0 <ledOn>
  uartPrintf(_DEF_UART2, "Firmware Begin...\n");
 80011d0:	4902      	ldr	r1, [pc, #8]	@ (80011dc <apInit+0x20>)
 80011d2:	2001      	movs	r0, #1
 80011d4:	f001 fece 	bl	8002f74 <uartPrintf>
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	08009e38 	.word	0x08009e38

080011e0 <apMain>:

void apMain(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 80011e6:	f000 f87f 	bl	80012e8 <millis>
 80011ea:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if(millis() - pre_time >= 100)
 80011ec:	f000 f87c 	bl	80012e8 <millis>
 80011f0:	4602      	mov	r2, r0
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b63      	cmp	r3, #99	@ 0x63
 80011f8:	d9f8      	bls.n	80011ec <apMain+0xc>
    {
      pre_time = millis();
 80011fa:	f000 f875 	bl	80012e8 <millis>
 80011fe:	6078      	str	r0, [r7, #4]

      changeBeaconStarted(true);
 8001200:	2001      	movs	r0, #1
 8001202:	f000 fae9 	bl	80017d8 <changeBeaconStarted>

      handleBeaconStart();
 8001206:	f000 fabb 	bl	8001780 <handleBeaconStart>

      StopMode();
 800120a:	f000 f801 	bl	8001210 <StopMode>
    if(millis() - pre_time >= 100)
 800120e:	e7ed      	b.n	80011ec <apMain+0xc>

08001210 <StopMode>:
    //cliMain();
  }
}

void StopMode(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  ledOff(0);
 8001214:	2000      	movs	r0, #0
 8001216:	f001 fc6b 	bl	8002af0 <ledOff>

  // SysTick을 중단합니다.
  HAL_SuspendTick();
 800121a:	f002 f8bd 	bl	8003398 <HAL_SuspendTick>

  // 저전력 모드로 진입합니다.
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFE);
 800121e:	2102      	movs	r1, #2
 8001220:	2001      	movs	r0, #1
 8001222:	f002 ffc5 	bl	80041b0 <HAL_PWR_EnterSTOPMode>

  // 시스템이 깨어날 때 SysTick을 다시 시작합니다.
  HAL_ResumeTick();
 8001226:	f002 f8c5 	bl	80033b4 <HAL_ResumeTick>
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <bspInit>:
#include "bsp.h"

void SystemClock_Config(void);

void bspInit(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
  HAL_Init();
 8001236:	f002 f829 	bl	800328c <HAL_Init>
  SystemClock_Config();
 800123a:	f000 f85c 	bl	80012f6 <SystemClock_Config>

  __HAL_RCC_GPIOD_CLK_ENABLE();
 800123e:	4b14      	ldr	r3, [pc, #80]	@ (8001290 <bspInit+0x60>)
 8001240:	699b      	ldr	r3, [r3, #24]
 8001242:	4a13      	ldr	r2, [pc, #76]	@ (8001290 <bspInit+0x60>)
 8001244:	f043 0320 	orr.w	r3, r3, #32
 8001248:	6193      	str	r3, [r2, #24]
 800124a:	4b11      	ldr	r3, [pc, #68]	@ (8001290 <bspInit+0x60>)
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	f003 0320 	and.w	r3, r3, #32
 8001252:	60fb      	str	r3, [r7, #12]
 8001254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	4b0e      	ldr	r3, [pc, #56]	@ (8001290 <bspInit+0x60>)
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	4a0d      	ldr	r2, [pc, #52]	@ (8001290 <bspInit+0x60>)
 800125c:	f043 0308 	orr.w	r3, r3, #8
 8001260:	6193      	str	r3, [r2, #24]
 8001262:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <bspInit+0x60>)
 8001264:	699b      	ldr	r3, [r3, #24]
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <bspInit+0x60>)
 8001270:	699b      	ldr	r3, [r3, #24]
 8001272:	4a07      	ldr	r2, [pc, #28]	@ (8001290 <bspInit+0x60>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	6193      	str	r3, [r2, #24]
 800127a:	4b05      	ldr	r3, [pc, #20]	@ (8001290 <bspInit+0x60>)
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40021000 	.word	0x40021000

08001294 <delay>:

void delay(uint32_t ms)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	f002 f857 	bl	8003350 <HAL_Delay>
}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <us_delay>:

void us_delay(__IO uint32_t nCount)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b085      	sub	sp, #20
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
    if (nCount > 1) {
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d90a      	bls.n	80012ce <us_delay+0x24>
        uint32_t count = nCount * 8 - 6; // 딜레이 시간 계산
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	3b06      	subs	r3, #6
 80012be:	60fb      	str	r3, [r7, #12]
        while (count--); // 딜레이를 위해 루프를 돔
 80012c0:	bf00      	nop
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	1e5a      	subs	r2, r3, #1
 80012c6:	60fa      	str	r2, [r7, #12]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1fa      	bne.n	80012c2 <us_delay+0x18>
    } else {
        uint32_t count = 2; // 최소 딜레이 시간을 설정
        while (count--); // 딜레이를 위해 루프를 돔
    }
}
 80012cc:	e007      	b.n	80012de <us_delay+0x34>
        uint32_t count = 2; // 최소 딜레이 시간을 설정
 80012ce:	2302      	movs	r3, #2
 80012d0:	60bb      	str	r3, [r7, #8]
        while (count--); // 딜레이를 위해 루프를 돔
 80012d2:	bf00      	nop
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	1e5a      	subs	r2, r3, #1
 80012d8:	60ba      	str	r2, [r7, #8]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d1fa      	bne.n	80012d4 <us_delay+0x2a>
}
 80012de:	bf00      	nop
 80012e0:	3714      	adds	r7, #20
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr

080012e8 <millis>:

uint32_t millis(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80012ec:	f002 f826 	bl	800333c <HAL_GetTick>
 80012f0:	4603      	mov	r3, r0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b090      	sub	sp, #64	@ 0x40
 80012fa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012fc:	f107 0318 	add.w	r3, r7, #24
 8001300:	2228      	movs	r2, #40	@ 0x28
 8001302:	2100      	movs	r1, #0
 8001304:	4618      	mov	r0, r3
 8001306:	f006 f835 	bl	8007374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001318:	2301      	movs	r3, #1
 800131a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800131c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001320:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001326:	2301      	movs	r3, #1
 8001328:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132a:	2302      	movs	r3, #2
 800132c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800132e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001332:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001334:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001338:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133a:	f107 0318 	add.w	r3, r7, #24
 800133e:	4618      	mov	r0, r3
 8001340:	f002 ff68 	bl	8004214 <HAL_RCC_OscConfig>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800134a:	f000 f819 	bl	8001380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134e:	230f      	movs	r3, #15
 8001350:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001352:	2302      	movs	r3, #2
 8001354:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800135a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800135e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001364:	1d3b      	adds	r3, r7, #4
 8001366:	2102      	movs	r1, #2
 8001368:	4618      	mov	r0, r3
 800136a:	f003 f9d5 	bl	8004718 <HAL_RCC_ClockConfig>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001374:	f000 f804 	bl	8001380 <Error_Handler>
  }
}
 8001378:	bf00      	nop
 800137a:	3740      	adds	r7, #64	@ 0x40
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001384:	b672      	cpsid	i
}
 8001386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <Error_Handler+0x8>

0800138c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001392:	4b19      	ldr	r3, [pc, #100]	@ (80013f8 <HAL_MspInit+0x6c>)
 8001394:	699b      	ldr	r3, [r3, #24]
 8001396:	4a18      	ldr	r2, [pc, #96]	@ (80013f8 <HAL_MspInit+0x6c>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6193      	str	r3, [r2, #24]
 800139e:	4b16      	ldr	r3, [pc, #88]	@ (80013f8 <HAL_MspInit+0x6c>)
 80013a0:	699b      	ldr	r3, [r3, #24]
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60bb      	str	r3, [r7, #8]
 80013a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <HAL_MspInit+0x6c>)
 80013ac:	69db      	ldr	r3, [r3, #28]
 80013ae:	4a12      	ldr	r2, [pc, #72]	@ (80013f8 <HAL_MspInit+0x6c>)
 80013b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013b4:	61d3      	str	r3, [r2, #28]
 80013b6:	4b10      	ldr	r3, [pc, #64]	@ (80013f8 <HAL_MspInit+0x6c>)
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2100      	movs	r1, #0
 80013c6:	2005      	movs	r0, #5
 80013c8:	f002 f8fd 	bl	80035c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80013cc:	2005      	movs	r0, #5
 80013ce:	f002 f916 	bl	80035fe <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013d2:	4b0a      	ldr	r3, [pc, #40]	@ (80013fc <HAL_MspInit+0x70>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	4a04      	ldr	r2, [pc, #16]	@ (80013fc <HAL_MspInit+0x70>)
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ee:	bf00      	nop
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40010000 	.word	0x40010000

08001400 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <NMI_Handler+0x4>

08001408 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800140c:	bf00      	nop
 800140e:	e7fd      	b.n	800140c <HardFault_Handler+0x4>

08001410 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001414:	bf00      	nop
 8001416:	e7fd      	b.n	8001414 <MemManage_Handler+0x4>

08001418 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <BusFault_Handler+0x4>

08001420 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <UsageFault_Handler+0x4>

08001428 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr

08001440 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	bc80      	pop	{r7}
 800144a:	4770      	bx	lr

0800144c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001450:	f001 ff62 	bl	8003318 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //swtimerISR();
  /* USER CODE END SysTick_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}

08001458 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr

08001464 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001468:	2002      	movs	r0, #2
 800146a:	f002 fe77 	bl	800415c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800146e:	bf00      	nop
 8001470:	bd80      	pop	{r7, pc}
	...

08001474 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001478:	4802      	ldr	r0, [pc, #8]	@ (8001484 <DMA1_Channel5_IRQHandler+0x10>)
 800147a:	f002 fab3 	bl	80039e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200009b4 	.word	0x200009b4

08001488 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800148c:	4802      	ldr	r0, [pc, #8]	@ (8001498 <DMA1_Channel6_IRQHandler+0x10>)
 800148e:	f002 faa9 	bl	80039e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001492:	bf00      	nop
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	200009f8 	.word	0x200009f8

0800149c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80014a0:	4802      	ldr	r0, [pc, #8]	@ (80014ac <USART1_IRQHandler+0x10>)
 80014a2:	f003 fbf1 	bl	8004c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000924 	.word	0x20000924

080014b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014b4:	4802      	ldr	r0, [pc, #8]	@ (80014c0 <USART2_IRQHandler+0x10>)
 80014b6:	f003 fbe7 	bl	8004c88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000096c 	.word	0x2000096c

080014c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return 1;
 80014c8:	2301      	movs	r3, #1
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bc80      	pop	{r7}
 80014d0:	4770      	bx	lr

080014d2 <_kill>:

int _kill(int pid, int sig)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
 80014da:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014dc:	f005 ffae 	bl	800743c <__errno>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2216      	movs	r2, #22
 80014e4:	601a      	str	r2, [r3, #0]
  return -1;
 80014e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <_exit>:

void _exit (int status)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014fa:	f04f 31ff 	mov.w	r1, #4294967295
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f7ff ffe7 	bl	80014d2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001504:	bf00      	nop
 8001506:	e7fd      	b.n	8001504 <_exit+0x12>

08001508 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001514:	2300      	movs	r3, #0
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	e00a      	b.n	8001530 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800151a:	f3af 8000 	nop.w
 800151e:	4601      	mov	r1, r0
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	1c5a      	adds	r2, r3, #1
 8001524:	60ba      	str	r2, [r7, #8]
 8001526:	b2ca      	uxtb	r2, r1
 8001528:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	3301      	adds	r3, #1
 800152e:	617b      	str	r3, [r7, #20]
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	429a      	cmp	r2, r3
 8001536:	dbf0      	blt.n	800151a <_read+0x12>
  }

  return len;
 8001538:	687b      	ldr	r3, [r7, #4]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3718      	adds	r7, #24
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	60f8      	str	r0, [r7, #12]
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	e009      	b.n	8001568 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	1c5a      	adds	r2, r3, #1
 8001558:	60ba      	str	r2, [r7, #8]
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3301      	adds	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	429a      	cmp	r2, r3
 800156e:	dbf1      	blt.n	8001554 <_write+0x12>
  }
  return len;
 8001570:	687b      	ldr	r3, [r7, #4]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <_close>:

int _close(int file)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001586:	4618      	mov	r0, r3
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	bc80      	pop	{r7}
 800158e:	4770      	bx	lr

08001590 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015a0:	605a      	str	r2, [r3, #4]
  return 0;
 80015a2:	2300      	movs	r3, #0
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr

080015ae <_isatty>:

int _isatty(int file)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b083      	sub	sp, #12
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015b6:	2301      	movs	r3, #1
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	bc80      	pop	{r7}
 80015c0:	4770      	bx	lr

080015c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	60f8      	str	r0, [r7, #12]
 80015ca:	60b9      	str	r1, [r7, #8]
 80015cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3714      	adds	r7, #20
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr
	...

080015dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e4:	4a14      	ldr	r2, [pc, #80]	@ (8001638 <_sbrk+0x5c>)
 80015e6:	4b15      	ldr	r3, [pc, #84]	@ (800163c <_sbrk+0x60>)
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015f0:	4b13      	ldr	r3, [pc, #76]	@ (8001640 <_sbrk+0x64>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d102      	bne.n	80015fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f8:	4b11      	ldr	r3, [pc, #68]	@ (8001640 <_sbrk+0x64>)
 80015fa:	4a12      	ldr	r2, [pc, #72]	@ (8001644 <_sbrk+0x68>)
 80015fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	429a      	cmp	r2, r3
 800160a:	d207      	bcs.n	800161c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800160c:	f005 ff16 	bl	800743c <__errno>
 8001610:	4603      	mov	r3, r0
 8001612:	220c      	movs	r2, #12
 8001614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001616:	f04f 33ff 	mov.w	r3, #4294967295
 800161a:	e009      	b.n	8001630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800161c:	4b08      	ldr	r3, [pc, #32]	@ (8001640 <_sbrk+0x64>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001622:	4b07      	ldr	r3, [pc, #28]	@ (8001640 <_sbrk+0x64>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	4a05      	ldr	r2, [pc, #20]	@ (8001640 <_sbrk+0x64>)
 800162c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800162e:	68fb      	ldr	r3, [r7, #12]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3718      	adds	r7, #24
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	20005000 	.word	0x20005000
 800163c:	00000400 	.word	0x00000400
 8001640:	20000204 	.word	0x20000204
 8001644:	20000b90 	.word	0x20000b90

08001648 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr

08001654 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001654:	f7ff fff8 	bl	8001648 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001658:	480b      	ldr	r0, [pc, #44]	@ (8001688 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800165a:	490c      	ldr	r1, [pc, #48]	@ (800168c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800165c:	4a0c      	ldr	r2, [pc, #48]	@ (8001690 <LoopFillZerobss+0x16>)
  movs r3, #0
 800165e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001662:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001664:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001668:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800166e:	4a09      	ldr	r2, [pc, #36]	@ (8001694 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001670:	4c09      	ldr	r4, [pc, #36]	@ (8001698 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001676:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800167e:	f005 fee3 	bl	8007448 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001682:	f004 fa07 	bl	8005a94 <main>
  bx lr
 8001686:	4770      	bx	lr
  ldr r0, =_sdata
 8001688:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800168c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001690:	0800a628 	.word	0x0800a628
  ldr r2, =_sbss
 8001694:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001698:	20000b8c 	.word	0x20000b8c

0800169c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800169c:	e7fe      	b.n	800169c <ADC1_2_IRQHandler>

0800169e <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800169e:	b480      	push	{r7}
 80016a0:	b087      	sub	sp, #28
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	60f8      	str	r0, [r7, #12]
 80016a6:	60b9      	str	r1, [r7, #8]
 80016a8:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80016aa:	2301      	movs	r3, #1
 80016ac:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	60da      	str	r2, [r3, #12]

  return ret;
 80016c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	371c      	adds	r7, #28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bc80      	pop	{r7}
 80016d0:	4770      	bx	lr

080016d2 <qbufferAvailable>:

  return ret;
}

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b085      	sub	sp, #20
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  uint32_t ret;

  ret = (p_node->in - p_node->out) % p_node->len;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6892      	ldr	r2, [r2, #8]
 80016e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80016ec:	fb01 f202 	mul.w	r2, r1, r2
 80016f0:	1a9b      	subs	r3, r3, r2
 80016f2:	60fb      	str	r3, [r7, #12]

  return ret;
 80016f4:	68fb      	ldr	r3, [r7, #12]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bc80      	pop	{r7}
 80016fe:	4770      	bx	lr

08001700 <beaconInit>:
 * @return 초기화 성공 여부를 반환하는 변수
 *         - true: 초기화 성공
 *         - false: 초기화 실패
 */
bool beaconInit()
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
  bool ret = true;  // 반환 값 변수, 초기값은 성공(true)
 8001706:	2301      	movs	r3, #1
 8001708:	71fb      	strb	r3, [r7, #7]

  // 비콘의 위치 및 기본 설정 초기화
  beacon_tbl.floor = 0;                 // 층 초기화
 800170a:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <beaconInit+0x74>)
 800170c:	2200      	movs	r2, #0
 800170e:	701a      	strb	r2, [r3, #0]
  beacon_tbl.x = 0;                     // x 좌표 초기화
 8001710:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <beaconInit+0x74>)
 8001712:	2200      	movs	r2, #0
 8001714:	705a      	strb	r2, [r3, #1]
  beacon_tbl.y = 0;                     // y 좌표 초기화
 8001716:	4b17      	ldr	r3, [pc, #92]	@ (8001774 <beaconInit+0x74>)
 8001718:	2200      	movs	r2, #0
 800171a:	709a      	strb	r2, [r3, #2]
  beacon_tbl.z = 0;                     // z 좌표 초기화
 800171c:	4b15      	ldr	r3, [pc, #84]	@ (8001774 <beaconInit+0x74>)
 800171e:	2200      	movs	r2, #0
 8001720:	70da      	strb	r2, [r3, #3]

  beacon_tbl.beacon_en = true;
 8001722:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <beaconInit+0x74>)
 8001724:	2201      	movs	r2, #1
 8001726:	711a      	strb	r2, [r3, #4]
  beacon_tbl.ch = _DEF_UART3;           // 통신 채널 초기화
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <beaconInit+0x74>)
 800172a:	2202      	movs	r2, #2
 800172c:	731a      	strb	r2, [r3, #12]
  beacon_tbl.baud = 9600;               // 통신 속도 초기화
 800172e:	4b11      	ldr	r3, [pc, #68]	@ (8001774 <beaconInit+0x74>)
 8001730:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001734:	611a      	str	r2, [r3, #16]
  beacon_tbl.beacon_started = false;    // 비콘 시작 여부 초기화
 8001736:	4b0f      	ldr	r3, [pc, #60]	@ (8001774 <beaconInit+0x74>)
 8001738:	2200      	movs	r2, #0
 800173a:	751a      	strb	r2, [r3, #20]
  beacon_tbl.ch_open = false;           // 통신 채널 개방 여부 초기화
 800173c:	4b0d      	ldr	r3, [pc, #52]	@ (8001774 <beaconInit+0x74>)
 800173e:	2200      	movs	r2, #0
 8001740:	755a      	strb	r2, [r3, #21]
  beacon_tbl.beacon_id = 0;             // 비콘 ID 초기화
 8001742:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <beaconInit+0x74>)
 8001744:	2200      	movs	r2, #0
 8001746:	609a      	str	r2, [r3, #8]

#ifdef _USE_HW_UART
  // UART 사용 시 해당 채널을 열고 결과를 ch_open에 저장
  beacon_tbl.ch_open = uartOpen(beacon_tbl.ch, beacon_tbl.baud);
 8001748:	4b0a      	ldr	r3, [pc, #40]	@ (8001774 <beaconInit+0x74>)
 800174a:	7b1b      	ldrb	r3, [r3, #12]
 800174c:	4a09      	ldr	r2, [pc, #36]	@ (8001774 <beaconInit+0x74>)
 800174e:	6912      	ldr	r2, [r2, #16]
 8001750:	4611      	mov	r1, r2
 8001752:	4618      	mov	r0, r3
 8001754:	f001 fa72 	bl	8002c3c <uartOpen>
 8001758:	4603      	mov	r3, r0
 800175a:	461a      	mov	r2, r3
 800175c:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <beaconInit+0x74>)
 800175e:	755a      	strb	r2, [r3, #21]
#endif

#ifdef _USE_HW_CLI
  // CLI 사용 시 beacon 명령어 추가
  cliAdd("beacon", cliBeacon);
 8001760:	4905      	ldr	r1, [pc, #20]	@ (8001778 <beaconInit+0x78>)
 8001762:	4806      	ldr	r0, [pc, #24]	@ (800177c <beaconInit+0x7c>)
 8001764:	f000 fc1e 	bl	8001fa4 <cliAdd>
#endif

  return ret;  // 초기화 성공 여부 반환
 8001768:	79fb      	ldrb	r3, [r7, #7]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000208 	.word	0x20000208
 8001778:	08001851 	.word	0x08001851
 800177c:	08009e4c 	.word	0x08009e4c

08001780 <handleBeaconStart>:
 *
 * 비콘이 시작되었을 때, 해당 비콘의 정보를 UART를 통해 출력합니다.
 *
 */
void handleBeaconStart(void)
{
 8001780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001782:	b085      	sub	sp, #20
 8001784:	af04      	add	r7, sp, #16
  IsBeaconEnable();
 8001786:	f000 f849 	bl	800181c <IsBeaconEnable>

  if(beacon_tbl.beacon_started)  // 비콘이 시작되었는지 확인
 800178a:	4b11      	ldr	r3, [pc, #68]	@ (80017d0 <handleBeaconStart+0x50>)
 800178c:	7d1b      	ldrb	r3, [r3, #20]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d019      	beq.n	80017c6 <handleBeaconStart+0x46>
  {
    // UART를 통해 비콘 정보를 출력합니다.
    uartPrintf(beacon_tbl.ch, "%d %d %d %d %d %d\n",
 8001792:	4b0f      	ldr	r3, [pc, #60]	@ (80017d0 <handleBeaconStart+0x50>)
 8001794:	7b18      	ldrb	r0, [r3, #12]
               beacon_tbl.beacon_en,
 8001796:	4b0e      	ldr	r3, [pc, #56]	@ (80017d0 <handleBeaconStart+0x50>)
 8001798:	791b      	ldrb	r3, [r3, #4]
    uartPrintf(beacon_tbl.ch, "%d %d %d %d %d %d\n",
 800179a:	461e      	mov	r6, r3
 800179c:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <handleBeaconStart+0x50>)
 800179e:	689b      	ldr	r3, [r3, #8]
               beacon_tbl.beacon_id,
               beacon_tbl.floor,
 80017a0:	4a0b      	ldr	r2, [pc, #44]	@ (80017d0 <handleBeaconStart+0x50>)
 80017a2:	7812      	ldrb	r2, [r2, #0]
    uartPrintf(beacon_tbl.ch, "%d %d %d %d %d %d\n",
 80017a4:	4611      	mov	r1, r2
               beacon_tbl.x,
 80017a6:	4a0a      	ldr	r2, [pc, #40]	@ (80017d0 <handleBeaconStart+0x50>)
 80017a8:	7852      	ldrb	r2, [r2, #1]
    uartPrintf(beacon_tbl.ch, "%d %d %d %d %d %d\n",
 80017aa:	4614      	mov	r4, r2
               beacon_tbl.y,
 80017ac:	4a08      	ldr	r2, [pc, #32]	@ (80017d0 <handleBeaconStart+0x50>)
 80017ae:	7892      	ldrb	r2, [r2, #2]
    uartPrintf(beacon_tbl.ch, "%d %d %d %d %d %d\n",
 80017b0:	4615      	mov	r5, r2
               beacon_tbl.z
 80017b2:	4a07      	ldr	r2, [pc, #28]	@ (80017d0 <handleBeaconStart+0x50>)
 80017b4:	78d2      	ldrb	r2, [r2, #3]
    uartPrintf(beacon_tbl.ch, "%d %d %d %d %d %d\n",
 80017b6:	9203      	str	r2, [sp, #12]
 80017b8:	9502      	str	r5, [sp, #8]
 80017ba:	9401      	str	r4, [sp, #4]
 80017bc:	9100      	str	r1, [sp, #0]
 80017be:	4632      	mov	r2, r6
 80017c0:	4904      	ldr	r1, [pc, #16]	@ (80017d4 <handleBeaconStart+0x54>)
 80017c2:	f001 fbd7 	bl	8002f74 <uartPrintf>
               );
  }
}
 80017c6:	bf00      	nop
 80017c8:	3704      	adds	r7, #4
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000208 	.word	0x20000208
 80017d4:	08009e54 	.word	0x08009e54

080017d8 <changeBeaconStarted>:
 * @param value 변경할 시작 여부 값을 나타내는 변수
 *              - true: 시작
 *              - false: 중지
 */
void changeBeaconStarted(bool value)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
  if(value == true)
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <changeBeaconStarted+0x18>
    beacon_tbl.beacon_started = true;   // 주어진 값이 true일 경우 시작 상태로 설정
 80017e8:	4b05      	ldr	r3, [pc, #20]	@ (8001800 <changeBeaconStarted+0x28>)
 80017ea:	2201      	movs	r2, #1
 80017ec:	751a      	strb	r2, [r3, #20]
  else
    beacon_tbl.beacon_started = false;  // 그렇지 않으면 중지 상태로 설정
}
 80017ee:	e002      	b.n	80017f6 <changeBeaconStarted+0x1e>
    beacon_tbl.beacon_started = false;  // 그렇지 않으면 중지 상태로 설정
 80017f0:	4b03      	ldr	r3, [pc, #12]	@ (8001800 <changeBeaconStarted+0x28>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	751a      	strb	r2, [r3, #20]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr
 8001800:	20000208 	.word	0x20000208

08001804 <getTempAndHumid>:

static void getTempAndHumid(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  DHT22_GetTemp_Humidity(&data_tbl.temp, &data_tbl.humid);
 8001808:	4902      	ldr	r1, [pc, #8]	@ (8001814 <getTempAndHumid+0x10>)
 800180a:	4803      	ldr	r0, [pc, #12]	@ (8001818 <getTempAndHumid+0x14>)
 800180c:	f000 fe2c 	bl	8002468 <DHT22_GetTemp_Humidity>
}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000224 	.word	0x20000224
 8001818:	20000220 	.word	0x20000220

0800181c <IsBeaconEnable>:

/*
 * 비콘이 활성화되어 있는지 확인합니다.
 */
void IsBeaconEnable(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  getTempAndHumid(); // 온도와 습도 데이터를 가져옵니다.
 8001820:	f7ff fff0 	bl	8001804 <getTempAndHumid>

  // 온도가 50도 이상인지 확인합니다.
  if(data_tbl.temp >= 50.0)
 8001824:	4b07      	ldr	r3, [pc, #28]	@ (8001844 <IsBeaconEnable+0x28>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4907      	ldr	r1, [pc, #28]	@ (8001848 <IsBeaconEnable+0x2c>)
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fc66 	bl	80010fc <__aeabi_fcmpge>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d100      	bne.n	8001838 <IsBeaconEnable+0x1c>
  {
    beacon_tbl.beacon_en = false; // 비콘을 비활성화합니다.
  }
}
 8001836:	e002      	b.n	800183e <IsBeaconEnable+0x22>
    beacon_tbl.beacon_en = false; // 비콘을 비활성화합니다.
 8001838:	4b04      	ldr	r3, [pc, #16]	@ (800184c <IsBeaconEnable+0x30>)
 800183a:	2200      	movs	r2, #0
 800183c:	711a      	strb	r2, [r3, #4]
}
 800183e:	bf00      	nop
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	20000220 	.word	0x20000220
 8001848:	42480000 	.word	0x42480000
 800184c:	20000208 	.word	0x20000208

08001850 <cliBeacon>:
 * @brief CLI에서 입력된 명령어를 처리하는 함수
 *
 * @param args CLI 명령어와 인수를 포함하는 구조체
 */
void cliBeacon(cli_args_t *args)
{
 8001850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001854:	b095      	sub	sp, #84	@ 0x54
 8001856:	af08      	add	r7, sp, #32
 8001858:	60f8      	str	r0, [r7, #12]
  bool ret = false;  // 명령어 처리 결과 변수, 기본적으로 실패로 설정
 800185a:	2300      	movs	r3, #0
 800185c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  // "info" 명령어를 받았을 때 비콘 정보 출력
  if(args->argc == 1 && args->isStr(0, "info") == true)
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d14c      	bne.n	8001902 <cliBeacon+0xb2>
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	4966      	ldr	r1, [pc, #408]	@ (8001a08 <cliBeacon+0x1b8>)
 800186e:	2000      	movs	r0, #0
 8001870:	4798      	blx	r3
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d044      	beq.n	8001902 <cliBeacon+0xb2>
  {
    bool beacon_en = beacon_tbl.beacon_en;  // 비콘 Enable 정보
 8001878:	4b64      	ldr	r3, [pc, #400]	@ (8001a0c <cliBeacon+0x1bc>)
 800187a:	791b      	ldrb	r3, [r3, #4]
 800187c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint32_t beacon_id = beacon_tbl.beacon_id;  // 비콘 ID 정보
 8001880:	4b62      	ldr	r3, [pc, #392]	@ (8001a0c <cliBeacon+0x1bc>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t beacon_floor = beacon_tbl.floor;    // 비콘 층 정보
 8001886:	4b61      	ldr	r3, [pc, #388]	@ (8001a0c <cliBeacon+0x1bc>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    uint8_t beacon_x = beacon_tbl.x;            // 비콘 x 좌표 정보
 800188e:	4b5f      	ldr	r3, [pc, #380]	@ (8001a0c <cliBeacon+0x1bc>)
 8001890:	785b      	ldrb	r3, [r3, #1]
 8001892:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    uint8_t beacon_y = beacon_tbl.y;            // 비콘 y 좌표 정보
 8001896:	4b5d      	ldr	r3, [pc, #372]	@ (8001a0c <cliBeacon+0x1bc>)
 8001898:	789b      	ldrb	r3, [r3, #2]
 800189a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    uint8_t beacon_z = beacon_tbl.z;            // 비콘 z 좌표 정보
 800189e:	4b5b      	ldr	r3, [pc, #364]	@ (8001a0c <cliBeacon+0x1bc>)
 80018a0:	78db      	ldrb	r3, [r3, #3]
 80018a2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    float temp = data_tbl.temp;
 80018a6:	4b5a      	ldr	r3, [pc, #360]	@ (8001a10 <cliBeacon+0x1c0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	623b      	str	r3, [r7, #32]
    float humid = data_tbl.humid;
 80018ac:	4b58      	ldr	r3, [pc, #352]	@ (8001a10 <cliBeacon+0x1c0>)
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	61fb      	str	r3, [r7, #28]

    // 비콘 정보 출력
    cliPrintf("En: %d, ID: %d, Floor: %d, [x, y, z]: [%d, %d, %d], Temp: %.2f, Humid: %.2f\n",
 80018b2:	f897 802e 	ldrb.w	r8, [r7, #46]	@ 0x2e
 80018b6:	f897 9027 	ldrb.w	r9, [r7, #39]	@ 0x27
 80018ba:	f897 6026 	ldrb.w	r6, [r7, #38]	@ 0x26
 80018be:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	6a38      	ldr	r0, [r7, #32]
 80018cc:	f7fe fdb6 	bl	800043c <__aeabi_f2d>
 80018d0:	4604      	mov	r4, r0
 80018d2:	460d      	mov	r5, r1
 80018d4:	69f8      	ldr	r0, [r7, #28]
 80018d6:	f7fe fdb1 	bl	800043c <__aeabi_f2d>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80018e2:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	9202      	str	r2, [sp, #8]
 80018ea:	68bb      	ldr	r3, [r7, #8]
 80018ec:	9301      	str	r3, [sp, #4]
 80018ee:	9600      	str	r6, [sp, #0]
 80018f0:	464b      	mov	r3, r9
 80018f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018f4:	4641      	mov	r1, r8
 80018f6:	4847      	ldr	r0, [pc, #284]	@ (8001a14 <cliBeacon+0x1c4>)
 80018f8:	f000 fa4a 	bl	8001d90 <cliPrintf>
              beacon_z,
              temp,
              humid
              );

    ret = true;  // 처리 성공
 80018fc:	2301      	movs	r3, #1
 80018fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  // "start" 명령어를 받았을 때 비콘 시작
  if(args->argc == 1 && args->isStr(0, "start") == true)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	881b      	ldrh	r3, [r3, #0]
 8001906:	2b01      	cmp	r3, #1
 8001908:	d118      	bne.n	800193c <cliBeacon+0xec>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	695b      	ldr	r3, [r3, #20]
 800190e:	4942      	ldr	r1, [pc, #264]	@ (8001a18 <cliBeacon+0x1c8>)
 8001910:	2000      	movs	r0, #0
 8001912:	4798      	blx	r3
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d010      	beq.n	800193c <cliBeacon+0xec>
  {
    if(beacon_tbl.ch_open == true)  // 통신 채널이 열려 있는지 확인
 800191a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a0c <cliBeacon+0x1bc>)
 800191c:	7d5b      	ldrb	r3, [r3, #21]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d006      	beq.n	8001930 <cliBeacon+0xe0>
    {
      cliPrintf("Open Success\n");  // 통신 채널이 열렸으면 성공 메시지 출력
 8001922:	483e      	ldr	r0, [pc, #248]	@ (8001a1c <cliBeacon+0x1cc>)
 8001924:	f000 fa34 	bl	8001d90 <cliPrintf>

      changeBeaconStarted(true);    // 비콘 시작 상태 변경
 8001928:	2001      	movs	r0, #1
 800192a:	f7ff ff55 	bl	80017d8 <changeBeaconStarted>
 800192e:	e002      	b.n	8001936 <cliBeacon+0xe6>
    }
    else
    {
      cliPrintf("Open Fail\n");     // 통신 채널이 닫혔으면 실패 메시지 출력
 8001930:	483b      	ldr	r0, [pc, #236]	@ (8001a20 <cliBeacon+0x1d0>)
 8001932:	f000 fa2d 	bl	8001d90 <cliPrintf>
    }

    ret = true;  // 처리 성공
 8001936:	2301      	movs	r3, #1
 8001938:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  // "end" 명령어를 받았을 때 비콘 종료
  if(args->argc == 1 && args->isStr(0, "end") == true)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d10d      	bne.n	8001960 <cliBeacon+0x110>
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	4936      	ldr	r1, [pc, #216]	@ (8001a24 <cliBeacon+0x1d4>)
 800194a:	2000      	movs	r0, #0
 800194c:	4798      	blx	r3
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <cliBeacon+0x110>
  {
    changeBeaconStarted(false);  // 비콘 종료 상태 변경
 8001954:	2000      	movs	r0, #0
 8001956:	f7ff ff3f 	bl	80017d8 <changeBeaconStarted>

    ret = true;  // 처리 성공
 800195a:	2301      	movs	r3, #1
 800195c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  // "set" 명령어를 받았을 때 비콘의 ID, 층 및 좌표 설정
  if(args->argc == 6 && args->isStr(0, "set") == true)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	881b      	ldrh	r3, [r3, #0]
 8001964:	2b06      	cmp	r3, #6
 8001966:	d137      	bne.n	80019d8 <cliBeacon+0x188>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	695b      	ldr	r3, [r3, #20]
 800196c:	492e      	ldr	r1, [pc, #184]	@ (8001a28 <cliBeacon+0x1d8>)
 800196e:	2000      	movs	r0, #0
 8001970:	4798      	blx	r3
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d02f      	beq.n	80019d8 <cliBeacon+0x188>
  {
    uint32_t beacon_id = (uint32_t)args->getData(1);  // 매개변수로 받은 비콘 ID 정보
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2001      	movs	r0, #1
 800197e:	4798      	blx	r3
 8001980:	4603      	mov	r3, r0
 8001982:	61bb      	str	r3, [r7, #24]
    uint8_t beacon_floor = (uint8_t)args->getData(2); // 매개변수로 받은 비콘 층 정보
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	2002      	movs	r0, #2
 800198a:	4798      	blx	r3
 800198c:	4603      	mov	r3, r0
 800198e:	75fb      	strb	r3, [r7, #23]
    uint8_t beacon_x = (uint8_t)args->getData(3);     // 매개변수로 받은 비콘 x 좌표 정보
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	2003      	movs	r0, #3
 8001996:	4798      	blx	r3
 8001998:	4603      	mov	r3, r0
 800199a:	75bb      	strb	r3, [r7, #22]
    uint8_t beacon_y = (uint8_t)args->getData(4);     // 매개변수로 받은 비콘 y 좌표 정보
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	2004      	movs	r0, #4
 80019a2:	4798      	blx	r3
 80019a4:	4603      	mov	r3, r0
 80019a6:	757b      	strb	r3, [r7, #21]
    uint8_t beacon_z = (uint8_t)args->getData(5);     // 매개변수로 받은 비콘 z 좌표 정보
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2005      	movs	r0, #5
 80019ae:	4798      	blx	r3
 80019b0:	4603      	mov	r3, r0
 80019b2:	753b      	strb	r3, [r7, #20]

    // 비콘의 ID, 층 및 좌표 설정
    beacon_tbl.beacon_id = beacon_id;
 80019b4:	4a15      	ldr	r2, [pc, #84]	@ (8001a0c <cliBeacon+0x1bc>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	6093      	str	r3, [r2, #8]
    beacon_tbl.floor = beacon_floor;
 80019ba:	4a14      	ldr	r2, [pc, #80]	@ (8001a0c <cliBeacon+0x1bc>)
 80019bc:	7dfb      	ldrb	r3, [r7, #23]
 80019be:	7013      	strb	r3, [r2, #0]
    beacon_tbl.x = beacon_x;
 80019c0:	4a12      	ldr	r2, [pc, #72]	@ (8001a0c <cliBeacon+0x1bc>)
 80019c2:	7dbb      	ldrb	r3, [r7, #22]
 80019c4:	7053      	strb	r3, [r2, #1]
    beacon_tbl.y = beacon_y;
 80019c6:	4a11      	ldr	r2, [pc, #68]	@ (8001a0c <cliBeacon+0x1bc>)
 80019c8:	7d7b      	ldrb	r3, [r7, #21]
 80019ca:	7093      	strb	r3, [r2, #2]
    beacon_tbl.z = beacon_z;
 80019cc:	4a0f      	ldr	r2, [pc, #60]	@ (8001a0c <cliBeacon+0x1bc>)
 80019ce:	7d3b      	ldrb	r3, [r7, #20]
 80019d0:	70d3      	strb	r3, [r2, #3]

    ret = true;  // 처리 성공
 80019d2:	2301      	movs	r3, #1
 80019d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  // 처리되지 않은 명령어가 있을 경우 사용법 출력
  if(ret != true)
 80019d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80019dc:	f083 0301 	eor.w	r3, r3, #1
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00b      	beq.n	80019fe <cliBeacon+0x1ae>
  {
    cliPrintf("beacon info\n");             // 비콘 정보 출력 명령어 사용법
 80019e6:	4811      	ldr	r0, [pc, #68]	@ (8001a2c <cliBeacon+0x1dc>)
 80019e8:	f000 f9d2 	bl	8001d90 <cliPrintf>
    cliPrintf("beacon set id, floor, x, y, z\n");  // 비콘 설정 명령어 사용법
 80019ec:	4810      	ldr	r0, [pc, #64]	@ (8001a30 <cliBeacon+0x1e0>)
 80019ee:	f000 f9cf 	bl	8001d90 <cliPrintf>
    cliPrintf("beacon start\n");            // 비콘 시작 명령어 사용법
 80019f2:	4810      	ldr	r0, [pc, #64]	@ (8001a34 <cliBeacon+0x1e4>)
 80019f4:	f000 f9cc 	bl	8001d90 <cliPrintf>
    cliPrintf("beacon end\n");              // 비콘 종료 명령어 사용법
 80019f8:	480f      	ldr	r0, [pc, #60]	@ (8001a38 <cliBeacon+0x1e8>)
 80019fa:	f000 f9c9 	bl	8001d90 <cliPrintf>
  }
}
 80019fe:	bf00      	nop
 8001a00:	3734      	adds	r7, #52	@ 0x34
 8001a02:	46bd      	mov	sp, r7
 8001a04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001a08:	08009e68 	.word	0x08009e68
 8001a0c:	20000208 	.word	0x20000208
 8001a10:	20000220 	.word	0x20000220
 8001a14:	08009e70 	.word	0x08009e70
 8001a18:	08009ec0 	.word	0x08009ec0
 8001a1c:	08009ec8 	.word	0x08009ec8
 8001a20:	08009ed8 	.word	0x08009ed8
 8001a24:	08009ee4 	.word	0x08009ee4
 8001a28:	08009ee8 	.word	0x08009ee8
 8001a2c:	08009eec 	.word	0x08009eec
 8001a30:	08009efc 	.word	0x08009efc
 8001a34:	08009f1c 	.word	0x08009f1c
 8001a38:	08009f2c 	.word	0x08009f2c

08001a3c <buttonInit>:
static void cliButton(cli_args_t *args);
#endif


bool buttonInit(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b088      	sub	sp, #32
 8001a40:	af00      	add	r7, sp, #0
  bool ret = true;
 8001a42:	2301      	movs	r3, #1
 8001a44:	76fb      	strb	r3, [r7, #27]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a46:	f107 0308 	add.w	r3, r7, #8
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a54:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac8 <buttonInit+0x8c>)
 8001a56:	699b      	ldr	r3, [r3, #24]
 8001a58:	4a1b      	ldr	r2, [pc, #108]	@ (8001ac8 <buttonInit+0x8c>)
 8001a5a:	f043 0304 	orr.w	r3, r3, #4
 8001a5e:	6193      	str	r3, [r2, #24]
 8001a60:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <buttonInit+0x8c>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	607b      	str	r3, [r7, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]


  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a70:	2301      	movs	r3, #1
 8001a72:	613b      	str	r3, [r7, #16]

  for (int i=0; i<BUTTON_MAX_CH; i++)
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
 8001a78:	e01a      	b.n	8001ab0 <buttonInit+0x74>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 8001a7a:	4914      	ldr	r1, [pc, #80]	@ (8001acc <buttonInit+0x90>)
 8001a7c:	69fa      	ldr	r2, [r7, #28]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	3304      	adds	r3, #4
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 8001a8e:	490f      	ldr	r1, [pc, #60]	@ (8001acc <buttonInit+0x90>)
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	440b      	add	r3, r1
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f107 0208 	add.w	r2, r7, #8
 8001aa2:	4611      	mov	r1, r2
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f002 f8d1 	bl	8003c4c <HAL_GPIO_Init>
  for (int i=0; i<BUTTON_MAX_CH; i++)
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	3301      	adds	r3, #1
 8001aae:	61fb      	str	r3, [r7, #28]
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	dde1      	ble.n	8001a7a <buttonInit+0x3e>
  }

#ifdef _USE_HW_CLI
  cliAdd("button", cliButton);
 8001ab6:	4906      	ldr	r1, [pc, #24]	@ (8001ad0 <buttonInit+0x94>)
 8001ab8:	4806      	ldr	r0, [pc, #24]	@ (8001ad4 <buttonInit+0x98>)
 8001aba:	f000 fa73 	bl	8001fa4 <cliAdd>
#endif

  return ret;
 8001abe:	7efb      	ldrb	r3, [r7, #27]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3720      	adds	r7, #32
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	20000004 	.word	0x20000004
 8001ad0:	08001bc9 	.word	0x08001bc9
 8001ad4:	08009f38 	.word	0x08009f38

08001ad8 <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	73fb      	strb	r3, [r7, #15]

  if (ch >= BUTTON_MAX_CH)
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <buttonGetPressed+0x18>
  {
    return false;
 8001aec:	2300      	movs	r3, #0
 8001aee:	e024      	b.n	8001b3a <buttonGetPressed+0x62>
  }

  if (HAL_GPIO_ReadPin(button_tbl[ch].port, button_tbl[ch].pin) == button_tbl[ch].on_state)
 8001af0:	79fa      	ldrb	r2, [r7, #7]
 8001af2:	4914      	ldr	r1, [pc, #80]	@ (8001b44 <buttonGetPressed+0x6c>)
 8001af4:	4613      	mov	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4413      	add	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	6818      	ldr	r0, [r3, #0]
 8001b00:	79fa      	ldrb	r2, [r7, #7]
 8001b02:	4910      	ldr	r1, [pc, #64]	@ (8001b44 <buttonGetPressed+0x6c>)
 8001b04:	4613      	mov	r3, r2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	3304      	adds	r3, #4
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	4619      	mov	r1, r3
 8001b16:	f002 fad9 	bl	80040cc <HAL_GPIO_ReadPin>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	79fa      	ldrb	r2, [r7, #7]
 8001b20:	4908      	ldr	r1, [pc, #32]	@ (8001b44 <buttonGetPressed+0x6c>)
 8001b22:	4613      	mov	r3, r2
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	4413      	add	r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	440b      	add	r3, r1
 8001b2c:	3308      	adds	r3, #8
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	4298      	cmp	r0, r3
 8001b32:	d101      	bne.n	8001b38 <buttonGetPressed+0x60>
  {
    ret = true;
 8001b34:	2301      	movs	r3, #1
 8001b36:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000004 	.word	0x20000004

08001b48 <buttonToggle>:

bool buttonToggle(uint8_t ch)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	71fb      	strb	r3, [r7, #7]
  // 해당 채널에 연결된 버튼의 상태를 읽어옵니다.
  bool pin_state = buttonGetPressed(ch);
 8001b52:	79fb      	ldrb	r3, [r7, #7]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ffbf 	bl	8001ad8 <buttonGetPressed>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	73fb      	strb	r3, [r7, #15]

  // 버튼이 눌려있는 경우
  if(pin_state == 0)
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	f083 0301 	eor.w	r3, r3, #1
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d00c      	beq.n	8001b84 <buttonToggle+0x3c>
  {
    // 이전에 버튼이 눌려진 적이 없는 경우
    if(toggleFlag[ch] == false)
 8001b6a:	79fb      	ldrb	r3, [r7, #7]
 8001b6c:	4a14      	ldr	r2, [pc, #80]	@ (8001bc0 <buttonToggle+0x78>)
 8001b6e:	5cd3      	ldrb	r3, [r2, r3]
 8001b70:	f083 0301 	eor.w	r3, r3, #1
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d01b      	beq.n	8001bb2 <buttonToggle+0x6a>
    {
      // 토글 플래그를 true로 설정합니다.
      toggleFlag[ch] = true;
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	4a10      	ldr	r2, [pc, #64]	@ (8001bc0 <buttonToggle+0x78>)
 8001b7e:	2101      	movs	r1, #1
 8001b80:	54d1      	strb	r1, [r2, r3]
 8001b82:	e016      	b.n	8001bb2 <buttonToggle+0x6a>
  }
  // 버튼이 떨어져 있는 경우
  else
  {
    // 이전에 버튼이 눌려진 적이 있는 경우
    if(toggleFlag[ch] == true)
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc0 <buttonToggle+0x78>)
 8001b88:	5cd3      	ldrb	r3, [r2, r3]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d011      	beq.n	8001bb2 <buttonToggle+0x6a>
    {
      // 이전에 토글된 상태가 true인 경우
      if(toggleStatus[ch] == true)
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc4 <buttonToggle+0x7c>)
 8001b92:	5cd3      	ldrb	r3, [r2, r3]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d004      	beq.n	8001ba2 <buttonToggle+0x5a>
      {
        // 토글 상태를 false로 변경합니다.
        toggleStatus[ch] = false;
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc4 <buttonToggle+0x7c>)
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	54d1      	strb	r1, [r2, r3]
 8001ba0:	e003      	b.n	8001baa <buttonToggle+0x62>
      }
      // 이전에 토글된 상태가 false인 경우
      else
      {
        // 토글 상태를 true로 변경합니다.
        toggleStatus[ch] = true;
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	4a07      	ldr	r2, [pc, #28]	@ (8001bc4 <buttonToggle+0x7c>)
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	54d1      	strb	r1, [r2, r3]
      }
      // 토글 플래그를 다시 true로 설정합니다.
      toggleFlag[ch] = true;
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	4a04      	ldr	r2, [pc, #16]	@ (8001bc0 <buttonToggle+0x78>)
 8001bae:	2101      	movs	r1, #1
 8001bb0:	54d1      	strb	r1, [r2, r3]
    }
  }

  // 해당 채널의 현재 토글 상태를 반환합니다.
  return toggleStatus[ch];
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	4a03      	ldr	r2, [pc, #12]	@ (8001bc4 <buttonToggle+0x7c>)
 8001bb6:	5cd3      	ldrb	r3, [r2, r3]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	20000228 	.word	0x20000228
 8001bc4:	2000022c 	.word	0x2000022c

08001bc8 <cliButton>:


#ifdef _USE_HW_CLI

void cliButton(cli_args_t *args)
{
 8001bc8:	b590      	push	{r4, r7, lr}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "show"))
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d130      	bne.n	8001c3e <cliButton+0x76>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	491d      	ldr	r1, [pc, #116]	@ (8001c58 <cliButton+0x90>)
 8001be2:	2000      	movs	r0, #0
 8001be4:	4798      	blx	r3
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d028      	beq.n	8001c3e <cliButton+0x76>
  {
    while(cliKeepLoop())
 8001bec:	e020      	b.n	8001c30 <cliButton+0x68>
    {
      for (int i=0; i<BUTTON_MAX_CH; i++)
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	e014      	b.n	8001c1e <cliButton+0x56>
      {
        cliPrintf("%d %d", buttonGetPressed(i), buttonToggle(i));
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff ff6d 	bl	8001ad8 <buttonGetPressed>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	461c      	mov	r4, r3
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ff9e 	bl	8001b48 <buttonToggle>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	461a      	mov	r2, r3
 8001c10:	4621      	mov	r1, r4
 8001c12:	4812      	ldr	r0, [pc, #72]	@ (8001c5c <cliButton+0x94>)
 8001c14:	f000 f8bc 	bl	8001d90 <cliPrintf>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	dde7      	ble.n	8001bf4 <cliButton+0x2c>
      }
      cliPrintf("\n");
 8001c24:	480e      	ldr	r0, [pc, #56]	@ (8001c60 <cliButton+0x98>)
 8001c26:	f000 f8b3 	bl	8001d90 <cliPrintf>

      delay(100);
 8001c2a:	2064      	movs	r0, #100	@ 0x64
 8001c2c:	f7ff fb32 	bl	8001294 <delay>
    while(cliKeepLoop())
 8001c30:	f000 f9a2 	bl	8001f78 <cliKeepLoop>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1d9      	bne.n	8001bee <cliButton+0x26>
    }

    ret = true;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	73fb      	strb	r3, [r7, #15]
  }


  if (ret != true)
 8001c3e:	7bfb      	ldrb	r3, [r7, #15]
 8001c40:	f083 0301 	eor.w	r3, r3, #1
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d002      	beq.n	8001c50 <cliButton+0x88>
  {
    cliPrintf("button show\n");
 8001c4a:	4806      	ldr	r0, [pc, #24]	@ (8001c64 <cliButton+0x9c>)
 8001c4c:	f000 f8a0 	bl	8001d90 <cliPrintf>
  }
}
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd90      	pop	{r4, r7, pc}
 8001c58:	08009f40 	.word	0x08009f40
 8001c5c:	08009f48 	.word	0x08009f48
 8001c60:	08009f50 	.word	0x08009f50
 8001c64:	08009f54 	.word	0x08009f54

08001c68 <cdcInit>:

static bool is_init = false;


bool cdcInit(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
  bool ret = true;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	71fb      	strb	r3, [r7, #7]


  is_init = true;
 8001c72:	4b04      	ldr	r3, [pc, #16]	@ (8001c84 <cdcInit+0x1c>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	701a      	strb	r2, [r3, #0]

  return ret;
 8001c78:	79fb      	ldrb	r3, [r7, #7]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bc80      	pop	{r7}
 8001c82:	4770      	bx	lr
 8001c84:	2000022d 	.word	0x2000022d

08001c88 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <cliInit+0x74>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8001c92:	4b1a      	ldr	r3, [pc, #104]	@ (8001cfc <cliInit+0x74>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8001c98:	4b18      	ldr	r3, [pc, #96]	@ (8001cfc <cliInit+0x74>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8001c9e:	4b17      	ldr	r3, [pc, #92]	@ (8001cfc <cliInit+0x74>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  cli_node.hist_line_last  = 0;
 8001ca6:	4b15      	ldr	r3, [pc, #84]	@ (8001cfc <cliInit+0x74>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  cli_node.hist_line_count = 0;
 8001cae:	4b13      	ldr	r3, [pc, #76]	@ (8001cfc <cliInit+0x74>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  cli_node.hist_line_new   = false;
 8001cb6:	4b11      	ldr	r3, [pc, #68]	@ (8001cfc <cliInit+0x74>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 8001cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8001cfc <cliInit+0x74>)
 8001cc0:	4a0f      	ldr	r2, [pc, #60]	@ (8001d00 <cliInit+0x78>)
 8001cc2:	f8c3 24b8 	str.w	r2, [r3, #1208]	@ 0x4b8
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cfc <cliInit+0x74>)
 8001cc8:	4a0e      	ldr	r2, [pc, #56]	@ (8001d04 <cliInit+0x7c>)
 8001cca:	f8c3 24bc 	str.w	r2, [r3, #1212]	@ 0x4bc
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8001cce:	4b0b      	ldr	r3, [pc, #44]	@ (8001cfc <cliInit+0x74>)
 8001cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d08 <cliInit+0x80>)
 8001cd2:	f8c3 24c0 	str.w	r2, [r3, #1216]	@ 0x4c0
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8001cd6:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <cliInit+0x74>)
 8001cd8:	4a0c      	ldr	r2, [pc, #48]	@ (8001d0c <cliInit+0x84>)
 8001cda:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4

  cliLineClean(&cli_node);
 8001cde:	4807      	ldr	r0, [pc, #28]	@ (8001cfc <cliInit+0x74>)
 8001ce0:	f000 f83c 	bl	8001d5c <cliLineClean>


  cliAdd("help", cliShowList);
 8001ce4:	490a      	ldr	r1, [pc, #40]	@ (8001d10 <cliInit+0x88>)
 8001ce6:	480b      	ldr	r0, [pc, #44]	@ (8001d14 <cliInit+0x8c>)
 8001ce8:	f000 f95c 	bl	8001fa4 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8001cec:	490a      	ldr	r1, [pc, #40]	@ (8001d18 <cliInit+0x90>)
 8001cee:	480b      	ldr	r0, [pc, #44]	@ (8001d1c <cliInit+0x94>)
 8001cf0:	f000 f958 	bl	8001fa4 <cliAdd>

  return true;
 8001cf4:	2301      	movs	r3, #1
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000230 	.word	0x20000230
 8001d00:	08001e41 	.word	0x08001e41
 8001d04:	08001e91 	.word	0x08001e91
 8001d08:	08001ee1 	.word	0x08001ee1
 8001d0c:	08001f25 	.word	0x08001f25
 8001d10:	08002035 	.word	0x08002035
 8001d14:	08009f64 	.word	0x08009f64
 8001d18:	080020a5 	.word	0x080020a5
 8001d1c:	08009f6c 	.word	0x08009f6c

08001d20 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	6039      	str	r1, [r7, #0]
 8001d2a:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8001d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001d58 <cliOpen+0x38>)
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 8001d32:	4a09      	ldr	r2, [pc, #36]	@ (8001d58 <cliOpen+0x38>)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	6839      	ldr	r1, [r7, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f000 ff7d 	bl	8002c3c <uartOpen>
 8001d42:	4603      	mov	r3, r0
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b04      	ldr	r3, [pc, #16]	@ (8001d58 <cliOpen+0x38>)
 8001d48:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 8001d4a:	4b03      	ldr	r3, [pc, #12]	@ (8001d58 <cliOpen+0x38>)
 8001d4c:	7a1b      	ldrb	r3, [r3, #8]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20000230 	.word	0x20000230

08001d5c <cliLineClean>:

  return ret;
}

void cliLineClean(cli_t *p_cli)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 236c 	strb.w	r2, [r3, #876]	@ 0x36c
  p_cli->line.cursor  = 0;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 236b 	strb.w	r2, [r3, #875]	@ 0x36b
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	223f      	movs	r2, #63	@ 0x3f
 8001d78:	f883 236a 	strb.w	r2, [r3, #874]	@ 0x36a
  p_cli->line.buf[0]  = 0;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 232a 	strb.w	r2, [r3, #810]	@ 0x32a
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
	...

08001d90 <cliPrintf>:

  return ret;
}

void cliPrintf(const char *fmt, ...)
{
 8001d90:	b40f      	push	{r0, r1, r2, r3}
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b084      	sub	sp, #16
 8001d96:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8001d98:	f107 031c 	add.w	r3, r7, #28
 8001d9c:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd4 <cliPrintf+0x44>)
 8001da0:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	f103 0011 	add.w	r0, r3, #17
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001db0:	f005 fad2 	bl	8007358 <vsniprintf>
 8001db4:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	7818      	ldrb	r0, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	3311      	adds	r3, #17
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f001 f899 	bl	8002ef8 <uartWrite>
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001dd0:	b004      	add	sp, #16
 8001dd2:	4770      	bx	lr
 8001dd4:	20000230 	.word	0x20000230

08001dd8 <cliToUpper>:

void cliToUpper(char *str)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001de0:	2300      	movs	r3, #0
 8001de2:	81fb      	strh	r3, [r7, #14]
 8001de4:	e018      	b.n	8001e18 <cliToUpper+0x40>
  {
    str_ch = str[i];
 8001de6:	89fb      	ldrh	r3, [r7, #14]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	4413      	add	r3, r2
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8001df0:	7b7b      	ldrb	r3, [r7, #13]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d014      	beq.n	8001e20 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8001df6:	7b7b      	ldrb	r3, [r7, #13]
 8001df8:	2b60      	cmp	r3, #96	@ 0x60
 8001dfa:	d905      	bls.n	8001e08 <cliToUpper+0x30>
 8001dfc:	7b7b      	ldrb	r3, [r7, #13]
 8001dfe:	2b7a      	cmp	r3, #122	@ 0x7a
 8001e00:	d802      	bhi.n	8001e08 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8001e02:	7b7b      	ldrb	r3, [r7, #13]
 8001e04:	3b20      	subs	r3, #32
 8001e06:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8001e08:	89fb      	ldrh	r3, [r7, #14]
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	7b7a      	ldrb	r2, [r7, #13]
 8001e10:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001e12:	89fb      	ldrh	r3, [r7, #14]
 8001e14:	3301      	adds	r3, #1
 8001e16:	81fb      	strh	r3, [r7, #14]
 8001e18:	89fb      	ldrh	r3, [r7, #14]
 8001e1a:	2b0f      	cmp	r3, #15
 8001e1c:	d9e3      	bls.n	8001de6 <cliToUpper+0xe>
 8001e1e:	e000      	b.n	8001e22 <cliToUpper+0x4a>
      break;
 8001e20:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8001e22:	89fb      	ldrh	r3, [r7, #14]
 8001e24:	2b10      	cmp	r3, #16
 8001e26:	d105      	bne.n	8001e34 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8001e28:	89fb      	ldrh	r3, [r7, #14]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	687a      	ldr	r2, [r7, #4]
 8001e2e:	4413      	add	r3, r2
 8001e30:	2200      	movs	r2, #0
 8001e32:	701a      	strb	r2, [r3, #0]
  }
}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
	...

08001e40 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e8c <cliArgsGetData+0x4c>)
 8001e50:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001e52:	79fb      	ldrb	r3, [r7, #7]
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	68bb      	ldr	r3, [r7, #8]
 8001e58:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	@ 0x4b0
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d301      	bcc.n	8001e64 <cliArgsGetData+0x24>
  {
    return 0;
 8001e60:	2300      	movs	r3, #0
 8001e62:	e00e      	b.n	8001e82 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f8d3 24b4 	ldr.w	r2, [r3, #1204]	@ 0x4b4
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f004 fcd8 	bl	800682c <strtoul>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	60fb      	str	r3, [r7, #12]

  return ret;
 8001e80:	68fb      	ldr	r3, [r7, #12]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000230 	.word	0x20000230

08001e90 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	4603      	mov	r3, r0
 8001e98:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8001edc <cliArgsGetFloat+0x4c>)
 8001ea2:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001ea4:	79fb      	ldrb	r3, [r7, #7]
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	@ 0x4b0
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d302      	bcc.n	8001eb8 <cliArgsGetFloat+0x28>
  {
    return 0;
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	e00c      	b.n	8001ed2 <cliArgsGetFloat+0x42>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f8d3 24b4 	ldr.w	r2, [r3, #1204]	@ 0x4b4
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f004 fbe9 	bl	80066a0 <strtof>
 8001ece:	60f8      	str	r0, [r7, #12]

  return ret;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000230 	.word	0x20000230

08001ee0 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b085      	sub	sp, #20
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8001eea:	2300      	movs	r3, #0
 8001eec:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001eee:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <cliArgsGetStr+0x40>)
 8001ef0:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001ef2:	79fb      	ldrb	r3, [r7, #7]
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	@ 0x4b0
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d301      	bcc.n	8001f04 <cliArgsGetStr+0x24>
  {
    return 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	e008      	b.n	8001f16 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f8d3 24b4 	ldr.w	r2, [r3, #1204]	@ 0x4b4
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	4413      	add	r3, r2
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	60fb      	str	r3, [r7, #12]

  return ret;
 8001f14:	68fb      	ldr	r3, [r7, #12]
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr
 8001f20:	20000230 	.word	0x20000230

08001f24 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	6039      	str	r1, [r7, #0]
 8001f2e:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001f30:	2300      	movs	r3, #0
 8001f32:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8001f34:	4b0f      	ldr	r3, [pc, #60]	@ (8001f74 <cliArgsIsStr+0x50>)
 8001f36:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	@ 0x4b0
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d301      	bcc.n	8001f4a <cliArgsIsStr+0x26>
  {
    return 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e010      	b.n	8001f6c <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	f8d3 24b4 	ldr.w	r2, [r3, #1204]	@ 0x4b4
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	4413      	add	r3, r2
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	6838      	ldr	r0, [r7, #0]
 8001f5c:	f7fe f8f8 	bl	8000150 <strcmp>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <cliArgsIsStr+0x46>
  {
    ret = true;
 8001f66:	2301      	movs	r3, #1
 8001f68:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000230 	.word	0x20000230

08001f78 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 8001f7e:	4b08      	ldr	r3, [pc, #32]	@ (8001fa0 <cliKeepLoop+0x28>)
 8001f80:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 ff6a 	bl	8002e60 <uartAvailable>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <cliKeepLoop+0x1e>
  {
    return true;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e000      	b.n	8001f98 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 8001f96:	2300      	movs	r3, #0
  }
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3708      	adds	r7, #8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	20000230 	.word	0x20000230

08001fa4 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8001fb2:	4b1f      	ldr	r3, [pc, #124]	@ (8002030 <cliAdd+0x8c>)
 8001fb4:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	f8b3 336e 	ldrh.w	r3, [r3, #878]	@ 0x36e
 8001fbc:	2b0f      	cmp	r3, #15
 8001fbe:	d901      	bls.n	8001fc4 <cliAdd+0x20>
  {
    return false;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	e030      	b.n	8002026 <cliAdd+0x82>
  }

  index = p_cli->cmd_count;
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	f8b3 336e 	ldrh.w	r3, [r3, #878]	@ 0x36e
 8001fca:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8001fcc:	89fa      	ldrh	r2, [r7, #14]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	f503 735c 	add.w	r3, r3, #880	@ 0x370
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4413      	add	r3, r2
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f005 fa58 	bl	8007496 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8001fe6:	89fa      	ldrh	r2, [r7, #14]
 8001fe8:	6939      	ldr	r1, [r7, #16]
 8001fea:	4613      	mov	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	f503 7360 	add.w	r3, r3, #896	@ 0x380
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8001ffc:	89fa      	ldrh	r2, [r7, #14]
 8001ffe:	4613      	mov	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	f503 735c 	add.w	r3, r3, #880	@ 0x370
 800200a:	693a      	ldr	r2, [r7, #16]
 800200c:	4413      	add	r3, r2
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fee2 	bl	8001dd8 <cliToUpper>

  p_cli->cmd_count++;
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	f8b3 336e 	ldrh.w	r3, [r3, #878]	@ 0x36e
 800201a:	3301      	adds	r3, #1
 800201c:	b29a      	uxth	r2, r3
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	f8a3 236e 	strh.w	r2, [r3, #878]	@ 0x36e

  return ret;
 8002024:	7dfb      	ldrb	r3, [r7, #23]
}
 8002026:	4618      	mov	r0, r3
 8002028:	3718      	adds	r7, #24
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000230 	.word	0x20000230

08002034 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 800203c:	4b15      	ldr	r3, [pc, #84]	@ (8002094 <cliShowList+0x60>)
 800203e:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8002040:	4815      	ldr	r0, [pc, #84]	@ (8002098 <cliShowList+0x64>)
 8002042:	f7ff fea5 	bl	8001d90 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8002046:	4815      	ldr	r0, [pc, #84]	@ (800209c <cliShowList+0x68>)
 8002048:	f7ff fea2 	bl	8001d90 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 800204c:	2300      	movs	r3, #0
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	e011      	b.n	8002076 <cliShowList+0x42>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8002052:	68fa      	ldr	r2, [r7, #12]
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	f503 735c 	add.w	r3, r3, #880	@ 0x370
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	4413      	add	r3, r2
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff fe93 	bl	8001d90 <cliPrintf>
    cliPrintf("\r\n");
 800206a:	480b      	ldr	r0, [pc, #44]	@ (8002098 <cliShowList+0x64>)
 800206c:	f7ff fe90 	bl	8001d90 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	3301      	adds	r3, #1
 8002074:	60fb      	str	r3, [r7, #12]
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	f8b3 336e 	ldrh.w	r3, [r3, #878]	@ 0x36e
 800207c:	461a      	mov	r2, r3
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	4293      	cmp	r3, r2
 8002082:	dbe6      	blt.n	8002052 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 8002084:	4806      	ldr	r0, [pc, #24]	@ (80020a0 <cliShowList+0x6c>)
 8002086:	f7ff fe83 	bl	8001d90 <cliPrintf>
}
 800208a:	bf00      	nop
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000230 	.word	0x20000230
 8002098:	0800a034 	.word	0x0800a034
 800209c:	0800a038 	.word	0x0800a038
 80020a0:	0800a058 	.word	0x0800a058

080020a4 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08c      	sub	sp, #48	@ 0x30
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 80020ac:	2310      	movs	r3, #16
 80020ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	881b      	ldrh	r3, [r3, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d103      	bne.n	80020cc <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 80020c4:	4840      	ldr	r0, [pc, #256]	@ (80021c8 <cliMemoryDump+0x124>)
 80020c6:	f7ff fe63 	bl	8001d90 <cliPrintf>
 80020ca:	e07a      	b.n	80021c2 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	dd09      	ble.n	80020e6 <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	3304      	adds	r3, #4
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2200      	movs	r2, #0
 80020da:	2100      	movs	r1, #0
 80020dc:	4618      	mov	r0, r3
 80020de:	f004 fba5 	bl	800682c <strtoul>
 80020e2:	4603      	mov	r3, r0
 80020e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f004 fb9c 	bl	800682c <strtoul>
 80020f4:	4603      	mov	r3, r0
 80020f6:	627b      	str	r3, [r7, #36]	@ 0x24
  ascptr = (unsigned int *)addr;
 80020f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fa:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 80020fc:	4833      	ldr	r0, [pc, #204]	@ (80021cc <cliMemoryDump+0x128>)
 80020fe:	f7ff fe47 	bl	8001d90 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 8002102:	2300      	movs	r3, #0
 8002104:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002106:	e058      	b.n	80021ba <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 8002108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	2b00      	cmp	r3, #0
 8002110:	d104      	bne.n	800211c <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	4619      	mov	r1, r3
 8002116:	482e      	ldr	r0, [pc, #184]	@ (80021d0 <cliMemoryDump+0x12c>)
 8002118:	f7ff fe3a 	bl	8001d90 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 800211c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4619      	mov	r1, r3
 8002122:	482c      	ldr	r0, [pc, #176]	@ (80021d4 <cliMemoryDump+0x130>)
 8002124:	f7ff fe34 	bl	8001d90 <cliPrintf>

    if ((idx%4) == 3)
 8002128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800212a:	425a      	negs	r2, r3
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	f002 0203 	and.w	r2, r2, #3
 8002134:	bf58      	it	pl
 8002136:	4253      	negpl	r3, r2
 8002138:	2b03      	cmp	r3, #3
 800213a:	d138      	bne.n	80021ae <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 800213c:	4826      	ldr	r0, [pc, #152]	@ (80021d8 <cliMemoryDump+0x134>)
 800213e:	f7ff fe27 	bl	8001d90 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 8002142:	2300      	movs	r3, #0
 8002144:	623b      	str	r3, [r7, #32]
 8002146:	e02c      	b.n	80021a2 <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	e01d      	b.n	8002190 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8002154:	f107 020c 	add.w	r2, r7, #12
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	4413      	add	r3, r2
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b1f      	cmp	r3, #31
 8002160:	d910      	bls.n	8002184 <cliMemoryDump+0xe0>
 8002162:	f107 020c 	add.w	r2, r7, #12
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	4413      	add	r3, r2
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b7e      	cmp	r3, #126	@ 0x7e
 800216e:	d809      	bhi.n	8002184 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8002170:	f107 020c 	add.w	r2, r7, #12
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	4413      	add	r3, r2
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	4619      	mov	r1, r3
 800217c:	4817      	ldr	r0, [pc, #92]	@ (80021dc <cliMemoryDump+0x138>)
 800217e:	f7ff fe07 	bl	8001d90 <cliPrintf>
 8002182:	e002      	b.n	800218a <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8002184:	4816      	ldr	r0, [pc, #88]	@ (80021e0 <cliMemoryDump+0x13c>)
 8002186:	f7ff fe03 	bl	8001d90 <cliPrintf>
        for (i=0;i<4;i++)
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3301      	adds	r3, #1
 800218e:	61fb      	str	r3, [r7, #28]
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	2b03      	cmp	r3, #3
 8002194:	ddde      	ble.n	8002154 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	3304      	adds	r3, #4
 800219a:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	3301      	adds	r3, #1
 80021a0:	623b      	str	r3, [r7, #32]
 80021a2:	6a3b      	ldr	r3, [r7, #32]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	ddcf      	ble.n	8002148 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 80021a8:	480e      	ldr	r0, [pc, #56]	@ (80021e4 <cliMemoryDump+0x140>)
 80021aa:	f7ff fdf1 	bl	8001d90 <cliPrintf>
    }
    addr++;
 80021ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b0:	3304      	adds	r3, #4
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (idx = 0; idx<size; idx++)
 80021b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021b6:	3301      	adds	r3, #1
 80021b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021be:	429a      	cmp	r2, r3
 80021c0:	dba2      	blt.n	8002108 <cliMemoryDump+0x64>
  }
}
 80021c2:	3730      	adds	r7, #48	@ 0x30
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	0800a078 	.word	0x0800a078
 80021cc:	0800a08c 	.word	0x0800a08c
 80021d0:	0800a094 	.word	0x0800a094
 80021d4:	0800a0a0 	.word	0x0800a0a0
 80021d8:	0800a0a8 	.word	0x0800a0a8
 80021dc:	0800a0ac 	.word	0x0800a0ac
 80021e0:	0800a0b0 	.word	0x0800a0b0
 80021e4:	0800a0b4 	.word	0x0800a0b4

080021e8 <dht22Init>:

//*** Functions prototypes ***//

//OneWire Initialise
bool dht22Init(GPIO_TypeDef* DataPort, uint16_t DataPin)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	460b      	mov	r3, r1
 80021f2:	807b      	strh	r3, [r7, #2]
  bool ret = true;
 80021f4:	2301      	movs	r3, #1
 80021f6:	73bb      	strb	r3, [r7, #14]

  oneWire_PORT = DataPort;
 80021f8:	4a11      	ldr	r2, [pc, #68]	@ (8002240 <dht22Init+0x58>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6013      	str	r3, [r2, #0]
  oneWire_PIN = DataPin;
 80021fe:	4a11      	ldr	r2, [pc, #68]	@ (8002244 <dht22Init+0x5c>)
 8002200:	887b      	ldrh	r3, [r7, #2]
 8002202:	8013      	strh	r3, [r2, #0]

  for(uint8_t i=0; i<16; i++)
 8002204:	2300      	movs	r3, #0
 8002206:	73fb      	strb	r3, [r7, #15]
 8002208:	e00e      	b.n	8002228 <dht22Init+0x40>
  {
    if(DataPin & (1 << i))
 800220a:	887a      	ldrh	r2, [r7, #2]
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	fa42 f303 	asr.w	r3, r2, r3
 8002212:	f003 0301 	and.w	r3, r3, #1
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <dht22Init+0x3a>
    {
      oneWirePin_Idx = i;
 800221a:	4a0b      	ldr	r2, [pc, #44]	@ (8002248 <dht22Init+0x60>)
 800221c:	7bfb      	ldrb	r3, [r7, #15]
 800221e:	7013      	strb	r3, [r2, #0]
      break;
 8002220:	e005      	b.n	800222e <dht22Init+0x46>
  for(uint8_t i=0; i<16; i++)
 8002222:	7bfb      	ldrb	r3, [r7, #15]
 8002224:	3301      	adds	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	7bfb      	ldrb	r3, [r7, #15]
 800222a:	2b0f      	cmp	r3, #15
 800222c:	d9ed      	bls.n	800220a <dht22Init+0x22>
    }
  }

#ifdef _USE_HW_CLI
  cliAdd("dht22", cliDHT22);
 800222e:	4907      	ldr	r1, [pc, #28]	@ (800224c <dht22Init+0x64>)
 8002230:	4807      	ldr	r0, [pc, #28]	@ (8002250 <dht22Init+0x68>)
 8002232:	f7ff feb7 	bl	8001fa4 <cliAdd>
#endif

  return ret;
 8002236:	7bbb      	ldrb	r3, [r7, #14]
}
 8002238:	4618      	mov	r0, r3
 800223a:	3710      	adds	r7, #16
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	200006f8 	.word	0x200006f8
 8002244:	200006fc 	.word	0x200006fc
 8002248:	200006fe 	.word	0x200006fe
 800224c:	08002519 	.word	0x08002519
 8002250:	0800a0c4 	.word	0x0800a0c4

08002254 <ONE_WIRE_PinMode>:

//Change pin mode
void ONE_WIRE_PinMode(OnePinMode_Typedef mode)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Pin = oneWire_PIN;
 800225e:	4b0f      	ldr	r3, [pc, #60]	@ (800229c <ONE_WIRE_PinMode+0x48>)
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002264:	2302      	movs	r3, #2
 8002266:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	613b      	str	r3, [r7, #16]

  if(mode == ONE_OUTPUT)
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d102      	bne.n	8002278 <ONE_WIRE_PinMode+0x24>
  {
//    oneWire_PORT->MODER &= ~(3UL << 2*oneWirePin_Idx);  //Reset State
//    oneWire_PORT->MODER |= (0x01 << 2*oneWirePin_Idx); //Output Mode
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002272:	2301      	movs	r3, #1
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	e004      	b.n	8002282 <ONE_WIRE_PinMode+0x2e>
  }
  else if(mode == ONE_INPUT)
 8002278:	79fb      	ldrb	r3, [r7, #7]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <ONE_WIRE_PinMode+0x2e>
  {
//    oneWire_PORT->MODER &= ~(3UL << 2*oneWirePin_Idx);  //Input Mode
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
  }

  HAL_GPIO_Init(oneWire_PORT, &GPIO_InitStruct);
 8002282:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <ONE_WIRE_PinMode+0x4c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f107 0208 	add.w	r2, r7, #8
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f001 fcdd 	bl	8003c4c <HAL_GPIO_Init>
}
 8002292:	bf00      	nop
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200006fc 	.word	0x200006fc
 80022a0:	200006f8 	.word	0x200006f8

080022a4 <ONE_WIRE_Pin_Write>:

//One Wire pin HIGH/LOW Write
void ONE_WIRE_Pin_Write(bool state)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
  if(state) HAL_GPIO_WritePin(oneWire_PORT, oneWire_PIN, GPIO_PIN_SET);
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d008      	beq.n	80022c6 <ONE_WIRE_Pin_Write+0x22>
 80022b4:	4b0a      	ldr	r3, [pc, #40]	@ (80022e0 <ONE_WIRE_Pin_Write+0x3c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a0a      	ldr	r2, [pc, #40]	@ (80022e4 <ONE_WIRE_Pin_Write+0x40>)
 80022ba:	8811      	ldrh	r1, [r2, #0]
 80022bc:	2201      	movs	r2, #1
 80022be:	4618      	mov	r0, r3
 80022c0:	f001 ff1b 	bl	80040fa <HAL_GPIO_WritePin>
  else HAL_GPIO_WritePin(oneWire_PORT, oneWire_PIN, GPIO_PIN_RESET);
}
 80022c4:	e007      	b.n	80022d6 <ONE_WIRE_Pin_Write+0x32>
  else HAL_GPIO_WritePin(oneWire_PORT, oneWire_PIN, GPIO_PIN_RESET);
 80022c6:	4b06      	ldr	r3, [pc, #24]	@ (80022e0 <ONE_WIRE_Pin_Write+0x3c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a06      	ldr	r2, [pc, #24]	@ (80022e4 <ONE_WIRE_Pin_Write+0x40>)
 80022cc:	8811      	ldrh	r1, [r2, #0]
 80022ce:	2200      	movs	r2, #0
 80022d0:	4618      	mov	r0, r3
 80022d2:	f001 ff12 	bl	80040fa <HAL_GPIO_WritePin>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200006f8 	.word	0x200006f8
 80022e4:	200006fc 	.word	0x200006fc

080022e8 <ONE_WIRE_Pin_Read>:

bool ONE_WIRE_Pin_Read(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  return (1&HAL_GPIO_ReadPin(oneWire_PORT, oneWire_PIN));
 80022ec:	4b08      	ldr	r3, [pc, #32]	@ (8002310 <ONE_WIRE_Pin_Read+0x28>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a08      	ldr	r2, [pc, #32]	@ (8002314 <ONE_WIRE_Pin_Read+0x2c>)
 80022f2:	8812      	ldrh	r2, [r2, #0]
 80022f4:	4611      	mov	r1, r2
 80022f6:	4618      	mov	r0, r3
 80022f8:	f001 fee8 	bl	80040cc <HAL_GPIO_ReadPin>
 80022fc:	4603      	mov	r3, r0
 80022fe:	f003 0301 	and.w	r3, r3, #1
 8002302:	2b00      	cmp	r3, #0
 8002304:	bf14      	ite	ne
 8002306:	2301      	movne	r3, #1
 8002308:	2300      	moveq	r3, #0
 800230a:	b2db      	uxtb	r3, r3
}
 800230c:	4618      	mov	r0, r3
 800230e:	bd80      	pop	{r7, pc}
 8002310:	200006f8 	.word	0x200006f8
 8002314:	200006fc 	.word	0x200006fc

08002318 <DHT22_StartAcquisition>:

//DHT Begin function
void DHT22_StartAcquisition(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  //Change data pin mode to OUTPUT
  ONE_WIRE_PinMode(ONE_OUTPUT);
 800231c:	2000      	movs	r0, #0
 800231e:	f7ff ff99 	bl	8002254 <ONE_WIRE_PinMode>
  //Put pin LOW
  ONE_WIRE_Pin_Write(0);
 8002322:	2000      	movs	r0, #0
 8002324:	f7ff ffbe 	bl	80022a4 <ONE_WIRE_Pin_Write>
  //500uSec delay
  us_delay(500);
 8002328:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800232c:	f7fe ffbd 	bl	80012aa <us_delay>
  //Bring pin HIGH
  ONE_WIRE_Pin_Write(1);
 8002330:	2001      	movs	r0, #1
 8002332:	f7ff ffb7 	bl	80022a4 <ONE_WIRE_Pin_Write>
  //30 uSec delay
  us_delay(30);
 8002336:	201e      	movs	r0, #30
 8002338:	f7fe ffb7 	bl	80012aa <us_delay>
  //Set pin as input
  ONE_WIRE_PinMode(ONE_INPUT);
 800233c:	2001      	movs	r0, #1
 800233e:	f7ff ff89 	bl	8002254 <ONE_WIRE_PinMode>
}
 8002342:	bf00      	nop
 8002344:	bd80      	pop	{r7, pc}

08002346 <DHT22_ReadRaw>:

//Read 5 bytes
void DHT22_ReadRaw(uint8_t *data)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  uint32_t rawBits = 0UL;
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
  uint8_t checksumBits=0;
 8002352:	2300      	movs	r3, #0
 8002354:	72fb      	strb	r3, [r7, #11]

  us_delay(40);
 8002356:	2028      	movs	r0, #40	@ 0x28
 8002358:	f7fe ffa7 	bl	80012aa <us_delay>
  while(!ONE_WIRE_Pin_Read());
 800235c:	bf00      	nop
 800235e:	f7ff ffc3 	bl	80022e8 <ONE_WIRE_Pin_Read>
 8002362:	4603      	mov	r3, r0
 8002364:	f083 0301 	eor.w	r3, r3, #1
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f7      	bne.n	800235e <DHT22_ReadRaw+0x18>
  while(ONE_WIRE_Pin_Read());
 800236e:	bf00      	nop
 8002370:	f7ff ffba 	bl	80022e8 <ONE_WIRE_Pin_Read>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1fa      	bne.n	8002370 <DHT22_ReadRaw+0x2a>
  for(int8_t i=31; i>=0; i--)
 800237a:	231f      	movs	r3, #31
 800237c:	72bb      	strb	r3, [r7, #10]
 800237e:	e024      	b.n	80023ca <DHT22_ReadRaw+0x84>
  {
    while(!ONE_WIRE_Pin_Read());
 8002380:	bf00      	nop
 8002382:	f7ff ffb1 	bl	80022e8 <ONE_WIRE_Pin_Read>
 8002386:	4603      	mov	r3, r0
 8002388:	f083 0301 	eor.w	r3, r3, #1
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d1f7      	bne.n	8002382 <DHT22_ReadRaw+0x3c>
    us_delay(40);
 8002392:	2028      	movs	r0, #40	@ 0x28
 8002394:	f7fe ff89 	bl	80012aa <us_delay>
    if(ONE_WIRE_Pin_Read())
 8002398:	f7ff ffa6 	bl	80022e8 <ONE_WIRE_Pin_Read>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d007      	beq.n	80023b2 <DHT22_ReadRaw+0x6c>
    {
      rawBits |= (1UL << i);
 80023a2:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80023a6:	2201      	movs	r2, #1
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60fb      	str	r3, [r7, #12]
    }
    while(ONE_WIRE_Pin_Read());
 80023b2:	bf00      	nop
 80023b4:	f7ff ff98 	bl	80022e8 <ONE_WIRE_Pin_Read>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1fa      	bne.n	80023b4 <DHT22_ReadRaw+0x6e>
  for(int8_t i=31; i>=0; i--)
 80023be:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	72bb      	strb	r3, [r7, #10]
 80023ca:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	dad6      	bge.n	8002380 <DHT22_ReadRaw+0x3a>
  }

  for(int8_t i=7; i>=0; i--)
 80023d2:	2307      	movs	r3, #7
 80023d4:	727b      	strb	r3, [r7, #9]
 80023d6:	e025      	b.n	8002424 <DHT22_ReadRaw+0xde>
  {
    while(!ONE_WIRE_Pin_Read());
 80023d8:	bf00      	nop
 80023da:	f7ff ff85 	bl	80022e8 <ONE_WIRE_Pin_Read>
 80023de:	4603      	mov	r3, r0
 80023e0:	f083 0301 	eor.w	r3, r3, #1
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d1f7      	bne.n	80023da <DHT22_ReadRaw+0x94>
    us_delay(40);
 80023ea:	2028      	movs	r0, #40	@ 0x28
 80023ec:	f7fe ff5d 	bl	80012aa <us_delay>
    if(ONE_WIRE_Pin_Read())
 80023f0:	f7ff ff7a 	bl	80022e8 <ONE_WIRE_Pin_Read>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <DHT22_ReadRaw+0xc6>
    {
      checksumBits |= (1UL << i);
 80023fa:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80023fe:	2201      	movs	r2, #1
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	b2da      	uxtb	r2, r3
 8002406:	7afb      	ldrb	r3, [r7, #11]
 8002408:	4313      	orrs	r3, r2
 800240a:	72fb      	strb	r3, [r7, #11]
    }
    while(ONE_WIRE_Pin_Read());
 800240c:	bf00      	nop
 800240e:	f7ff ff6b 	bl	80022e8 <ONE_WIRE_Pin_Read>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1fa      	bne.n	800240e <DHT22_ReadRaw+0xc8>
  for(int8_t i=7; i>=0; i--)
 8002418:	f997 3009 	ldrsb.w	r3, [r7, #9]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	3b01      	subs	r3, #1
 8002420:	b2db      	uxtb	r3, r3
 8002422:	727b      	strb	r3, [r7, #9]
 8002424:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002428:	2b00      	cmp	r3, #0
 800242a:	dad5      	bge.n	80023d8 <DHT22_ReadRaw+0x92>
  }

  //Copy raw data to array of bytes
  data[0] = (rawBits>>24)&0xFF;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	0e1b      	lsrs	r3, r3, #24
 8002430:	b2da      	uxtb	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	701a      	strb	r2, [r3, #0]
  data[1] = (rawBits>>16)&0xFF;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	0c1a      	lsrs	r2, r3, #16
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3301      	adds	r3, #1
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]
  data[2] = (rawBits>>8)&0xFF;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	0a1a      	lsrs	r2, r3, #8
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3302      	adds	r3, #2
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]
  data[3] = (rawBits>>0)&0xFF;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3303      	adds	r3, #3
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	b2d2      	uxtb	r2, r2
 8002456:	701a      	strb	r2, [r3, #0]
  data[4] = (checksumBits)&0xFF;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3304      	adds	r3, #4
 800245c:	7afa      	ldrb	r2, [r7, #11]
 800245e:	701a      	strb	r2, [r3, #0]
}
 8002460:	bf00      	nop
 8002462:	3710      	adds	r7, #16
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <DHT22_GetTemp_Humidity>:

//Get Temperature and Humidity data
bool DHT22_GetTemp_Humidity(float *Temp, float *Humidity)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	6039      	str	r1, [r7, #0]
  uint8_t dataArray[6], myChecksum;
  uint16_t Temp16, Humid16;
  //Implement Start data Aqcuisition routine
  DHT22_StartAcquisition();
 8002472:	f7ff ff51 	bl	8002318 <DHT22_StartAcquisition>
  //Aqcuire raw data
  DHT22_ReadRaw(dataArray);
 8002476:	f107 030c 	add.w	r3, r7, #12
 800247a:	4618      	mov	r0, r3
 800247c:	f7ff ff63 	bl	8002346 <DHT22_ReadRaw>
  //calculate checksum
  myChecksum = 0;
 8002480:	2300      	movs	r3, #0
 8002482:	75fb      	strb	r3, [r7, #23]
  for(uint8_t k=0; k<4; k++)
 8002484:	2300      	movs	r3, #0
 8002486:	75bb      	strb	r3, [r7, #22]
 8002488:	e00a      	b.n	80024a0 <DHT22_GetTemp_Humidity+0x38>
  {
    myChecksum += dataArray[k];
 800248a:	7dbb      	ldrb	r3, [r7, #22]
 800248c:	3318      	adds	r3, #24
 800248e:	443b      	add	r3, r7
 8002490:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8002494:	7dfb      	ldrb	r3, [r7, #23]
 8002496:	4413      	add	r3, r2
 8002498:	75fb      	strb	r3, [r7, #23]
  for(uint8_t k=0; k<4; k++)
 800249a:	7dbb      	ldrb	r3, [r7, #22]
 800249c:	3301      	adds	r3, #1
 800249e:	75bb      	strb	r3, [r7, #22]
 80024a0:	7dbb      	ldrb	r3, [r7, #22]
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d9f1      	bls.n	800248a <DHT22_GetTemp_Humidity+0x22>
  }
  if(myChecksum == dataArray[4])
 80024a6:	7c3b      	ldrb	r3, [r7, #16]
 80024a8:	7dfa      	ldrb	r2, [r7, #23]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d12b      	bne.n	8002506 <DHT22_GetTemp_Humidity+0x9e>
  {
    Temp16 = (dataArray[2] <<8) | dataArray[3];
 80024ae:	7bbb      	ldrb	r3, [r7, #14]
 80024b0:	021b      	lsls	r3, r3, #8
 80024b2:	b21a      	sxth	r2, r3
 80024b4:	7bfb      	ldrb	r3, [r7, #15]
 80024b6:	b21b      	sxth	r3, r3
 80024b8:	4313      	orrs	r3, r2
 80024ba:	b21b      	sxth	r3, r3
 80024bc:	82bb      	strh	r3, [r7, #20]
    Humid16 = (dataArray[0] <<8) | dataArray[1];
 80024be:	7b3b      	ldrb	r3, [r7, #12]
 80024c0:	021b      	lsls	r3, r3, #8
 80024c2:	b21a      	sxth	r2, r3
 80024c4:	7b7b      	ldrb	r3, [r7, #13]
 80024c6:	b21b      	sxth	r3, r3
 80024c8:	4313      	orrs	r3, r2
 80024ca:	b21b      	sxth	r3, r3
 80024cc:	827b      	strh	r3, [r7, #18]

    *Temp = Temp16/100.0f;
 80024ce:	8abb      	ldrh	r3, [r7, #20]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe fc0d 	bl	8000cf0 <__aeabi_i2f>
 80024d6:	4603      	mov	r3, r0
 80024d8:	490d      	ldr	r1, [pc, #52]	@ (8002510 <DHT22_GetTemp_Humidity+0xa8>)
 80024da:	4618      	mov	r0, r3
 80024dc:	f7fe fd10 	bl	8000f00 <__aeabi_fdiv>
 80024e0:	4603      	mov	r3, r0
 80024e2:	461a      	mov	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	601a      	str	r2, [r3, #0]
    *Humidity = Humid16/1000.0f;
 80024e8:	8a7b      	ldrh	r3, [r7, #18]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7fe fc00 	bl	8000cf0 <__aeabi_i2f>
 80024f0:	4603      	mov	r3, r0
 80024f2:	4908      	ldr	r1, [pc, #32]	@ (8002514 <DHT22_GetTemp_Humidity+0xac>)
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe fd03 	bl	8000f00 <__aeabi_fdiv>
 80024fa:	4603      	mov	r3, r0
 80024fc:	461a      	mov	r2, r3
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	601a      	str	r2, [r3, #0]

    return 1;
 8002502:	2301      	movs	r3, #1
 8002504:	e000      	b.n	8002508 <DHT22_GetTemp_Humidity+0xa0>
  }
  return 0;
 8002506:	2300      	movs	r3, #0
}
 8002508:	4618      	mov	r0, r3
 800250a:	3718      	adds	r7, #24
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	42c80000 	.word	0x42c80000
 8002514:	447a0000 	.word	0x447a0000

08002518 <cliDHT22>:


#ifdef _USE_HW_CLI

void cliDHT22(cli_args_t *args)
{
 8002518:	b5b0      	push	{r4, r5, r7, lr}
 800251a:	b088      	sub	sp, #32
 800251c:	af02      	add	r7, sp, #8
 800251e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002520:	2300      	movs	r3, #0
 8002522:	75fb      	strb	r3, [r7, #23]

  if(args->argc == 1 && args->isStr(0, "get") == true)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d13c      	bne.n	80025a6 <cliDHT22+0x8e>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	4923      	ldr	r1, [pc, #140]	@ (80025c0 <cliDHT22+0xa8>)
 8002532:	2000      	movs	r0, #0
 8002534:	4798      	blx	r3
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d034      	beq.n	80025a6 <cliDHT22+0x8e>
  {
    float temp, humidity = 0;
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]

    while(cliKeepLoop())
 8002542:	e029      	b.n	8002598 <cliDHT22+0x80>
    {
      if(DHT22_GetTemp_Humidity(&temp, &humidity))
 8002544:	f107 020c 	add.w	r2, r7, #12
 8002548:	f107 0310 	add.w	r3, r7, #16
 800254c:	4611      	mov	r1, r2
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ff8a 	bl	8002468 <DHT22_GetTemp_Humidity>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d017      	beq.n	800258a <cliDHT22+0x72>
      {
        cliPrintf("Temp: %.1f""\xE2\x84\x83"", Humidity: %.1f%%\n", temp, humidity);
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4618      	mov	r0, r3
 800255e:	f7fd ff6d 	bl	800043c <__aeabi_f2d>
 8002562:	4604      	mov	r4, r0
 8002564:	460d      	mov	r5, r1
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4618      	mov	r0, r3
 800256a:	f7fd ff67 	bl	800043c <__aeabi_f2d>
 800256e:	4602      	mov	r2, r0
 8002570:	460b      	mov	r3, r1
 8002572:	e9cd 2300 	strd	r2, r3, [sp]
 8002576:	4622      	mov	r2, r4
 8002578:	462b      	mov	r3, r5
 800257a:	4812      	ldr	r0, [pc, #72]	@ (80025c4 <cliDHT22+0xac>)
 800257c:	f7ff fc08 	bl	8001d90 <cliPrintf>
        delay(1000);
 8002580:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002584:	f7fe fe86 	bl	8001294 <delay>
 8002588:	e006      	b.n	8002598 <cliDHT22+0x80>
      }
      else
      {
        cliPrintf("ERROR!\n");
 800258a:	480f      	ldr	r0, [pc, #60]	@ (80025c8 <cliDHT22+0xb0>)
 800258c:	f7ff fc00 	bl	8001d90 <cliPrintf>
        delay(1000);
 8002590:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002594:	f7fe fe7e 	bl	8001294 <delay>
    while(cliKeepLoop())
 8002598:	f7ff fcee 	bl	8001f78 <cliKeepLoop>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1d0      	bne.n	8002544 <cliDHT22+0x2c>
      }
    }

    ret = true;
 80025a2:	2301      	movs	r3, #1
 80025a4:	75fb      	strb	r3, [r7, #23]
  }

  if(ret != true)
 80025a6:	7dfb      	ldrb	r3, [r7, #23]
 80025a8:	f083 0301 	eor.w	r3, r3, #1
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <cliDHT22+0xa0>
  {
    cliPrintf("dht22 get\n");
 80025b2:	4806      	ldr	r0, [pc, #24]	@ (80025cc <cliDHT22+0xb4>)
 80025b4:	f7ff fbec 	bl	8001d90 <cliPrintf>
  }
}
 80025b8:	bf00      	nop
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bdb0      	pop	{r4, r5, r7, pc}
 80025c0:	0800a0cc 	.word	0x0800a0cc
 80025c4:	0800a0d0 	.word	0x0800a0d0
 80025c8:	0800a0f4 	.word	0x0800a0f4
 80025cc:	0800a0fc 	.word	0x0800a0fc

080025d0 <gpioInit>:
static void cliGpio(cli_args_t *args);
#endif


bool gpioInit(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
  bool ret = true;
 80025d6:	2301      	movs	r3, #1
 80025d8:	72fb      	strb	r3, [r7, #11]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025da:	4b23      	ldr	r3, [pc, #140]	@ (8002668 <gpioInit+0x98>)
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	4a22      	ldr	r2, [pc, #136]	@ (8002668 <gpioInit+0x98>)
 80025e0:	f043 0304 	orr.w	r3, r3, #4
 80025e4:	6193      	str	r3, [r2, #24]
 80025e6:	4b20      	ldr	r3, [pc, #128]	@ (8002668 <gpioInit+0x98>)
 80025e8:	699b      	ldr	r3, [r3, #24]
 80025ea:	f003 0304 	and.w	r3, r3, #4
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f2:	4b1d      	ldr	r3, [pc, #116]	@ (8002668 <gpioInit+0x98>)
 80025f4:	699b      	ldr	r3, [r3, #24]
 80025f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002668 <gpioInit+0x98>)
 80025f8:	f043 0308 	orr.w	r3, r3, #8
 80025fc:	6193      	str	r3, [r2, #24]
 80025fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002668 <gpioInit+0x98>)
 8002600:	699b      	ldr	r3, [r3, #24]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	683b      	ldr	r3, [r7, #0]

  for (int i=0; i<GPIO_MAX_CH; i++)
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	e017      	b.n	8002640 <gpioInit+0x70>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	b2d8      	uxtb	r0, r3
 8002614:	4915      	ldr	r1, [pc, #84]	@ (800266c <gpioInit+0x9c>)
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4613      	mov	r3, r2
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	4413      	add	r3, r2
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	3308      	adds	r3, #8
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	4619      	mov	r1, r3
 8002628:	f000 f826 	bl	8002678 <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_value);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2201      	movs	r2, #1
 8002632:	4611      	mov	r1, r2
 8002634:	4618      	mov	r0, r3
 8002636:	f000 f8b3 	bl	80027a0 <gpioPinWrite>
  for (int i=0; i<GPIO_MAX_CH; i++)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	3301      	adds	r3, #1
 800263e:	60fb      	str	r3, [r7, #12]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b00      	cmp	r3, #0
 8002644:	dde4      	ble.n	8002610 <gpioInit+0x40>
  }

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002646:	2200      	movs	r2, #0
 8002648:	2100      	movs	r1, #0
 800264a:	2007      	movs	r0, #7
 800264c:	f000 ffbb 	bl	80035c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002650:	2007      	movs	r0, #7
 8002652:	f000 ffd4 	bl	80035fe <HAL_NVIC_EnableIRQ>

#ifdef _USE_HW_CLI
  cliAdd("gpio", cliGpio);
 8002656:	4906      	ldr	r1, [pc, #24]	@ (8002670 <gpioInit+0xa0>)
 8002658:	4806      	ldr	r0, [pc, #24]	@ (8002674 <gpioInit+0xa4>)
 800265a:	f7ff fca3 	bl	8001fa4 <cliAdd>
#endif

  return ret;
 800265e:	7afb      	ldrb	r3, [r7, #11]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40021000 	.word	0x40021000
 800266c:	0800a1d8 	.word	0x0800a1d8
 8002670:	080028b5 	.word	0x080028b5
 8002674:	0800a108 	.word	0x0800a108

08002678 <gpioPinMode>:

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b088      	sub	sp, #32
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	460a      	mov	r2, r1
 8002682:	71fb      	strb	r3, [r7, #7]
 8002684:	4613      	mov	r3, r2
 8002686:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 8002688:	2301      	movs	r3, #1
 800268a:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800268c:	f107 030c 	add.w	r3, r7, #12
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	609a      	str	r2, [r3, #8]
 8002698:	60da      	str	r2, [r3, #12]


  if (ch >= GPIO_MAX_CH)
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <gpioPinMode+0x2c>
  {
    return false;
 80026a0:	2300      	movs	r3, #0
 80026a2:	e072      	b.n	800278a <gpioPinMode+0x112>
  }

  switch(mode)
 80026a4:	79bb      	ldrb	r3, [r7, #6]
 80026a6:	2b0b      	cmp	r3, #11
 80026a8:	d856      	bhi.n	8002758 <gpioPinMode+0xe0>
 80026aa:	a201      	add	r2, pc, #4	@ (adr r2, 80026b0 <gpioPinMode+0x38>)
 80026ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b0:	080026e1 	.word	0x080026e1
 80026b4:	080026eb 	.word	0x080026eb
 80026b8:	080026f5 	.word	0x080026f5
 80026bc:	080026ff 	.word	0x080026ff
 80026c0:	08002709 	.word	0x08002709
 80026c4:	08002713 	.word	0x08002713
 80026c8:	0800271d 	.word	0x0800271d
 80026cc:	08002727 	.word	0x08002727
 80026d0:	08002731 	.word	0x08002731
 80026d4:	0800273b 	.word	0x0800273b
 80026d8:	08002745 	.word	0x08002745
 80026dc:	0800274f 	.word	0x0800274f
  {
    case _DEF_INPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026e0:	2300      	movs	r3, #0
 80026e2:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
      break;
 80026e8:	e036      	b.n	8002758 <gpioPinMode+0xe0>

    case _DEF_INPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026ee:	2301      	movs	r3, #1
 80026f0:	617b      	str	r3, [r7, #20]
      break;
 80026f2:	e031      	b.n	8002758 <gpioPinMode+0xe0>

    case _DEF_INPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026f4:	2300      	movs	r3, #0
 80026f6:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026f8:	2302      	movs	r3, #2
 80026fa:	617b      	str	r3, [r7, #20]
      break;
 80026fc:	e02c      	b.n	8002758 <gpioPinMode+0xe0>

    case _DEF_OUTPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fe:	2301      	movs	r3, #1
 8002700:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
      break;
 8002706:	e027      	b.n	8002758 <gpioPinMode+0xe0>

    case _DEF_OUTPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002708:	2301      	movs	r3, #1
 800270a:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 800270c:	2301      	movs	r3, #1
 800270e:	617b      	str	r3, [r7, #20]
      break;
 8002710:	e022      	b.n	8002758 <gpioPinMode+0xe0>

    case _DEF_OUTPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002712:	2301      	movs	r3, #1
 8002714:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002716:	2302      	movs	r3, #2
 8002718:	617b      	str	r3, [r7, #20]
      break;
 800271a:	e01d      	b.n	8002758 <gpioPinMode+0xe0>

    case _DEF_IT_RISING:
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800271c:	4b1d      	ldr	r3, [pc, #116]	@ (8002794 <gpioPinMode+0x11c>)
 800271e:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	617b      	str	r3, [r7, #20]
      break;
 8002724:	e018      	b.n	8002758 <gpioPinMode+0xe0>

    case _DEF_IT_RISING_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002726:	4b1b      	ldr	r3, [pc, #108]	@ (8002794 <gpioPinMode+0x11c>)
 8002728:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 800272a:	2301      	movs	r3, #1
 800272c:	617b      	str	r3, [r7, #20]
      break;
 800272e:	e013      	b.n	8002758 <gpioPinMode+0xe0>

    case _DEF_IT_RISING_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002730:	4b18      	ldr	r3, [pc, #96]	@ (8002794 <gpioPinMode+0x11c>)
 8002732:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002734:	2302      	movs	r3, #2
 8002736:	617b      	str	r3, [r7, #20]
      break;
 8002738:	e00e      	b.n	8002758 <gpioPinMode+0xe0>

    case _DEF_IT_FALLING:
      GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800273a:	4b17      	ldr	r3, [pc, #92]	@ (8002798 <gpioPinMode+0x120>)
 800273c:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
      break;
 8002742:	e009      	b.n	8002758 <gpioPinMode+0xe0>

    case _DEF_IT_FALLING_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002744:	4b14      	ldr	r3, [pc, #80]	@ (8002798 <gpioPinMode+0x120>)
 8002746:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002748:	2301      	movs	r3, #1
 800274a:	617b      	str	r3, [r7, #20]
      break;
 800274c:	e004      	b.n	8002758 <gpioPinMode+0xe0>

    case _DEF_IT_FALLING_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800274e:	4b12      	ldr	r3, [pc, #72]	@ (8002798 <gpioPinMode+0x120>)
 8002750:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002752:	2302      	movs	r3, #2
 8002754:	617b      	str	r3, [r7, #20]
      break;
 8002756:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 8002758:	79fa      	ldrb	r2, [r7, #7]
 800275a:	4910      	ldr	r1, [pc, #64]	@ (800279c <gpioPinMode+0x124>)
 800275c:	4613      	mov	r3, r2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	3304      	adds	r3, #4
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 800276c:	79fa      	ldrb	r2, [r7, #7]
 800276e:	490b      	ldr	r1, [pc, #44]	@ (800279c <gpioPinMode+0x124>)
 8002770:	4613      	mov	r3, r2
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f107 020c 	add.w	r2, r7, #12
 8002780:	4611      	mov	r1, r2
 8002782:	4618      	mov	r0, r3
 8002784:	f001 fa62 	bl	8003c4c <HAL_GPIO_Init>

  return ret;
 8002788:	7ffb      	ldrb	r3, [r7, #31]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3720      	adds	r7, #32
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	10110000 	.word	0x10110000
 8002798:	10210000 	.word	0x10210000
 800279c:	0800a1d8 	.word	0x0800a1d8

080027a0 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	460a      	mov	r2, r1
 80027aa:	71fb      	strb	r3, [r7, #7]
 80027ac:	4613      	mov	r3, r2
 80027ae:	71bb      	strb	r3, [r7, #6]
  if (ch >= GPIO_MAX_CH)
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d140      	bne.n	8002838 <gpioPinWrite+0x98>
  {
    return;
  }

  if (value)
 80027b6:	79bb      	ldrb	r3, [r7, #6]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d01e      	beq.n	80027fa <gpioPinWrite+0x5a>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 80027bc:	79fa      	ldrb	r2, [r7, #7]
 80027be:	4920      	ldr	r1, [pc, #128]	@ (8002840 <gpioPinWrite+0xa0>)
 80027c0:	4613      	mov	r3, r2
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	79fa      	ldrb	r2, [r7, #7]
 80027ce:	491c      	ldr	r1, [pc, #112]	@ (8002840 <gpioPinWrite+0xa0>)
 80027d0:	4613      	mov	r3, r2
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	4413      	add	r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	3304      	adds	r3, #4
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	b299      	uxth	r1, r3
 80027e0:	79fa      	ldrb	r2, [r7, #7]
 80027e2:	4c17      	ldr	r4, [pc, #92]	@ (8002840 <gpioPinWrite+0xa0>)
 80027e4:	4613      	mov	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4423      	add	r3, r4
 80027ee:	3309      	adds	r3, #9
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	f001 fc81 	bl	80040fa <HAL_GPIO_WritePin>
 80027f8:	e01f      	b.n	800283a <gpioPinWrite+0x9a>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 80027fa:	79fa      	ldrb	r2, [r7, #7]
 80027fc:	4910      	ldr	r1, [pc, #64]	@ (8002840 <gpioPinWrite+0xa0>)
 80027fe:	4613      	mov	r3, r2
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	4413      	add	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	440b      	add	r3, r1
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	79fa      	ldrb	r2, [r7, #7]
 800280c:	490c      	ldr	r1, [pc, #48]	@ (8002840 <gpioPinWrite+0xa0>)
 800280e:	4613      	mov	r3, r2
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	3304      	adds	r3, #4
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	b299      	uxth	r1, r3
 800281e:	79fa      	ldrb	r2, [r7, #7]
 8002820:	4c07      	ldr	r4, [pc, #28]	@ (8002840 <gpioPinWrite+0xa0>)
 8002822:	4613      	mov	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4423      	add	r3, r4
 800282c:	330a      	adds	r3, #10
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	f001 fc62 	bl	80040fa <HAL_GPIO_WritePin>
 8002836:	e000      	b.n	800283a <gpioPinWrite+0x9a>
    return;
 8002838:	bf00      	nop
  }
}
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	bd90      	pop	{r4, r7, pc}
 8002840:	0800a1d8 	.word	0x0800a1d8

08002844 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800284e:	2300      	movs	r3, #0
 8002850:	73fb      	strb	r3, [r7, #15]

  if (ch >= GPIO_MAX_CH)
 8002852:	79fb      	ldrb	r3, [r7, #7]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d001      	beq.n	800285c <gpioPinRead+0x18>
  {
    return false;
 8002858:	2300      	movs	r3, #0
 800285a:	e024      	b.n	80028a6 <gpioPinRead+0x62>
  }

  if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 800285c:	79fa      	ldrb	r2, [r7, #7]
 800285e:	4914      	ldr	r1, [pc, #80]	@ (80028b0 <gpioPinRead+0x6c>)
 8002860:	4613      	mov	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	79fa      	ldrb	r2, [r7, #7]
 800286e:	4910      	ldr	r1, [pc, #64]	@ (80028b0 <gpioPinRead+0x6c>)
 8002870:	4613      	mov	r3, r2
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	4413      	add	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	440b      	add	r3, r1
 800287a:	3304      	adds	r3, #4
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	b29b      	uxth	r3, r3
 8002880:	4619      	mov	r1, r3
 8002882:	f001 fc23 	bl	80040cc <HAL_GPIO_ReadPin>
 8002886:	4603      	mov	r3, r0
 8002888:	4618      	mov	r0, r3
 800288a:	79fa      	ldrb	r2, [r7, #7]
 800288c:	4908      	ldr	r1, [pc, #32]	@ (80028b0 <gpioPinRead+0x6c>)
 800288e:	4613      	mov	r3, r2
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	4413      	add	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	440b      	add	r3, r1
 8002898:	3309      	adds	r3, #9
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	4298      	cmp	r0, r3
 800289e:	d101      	bne.n	80028a4 <gpioPinRead+0x60>
  {
    ret = true;
 80028a0:	2301      	movs	r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80028a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	0800a1d8 	.word	0x0800a1d8

080028b4 <cliGpio>:
}


#ifdef _USE_HW_CLI
void cliGpio(cli_args_t *args)
{
 80028b4:	b590      	push	{r4, r7, lr}
 80028b6:	b087      	sub	sp, #28
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80028bc:	2300      	movs	r3, #0
 80028be:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "show") == true)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d128      	bne.n	800291a <cliGpio+0x66>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	4947      	ldr	r1, [pc, #284]	@ (80029ec <cliGpio+0x138>)
 80028ce:	2000      	movs	r0, #0
 80028d0:	4798      	blx	r3
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d020      	beq.n	800291a <cliGpio+0x66>
  {
    while(cliKeepLoop())
 80028d8:	e018      	b.n	800290c <cliGpio+0x58>
    {
      for (int i=0; i<GPIO_MAX_CH; i++)
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	e00c      	b.n	80028fa <cliGpio+0x46>
      {
        cliPrintf("%d", gpioPinRead(i));
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ffad 	bl	8002844 <gpioPinRead>
 80028ea:	4603      	mov	r3, r0
 80028ec:	4619      	mov	r1, r3
 80028ee:	4840      	ldr	r0, [pc, #256]	@ (80029f0 <cliGpio+0x13c>)
 80028f0:	f7ff fa4e 	bl	8001d90 <cliPrintf>
      for (int i=0; i<GPIO_MAX_CH; i++)
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	3301      	adds	r3, #1
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	ddef      	ble.n	80028e0 <cliGpio+0x2c>
      }
      cliPrintf("\n");
 8002900:	483c      	ldr	r0, [pc, #240]	@ (80029f4 <cliGpio+0x140>)
 8002902:	f7ff fa45 	bl	8001d90 <cliPrintf>
      delay(100);
 8002906:	2064      	movs	r0, #100	@ 0x64
 8002908:	f7fe fcc4 	bl	8001294 <delay>
    while(cliKeepLoop())
 800290c:	f7ff fb34 	bl	8001f78 <cliKeepLoop>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1e1      	bne.n	80028da <cliGpio+0x26>
    }
    ret = true;
 8002916:	2301      	movs	r3, #1
 8002918:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	2b02      	cmp	r3, #2
 8002920:	d123      	bne.n	800296a <cliGpio+0xb6>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	4934      	ldr	r1, [pc, #208]	@ (80029f8 <cliGpio+0x144>)
 8002928:	2000      	movs	r0, #0
 800292a:	4798      	blx	r3
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d01b      	beq.n	800296a <cliGpio+0xb6>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2001      	movs	r0, #1
 8002938:	4798      	blx	r3
 800293a:	4603      	mov	r3, r0
 800293c:	73fb      	strb	r3, [r7, #15]

    while(cliKeepLoop())
 800293e:	e00d      	b.n	800295c <cliGpio+0xa8>
    {
      cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 8002940:	7bfc      	ldrb	r4, [r7, #15]
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	4618      	mov	r0, r3
 8002946:	f7ff ff7d 	bl	8002844 <gpioPinRead>
 800294a:	4603      	mov	r3, r0
 800294c:	461a      	mov	r2, r3
 800294e:	4621      	mov	r1, r4
 8002950:	482a      	ldr	r0, [pc, #168]	@ (80029fc <cliGpio+0x148>)
 8002952:	f7ff fa1d 	bl	8001d90 <cliPrintf>
      delay(100);
 8002956:	2064      	movs	r0, #100	@ 0x64
 8002958:	f7fe fc9c 	bl	8001294 <delay>
    while(cliKeepLoop())
 800295c:	f7ff fb0c 	bl	8001f78 <cliKeepLoop>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1ec      	bne.n	8002940 <cliGpio+0x8c>
    }

    ret = true;
 8002966:	2301      	movs	r3, #1
 8002968:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	2b03      	cmp	r3, #3
 8002970:	d126      	bne.n	80029c0 <cliGpio+0x10c>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	4922      	ldr	r1, [pc, #136]	@ (8002a00 <cliGpio+0x14c>)
 8002978:	2000      	movs	r0, #0
 800297a:	4798      	blx	r3
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d01e      	beq.n	80029c0 <cliGpio+0x10c>
  {
    uint8_t ch;
    uint8_t data;

    ch   = (uint8_t)args->getData(1);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2001      	movs	r0, #1
 8002988:	4798      	blx	r3
 800298a:	4603      	mov	r3, r0
 800298c:	73bb      	strb	r3, [r7, #14]
    data = (uint8_t)args->getData(2);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2002      	movs	r0, #2
 8002994:	4798      	blx	r3
 8002996:	4603      	mov	r3, r0
 8002998:	737b      	strb	r3, [r7, #13]

    gpioPinWrite(ch, data);
 800299a:	7b7b      	ldrb	r3, [r7, #13]
 800299c:	2b00      	cmp	r3, #0
 800299e:	bf14      	ite	ne
 80029a0:	2301      	movne	r3, #1
 80029a2:	2300      	moveq	r3, #0
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	7bbb      	ldrb	r3, [r7, #14]
 80029a8:	4611      	mov	r1, r2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fef8 	bl	80027a0 <gpioPinWrite>

    cliPrintf("gpio write %d : %d\n", ch, data);
 80029b0:	7bbb      	ldrb	r3, [r7, #14]
 80029b2:	7b7a      	ldrb	r2, [r7, #13]
 80029b4:	4619      	mov	r1, r3
 80029b6:	4813      	ldr	r0, [pc, #76]	@ (8002a04 <cliGpio+0x150>)
 80029b8:	f7ff f9ea 	bl	8001d90 <cliPrintf>
    ret = true;
 80029bc:	2301      	movs	r3, #1
 80029be:	75fb      	strb	r3, [r7, #23]
  }

  if (ret != true)
 80029c0:	7dfb      	ldrb	r3, [r7, #23]
 80029c2:	f083 0301 	eor.w	r3, r3, #1
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <cliGpio+0x12e>
  {
    cliPrintf("gpio show\n");
 80029cc:	480e      	ldr	r0, [pc, #56]	@ (8002a08 <cliGpio+0x154>)
 80029ce:	f7ff f9df 	bl	8001d90 <cliPrintf>
    cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 80029d2:	2100      	movs	r1, #0
 80029d4:	480d      	ldr	r0, [pc, #52]	@ (8002a0c <cliGpio+0x158>)
 80029d6:	f7ff f9db 	bl	8001d90 <cliPrintf>
    cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 80029da:	2100      	movs	r1, #0
 80029dc:	480c      	ldr	r0, [pc, #48]	@ (8002a10 <cliGpio+0x15c>)
 80029de:	f7ff f9d7 	bl	8001d90 <cliPrintf>
  }
}
 80029e2:	bf00      	nop
 80029e4:	371c      	adds	r7, #28
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd90      	pop	{r4, r7, pc}
 80029ea:	bf00      	nop
 80029ec:	0800a110 	.word	0x0800a110
 80029f0:	0800a118 	.word	0x0800a118
 80029f4:	0800a11c 	.word	0x0800a11c
 80029f8:	0800a120 	.word	0x0800a120
 80029fc:	0800a128 	.word	0x0800a128
 8002a00:	0800a13c 	.word	0x0800a13c
 8002a04:	0800a144 	.word	0x0800a144
 8002a08:	0800a158 	.word	0x0800a158
 8002a0c:	0800a164 	.word	0x0800a164
 8002a10:	0800a178 	.word	0x0800a178

08002a14 <ledInit>:
static void cliLed(cli_args_t *args);
#endif


bool ledInit(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
  bool ret = true;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a1e:	f107 0308 	add.w	r3, r7, #8
 8002a22:	2200      	movs	r2, #0
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	605a      	str	r2, [r3, #4]
 8002a28:	609a      	str	r2, [r3, #8]
 8002a2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8002aa0 <ledInit+0x8c>)
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	4a1b      	ldr	r2, [pc, #108]	@ (8002aa0 <ledInit+0x8c>)
 8002a32:	f043 0310 	orr.w	r3, r3, #16
 8002a36:	6193      	str	r3, [r2, #24]
 8002a38:	4b19      	ldr	r3, [pc, #100]	@ (8002aa0 <ledInit+0x8c>)
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	f003 0310 	and.w	r3, r3, #16
 8002a40:	607b      	str	r3, [r7, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a44:	2301      	movs	r3, #1
 8002a46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	617b      	str	r3, [r7, #20]

  for (int i=0; i<LED_MAX_CH; i++)
 8002a50:	2300      	movs	r3, #0
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	e017      	b.n	8002a86 <ledInit+0x72>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8002a56:	4a13      	ldr	r2, [pc, #76]	@ (8002aa4 <ledInit+0x90>)
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	889b      	ldrh	r3, [r3, #4]
 8002a60:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8002a62:	4a10      	ldr	r2, [pc, #64]	@ (8002aa4 <ledInit+0x90>)
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a6a:	f107 0208 	add.w	r2, r7, #8
 8002a6e:	4611      	mov	r1, r2
 8002a70:	4618      	mov	r0, r3
 8002a72:	f001 f8eb 	bl	8003c4c <HAL_GPIO_Init>

    ledOff(i);
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 f838 	bl	8002af0 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	3301      	adds	r3, #1
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	dde4      	ble.n	8002a56 <ledInit+0x42>
  }

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 8002a8c:	4906      	ldr	r1, [pc, #24]	@ (8002aa8 <ledInit+0x94>)
 8002a8e:	4807      	ldr	r0, [pc, #28]	@ (8002aac <ledInit+0x98>)
 8002a90:	f7ff fa88 	bl	8001fa4 <cliAdd>
#endif

  return ret;
 8002a94:	7efb      	ldrb	r3, [r7, #27]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	20000010 	.word	0x20000010
 8002aa8:	08002b69 	.word	0x08002b69
 8002aac:	0800a194 	.word	0x0800a194

08002ab0 <ledOn>:

void ledOn(uint8_t ch)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d111      	bne.n	8002ae4 <ledOn+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8002aec <ledOn+0x3c>)
 8002ac4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002ac8:	79fb      	ldrb	r3, [r7, #7]
 8002aca:	4a08      	ldr	r2, [pc, #32]	@ (8002aec <ledOn+0x3c>)
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4413      	add	r3, r2
 8002ad0:	8899      	ldrh	r1, [r3, #4]
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	4a05      	ldr	r2, [pc, #20]	@ (8002aec <ledOn+0x3c>)
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4413      	add	r3, r2
 8002ada:	799b      	ldrb	r3, [r3, #6]
 8002adc:	461a      	mov	r2, r3
 8002ade:	f001 fb0c 	bl	80040fa <HAL_GPIO_WritePin>
 8002ae2:	e000      	b.n	8002ae6 <ledOn+0x36>
  if (ch >= LED_MAX_CH) return;
 8002ae4:	bf00      	nop
}
 8002ae6:	3708      	adds	r7, #8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000010 	.word	0x20000010

08002af0 <ledOff>:

void ledOff(uint8_t ch)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d111      	bne.n	8002b24 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8002b00:	79fb      	ldrb	r3, [r7, #7]
 8002b02:	4a0a      	ldr	r2, [pc, #40]	@ (8002b2c <ledOff+0x3c>)
 8002b04:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	4a08      	ldr	r2, [pc, #32]	@ (8002b2c <ledOff+0x3c>)
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4413      	add	r3, r2
 8002b10:	8899      	ldrh	r1, [r3, #4]
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	4a05      	ldr	r2, [pc, #20]	@ (8002b2c <ledOff+0x3c>)
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	4413      	add	r3, r2
 8002b1a:	79db      	ldrb	r3, [r3, #7]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	f001 faec 	bl	80040fa <HAL_GPIO_WritePin>
 8002b22:	e000      	b.n	8002b26 <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8002b24:	bf00      	nop
}
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20000010 	.word	0x20000010

08002b30 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8002b3a:	79fb      	ldrb	r3, [r7, #7]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d10d      	bne.n	8002b5c <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	4a08      	ldr	r2, [pc, #32]	@ (8002b64 <ledToggle+0x34>)
 8002b44:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	4906      	ldr	r1, [pc, #24]	@ (8002b64 <ledToggle+0x34>)
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	440b      	add	r3, r1
 8002b50:	889b      	ldrh	r3, [r3, #4]
 8002b52:	4619      	mov	r1, r3
 8002b54:	4610      	mov	r0, r2
 8002b56:	f001 fae8 	bl	800412a <HAL_GPIO_TogglePin>
 8002b5a:	e000      	b.n	8002b5e <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 8002b5c:	bf00      	nop
}
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20000010 	.word	0x20000010

08002b68 <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002b70:	2300      	movs	r3, #0
 8002b72:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	881b      	ldrh	r3, [r3, #0]
 8002b78:	2b03      	cmp	r3, #3
 8002b7a:	d133      	bne.n	8002be4 <cliLed+0x7c>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	491f      	ldr	r1, [pc, #124]	@ (8002c00 <cliLed+0x98>)
 8002b82:	2000      	movs	r0, #0
 8002b84:	4798      	blx	r3
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d02b      	beq.n	8002be4 <cliLed+0x7c>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = (uint8_t)args->getData(1);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	2001      	movs	r0, #1
 8002b92:	4798      	blx	r3
 8002b94:	4603      	mov	r3, r0
 8002b96:	75bb      	strb	r3, [r7, #22]
    toggle_time = (uint32_t)args->getData(2);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	2002      	movs	r0, #2
 8002b9e:	4798      	blx	r3
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 8002ba4:	7dbb      	ldrb	r3, [r7, #22]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <cliLed+0x48>
    {
      led_ch--;
 8002baa:	7dbb      	ldrb	r3, [r7, #22]
 8002bac:	3b01      	subs	r3, #1
 8002bae:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 8002bb0:	f7fe fb9a 	bl	80012e8 <millis>
 8002bb4:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 8002bb6:	e00e      	b.n	8002bd6 <cliLed+0x6e>
    {
      if (millis()-pre_time >= toggle_time)
 8002bb8:	f7fe fb96 	bl	80012e8 <millis>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d806      	bhi.n	8002bd6 <cliLed+0x6e>
      {
        pre_time = millis();
 8002bc8:	f7fe fb8e 	bl	80012e8 <millis>
 8002bcc:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 8002bce:	7dbb      	ldrb	r3, [r7, #22]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff ffad 	bl	8002b30 <ledToggle>
    while(cliKeepLoop())
 8002bd6:	f7ff f9cf 	bl	8001f78 <cliKeepLoop>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1eb      	bne.n	8002bb8 <cliLed+0x50>
      }
    }

    ret = true;
 8002be0:	2301      	movs	r3, #1
 8002be2:	75fb      	strb	r3, [r7, #23]
  }


  if (ret != true)
 8002be4:	7dfb      	ldrb	r3, [r7, #23]
 8002be6:	f083 0301 	eor.w	r3, r3, #1
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	4804      	ldr	r0, [pc, #16]	@ (8002c04 <cliLed+0x9c>)
 8002bf4:	f7ff f8cc 	bl	8001d90 <cliPrintf>
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	3718      	adds	r7, #24
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	0800a198 	.word	0x0800a198
 8002c04:	0800a1a0 	.word	0x0800a1a0

08002c08 <uartInit>:
DMA_HandleTypeDef hdma_usart2_rx;
#endif


bool uartInit(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 8002c0e:	2300      	movs	r3, #0
 8002c10:	607b      	str	r3, [r7, #4]
 8002c12:	e007      	b.n	8002c24 <uartInit+0x1c>
  {
    is_open[i] = false;
 8002c14:	4a08      	ldr	r2, [pc, #32]	@ (8002c38 <uartInit+0x30>)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4413      	add	r3, r2
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	3301      	adds	r3, #1
 8002c22:	607b      	str	r3, [r7, #4]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	ddf4      	ble.n	8002c14 <uartInit+0xc>
  }

  return true;
 8002c2a:	2301      	movs	r3, #1
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bc80      	pop	{r7}
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	20000700 	.word	0x20000700

08002c3c <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	4603      	mov	r3, r0
 8002c44:	6039      	str	r1, [r7, #0]
 8002c46:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	75fb      	strb	r3, [r7, #23]

  switch(ch)
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d07c      	beq.n	8002d4c <uartOpen+0x110>
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	f300 80e8 	bgt.w	8002e28 <uartOpen+0x1ec>
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d002      	beq.n	8002c62 <uartOpen+0x26>
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d007      	beq.n	8002c70 <uartOpen+0x34>
 8002c60:	e0e2      	b.n	8002e28 <uartOpen+0x1ec>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 8002c62:	79fb      	ldrb	r3, [r7, #7]
 8002c64:	4a73      	ldr	r2, [pc, #460]	@ (8002e34 <uartOpen+0x1f8>)
 8002c66:	2101      	movs	r1, #1
 8002c68:	54d1      	strb	r1, [r2, r3]
      ret = true;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	75fb      	strb	r3, [r7, #23]
      break;
 8002c6e:	e0db      	b.n	8002e28 <uartOpen+0x1ec>

    case _DEF_UART2:
      #ifdef _USE_UART2
      huart1.Instance         = USART1;
 8002c70:	4b71      	ldr	r3, [pc, #452]	@ (8002e38 <uartOpen+0x1fc>)
 8002c72:	4a72      	ldr	r2, [pc, #456]	@ (8002e3c <uartOpen+0x200>)
 8002c74:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate    = baud;
 8002c76:	4a70      	ldr	r2, [pc, #448]	@ (8002e38 <uartOpen+0x1fc>)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength  = UART_WORDLENGTH_8B;
 8002c7c:	4b6e      	ldr	r3, [pc, #440]	@ (8002e38 <uartOpen+0x1fc>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits    = UART_STOPBITS_1;
 8002c82:	4b6d      	ldr	r3, [pc, #436]	@ (8002e38 <uartOpen+0x1fc>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity      = UART_PARITY_NONE;
 8002c88:	4b6b      	ldr	r3, [pc, #428]	@ (8002e38 <uartOpen+0x1fc>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode        = UART_MODE_TX_RX;
 8002c8e:	4b6a      	ldr	r3, [pc, #424]	@ (8002e38 <uartOpen+0x1fc>)
 8002c90:	220c      	movs	r2, #12
 8002c92:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 8002c94:	4b68      	ldr	r3, [pc, #416]	@ (8002e38 <uartOpen+0x1fc>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 8002c9a:	4b67      	ldr	r3, [pc, #412]	@ (8002e38 <uartOpen+0x1fc>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8002ca0:	4865      	ldr	r0, [pc, #404]	@ (8002e38 <uartOpen+0x1fc>)
 8002ca2:	f001 ff17 	bl	8004ad4 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 8002ca6:	79fb      	ldrb	r3, [r7, #7]
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	4a65      	ldr	r2, [pc, #404]	@ (8002e40 <uartOpen+0x204>)
 8002cac:	4413      	add	r3, r2
 8002cae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cb2:	4964      	ldr	r1, [pc, #400]	@ (8002e44 <uartOpen+0x208>)
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fe fcf2 	bl	800169e <qbufferCreate>

      __HAL_RCC_DMA1_CLK_ENABLE();
 8002cba:	4b63      	ldr	r3, [pc, #396]	@ (8002e48 <uartOpen+0x20c>)
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	4a62      	ldr	r2, [pc, #392]	@ (8002e48 <uartOpen+0x20c>)
 8002cc0:	f043 0301 	orr.w	r3, r3, #1
 8002cc4:	6153      	str	r3, [r2, #20]
 8002cc6:	4b60      	ldr	r3, [pc, #384]	@ (8002e48 <uartOpen+0x20c>)
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f003 0301 	and.w	r3, r3, #1
 8002cce:	613b      	str	r3, [r7, #16]
 8002cd0:	693b      	ldr	r3, [r7, #16]
      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	200f      	movs	r0, #15
 8002cd8:	f000 fc75 	bl	80035c6 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002cdc:	200f      	movs	r0, #15
 8002cde:	f000 fc8e 	bl	80035fe <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ce2:	4855      	ldr	r0, [pc, #340]	@ (8002e38 <uartOpen+0x1fc>)
 8002ce4:	f001 fea6 	bl	8004a34 <HAL_UART_Init>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <uartOpen+0xb8>
      {
        ret = false;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	75fb      	strb	r3, [r7, #23]

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
      #endif
      break;
 8002cf2:	e099      	b.n	8002e28 <uartOpen+0x1ec>
        ret = true;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 8002cf8:	79fb      	ldrb	r3, [r7, #7]
 8002cfa:	4a4e      	ldr	r2, [pc, #312]	@ (8002e34 <uartOpen+0x1f8>)
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8002d00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d04:	494f      	ldr	r1, [pc, #316]	@ (8002e44 <uartOpen+0x208>)
 8002d06:	484c      	ldr	r0, [pc, #304]	@ (8002e38 <uartOpen+0x1fc>)
 8002d08:	f001 ff99 	bl	8004c3e <HAL_UART_Receive_DMA>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <uartOpen+0xda>
          ret = false;
 8002d12:	2300      	movs	r3, #0
 8002d14:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	4a49      	ldr	r2, [pc, #292]	@ (8002e40 <uartOpen+0x204>)
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3308      	adds	r3, #8
 8002d20:	6819      	ldr	r1, [r3, #0]
 8002d22:	4b4a      	ldr	r3, [pc, #296]	@ (8002e4c <uartOpen+0x210>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	79fb      	ldrb	r3, [r7, #7]
 8002d2a:	1a8a      	subs	r2, r1, r2
 8002d2c:	4944      	ldr	r1, [pc, #272]	@ (8002e40 <uartOpen+0x204>)
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	440b      	add	r3, r1
 8002d32:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8002d34:	79fa      	ldrb	r2, [r7, #7]
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	4941      	ldr	r1, [pc, #260]	@ (8002e40 <uartOpen+0x204>)
 8002d3a:	0112      	lsls	r2, r2, #4
 8002d3c:	440a      	add	r2, r1
 8002d3e:	6812      	ldr	r2, [r2, #0]
 8002d40:	493f      	ldr	r1, [pc, #252]	@ (8002e40 <uartOpen+0x204>)
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	440b      	add	r3, r1
 8002d46:	3304      	adds	r3, #4
 8002d48:	601a      	str	r2, [r3, #0]
      break;
 8002d4a:	e06d      	b.n	8002e28 <uartOpen+0x1ec>

    case _DEF_UART3:
      #ifdef _USE_UART3
      huart2.Instance = USART2;
 8002d4c:	4b40      	ldr	r3, [pc, #256]	@ (8002e50 <uartOpen+0x214>)
 8002d4e:	4a41      	ldr	r2, [pc, #260]	@ (8002e54 <uartOpen+0x218>)
 8002d50:	601a      	str	r2, [r3, #0]
      huart2.Init.BaudRate = baud;
 8002d52:	4a3f      	ldr	r2, [pc, #252]	@ (8002e50 <uartOpen+0x214>)
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	6053      	str	r3, [r2, #4]
      huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d58:	4b3d      	ldr	r3, [pc, #244]	@ (8002e50 <uartOpen+0x214>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	609a      	str	r2, [r3, #8]
      huart2.Init.StopBits = UART_STOPBITS_1;
 8002d5e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e50 <uartOpen+0x214>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	60da      	str	r2, [r3, #12]
      huart2.Init.Parity = UART_PARITY_NONE;
 8002d64:	4b3a      	ldr	r3, [pc, #232]	@ (8002e50 <uartOpen+0x214>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	611a      	str	r2, [r3, #16]
      huart2.Init.Mode = UART_MODE_TX_RX;
 8002d6a:	4b39      	ldr	r3, [pc, #228]	@ (8002e50 <uartOpen+0x214>)
 8002d6c:	220c      	movs	r2, #12
 8002d6e:	615a      	str	r2, [r3, #20]
      huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d70:	4b37      	ldr	r3, [pc, #220]	@ (8002e50 <uartOpen+0x214>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	619a      	str	r2, [r3, #24]
      huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d76:	4b36      	ldr	r3, [pc, #216]	@ (8002e50 <uartOpen+0x214>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	61da      	str	r2, [r3, #28]
      HAL_UART_DeInit(&huart2);
 8002d7c:	4834      	ldr	r0, [pc, #208]	@ (8002e50 <uartOpen+0x214>)
 8002d7e:	f001 fea9 	bl	8004ad4 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf2[0], 256);
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	4a2e      	ldr	r2, [pc, #184]	@ (8002e40 <uartOpen+0x204>)
 8002d88:	4413      	add	r3, r2
 8002d8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d8e:	4932      	ldr	r1, [pc, #200]	@ (8002e58 <uartOpen+0x21c>)
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fe fc84 	bl	800169e <qbufferCreate>

      __HAL_RCC_DMA1_CLK_ENABLE();
 8002d96:	4b2c      	ldr	r3, [pc, #176]	@ (8002e48 <uartOpen+0x20c>)
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	4a2b      	ldr	r2, [pc, #172]	@ (8002e48 <uartOpen+0x20c>)
 8002d9c:	f043 0301 	orr.w	r3, r3, #1
 8002da0:	6153      	str	r3, [r2, #20]
 8002da2:	4b29      	ldr	r3, [pc, #164]	@ (8002e48 <uartOpen+0x20c>)
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	68fb      	ldr	r3, [r7, #12]
      HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002dae:	2200      	movs	r2, #0
 8002db0:	2100      	movs	r1, #0
 8002db2:	2010      	movs	r0, #16
 8002db4:	f000 fc07 	bl	80035c6 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8002db8:	2010      	movs	r0, #16
 8002dba:	f000 fc20 	bl	80035fe <HAL_NVIC_EnableIRQ>

      if (HAL_UART_Init(&huart2) != HAL_OK)
 8002dbe:	4824      	ldr	r0, [pc, #144]	@ (8002e50 <uartOpen+0x214>)
 8002dc0:	f001 fe38 	bl	8004a34 <HAL_UART_Init>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d002      	beq.n	8002dd0 <uartOpen+0x194>
      {
        ret = false;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	75fb      	strb	r3, [r7, #23]

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
      #endif
      break;
 8002dce:	e02a      	b.n	8002e26 <uartOpen+0x1ea>
        ret = true;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	4a17      	ldr	r2, [pc, #92]	@ (8002e34 <uartOpen+0x1f8>)
 8002dd8:	2101      	movs	r1, #1
 8002dda:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart2, (uint8_t *)&rx_buf2[0], 256) != HAL_OK)
 8002ddc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002de0:	491d      	ldr	r1, [pc, #116]	@ (8002e58 <uartOpen+0x21c>)
 8002de2:	481b      	ldr	r0, [pc, #108]	@ (8002e50 <uartOpen+0x214>)
 8002de4:	f001 ff2b 	bl	8004c3e <HAL_UART_Receive_DMA>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <uartOpen+0x1b6>
          ret = false;
 8002dee:	2300      	movs	r3, #0
 8002df0:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR;
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	4a12      	ldr	r2, [pc, #72]	@ (8002e40 <uartOpen+0x204>)
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	4413      	add	r3, r2
 8002dfa:	3308      	adds	r3, #8
 8002dfc:	6819      	ldr	r1, [r3, #0]
 8002dfe:	4b17      	ldr	r3, [pc, #92]	@ (8002e5c <uartOpen+0x220>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	79fb      	ldrb	r3, [r7, #7]
 8002e06:	1a8a      	subs	r2, r1, r2
 8002e08:	490d      	ldr	r1, [pc, #52]	@ (8002e40 <uartOpen+0x204>)
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	440b      	add	r3, r1
 8002e0e:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8002e10:	79fa      	ldrb	r2, [r7, #7]
 8002e12:	79fb      	ldrb	r3, [r7, #7]
 8002e14:	490a      	ldr	r1, [pc, #40]	@ (8002e40 <uartOpen+0x204>)
 8002e16:	0112      	lsls	r2, r2, #4
 8002e18:	440a      	add	r2, r1
 8002e1a:	6812      	ldr	r2, [r2, #0]
 8002e1c:	4908      	ldr	r1, [pc, #32]	@ (8002e40 <uartOpen+0x204>)
 8002e1e:	011b      	lsls	r3, r3, #4
 8002e20:	440b      	add	r3, r1
 8002e22:	3304      	adds	r3, #4
 8002e24:	601a      	str	r2, [r3, #0]
      break;
 8002e26:	bf00      	nop
  }

  return ret;
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3718      	adds	r7, #24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000700 	.word	0x20000700
 8002e38:	20000924 	.word	0x20000924
 8002e3c:	40013800 	.word	0x40013800
 8002e40:	20000704 	.word	0x20000704
 8002e44:	20000724 	.word	0x20000724
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	200009b4 	.word	0x200009b4
 8002e50:	2000096c 	.word	0x2000096c
 8002e54:	40004400 	.word	0x40004400
 8002e58:	20000824 	.word	0x20000824
 8002e5c:	200009f8 	.word	0x200009f8

08002e60 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8002e6e:	79fb      	ldrb	r3, [r7, #7]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d01d      	beq.n	8002eb0 <uartAvailable+0x50>
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	dc34      	bgt.n	8002ee2 <uartAvailable+0x82>
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d031      	beq.n	8002ee0 <uartAvailable+0x80>
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d130      	bne.n	8002ee2 <uartAvailable+0x82>
      //ret = cdcAvailable();
      break;

    case _DEF_UART2:
      #ifdef _USE_UART2
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR);
 8002e80:	79fb      	ldrb	r3, [r7, #7]
 8002e82:	4a1a      	ldr	r2, [pc, #104]	@ (8002eec <uartAvailable+0x8c>)
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	4413      	add	r3, r2
 8002e88:	3308      	adds	r3, #8
 8002e8a:	6819      	ldr	r1, [r3, #0]
 8002e8c:	4b18      	ldr	r3, [pc, #96]	@ (8002ef0 <uartAvailable+0x90>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	79fb      	ldrb	r3, [r7, #7]
 8002e94:	1a8a      	subs	r2, r1, r2
 8002e96:	4915      	ldr	r1, [pc, #84]	@ (8002eec <uartAvailable+0x8c>)
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	440b      	add	r3, r1
 8002e9c:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	4a12      	ldr	r2, [pc, #72]	@ (8002eec <uartAvailable+0x8c>)
 8002ea4:	4413      	add	r3, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe fc13 	bl	80016d2 <qbufferAvailable>
 8002eac:	60f8      	str	r0, [r7, #12]
      #endif
      break;
 8002eae:	e018      	b.n	8002ee2 <uartAvailable+0x82>

    case _DEF_UART3:
      #ifdef _USE_UART3
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR);
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	4a0e      	ldr	r2, [pc, #56]	@ (8002eec <uartAvailable+0x8c>)
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3308      	adds	r3, #8
 8002eba:	6819      	ldr	r1, [r3, #0]
 8002ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef4 <uartAvailable+0x94>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	1a8a      	subs	r2, r1, r2
 8002ec6:	4909      	ldr	r1, [pc, #36]	@ (8002eec <uartAvailable+0x8c>)
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	440b      	add	r3, r1
 8002ecc:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8002ece:	79fb      	ldrb	r3, [r7, #7]
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	4a06      	ldr	r2, [pc, #24]	@ (8002eec <uartAvailable+0x8c>)
 8002ed4:	4413      	add	r3, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fe fbfb 	bl	80016d2 <qbufferAvailable>
 8002edc:	60f8      	str	r0, [r7, #12]
      #endif
      break;
 8002ede:	e000      	b.n	8002ee2 <uartAvailable+0x82>
      break;
 8002ee0:	bf00      	nop
  }

  return ret;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	20000704 	.word	0x20000704
 8002ef0:	200009b4 	.word	0x200009b4
 8002ef4:	200009f8 	.word	0x200009f8

08002ef8 <uartWrite>:

  return ret;
}

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  switch(ch)
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d014      	beq.n	8002f3a <uartWrite+0x42>
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	dc26      	bgt.n	8002f62 <uartWrite+0x6a>
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d01f      	beq.n	8002f58 <uartWrite+0x60>
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d122      	bne.n	8002f62 <uartWrite+0x6a>
      //ret = cdcWrite(p_data, length);
      break;

    case _DEF_UART2:
      #ifdef _USE_UART2
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	2364      	movs	r3, #100	@ 0x64
 8002f22:	68b9      	ldr	r1, [r7, #8]
 8002f24:	4811      	ldr	r0, [pc, #68]	@ (8002f6c <uartWrite+0x74>)
 8002f26:	f001 fe07 	bl	8004b38 <HAL_UART_Transmit>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8002f2e:	7cfb      	ldrb	r3, [r7, #19]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d113      	bne.n	8002f5c <uartWrite+0x64>
      {
        ret = length;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	617b      	str	r3, [r7, #20]
      }
      #endif
      break;
 8002f38:	e010      	b.n	8002f5c <uartWrite+0x64>

    case _DEF_UART3:
      #ifdef _USE_UART3
      status = HAL_UART_Transmit(&huart2, p_data, length, 100);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	2364      	movs	r3, #100	@ 0x64
 8002f40:	68b9      	ldr	r1, [r7, #8]
 8002f42:	480b      	ldr	r0, [pc, #44]	@ (8002f70 <uartWrite+0x78>)
 8002f44:	f001 fdf8 	bl	8004b38 <HAL_UART_Transmit>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8002f4c:	7cfb      	ldrb	r3, [r7, #19]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <uartWrite+0x68>
      {
        ret = length;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	617b      	str	r3, [r7, #20]
      }
      #endif
      break;
 8002f56:	e003      	b.n	8002f60 <uartWrite+0x68>
      break;
 8002f58:	bf00      	nop
 8002f5a:	e002      	b.n	8002f62 <uartWrite+0x6a>
      break;
 8002f5c:	bf00      	nop
 8002f5e:	e000      	b.n	8002f62 <uartWrite+0x6a>
      break;
 8002f60:	bf00      	nop
  }

  return ret;
 8002f62:	697b      	ldr	r3, [r7, #20]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3718      	adds	r7, #24
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20000924 	.word	0x20000924
 8002f70:	2000096c 	.word	0x2000096c

08002f74 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8002f74:	b40e      	push	{r1, r2, r3}
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b0c7      	sub	sp, #284	@ 0x11c
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002f82:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8002f86:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8002f88:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8002f8c:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002f90:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f94:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8002f96:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002f9a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f9e:	f107 0010 	add.w	r0, r7, #16
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8002fa8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002fac:	f004 f9d4 	bl	8007358 <vsniprintf>
 8002fb0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8002fb4:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002fb8:	f107 0110 	add.w	r1, r7, #16
 8002fbc:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002fc0:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff ff96 	bl	8002ef8 <uartWrite>
 8002fcc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

  va_end(args);


  return ret;
 8002fd0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fe0:	b003      	add	sp, #12
 8002fe2:	4770      	bx	lr

08002fe4 <HAL_UART_ErrorCallback>:
}


#ifdef _USE_UART2
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b083      	sub	sp, #12
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bc80      	pop	{r7}
 8002ff4:	4770      	bx	lr

08002ff6 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ff6:	b480      	push	{r7}
 8002ff8:	b083      	sub	sp, #12
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	6078      	str	r0, [r7, #4]
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);

    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 8002ffe:	bf00      	nop
 8003000:	370c      	adds	r7, #12
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr

08003008 <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08a      	sub	sp, #40	@ 0x28
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003010:	f107 0318 	add.w	r3, r7, #24
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a65      	ldr	r2, [pc, #404]	@ (80031b8 <HAL_UART_MspInit+0x1b0>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d160      	bne.n	80030ea <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003028:	4b64      	ldr	r3, [pc, #400]	@ (80031bc <HAL_UART_MspInit+0x1b4>)
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	4a63      	ldr	r2, [pc, #396]	@ (80031bc <HAL_UART_MspInit+0x1b4>)
 800302e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003032:	6193      	str	r3, [r2, #24]
 8003034:	4b61      	ldr	r3, [pc, #388]	@ (80031bc <HAL_UART_MspInit+0x1b4>)
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003040:	4b5e      	ldr	r3, [pc, #376]	@ (80031bc <HAL_UART_MspInit+0x1b4>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	4a5d      	ldr	r2, [pc, #372]	@ (80031bc <HAL_UART_MspInit+0x1b4>)
 8003046:	f043 0304 	orr.w	r3, r3, #4
 800304a:	6193      	str	r3, [r2, #24]
 800304c:	4b5b      	ldr	r3, [pc, #364]	@ (80031bc <HAL_UART_MspInit+0x1b4>)
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003058:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800305c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800305e:	2302      	movs	r3, #2
 8003060:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003062:	2303      	movs	r3, #3
 8003064:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003066:	f107 0318 	add.w	r3, r7, #24
 800306a:	4619      	mov	r1, r3
 800306c:	4854      	ldr	r0, [pc, #336]	@ (80031c0 <HAL_UART_MspInit+0x1b8>)
 800306e:	f000 fded 	bl	8003c4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003072:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003078:	2300      	movs	r3, #0
 800307a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307c:	2300      	movs	r3, #0
 800307e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003080:	f107 0318 	add.w	r3, r7, #24
 8003084:	4619      	mov	r1, r3
 8003086:	484e      	ldr	r0, [pc, #312]	@ (80031c0 <HAL_UART_MspInit+0x1b8>)
 8003088:	f000 fde0 	bl	8003c4c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800308c:	4b4d      	ldr	r3, [pc, #308]	@ (80031c4 <HAL_UART_MspInit+0x1bc>)
 800308e:	4a4e      	ldr	r2, [pc, #312]	@ (80031c8 <HAL_UART_MspInit+0x1c0>)
 8003090:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003092:	4b4c      	ldr	r3, [pc, #304]	@ (80031c4 <HAL_UART_MspInit+0x1bc>)
 8003094:	2200      	movs	r2, #0
 8003096:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003098:	4b4a      	ldr	r3, [pc, #296]	@ (80031c4 <HAL_UART_MspInit+0x1bc>)
 800309a:	2200      	movs	r2, #0
 800309c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800309e:	4b49      	ldr	r3, [pc, #292]	@ (80031c4 <HAL_UART_MspInit+0x1bc>)
 80030a0:	2280      	movs	r2, #128	@ 0x80
 80030a2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030a4:	4b47      	ldr	r3, [pc, #284]	@ (80031c4 <HAL_UART_MspInit+0x1bc>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030aa:	4b46      	ldr	r3, [pc, #280]	@ (80031c4 <HAL_UART_MspInit+0x1bc>)
 80030ac:	2200      	movs	r2, #0
 80030ae:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80030b0:	4b44      	ldr	r3, [pc, #272]	@ (80031c4 <HAL_UART_MspInit+0x1bc>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030b6:	4b43      	ldr	r3, [pc, #268]	@ (80031c4 <HAL_UART_MspInit+0x1bc>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80030bc:	4841      	ldr	r0, [pc, #260]	@ (80031c4 <HAL_UART_MspInit+0x1bc>)
 80030be:	f000 fac7 	bl	8003650 <HAL_DMA_Init>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d001      	beq.n	80030cc <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80030c8:	f7fe f95a 	bl	8001380 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a3d      	ldr	r2, [pc, #244]	@ (80031c4 <HAL_UART_MspInit+0x1bc>)
 80030d0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80030d2:	4a3c      	ldr	r2, [pc, #240]	@ (80031c4 <HAL_UART_MspInit+0x1bc>)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80030d8:	2200      	movs	r2, #0
 80030da:	2100      	movs	r1, #0
 80030dc:	2025      	movs	r0, #37	@ 0x25
 80030de:	f000 fa72 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80030e2:	2025      	movs	r0, #37	@ 0x25
 80030e4:	f000 fa8b 	bl	80035fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80030e8:	e062      	b.n	80031b0 <HAL_UART_MspInit+0x1a8>
  else if(uartHandle->Instance==USART2)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a37      	ldr	r2, [pc, #220]	@ (80031cc <HAL_UART_MspInit+0x1c4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d15d      	bne.n	80031b0 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80030f4:	4b31      	ldr	r3, [pc, #196]	@ (80031bc <HAL_UART_MspInit+0x1b4>)
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	4a30      	ldr	r2, [pc, #192]	@ (80031bc <HAL_UART_MspInit+0x1b4>)
 80030fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030fe:	61d3      	str	r3, [r2, #28]
 8003100:	4b2e      	ldr	r3, [pc, #184]	@ (80031bc <HAL_UART_MspInit+0x1b4>)
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800310c:	4b2b      	ldr	r3, [pc, #172]	@ (80031bc <HAL_UART_MspInit+0x1b4>)
 800310e:	699b      	ldr	r3, [r3, #24]
 8003110:	4a2a      	ldr	r2, [pc, #168]	@ (80031bc <HAL_UART_MspInit+0x1b4>)
 8003112:	f043 0304 	orr.w	r3, r3, #4
 8003116:	6193      	str	r3, [r2, #24]
 8003118:	4b28      	ldr	r3, [pc, #160]	@ (80031bc <HAL_UART_MspInit+0x1b4>)
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	60bb      	str	r3, [r7, #8]
 8003122:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003124:	2304      	movs	r3, #4
 8003126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003128:	2302      	movs	r3, #2
 800312a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800312c:	2303      	movs	r3, #3
 800312e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003130:	f107 0318 	add.w	r3, r7, #24
 8003134:	4619      	mov	r1, r3
 8003136:	4822      	ldr	r0, [pc, #136]	@ (80031c0 <HAL_UART_MspInit+0x1b8>)
 8003138:	f000 fd88 	bl	8003c4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800313c:	2308      	movs	r3, #8
 800313e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003140:	2300      	movs	r3, #0
 8003142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	2300      	movs	r3, #0
 8003146:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003148:	f107 0318 	add.w	r3, r7, #24
 800314c:	4619      	mov	r1, r3
 800314e:	481c      	ldr	r0, [pc, #112]	@ (80031c0 <HAL_UART_MspInit+0x1b8>)
 8003150:	f000 fd7c 	bl	8003c4c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003154:	4b1e      	ldr	r3, [pc, #120]	@ (80031d0 <HAL_UART_MspInit+0x1c8>)
 8003156:	4a1f      	ldr	r2, [pc, #124]	@ (80031d4 <HAL_UART_MspInit+0x1cc>)
 8003158:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800315a:	4b1d      	ldr	r3, [pc, #116]	@ (80031d0 <HAL_UART_MspInit+0x1c8>)
 800315c:	2200      	movs	r2, #0
 800315e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003160:	4b1b      	ldr	r3, [pc, #108]	@ (80031d0 <HAL_UART_MspInit+0x1c8>)
 8003162:	2200      	movs	r2, #0
 8003164:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003166:	4b1a      	ldr	r3, [pc, #104]	@ (80031d0 <HAL_UART_MspInit+0x1c8>)
 8003168:	2280      	movs	r2, #128	@ 0x80
 800316a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800316c:	4b18      	ldr	r3, [pc, #96]	@ (80031d0 <HAL_UART_MspInit+0x1c8>)
 800316e:	2200      	movs	r2, #0
 8003170:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003172:	4b17      	ldr	r3, [pc, #92]	@ (80031d0 <HAL_UART_MspInit+0x1c8>)
 8003174:	2200      	movs	r2, #0
 8003176:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003178:	4b15      	ldr	r3, [pc, #84]	@ (80031d0 <HAL_UART_MspInit+0x1c8>)
 800317a:	2200      	movs	r2, #0
 800317c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800317e:	4b14      	ldr	r3, [pc, #80]	@ (80031d0 <HAL_UART_MspInit+0x1c8>)
 8003180:	2200      	movs	r2, #0
 8003182:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003184:	4812      	ldr	r0, [pc, #72]	@ (80031d0 <HAL_UART_MspInit+0x1c8>)
 8003186:	f000 fa63 	bl	8003650 <HAL_DMA_Init>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8003190:	f7fe f8f6 	bl	8001380 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a0e      	ldr	r2, [pc, #56]	@ (80031d0 <HAL_UART_MspInit+0x1c8>)
 8003198:	63da      	str	r2, [r3, #60]	@ 0x3c
 800319a:	4a0d      	ldr	r2, [pc, #52]	@ (80031d0 <HAL_UART_MspInit+0x1c8>)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80031a0:	2200      	movs	r2, #0
 80031a2:	2100      	movs	r1, #0
 80031a4:	2026      	movs	r0, #38	@ 0x26
 80031a6:	f000 fa0e 	bl	80035c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031aa:	2026      	movs	r0, #38	@ 0x26
 80031ac:	f000 fa27 	bl	80035fe <HAL_NVIC_EnableIRQ>
}
 80031b0:	bf00      	nop
 80031b2:	3728      	adds	r7, #40	@ 0x28
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	40013800 	.word	0x40013800
 80031bc:	40021000 	.word	0x40021000
 80031c0:	40010800 	.word	0x40010800
 80031c4:	200009b4 	.word	0x200009b4
 80031c8:	40020058 	.word	0x40020058
 80031cc:	40004400 	.word	0x40004400
 80031d0:	200009f8 	.word	0x200009f8
 80031d4:	4002006c 	.word	0x4002006c

080031d8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a18      	ldr	r2, [pc, #96]	@ (8003248 <HAL_UART_MspDeInit+0x70>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d113      	bne.n	8003212 <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80031ea:	4b18      	ldr	r3, [pc, #96]	@ (800324c <HAL_UART_MspDeInit+0x74>)
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	4a17      	ldr	r2, [pc, #92]	@ (800324c <HAL_UART_MspDeInit+0x74>)
 80031f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80031f4:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80031f6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80031fa:	4815      	ldr	r0, [pc, #84]	@ (8003250 <HAL_UART_MspDeInit+0x78>)
 80031fc:	f000 feaa 	bl	8003f54 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003204:	4618      	mov	r0, r3
 8003206:	f000 fa7d 	bl	8003704 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800320a:	2025      	movs	r0, #37	@ 0x25
 800320c:	f000 fa05 	bl	800361a <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8003210:	e016      	b.n	8003240 <HAL_UART_MspDeInit+0x68>
  else if(uartHandle->Instance==USART2)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a0f      	ldr	r2, [pc, #60]	@ (8003254 <HAL_UART_MspDeInit+0x7c>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d111      	bne.n	8003240 <HAL_UART_MspDeInit+0x68>
    __HAL_RCC_USART2_CLK_DISABLE();
 800321c:	4b0b      	ldr	r3, [pc, #44]	@ (800324c <HAL_UART_MspDeInit+0x74>)
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	4a0a      	ldr	r2, [pc, #40]	@ (800324c <HAL_UART_MspDeInit+0x74>)
 8003222:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003226:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8003228:	210c      	movs	r1, #12
 800322a:	4809      	ldr	r0, [pc, #36]	@ (8003250 <HAL_UART_MspDeInit+0x78>)
 800322c:	f000 fe92 	bl	8003f54 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fa65 	bl	8003704 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800323a:	2026      	movs	r0, #38	@ 0x26
 800323c:	f000 f9ed 	bl	800361a <HAL_NVIC_DisableIRQ>
}
 8003240:	bf00      	nop
 8003242:	3708      	adds	r7, #8
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40013800 	.word	0x40013800
 800324c:	40021000 	.word	0x40021000
 8003250:	40010800 	.word	0x40010800
 8003254:	40004400 	.word	0x40004400

08003258 <hwInit>:


#include "hw.h"

void hwInit(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
//  iwdgInit();
//  iwdgBegin(313); // 500.8ms

  bspInit();
 800325c:	f7fd ffe8 	bl	8001230 <bspInit>
  cliInit();
 8003260:	f7fe fd12 	bl	8001c88 <cliInit>
  ledInit();
 8003264:	f7ff fbd6 	bl	8002a14 <ledInit>
  cdcInit();
 8003268:	f7fe fcfe 	bl	8001c68 <cdcInit>
  uartInit();
 800326c:	f7ff fccc 	bl	8002c08 <uartInit>
  gpioInit();
 8003270:	f7ff f9ae 	bl	80025d0 <gpioInit>
  beaconInit();
 8003274:	f7fe fa44 	bl	8001700 <beaconInit>
  buttonInit();
 8003278:	f7fe fbe0 	bl	8001a3c <buttonInit>
  dht22Init(GPIOB, GPIO_PIN_0);
 800327c:	2101      	movs	r1, #1
 800327e:	4802      	ldr	r0, [pc, #8]	@ (8003288 <hwInit+0x30>)
 8003280:	f7fe ffb2 	bl	80021e8 <dht22Init>
}
 8003284:	bf00      	nop
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40010c00 	.word	0x40010c00

0800328c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003290:	4b08      	ldr	r3, [pc, #32]	@ (80032b4 <HAL_Init+0x28>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a07      	ldr	r2, [pc, #28]	@ (80032b4 <HAL_Init+0x28>)
 8003296:	f043 0310 	orr.w	r3, r3, #16
 800329a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800329c:	2003      	movs	r0, #3
 800329e:	f000 f987 	bl	80035b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032a2:	200f      	movs	r0, #15
 80032a4:	f000 f808 	bl	80032b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032a8:	f7fe f870 	bl	800138c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032ac:	2300      	movs	r3, #0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	40022000 	.word	0x40022000

080032b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032c0:	4b12      	ldr	r3, [pc, #72]	@ (800330c <HAL_InitTick+0x54>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	4b12      	ldr	r3, [pc, #72]	@ (8003310 <HAL_InitTick+0x58>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	4619      	mov	r1, r3
 80032ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80032ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80032d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 f9ad 	bl	8003636 <HAL_SYSTICK_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e00e      	b.n	8003304 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b0f      	cmp	r3, #15
 80032ea:	d80a      	bhi.n	8003302 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032ec:	2200      	movs	r2, #0
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	f04f 30ff 	mov.w	r0, #4294967295
 80032f4:	f000 f967 	bl	80035c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032f8:	4a06      	ldr	r2, [pc, #24]	@ (8003314 <HAL_InitTick+0x5c>)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	e000      	b.n	8003304 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
}
 8003304:	4618      	mov	r0, r3
 8003306:	3708      	adds	r7, #8
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}
 800330c:	20000000 	.word	0x20000000
 8003310:	2000001c 	.word	0x2000001c
 8003314:	20000018 	.word	0x20000018

08003318 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003318:	b480      	push	{r7}
 800331a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800331c:	4b05      	ldr	r3, [pc, #20]	@ (8003334 <HAL_IncTick+0x1c>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	461a      	mov	r2, r3
 8003322:	4b05      	ldr	r3, [pc, #20]	@ (8003338 <HAL_IncTick+0x20>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4413      	add	r3, r2
 8003328:	4a03      	ldr	r2, [pc, #12]	@ (8003338 <HAL_IncTick+0x20>)
 800332a:	6013      	str	r3, [r2, #0]
}
 800332c:	bf00      	nop
 800332e:	46bd      	mov	sp, r7
 8003330:	bc80      	pop	{r7}
 8003332:	4770      	bx	lr
 8003334:	2000001c 	.word	0x2000001c
 8003338:	20000a3c 	.word	0x20000a3c

0800333c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  return uwTick;
 8003340:	4b02      	ldr	r3, [pc, #8]	@ (800334c <HAL_GetTick+0x10>)
 8003342:	681b      	ldr	r3, [r3, #0]
}
 8003344:	4618      	mov	r0, r3
 8003346:	46bd      	mov	sp, r7
 8003348:	bc80      	pop	{r7}
 800334a:	4770      	bx	lr
 800334c:	20000a3c 	.word	0x20000a3c

08003350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003358:	f7ff fff0 	bl	800333c <HAL_GetTick>
 800335c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003368:	d005      	beq.n	8003376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800336a:	4b0a      	ldr	r3, [pc, #40]	@ (8003394 <HAL_Delay+0x44>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4413      	add	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003376:	bf00      	nop
 8003378:	f7ff ffe0 	bl	800333c <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	429a      	cmp	r2, r3
 8003386:	d8f7      	bhi.n	8003378 <HAL_Delay+0x28>
  {
  }
}
 8003388:	bf00      	nop
 800338a:	bf00      	nop
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	2000001c 	.word	0x2000001c

08003398 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800339c:	4b04      	ldr	r3, [pc, #16]	@ (80033b0 <HAL_SuspendTick+0x18>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a03      	ldr	r2, [pc, #12]	@ (80033b0 <HAL_SuspendTick+0x18>)
 80033a2:	f023 0302 	bic.w	r3, r3, #2
 80033a6:	6013      	str	r3, [r2, #0]
}
 80033a8:	bf00      	nop
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr
 80033b0:	e000e010 	.word	0xe000e010

080033b4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80033b8:	4b04      	ldr	r3, [pc, #16]	@ (80033cc <HAL_ResumeTick+0x18>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a03      	ldr	r2, [pc, #12]	@ (80033cc <HAL_ResumeTick+0x18>)
 80033be:	f043 0302 	orr.w	r3, r3, #2
 80033c2:	6013      	str	r3, [r2, #0]
}
 80033c4:	bf00      	nop
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bc80      	pop	{r7}
 80033ca:	4770      	bx	lr
 80033cc:	e000e010 	.word	0xe000e010

080033d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003414 <__NVIC_SetPriorityGrouping+0x44>)
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033e6:	68ba      	ldr	r2, [r7, #8]
 80033e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033ec:	4013      	ands	r3, r2
 80033ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003400:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003402:	4a04      	ldr	r2, [pc, #16]	@ (8003414 <__NVIC_SetPriorityGrouping+0x44>)
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	60d3      	str	r3, [r2, #12]
}
 8003408:	bf00      	nop
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	bc80      	pop	{r7}
 8003410:	4770      	bx	lr
 8003412:	bf00      	nop
 8003414:	e000ed00 	.word	0xe000ed00

08003418 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003418:	b480      	push	{r7}
 800341a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800341c:	4b04      	ldr	r3, [pc, #16]	@ (8003430 <__NVIC_GetPriorityGrouping+0x18>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	0a1b      	lsrs	r3, r3, #8
 8003422:	f003 0307 	and.w	r3, r3, #7
}
 8003426:	4618      	mov	r0, r3
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	e000ed00 	.word	0xe000ed00

08003434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800343e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003442:	2b00      	cmp	r3, #0
 8003444:	db0b      	blt.n	800345e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003446:	79fb      	ldrb	r3, [r7, #7]
 8003448:	f003 021f 	and.w	r2, r3, #31
 800344c:	4906      	ldr	r1, [pc, #24]	@ (8003468 <__NVIC_EnableIRQ+0x34>)
 800344e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	2001      	movs	r0, #1
 8003456:	fa00 f202 	lsl.w	r2, r0, r2
 800345a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr
 8003468:	e000e100 	.word	0xe000e100

0800346c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347a:	2b00      	cmp	r3, #0
 800347c:	db12      	blt.n	80034a4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800347e:	79fb      	ldrb	r3, [r7, #7]
 8003480:	f003 021f 	and.w	r2, r3, #31
 8003484:	490a      	ldr	r1, [pc, #40]	@ (80034b0 <__NVIC_DisableIRQ+0x44>)
 8003486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348a:	095b      	lsrs	r3, r3, #5
 800348c:	2001      	movs	r0, #1
 800348e:	fa00 f202 	lsl.w	r2, r0, r2
 8003492:	3320      	adds	r3, #32
 8003494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003498:	f3bf 8f4f 	dsb	sy
}
 800349c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800349e:	f3bf 8f6f 	isb	sy
}
 80034a2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	e000e100 	.word	0xe000e100

080034b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	6039      	str	r1, [r7, #0]
 80034be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	db0a      	blt.n	80034de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	490c      	ldr	r1, [pc, #48]	@ (8003500 <__NVIC_SetPriority+0x4c>)
 80034ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d2:	0112      	lsls	r2, r2, #4
 80034d4:	b2d2      	uxtb	r2, r2
 80034d6:	440b      	add	r3, r1
 80034d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034dc:	e00a      	b.n	80034f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	4908      	ldr	r1, [pc, #32]	@ (8003504 <__NVIC_SetPriority+0x50>)
 80034e4:	79fb      	ldrb	r3, [r7, #7]
 80034e6:	f003 030f 	and.w	r3, r3, #15
 80034ea:	3b04      	subs	r3, #4
 80034ec:	0112      	lsls	r2, r2, #4
 80034ee:	b2d2      	uxtb	r2, r2
 80034f0:	440b      	add	r3, r1
 80034f2:	761a      	strb	r2, [r3, #24]
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bc80      	pop	{r7}
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	e000e100 	.word	0xe000e100
 8003504:	e000ed00 	.word	0xe000ed00

08003508 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003508:	b480      	push	{r7}
 800350a:	b089      	sub	sp, #36	@ 0x24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 0307 	and.w	r3, r3, #7
 800351a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	f1c3 0307 	rsb	r3, r3, #7
 8003522:	2b04      	cmp	r3, #4
 8003524:	bf28      	it	cs
 8003526:	2304      	movcs	r3, #4
 8003528:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	3304      	adds	r3, #4
 800352e:	2b06      	cmp	r3, #6
 8003530:	d902      	bls.n	8003538 <NVIC_EncodePriority+0x30>
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	3b03      	subs	r3, #3
 8003536:	e000      	b.n	800353a <NVIC_EncodePriority+0x32>
 8003538:	2300      	movs	r3, #0
 800353a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800353c:	f04f 32ff 	mov.w	r2, #4294967295
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	43da      	mvns	r2, r3
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	401a      	ands	r2, r3
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003550:	f04f 31ff 	mov.w	r1, #4294967295
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	fa01 f303 	lsl.w	r3, r1, r3
 800355a:	43d9      	mvns	r1, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003560:	4313      	orrs	r3, r2
         );
}
 8003562:	4618      	mov	r0, r3
 8003564:	3724      	adds	r7, #36	@ 0x24
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr

0800356c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	3b01      	subs	r3, #1
 8003578:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800357c:	d301      	bcc.n	8003582 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800357e:	2301      	movs	r3, #1
 8003580:	e00f      	b.n	80035a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003582:	4a0a      	ldr	r2, [pc, #40]	@ (80035ac <SysTick_Config+0x40>)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3b01      	subs	r3, #1
 8003588:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800358a:	210f      	movs	r1, #15
 800358c:	f04f 30ff 	mov.w	r0, #4294967295
 8003590:	f7ff ff90 	bl	80034b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003594:	4b05      	ldr	r3, [pc, #20]	@ (80035ac <SysTick_Config+0x40>)
 8003596:	2200      	movs	r2, #0
 8003598:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800359a:	4b04      	ldr	r3, [pc, #16]	@ (80035ac <SysTick_Config+0x40>)
 800359c:	2207      	movs	r2, #7
 800359e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	e000e010 	.word	0xe000e010

080035b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff ff09 	bl	80033d0 <__NVIC_SetPriorityGrouping>
}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b086      	sub	sp, #24
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	4603      	mov	r3, r0
 80035ce:	60b9      	str	r1, [r7, #8]
 80035d0:	607a      	str	r2, [r7, #4]
 80035d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035d4:	2300      	movs	r3, #0
 80035d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035d8:	f7ff ff1e 	bl	8003418 <__NVIC_GetPriorityGrouping>
 80035dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035de:	687a      	ldr	r2, [r7, #4]
 80035e0:	68b9      	ldr	r1, [r7, #8]
 80035e2:	6978      	ldr	r0, [r7, #20]
 80035e4:	f7ff ff90 	bl	8003508 <NVIC_EncodePriority>
 80035e8:	4602      	mov	r2, r0
 80035ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ee:	4611      	mov	r1, r2
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff ff5f 	bl	80034b4 <__NVIC_SetPriority>
}
 80035f6:	bf00      	nop
 80035f8:	3718      	adds	r7, #24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b082      	sub	sp, #8
 8003602:	af00      	add	r7, sp, #0
 8003604:	4603      	mov	r3, r0
 8003606:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff ff11 	bl	8003434 <__NVIC_EnableIRQ>
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	4603      	mov	r3, r0
 8003622:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003628:	4618      	mov	r0, r3
 800362a:	f7ff ff1f 	bl	800346c <__NVIC_DisableIRQ>
}
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}

08003636 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff ff94 	bl	800356c <SysTick_Config>
 8003644:	4603      	mov	r3, r0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003658:	2300      	movs	r3, #0
 800365a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e043      	b.n	80036ee <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	461a      	mov	r2, r3
 800366c:	4b22      	ldr	r3, [pc, #136]	@ (80036f8 <HAL_DMA_Init+0xa8>)
 800366e:	4413      	add	r3, r2
 8003670:	4a22      	ldr	r2, [pc, #136]	@ (80036fc <HAL_DMA_Init+0xac>)
 8003672:	fba2 2303 	umull	r2, r3, r2, r3
 8003676:	091b      	lsrs	r3, r3, #4
 8003678:	009a      	lsls	r2, r3, #2
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a1f      	ldr	r2, [pc, #124]	@ (8003700 <HAL_DMA_Init+0xb0>)
 8003682:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2202      	movs	r2, #2
 8003688:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800369a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800369e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80036a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3714      	adds	r7, #20
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr
 80036f8:	bffdfff8 	.word	0xbffdfff8
 80036fc:	cccccccd 	.word	0xcccccccd
 8003700:	40020000 	.word	0x40020000

08003704 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e046      	b.n	80037a4 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0201 	bic.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2200      	movs	r2, #0
 8003734:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	2200      	movs	r2, #0
 800373c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	2200      	movs	r2, #0
 8003744:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	4b18      	ldr	r3, [pc, #96]	@ (80037b0 <HAL_DMA_DeInit+0xac>)
 800374e:	4413      	add	r3, r2
 8003750:	4a18      	ldr	r2, [pc, #96]	@ (80037b4 <HAL_DMA_DeInit+0xb0>)
 8003752:	fba2 2303 	umull	r2, r3, r2, r3
 8003756:	091b      	lsrs	r3, r3, #4
 8003758:	009a      	lsls	r2, r3, #2
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a15      	ldr	r2, [pc, #84]	@ (80037b8 <HAL_DMA_DeInit+0xb4>)
 8003762:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800376c:	2101      	movs	r1, #1
 800376e:	fa01 f202 	lsl.w	r2, r1, r2
 8003772:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	bffdfff8 	.word	0xbffdfff8
 80037b4:	cccccccd 	.word	0xcccccccd
 80037b8:	40020000 	.word	0x40020000

080037bc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
 80037c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <HAL_DMA_Start_IT+0x20>
 80037d8:	2302      	movs	r3, #2
 80037da:	e04b      	b.n	8003874 <HAL_DMA_Start_IT+0xb8>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80037ea:	b2db      	uxtb	r3, r3
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d13a      	bne.n	8003866 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2202      	movs	r2, #2
 80037f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	68b9      	ldr	r1, [r7, #8]
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f9eb 	bl	8003bf0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381e:	2b00      	cmp	r3, #0
 8003820:	d008      	beq.n	8003834 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 020e 	orr.w	r2, r2, #14
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	e00f      	b.n	8003854 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0204 	bic.w	r2, r2, #4
 8003842:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f042 020a 	orr.w	r2, r2, #10
 8003852:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]
 8003864:	e005      	b.n	8003872 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800386e:	2302      	movs	r3, #2
 8003870:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003872:	7dfb      	ldrb	r3, [r7, #23]
}
 8003874:	4618      	mov	r0, r3
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800387c:	b480      	push	{r7}
 800387e:	b085      	sub	sp, #20
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d008      	beq.n	80038a6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2204      	movs	r2, #4
 8003898:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e020      	b.n	80038e8 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 020e 	bic.w	r2, r2, #14
 80038b4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0201 	bic.w	r2, r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ce:	2101      	movs	r1, #1
 80038d0:	fa01 f202 	lsl.w	r2, r1, r2
 80038d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80038e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr
	...

080038f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d005      	beq.n	8003918 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2204      	movs	r2, #4
 8003910:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	73fb      	strb	r3, [r7, #15]
 8003916:	e051      	b.n	80039bc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 020e 	bic.w	r2, r2, #14
 8003926:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f022 0201 	bic.w	r2, r2, #1
 8003936:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a22      	ldr	r2, [pc, #136]	@ (80039c8 <HAL_DMA_Abort_IT+0xd4>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d029      	beq.n	8003996 <HAL_DMA_Abort_IT+0xa2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a21      	ldr	r2, [pc, #132]	@ (80039cc <HAL_DMA_Abort_IT+0xd8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d022      	beq.n	8003992 <HAL_DMA_Abort_IT+0x9e>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1f      	ldr	r2, [pc, #124]	@ (80039d0 <HAL_DMA_Abort_IT+0xdc>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d01a      	beq.n	800398c <HAL_DMA_Abort_IT+0x98>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a1e      	ldr	r2, [pc, #120]	@ (80039d4 <HAL_DMA_Abort_IT+0xe0>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d012      	beq.n	8003986 <HAL_DMA_Abort_IT+0x92>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a1c      	ldr	r2, [pc, #112]	@ (80039d8 <HAL_DMA_Abort_IT+0xe4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00a      	beq.n	8003980 <HAL_DMA_Abort_IT+0x8c>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a1b      	ldr	r2, [pc, #108]	@ (80039dc <HAL_DMA_Abort_IT+0xe8>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d102      	bne.n	800397a <HAL_DMA_Abort_IT+0x86>
 8003974:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8003978:	e00e      	b.n	8003998 <HAL_DMA_Abort_IT+0xa4>
 800397a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800397e:	e00b      	b.n	8003998 <HAL_DMA_Abort_IT+0xa4>
 8003980:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003984:	e008      	b.n	8003998 <HAL_DMA_Abort_IT+0xa4>
 8003986:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800398a:	e005      	b.n	8003998 <HAL_DMA_Abort_IT+0xa4>
 800398c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003990:	e002      	b.n	8003998 <HAL_DMA_Abort_IT+0xa4>
 8003992:	2310      	movs	r3, #16
 8003994:	e000      	b.n	8003998 <HAL_DMA_Abort_IT+0xa4>
 8003996:	2301      	movs	r3, #1
 8003998:	4a11      	ldr	r2, [pc, #68]	@ (80039e0 <HAL_DMA_Abort_IT+0xec>)
 800399a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d003      	beq.n	80039bc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	4798      	blx	r3
    } 
  }
  return status;
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	40020008 	.word	0x40020008
 80039cc:	4002001c 	.word	0x4002001c
 80039d0:	40020030 	.word	0x40020030
 80039d4:	40020044 	.word	0x40020044
 80039d8:	40020058 	.word	0x40020058
 80039dc:	4002006c 	.word	0x4002006c
 80039e0:	40020000 	.word	0x40020000

080039e4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a00:	2204      	movs	r2, #4
 8003a02:	409a      	lsls	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4013      	ands	r3, r2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d04f      	beq.n	8003aac <HAL_DMA_IRQHandler+0xc8>
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	f003 0304 	and.w	r3, r3, #4
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d04a      	beq.n	8003aac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0320 	and.w	r3, r3, #32
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d107      	bne.n	8003a34 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 0204 	bic.w	r2, r2, #4
 8003a32:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a66      	ldr	r2, [pc, #408]	@ (8003bd4 <HAL_DMA_IRQHandler+0x1f0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d029      	beq.n	8003a92 <HAL_DMA_IRQHandler+0xae>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a65      	ldr	r2, [pc, #404]	@ (8003bd8 <HAL_DMA_IRQHandler+0x1f4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d022      	beq.n	8003a8e <HAL_DMA_IRQHandler+0xaa>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a63      	ldr	r2, [pc, #396]	@ (8003bdc <HAL_DMA_IRQHandler+0x1f8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01a      	beq.n	8003a88 <HAL_DMA_IRQHandler+0xa4>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a62      	ldr	r2, [pc, #392]	@ (8003be0 <HAL_DMA_IRQHandler+0x1fc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d012      	beq.n	8003a82 <HAL_DMA_IRQHandler+0x9e>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a60      	ldr	r2, [pc, #384]	@ (8003be4 <HAL_DMA_IRQHandler+0x200>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d00a      	beq.n	8003a7c <HAL_DMA_IRQHandler+0x98>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a5f      	ldr	r2, [pc, #380]	@ (8003be8 <HAL_DMA_IRQHandler+0x204>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d102      	bne.n	8003a76 <HAL_DMA_IRQHandler+0x92>
 8003a70:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003a74:	e00e      	b.n	8003a94 <HAL_DMA_IRQHandler+0xb0>
 8003a76:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003a7a:	e00b      	b.n	8003a94 <HAL_DMA_IRQHandler+0xb0>
 8003a7c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003a80:	e008      	b.n	8003a94 <HAL_DMA_IRQHandler+0xb0>
 8003a82:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003a86:	e005      	b.n	8003a94 <HAL_DMA_IRQHandler+0xb0>
 8003a88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a8c:	e002      	b.n	8003a94 <HAL_DMA_IRQHandler+0xb0>
 8003a8e:	2340      	movs	r3, #64	@ 0x40
 8003a90:	e000      	b.n	8003a94 <HAL_DMA_IRQHandler+0xb0>
 8003a92:	2304      	movs	r3, #4
 8003a94:	4a55      	ldr	r2, [pc, #340]	@ (8003bec <HAL_DMA_IRQHandler+0x208>)
 8003a96:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 8094 	beq.w	8003bca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003aaa:	e08e      	b.n	8003bca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	409a      	lsls	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d056      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x186>
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d051      	beq.n	8003b6a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0320 	and.w	r3, r3, #32
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10b      	bne.n	8003aec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 020a 	bic.w	r2, r2, #10
 8003ae2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a38      	ldr	r2, [pc, #224]	@ (8003bd4 <HAL_DMA_IRQHandler+0x1f0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d029      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x166>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a37      	ldr	r2, [pc, #220]	@ (8003bd8 <HAL_DMA_IRQHandler+0x1f4>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d022      	beq.n	8003b46 <HAL_DMA_IRQHandler+0x162>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a35      	ldr	r2, [pc, #212]	@ (8003bdc <HAL_DMA_IRQHandler+0x1f8>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d01a      	beq.n	8003b40 <HAL_DMA_IRQHandler+0x15c>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a34      	ldr	r2, [pc, #208]	@ (8003be0 <HAL_DMA_IRQHandler+0x1fc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d012      	beq.n	8003b3a <HAL_DMA_IRQHandler+0x156>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a32      	ldr	r2, [pc, #200]	@ (8003be4 <HAL_DMA_IRQHandler+0x200>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00a      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x150>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a31      	ldr	r2, [pc, #196]	@ (8003be8 <HAL_DMA_IRQHandler+0x204>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d102      	bne.n	8003b2e <HAL_DMA_IRQHandler+0x14a>
 8003b28:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003b2c:	e00e      	b.n	8003b4c <HAL_DMA_IRQHandler+0x168>
 8003b2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b32:	e00b      	b.n	8003b4c <HAL_DMA_IRQHandler+0x168>
 8003b34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b38:	e008      	b.n	8003b4c <HAL_DMA_IRQHandler+0x168>
 8003b3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003b3e:	e005      	b.n	8003b4c <HAL_DMA_IRQHandler+0x168>
 8003b40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b44:	e002      	b.n	8003b4c <HAL_DMA_IRQHandler+0x168>
 8003b46:	2320      	movs	r3, #32
 8003b48:	e000      	b.n	8003b4c <HAL_DMA_IRQHandler+0x168>
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	4a27      	ldr	r2, [pc, #156]	@ (8003bec <HAL_DMA_IRQHandler+0x208>)
 8003b4e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d034      	beq.n	8003bca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003b68:	e02f      	b.n	8003bca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b6e:	2208      	movs	r2, #8
 8003b70:	409a      	lsls	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	4013      	ands	r3, r2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d028      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x1e8>
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d023      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 020e 	bic.w	r2, r2, #14
 8003b92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b9c:	2101      	movs	r1, #1
 8003b9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003ba2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d004      	beq.n	8003bcc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	4798      	blx	r3
    }
  }
  return;
 8003bca:	bf00      	nop
 8003bcc:	bf00      	nop
}
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40020008 	.word	0x40020008
 8003bd8:	4002001c 	.word	0x4002001c
 8003bdc:	40020030 	.word	0x40020030
 8003be0:	40020044 	.word	0x40020044
 8003be4:	40020058 	.word	0x40020058
 8003be8:	4002006c 	.word	0x4002006c
 8003bec:	40020000 	.word	0x40020000

08003bf0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c06:	2101      	movs	r1, #1
 8003c08:	fa01 f202 	lsl.w	r2, r1, r2
 8003c0c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	2b10      	cmp	r3, #16
 8003c1c:	d108      	bne.n	8003c30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003c2e:	e007      	b.n	8003c40 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	687a      	ldr	r2, [r7, #4]
 8003c3e:	60da      	str	r2, [r3, #12]
}
 8003c40:	bf00      	nop
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bc80      	pop	{r7}
 8003c48:	4770      	bx	lr
	...

08003c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b08b      	sub	sp, #44	@ 0x2c
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003c56:	2300      	movs	r3, #0
 8003c58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c5e:	e169      	b.n	8003f34 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003c60:	2201      	movs	r2, #1
 8003c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	69fa      	ldr	r2, [r7, #28]
 8003c70:	4013      	ands	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	f040 8158 	bne.w	8003f2e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	4a9a      	ldr	r2, [pc, #616]	@ (8003eec <HAL_GPIO_Init+0x2a0>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d05e      	beq.n	8003d46 <HAL_GPIO_Init+0xfa>
 8003c88:	4a98      	ldr	r2, [pc, #608]	@ (8003eec <HAL_GPIO_Init+0x2a0>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d875      	bhi.n	8003d7a <HAL_GPIO_Init+0x12e>
 8003c8e:	4a98      	ldr	r2, [pc, #608]	@ (8003ef0 <HAL_GPIO_Init+0x2a4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d058      	beq.n	8003d46 <HAL_GPIO_Init+0xfa>
 8003c94:	4a96      	ldr	r2, [pc, #600]	@ (8003ef0 <HAL_GPIO_Init+0x2a4>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d86f      	bhi.n	8003d7a <HAL_GPIO_Init+0x12e>
 8003c9a:	4a96      	ldr	r2, [pc, #600]	@ (8003ef4 <HAL_GPIO_Init+0x2a8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d052      	beq.n	8003d46 <HAL_GPIO_Init+0xfa>
 8003ca0:	4a94      	ldr	r2, [pc, #592]	@ (8003ef4 <HAL_GPIO_Init+0x2a8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d869      	bhi.n	8003d7a <HAL_GPIO_Init+0x12e>
 8003ca6:	4a94      	ldr	r2, [pc, #592]	@ (8003ef8 <HAL_GPIO_Init+0x2ac>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d04c      	beq.n	8003d46 <HAL_GPIO_Init+0xfa>
 8003cac:	4a92      	ldr	r2, [pc, #584]	@ (8003ef8 <HAL_GPIO_Init+0x2ac>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d863      	bhi.n	8003d7a <HAL_GPIO_Init+0x12e>
 8003cb2:	4a92      	ldr	r2, [pc, #584]	@ (8003efc <HAL_GPIO_Init+0x2b0>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d046      	beq.n	8003d46 <HAL_GPIO_Init+0xfa>
 8003cb8:	4a90      	ldr	r2, [pc, #576]	@ (8003efc <HAL_GPIO_Init+0x2b0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d85d      	bhi.n	8003d7a <HAL_GPIO_Init+0x12e>
 8003cbe:	2b12      	cmp	r3, #18
 8003cc0:	d82a      	bhi.n	8003d18 <HAL_GPIO_Init+0xcc>
 8003cc2:	2b12      	cmp	r3, #18
 8003cc4:	d859      	bhi.n	8003d7a <HAL_GPIO_Init+0x12e>
 8003cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8003ccc <HAL_GPIO_Init+0x80>)
 8003cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ccc:	08003d47 	.word	0x08003d47
 8003cd0:	08003d21 	.word	0x08003d21
 8003cd4:	08003d33 	.word	0x08003d33
 8003cd8:	08003d75 	.word	0x08003d75
 8003cdc:	08003d7b 	.word	0x08003d7b
 8003ce0:	08003d7b 	.word	0x08003d7b
 8003ce4:	08003d7b 	.word	0x08003d7b
 8003ce8:	08003d7b 	.word	0x08003d7b
 8003cec:	08003d7b 	.word	0x08003d7b
 8003cf0:	08003d7b 	.word	0x08003d7b
 8003cf4:	08003d7b 	.word	0x08003d7b
 8003cf8:	08003d7b 	.word	0x08003d7b
 8003cfc:	08003d7b 	.word	0x08003d7b
 8003d00:	08003d7b 	.word	0x08003d7b
 8003d04:	08003d7b 	.word	0x08003d7b
 8003d08:	08003d7b 	.word	0x08003d7b
 8003d0c:	08003d7b 	.word	0x08003d7b
 8003d10:	08003d29 	.word	0x08003d29
 8003d14:	08003d3d 	.word	0x08003d3d
 8003d18:	4a79      	ldr	r2, [pc, #484]	@ (8003f00 <HAL_GPIO_Init+0x2b4>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003d1e:	e02c      	b.n	8003d7a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	623b      	str	r3, [r7, #32]
          break;
 8003d26:	e029      	b.n	8003d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	3304      	adds	r3, #4
 8003d2e:	623b      	str	r3, [r7, #32]
          break;
 8003d30:	e024      	b.n	8003d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	3308      	adds	r3, #8
 8003d38:	623b      	str	r3, [r7, #32]
          break;
 8003d3a:	e01f      	b.n	8003d7c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	330c      	adds	r3, #12
 8003d42:	623b      	str	r3, [r7, #32]
          break;
 8003d44:	e01a      	b.n	8003d7c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d102      	bne.n	8003d54 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003d4e:	2304      	movs	r3, #4
 8003d50:	623b      	str	r3, [r7, #32]
          break;
 8003d52:	e013      	b.n	8003d7c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d105      	bne.n	8003d68 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d5c:	2308      	movs	r3, #8
 8003d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	611a      	str	r2, [r3, #16]
          break;
 8003d66:	e009      	b.n	8003d7c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003d68:	2308      	movs	r3, #8
 8003d6a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69fa      	ldr	r2, [r7, #28]
 8003d70:	615a      	str	r2, [r3, #20]
          break;
 8003d72:	e003      	b.n	8003d7c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003d74:	2300      	movs	r3, #0
 8003d76:	623b      	str	r3, [r7, #32]
          break;
 8003d78:	e000      	b.n	8003d7c <HAL_GPIO_Init+0x130>
          break;
 8003d7a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2bff      	cmp	r3, #255	@ 0xff
 8003d80:	d801      	bhi.n	8003d86 <HAL_GPIO_Init+0x13a>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	e001      	b.n	8003d8a <HAL_GPIO_Init+0x13e>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	3304      	adds	r3, #4
 8003d8a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	2bff      	cmp	r3, #255	@ 0xff
 8003d90:	d802      	bhi.n	8003d98 <HAL_GPIO_Init+0x14c>
 8003d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	e002      	b.n	8003d9e <HAL_GPIO_Init+0x152>
 8003d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9a:	3b08      	subs	r3, #8
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	210f      	movs	r1, #15
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	fa01 f303 	lsl.w	r3, r1, r3
 8003dac:	43db      	mvns	r3, r3
 8003dae:	401a      	ands	r2, r3
 8003db0:	6a39      	ldr	r1, [r7, #32]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	fa01 f303 	lsl.w	r3, r1, r3
 8003db8:	431a      	orrs	r2, r3
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	f000 80b1 	beq.w	8003f2e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003dcc:	4b4d      	ldr	r3, [pc, #308]	@ (8003f04 <HAL_GPIO_Init+0x2b8>)
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	4a4c      	ldr	r2, [pc, #304]	@ (8003f04 <HAL_GPIO_Init+0x2b8>)
 8003dd2:	f043 0301 	orr.w	r3, r3, #1
 8003dd6:	6193      	str	r3, [r2, #24]
 8003dd8:	4b4a      	ldr	r3, [pc, #296]	@ (8003f04 <HAL_GPIO_Init+0x2b8>)
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	f003 0301 	and.w	r3, r3, #1
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003de4:	4a48      	ldr	r2, [pc, #288]	@ (8003f08 <HAL_GPIO_Init+0x2bc>)
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	089b      	lsrs	r3, r3, #2
 8003dea:	3302      	adds	r3, #2
 8003dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003df0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	f003 0303 	and.w	r3, r3, #3
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	220f      	movs	r2, #15
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	43db      	mvns	r3, r3
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4013      	ands	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a40      	ldr	r2, [pc, #256]	@ (8003f0c <HAL_GPIO_Init+0x2c0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d013      	beq.n	8003e38 <HAL_GPIO_Init+0x1ec>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a3f      	ldr	r2, [pc, #252]	@ (8003f10 <HAL_GPIO_Init+0x2c4>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d00d      	beq.n	8003e34 <HAL_GPIO_Init+0x1e8>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a3e      	ldr	r2, [pc, #248]	@ (8003f14 <HAL_GPIO_Init+0x2c8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d007      	beq.n	8003e30 <HAL_GPIO_Init+0x1e4>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a3d      	ldr	r2, [pc, #244]	@ (8003f18 <HAL_GPIO_Init+0x2cc>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d101      	bne.n	8003e2c <HAL_GPIO_Init+0x1e0>
 8003e28:	2303      	movs	r3, #3
 8003e2a:	e006      	b.n	8003e3a <HAL_GPIO_Init+0x1ee>
 8003e2c:	2304      	movs	r3, #4
 8003e2e:	e004      	b.n	8003e3a <HAL_GPIO_Init+0x1ee>
 8003e30:	2302      	movs	r3, #2
 8003e32:	e002      	b.n	8003e3a <HAL_GPIO_Init+0x1ee>
 8003e34:	2301      	movs	r3, #1
 8003e36:	e000      	b.n	8003e3a <HAL_GPIO_Init+0x1ee>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e3c:	f002 0203 	and.w	r2, r2, #3
 8003e40:	0092      	lsls	r2, r2, #2
 8003e42:	4093      	lsls	r3, r2
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003e4a:	492f      	ldr	r1, [pc, #188]	@ (8003f08 <HAL_GPIO_Init+0x2bc>)
 8003e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e4e:	089b      	lsrs	r3, r3, #2
 8003e50:	3302      	adds	r3, #2
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d006      	beq.n	8003e72 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003e64:	4b2d      	ldr	r3, [pc, #180]	@ (8003f1c <HAL_GPIO_Init+0x2d0>)
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	492c      	ldr	r1, [pc, #176]	@ (8003f1c <HAL_GPIO_Init+0x2d0>)
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	608b      	str	r3, [r1, #8]
 8003e70:	e006      	b.n	8003e80 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003e72:	4b2a      	ldr	r3, [pc, #168]	@ (8003f1c <HAL_GPIO_Init+0x2d0>)
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	4928      	ldr	r1, [pc, #160]	@ (8003f1c <HAL_GPIO_Init+0x2d0>)
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d006      	beq.n	8003e9a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003e8c:	4b23      	ldr	r3, [pc, #140]	@ (8003f1c <HAL_GPIO_Init+0x2d0>)
 8003e8e:	68da      	ldr	r2, [r3, #12]
 8003e90:	4922      	ldr	r1, [pc, #136]	@ (8003f1c <HAL_GPIO_Init+0x2d0>)
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	60cb      	str	r3, [r1, #12]
 8003e98:	e006      	b.n	8003ea8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003e9a:	4b20      	ldr	r3, [pc, #128]	@ (8003f1c <HAL_GPIO_Init+0x2d0>)
 8003e9c:	68da      	ldr	r2, [r3, #12]
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	43db      	mvns	r3, r3
 8003ea2:	491e      	ldr	r1, [pc, #120]	@ (8003f1c <HAL_GPIO_Init+0x2d0>)
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d006      	beq.n	8003ec2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003eb4:	4b19      	ldr	r3, [pc, #100]	@ (8003f1c <HAL_GPIO_Init+0x2d0>)
 8003eb6:	685a      	ldr	r2, [r3, #4]
 8003eb8:	4918      	ldr	r1, [pc, #96]	@ (8003f1c <HAL_GPIO_Init+0x2d0>)
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	604b      	str	r3, [r1, #4]
 8003ec0:	e006      	b.n	8003ed0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ec2:	4b16      	ldr	r3, [pc, #88]	@ (8003f1c <HAL_GPIO_Init+0x2d0>)
 8003ec4:	685a      	ldr	r2, [r3, #4]
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	4914      	ldr	r1, [pc, #80]	@ (8003f1c <HAL_GPIO_Init+0x2d0>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d021      	beq.n	8003f20 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003edc:	4b0f      	ldr	r3, [pc, #60]	@ (8003f1c <HAL_GPIO_Init+0x2d0>)
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	490e      	ldr	r1, [pc, #56]	@ (8003f1c <HAL_GPIO_Init+0x2d0>)
 8003ee2:	69bb      	ldr	r3, [r7, #24]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	600b      	str	r3, [r1, #0]
 8003ee8:	e021      	b.n	8003f2e <HAL_GPIO_Init+0x2e2>
 8003eea:	bf00      	nop
 8003eec:	10320000 	.word	0x10320000
 8003ef0:	10310000 	.word	0x10310000
 8003ef4:	10220000 	.word	0x10220000
 8003ef8:	10210000 	.word	0x10210000
 8003efc:	10120000 	.word	0x10120000
 8003f00:	10110000 	.word	0x10110000
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40010000 	.word	0x40010000
 8003f0c:	40010800 	.word	0x40010800
 8003f10:	40010c00 	.word	0x40010c00
 8003f14:	40011000 	.word	0x40011000
 8003f18:	40011400 	.word	0x40011400
 8003f1c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003f20:	4b0b      	ldr	r3, [pc, #44]	@ (8003f50 <HAL_GPIO_Init+0x304>)
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	43db      	mvns	r3, r3
 8003f28:	4909      	ldr	r1, [pc, #36]	@ (8003f50 <HAL_GPIO_Init+0x304>)
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f30:	3301      	adds	r3, #1
 8003f32:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	f47f ae8e 	bne.w	8003c60 <HAL_GPIO_Init+0x14>
  }
}
 8003f44:	bf00      	nop
 8003f46:	bf00      	nop
 8003f48:	372c      	adds	r7, #44	@ 0x2c
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr
 8003f50:	40010400 	.word	0x40010400

08003f54 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b089      	sub	sp, #36	@ 0x24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8003f62:	e09a      	b.n	800409a <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003f64:	2201      	movs	r2, #1
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 808d 	beq.w	8004094 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8003f7a:	4a4e      	ldr	r2, [pc, #312]	@ (80040b4 <HAL_GPIO_DeInit+0x160>)
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	089b      	lsrs	r3, r3, #2
 8003f80:	3302      	adds	r3, #2
 8003f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f86:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	220f      	movs	r2, #15
 8003f92:	fa02 f303 	lsl.w	r3, r2, r3
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a46      	ldr	r2, [pc, #280]	@ (80040b8 <HAL_GPIO_DeInit+0x164>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d013      	beq.n	8003fcc <HAL_GPIO_DeInit+0x78>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	4a45      	ldr	r2, [pc, #276]	@ (80040bc <HAL_GPIO_DeInit+0x168>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d00d      	beq.n	8003fc8 <HAL_GPIO_DeInit+0x74>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	4a44      	ldr	r2, [pc, #272]	@ (80040c0 <HAL_GPIO_DeInit+0x16c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d007      	beq.n	8003fc4 <HAL_GPIO_DeInit+0x70>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a43      	ldr	r2, [pc, #268]	@ (80040c4 <HAL_GPIO_DeInit+0x170>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d101      	bne.n	8003fc0 <HAL_GPIO_DeInit+0x6c>
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e006      	b.n	8003fce <HAL_GPIO_DeInit+0x7a>
 8003fc0:	2304      	movs	r3, #4
 8003fc2:	e004      	b.n	8003fce <HAL_GPIO_DeInit+0x7a>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e002      	b.n	8003fce <HAL_GPIO_DeInit+0x7a>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e000      	b.n	8003fce <HAL_GPIO_DeInit+0x7a>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	69fa      	ldr	r2, [r7, #28]
 8003fd0:	f002 0203 	and.w	r2, r2, #3
 8003fd4:	0092      	lsls	r2, r2, #2
 8003fd6:	4093      	lsls	r3, r2
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d132      	bne.n	8004044 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003fde:	4b3a      	ldr	r3, [pc, #232]	@ (80040c8 <HAL_GPIO_DeInit+0x174>)
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	4938      	ldr	r1, [pc, #224]	@ (80040c8 <HAL_GPIO_DeInit+0x174>)
 8003fe8:	4013      	ands	r3, r2
 8003fea:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8003fec:	4b36      	ldr	r3, [pc, #216]	@ (80040c8 <HAL_GPIO_DeInit+0x174>)
 8003fee:	685a      	ldr	r2, [r3, #4]
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	4934      	ldr	r1, [pc, #208]	@ (80040c8 <HAL_GPIO_DeInit+0x174>)
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8003ffa:	4b33      	ldr	r3, [pc, #204]	@ (80040c8 <HAL_GPIO_DeInit+0x174>)
 8003ffc:	68da      	ldr	r2, [r3, #12]
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	43db      	mvns	r3, r3
 8004002:	4931      	ldr	r1, [pc, #196]	@ (80040c8 <HAL_GPIO_DeInit+0x174>)
 8004004:	4013      	ands	r3, r2
 8004006:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8004008:	4b2f      	ldr	r3, [pc, #188]	@ (80040c8 <HAL_GPIO_DeInit+0x174>)
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	43db      	mvns	r3, r3
 8004010:	492d      	ldr	r1, [pc, #180]	@ (80040c8 <HAL_GPIO_DeInit+0x174>)
 8004012:	4013      	ands	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	220f      	movs	r2, #15
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8004026:	4a23      	ldr	r2, [pc, #140]	@ (80040b4 <HAL_GPIO_DeInit+0x160>)
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	089b      	lsrs	r3, r3, #2
 800402c:	3302      	adds	r3, #2
 800402e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	43da      	mvns	r2, r3
 8004036:	481f      	ldr	r0, [pc, #124]	@ (80040b4 <HAL_GPIO_DeInit+0x160>)
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	089b      	lsrs	r3, r3, #2
 800403c:	400a      	ands	r2, r1
 800403e:	3302      	adds	r3, #2
 8004040:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2bff      	cmp	r3, #255	@ 0xff
 8004048:	d801      	bhi.n	800404e <HAL_GPIO_DeInit+0xfa>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	e001      	b.n	8004052 <HAL_GPIO_DeInit+0xfe>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3304      	adds	r3, #4
 8004052:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	2bff      	cmp	r3, #255	@ 0xff
 8004058:	d802      	bhi.n	8004060 <HAL_GPIO_DeInit+0x10c>
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	e002      	b.n	8004066 <HAL_GPIO_DeInit+0x112>
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	3b08      	subs	r3, #8
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	210f      	movs	r1, #15
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	fa01 f303 	lsl.w	r3, r1, r3
 8004074:	43db      	mvns	r3, r3
 8004076:	401a      	ands	r2, r3
 8004078:	2104      	movs	r1, #4
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	fa01 f303 	lsl.w	r3, r1, r3
 8004080:	431a      	orrs	r2, r3
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	43db      	mvns	r3, r3
 800408e:	401a      	ands	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	3301      	adds	r3, #1
 8004098:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	fa22 f303 	lsr.w	r3, r2, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	f47f af5e 	bne.w	8003f64 <HAL_GPIO_DeInit+0x10>
  }
}
 80040a8:	bf00      	nop
 80040aa:	bf00      	nop
 80040ac:	3724      	adds	r7, #36	@ 0x24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bc80      	pop	{r7}
 80040b2:	4770      	bx	lr
 80040b4:	40010000 	.word	0x40010000
 80040b8:	40010800 	.word	0x40010800
 80040bc:	40010c00 	.word	0x40010c00
 80040c0:	40011000 	.word	0x40011000
 80040c4:	40011400 	.word	0x40011400
 80040c8:	40010400 	.word	0x40010400

080040cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	460b      	mov	r3, r1
 80040d6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	887b      	ldrh	r3, [r7, #2]
 80040de:	4013      	ands	r3, r2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d002      	beq.n	80040ea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
 80040e8:	e001      	b.n	80040ee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80040ea:	2300      	movs	r3, #0
 80040ec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3714      	adds	r7, #20
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bc80      	pop	{r7}
 80040f8:	4770      	bx	lr

080040fa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040fa:	b480      	push	{r7}
 80040fc:	b083      	sub	sp, #12
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
 8004102:	460b      	mov	r3, r1
 8004104:	807b      	strh	r3, [r7, #2]
 8004106:	4613      	mov	r3, r2
 8004108:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800410a:	787b      	ldrb	r3, [r7, #1]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004110:	887a      	ldrh	r2, [r7, #2]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004116:	e003      	b.n	8004120 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004118:	887b      	ldrh	r3, [r7, #2]
 800411a:	041a      	lsls	r2, r3, #16
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	611a      	str	r2, [r3, #16]
}
 8004120:	bf00      	nop
 8004122:	370c      	adds	r7, #12
 8004124:	46bd      	mov	sp, r7
 8004126:	bc80      	pop	{r7}
 8004128:	4770      	bx	lr

0800412a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800412a:	b480      	push	{r7}
 800412c:	b085      	sub	sp, #20
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
 8004132:	460b      	mov	r3, r1
 8004134:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800413c:	887a      	ldrh	r2, [r7, #2]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4013      	ands	r3, r2
 8004142:	041a      	lsls	r2, r3, #16
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	43d9      	mvns	r1, r3
 8004148:	887b      	ldrh	r3, [r7, #2]
 800414a:	400b      	ands	r3, r1
 800414c:	431a      	orrs	r2, r3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	611a      	str	r2, [r3, #16]
}
 8004152:	bf00      	nop
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr

0800415c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b082      	sub	sp, #8
 8004160:	af00      	add	r7, sp, #0
 8004162:	4603      	mov	r3, r0
 8004164:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004166:	4b08      	ldr	r3, [pc, #32]	@ (8004188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	88fb      	ldrh	r3, [r7, #6]
 800416c:	4013      	ands	r3, r2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d006      	beq.n	8004180 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004172:	4a05      	ldr	r2, [pc, #20]	@ (8004188 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004174:	88fb      	ldrh	r3, [r7, #6]
 8004176:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004178:	88fb      	ldrh	r3, [r7, #6]
 800417a:	4618      	mov	r0, r3
 800417c:	f000 f806 	bl	800418c <HAL_GPIO_EXTI_Callback>
  }
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	40010400 	.word	0x40010400

0800418c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004196:	bf00      	nop
 8004198:	370c      	adds	r7, #12
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr

080041a0 <PWR_OverloadWfe>:
static void PWR_OverloadWfe(void);

/* Private functions ---------------------------------------------------------*/
__NOINLINE
static void PWR_OverloadWfe(void)
{
 80041a0:	b480      	push	{r7}
 80041a2:	af00      	add	r7, sp, #0
  __asm volatile( "wfe" );
 80041a4:	bf20      	wfe
  __asm volatile( "nop" );
 80041a6:	bf00      	nop
}
 80041a8:	bf00      	nop
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bc80      	pop	{r7}
 80041ae:	4770      	bx	lr

080041b0 <HAL_PWR_EnterSTOPMode>:
  *            @arg PWR_STOPENTRY_WFI: Enter Stop mode with WFI instruction
  *            @arg PWR_STOPENTRY_WFE: Enter Stop mode with WFE instruction   
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* Clear PDDS bit in PWR register to specify entering in STOP mode when CPU enter in Deepsleep */ 
  CLEAR_BIT(PWR->CR,  PWR_CR_PDDS);
 80041bc:	4b13      	ldr	r3, [pc, #76]	@ (800420c <HAL_PWR_EnterSTOPMode+0x5c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a12      	ldr	r2, [pc, #72]	@ (800420c <HAL_PWR_EnterSTOPMode+0x5c>)
 80041c2:	f023 0302 	bic.w	r3, r3, #2
 80041c6:	6013      	str	r3, [r2, #0]

  /* Select the voltage regulator mode by setting LPDS bit in PWR register according to Regulator parameter value */
  MODIFY_REG(PWR->CR, PWR_CR_LPDS, Regulator);
 80041c8:	4b10      	ldr	r3, [pc, #64]	@ (800420c <HAL_PWR_EnterSTOPMode+0x5c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f023 0201 	bic.w	r2, r3, #1
 80041d0:	490e      	ldr	r1, [pc, #56]	@ (800420c <HAL_PWR_EnterSTOPMode+0x5c>)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	600b      	str	r3, [r1, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80041d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004210 <HAL_PWR_EnterSTOPMode+0x60>)
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	4a0c      	ldr	r2, [pc, #48]	@ (8004210 <HAL_PWR_EnterSTOPMode+0x60>)
 80041de:	f043 0304 	orr.w	r3, r3, #4
 80041e2:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80041e4:	78fb      	ldrb	r3, [r7, #3]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d101      	bne.n	80041ee <HAL_PWR_EnterSTOPMode+0x3e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80041ea:	bf30      	wfi
 80041ec:	e004      	b.n	80041f8 <HAL_PWR_EnterSTOPMode+0x48>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80041ee:	bf40      	sev
    PWR_OverloadWfe(); /* WFE redefine locally */
 80041f0:	f7ff ffd6 	bl	80041a0 <PWR_OverloadWfe>
    PWR_OverloadWfe(); /* WFE redefine locally */
 80041f4:	f7ff ffd4 	bl	80041a0 <PWR_OverloadWfe>
  }
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80041f8:	4b05      	ldr	r3, [pc, #20]	@ (8004210 <HAL_PWR_EnterSTOPMode+0x60>)
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	4a04      	ldr	r2, [pc, #16]	@ (8004210 <HAL_PWR_EnterSTOPMode+0x60>)
 80041fe:	f023 0304 	bic.w	r3, r3, #4
 8004202:	6113      	str	r3, [r2, #16]
}
 8004204:	bf00      	nop
 8004206:	3708      	adds	r7, #8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	40007000 	.word	0x40007000
 8004210:	e000ed00 	.word	0xe000ed00

08004214 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b086      	sub	sp, #24
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d101      	bne.n	8004226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e272      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	f000 8087 	beq.w	8004342 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004234:	4b92      	ldr	r3, [pc, #584]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 030c 	and.w	r3, r3, #12
 800423c:	2b04      	cmp	r3, #4
 800423e:	d00c      	beq.n	800425a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004240:	4b8f      	ldr	r3, [pc, #572]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 030c 	and.w	r3, r3, #12
 8004248:	2b08      	cmp	r3, #8
 800424a:	d112      	bne.n	8004272 <HAL_RCC_OscConfig+0x5e>
 800424c:	4b8c      	ldr	r3, [pc, #560]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004258:	d10b      	bne.n	8004272 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800425a:	4b89      	ldr	r3, [pc, #548]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d06c      	beq.n	8004340 <HAL_RCC_OscConfig+0x12c>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d168      	bne.n	8004340 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e24c      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800427a:	d106      	bne.n	800428a <HAL_RCC_OscConfig+0x76>
 800427c:	4b80      	ldr	r3, [pc, #512]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a7f      	ldr	r2, [pc, #508]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004282:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004286:	6013      	str	r3, [r2, #0]
 8004288:	e02e      	b.n	80042e8 <HAL_RCC_OscConfig+0xd4>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10c      	bne.n	80042ac <HAL_RCC_OscConfig+0x98>
 8004292:	4b7b      	ldr	r3, [pc, #492]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a7a      	ldr	r2, [pc, #488]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004298:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800429c:	6013      	str	r3, [r2, #0]
 800429e:	4b78      	ldr	r3, [pc, #480]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a77      	ldr	r2, [pc, #476]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042a8:	6013      	str	r3, [r2, #0]
 80042aa:	e01d      	b.n	80042e8 <HAL_RCC_OscConfig+0xd4>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042b4:	d10c      	bne.n	80042d0 <HAL_RCC_OscConfig+0xbc>
 80042b6:	4b72      	ldr	r3, [pc, #456]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a71      	ldr	r2, [pc, #452]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	4b6f      	ldr	r3, [pc, #444]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a6e      	ldr	r2, [pc, #440]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	e00b      	b.n	80042e8 <HAL_RCC_OscConfig+0xd4>
 80042d0:	4b6b      	ldr	r3, [pc, #428]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a6a      	ldr	r2, [pc, #424]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042da:	6013      	str	r3, [r2, #0]
 80042dc:	4b68      	ldr	r3, [pc, #416]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a67      	ldr	r2, [pc, #412]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80042e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d013      	beq.n	8004318 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f0:	f7ff f824 	bl	800333c <HAL_GetTick>
 80042f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042f6:	e008      	b.n	800430a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80042f8:	f7ff f820 	bl	800333c <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	2b64      	cmp	r3, #100	@ 0x64
 8004304:	d901      	bls.n	800430a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e200      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800430a:	4b5d      	ldr	r3, [pc, #372]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004312:	2b00      	cmp	r3, #0
 8004314:	d0f0      	beq.n	80042f8 <HAL_RCC_OscConfig+0xe4>
 8004316:	e014      	b.n	8004342 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004318:	f7ff f810 	bl	800333c <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800431e:	e008      	b.n	8004332 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004320:	f7ff f80c 	bl	800333c <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	2b64      	cmp	r3, #100	@ 0x64
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e1ec      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004332:	4b53      	ldr	r3, [pc, #332]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1f0      	bne.n	8004320 <HAL_RCC_OscConfig+0x10c>
 800433e:	e000      	b.n	8004342 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	2b00      	cmp	r3, #0
 800434c:	d063      	beq.n	8004416 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800434e:	4b4c      	ldr	r3, [pc, #304]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	f003 030c 	and.w	r3, r3, #12
 8004356:	2b00      	cmp	r3, #0
 8004358:	d00b      	beq.n	8004372 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800435a:	4b49      	ldr	r3, [pc, #292]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b08      	cmp	r3, #8
 8004364:	d11c      	bne.n	80043a0 <HAL_RCC_OscConfig+0x18c>
 8004366:	4b46      	ldr	r3, [pc, #280]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d116      	bne.n	80043a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004372:	4b43      	ldr	r3, [pc, #268]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d005      	beq.n	800438a <HAL_RCC_OscConfig+0x176>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	2b01      	cmp	r3, #1
 8004384:	d001      	beq.n	800438a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e1c0      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800438a:	4b3d      	ldr	r3, [pc, #244]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4939      	ldr	r1, [pc, #228]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 800439a:	4313      	orrs	r3, r2
 800439c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800439e:	e03a      	b.n	8004416 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d020      	beq.n	80043ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043a8:	4b36      	ldr	r3, [pc, #216]	@ (8004484 <HAL_RCC_OscConfig+0x270>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ae:	f7fe ffc5 	bl	800333c <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043b6:	f7fe ffc1 	bl	800333c <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e1a1      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f0      	beq.n	80043b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d4:	4b2a      	ldr	r3, [pc, #168]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	00db      	lsls	r3, r3, #3
 80043e2:	4927      	ldr	r1, [pc, #156]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	600b      	str	r3, [r1, #0]
 80043e8:	e015      	b.n	8004416 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043ea:	4b26      	ldr	r3, [pc, #152]	@ (8004484 <HAL_RCC_OscConfig+0x270>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f0:	f7fe ffa4 	bl	800333c <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f8:	f7fe ffa0 	bl	800333c <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e180      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800440a:	4b1d      	ldr	r3, [pc, #116]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d03a      	beq.n	8004498 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d019      	beq.n	800445e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800442a:	4b17      	ldr	r3, [pc, #92]	@ (8004488 <HAL_RCC_OscConfig+0x274>)
 800442c:	2201      	movs	r2, #1
 800442e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004430:	f7fe ff84 	bl	800333c <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004438:	f7fe ff80 	bl	800333c <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e160      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800444a:	4b0d      	ldr	r3, [pc, #52]	@ (8004480 <HAL_RCC_OscConfig+0x26c>)
 800444c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004456:	2001      	movs	r0, #1
 8004458:	f000 face 	bl	80049f8 <RCC_Delay>
 800445c:	e01c      	b.n	8004498 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800445e:	4b0a      	ldr	r3, [pc, #40]	@ (8004488 <HAL_RCC_OscConfig+0x274>)
 8004460:	2200      	movs	r2, #0
 8004462:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004464:	f7fe ff6a 	bl	800333c <HAL_GetTick>
 8004468:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800446a:	e00f      	b.n	800448c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800446c:	f7fe ff66 	bl	800333c <HAL_GetTick>
 8004470:	4602      	mov	r2, r0
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	1ad3      	subs	r3, r2, r3
 8004476:	2b02      	cmp	r3, #2
 8004478:	d908      	bls.n	800448c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e146      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
 800447e:	bf00      	nop
 8004480:	40021000 	.word	0x40021000
 8004484:	42420000 	.word	0x42420000
 8004488:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800448c:	4b92      	ldr	r3, [pc, #584]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800448e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1e9      	bne.n	800446c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80a6 	beq.w	80045f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044a6:	2300      	movs	r3, #0
 80044a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044aa:	4b8b      	ldr	r3, [pc, #556]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80044ac:	69db      	ldr	r3, [r3, #28]
 80044ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d10d      	bne.n	80044d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b6:	4b88      	ldr	r3, [pc, #544]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	4a87      	ldr	r2, [pc, #540]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80044bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044c0:	61d3      	str	r3, [r2, #28]
 80044c2:	4b85      	ldr	r3, [pc, #532]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80044c4:	69db      	ldr	r3, [r3, #28]
 80044c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ca:	60bb      	str	r3, [r7, #8]
 80044cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ce:	2301      	movs	r3, #1
 80044d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d2:	4b82      	ldr	r3, [pc, #520]	@ (80046dc <HAL_RCC_OscConfig+0x4c8>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d118      	bne.n	8004510 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044de:	4b7f      	ldr	r3, [pc, #508]	@ (80046dc <HAL_RCC_OscConfig+0x4c8>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a7e      	ldr	r2, [pc, #504]	@ (80046dc <HAL_RCC_OscConfig+0x4c8>)
 80044e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ea:	f7fe ff27 	bl	800333c <HAL_GetTick>
 80044ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044f2:	f7fe ff23 	bl	800333c <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b64      	cmp	r3, #100	@ 0x64
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e103      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004504:	4b75      	ldr	r3, [pc, #468]	@ (80046dc <HAL_RCC_OscConfig+0x4c8>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800450c:	2b00      	cmp	r3, #0
 800450e:	d0f0      	beq.n	80044f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d106      	bne.n	8004526 <HAL_RCC_OscConfig+0x312>
 8004518:	4b6f      	ldr	r3, [pc, #444]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	4a6e      	ldr	r2, [pc, #440]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800451e:	f043 0301 	orr.w	r3, r3, #1
 8004522:	6213      	str	r3, [r2, #32]
 8004524:	e02d      	b.n	8004582 <HAL_RCC_OscConfig+0x36e>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10c      	bne.n	8004548 <HAL_RCC_OscConfig+0x334>
 800452e:	4b6a      	ldr	r3, [pc, #424]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	4a69      	ldr	r2, [pc, #420]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004534:	f023 0301 	bic.w	r3, r3, #1
 8004538:	6213      	str	r3, [r2, #32]
 800453a:	4b67      	ldr	r3, [pc, #412]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	4a66      	ldr	r2, [pc, #408]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004540:	f023 0304 	bic.w	r3, r3, #4
 8004544:	6213      	str	r3, [r2, #32]
 8004546:	e01c      	b.n	8004582 <HAL_RCC_OscConfig+0x36e>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	2b05      	cmp	r3, #5
 800454e:	d10c      	bne.n	800456a <HAL_RCC_OscConfig+0x356>
 8004550:	4b61      	ldr	r3, [pc, #388]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	4a60      	ldr	r2, [pc, #384]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004556:	f043 0304 	orr.w	r3, r3, #4
 800455a:	6213      	str	r3, [r2, #32]
 800455c:	4b5e      	ldr	r3, [pc, #376]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	4a5d      	ldr	r2, [pc, #372]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004562:	f043 0301 	orr.w	r3, r3, #1
 8004566:	6213      	str	r3, [r2, #32]
 8004568:	e00b      	b.n	8004582 <HAL_RCC_OscConfig+0x36e>
 800456a:	4b5b      	ldr	r3, [pc, #364]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800456c:	6a1b      	ldr	r3, [r3, #32]
 800456e:	4a5a      	ldr	r2, [pc, #360]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004570:	f023 0301 	bic.w	r3, r3, #1
 8004574:	6213      	str	r3, [r2, #32]
 8004576:	4b58      	ldr	r3, [pc, #352]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	4a57      	ldr	r2, [pc, #348]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800457c:	f023 0304 	bic.w	r3, r3, #4
 8004580:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d015      	beq.n	80045b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458a:	f7fe fed7 	bl	800333c <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004590:	e00a      	b.n	80045a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004592:	f7fe fed3 	bl	800333c <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e0b1      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a8:	4b4b      	ldr	r3, [pc, #300]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0ee      	beq.n	8004592 <HAL_RCC_OscConfig+0x37e>
 80045b4:	e014      	b.n	80045e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045b6:	f7fe fec1 	bl	800333c <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045bc:	e00a      	b.n	80045d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045be:	f7fe febd 	bl	800333c <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d901      	bls.n	80045d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80045d0:	2303      	movs	r3, #3
 80045d2:	e09b      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d4:	4b40      	ldr	r3, [pc, #256]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	f003 0302 	and.w	r3, r3, #2
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1ee      	bne.n	80045be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80045e0:	7dfb      	ldrb	r3, [r7, #23]
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d105      	bne.n	80045f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045e6:	4b3c      	ldr	r3, [pc, #240]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80045e8:	69db      	ldr	r3, [r3, #28]
 80045ea:	4a3b      	ldr	r2, [pc, #236]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80045ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69db      	ldr	r3, [r3, #28]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 8087 	beq.w	800470a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045fc:	4b36      	ldr	r3, [pc, #216]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f003 030c 	and.w	r3, r3, #12
 8004604:	2b08      	cmp	r3, #8
 8004606:	d061      	beq.n	80046cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	69db      	ldr	r3, [r3, #28]
 800460c:	2b02      	cmp	r3, #2
 800460e:	d146      	bne.n	800469e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004610:	4b33      	ldr	r3, [pc, #204]	@ (80046e0 <HAL_RCC_OscConfig+0x4cc>)
 8004612:	2200      	movs	r2, #0
 8004614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004616:	f7fe fe91 	bl	800333c <HAL_GetTick>
 800461a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800461c:	e008      	b.n	8004630 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800461e:	f7fe fe8d 	bl	800333c <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	2b02      	cmp	r3, #2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e06d      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004630:	4b29      	ldr	r3, [pc, #164]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1f0      	bne.n	800461e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004644:	d108      	bne.n	8004658 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004646:	4b24      	ldr	r3, [pc, #144]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	4921      	ldr	r1, [pc, #132]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004658:	4b1f      	ldr	r3, [pc, #124]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a19      	ldr	r1, [r3, #32]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004668:	430b      	orrs	r3, r1
 800466a:	491b      	ldr	r1, [pc, #108]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 800466c:	4313      	orrs	r3, r2
 800466e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004670:	4b1b      	ldr	r3, [pc, #108]	@ (80046e0 <HAL_RCC_OscConfig+0x4cc>)
 8004672:	2201      	movs	r2, #1
 8004674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004676:	f7fe fe61 	bl	800333c <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467e:	f7fe fe5d 	bl	800333c <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e03d      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004690:	4b11      	ldr	r3, [pc, #68]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <HAL_RCC_OscConfig+0x46a>
 800469c:	e035      	b.n	800470a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469e:	4b10      	ldr	r3, [pc, #64]	@ (80046e0 <HAL_RCC_OscConfig+0x4cc>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a4:	f7fe fe4a 	bl	800333c <HAL_GetTick>
 80046a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046aa:	e008      	b.n	80046be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ac:	f7fe fe46 	bl	800333c <HAL_GetTick>
 80046b0:	4602      	mov	r2, r0
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	2b02      	cmp	r3, #2
 80046b8:	d901      	bls.n	80046be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046ba:	2303      	movs	r3, #3
 80046bc:	e026      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046be:	4b06      	ldr	r3, [pc, #24]	@ (80046d8 <HAL_RCC_OscConfig+0x4c4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1f0      	bne.n	80046ac <HAL_RCC_OscConfig+0x498>
 80046ca:	e01e      	b.n	800470a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	69db      	ldr	r3, [r3, #28]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d107      	bne.n	80046e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e019      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
 80046d8:	40021000 	.word	0x40021000
 80046dc:	40007000 	.word	0x40007000
 80046e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004714 <HAL_RCC_OscConfig+0x500>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d106      	bne.n	8004706 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004702:	429a      	cmp	r2, r3
 8004704:	d001      	beq.n	800470a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40021000 	.word	0x40021000

08004718 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d101      	bne.n	800472c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e0d0      	b.n	80048ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800472c:	4b6a      	ldr	r3, [pc, #424]	@ (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	683a      	ldr	r2, [r7, #0]
 8004736:	429a      	cmp	r2, r3
 8004738:	d910      	bls.n	800475c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800473a:	4b67      	ldr	r3, [pc, #412]	@ (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f023 0207 	bic.w	r2, r3, #7
 8004742:	4965      	ldr	r1, [pc, #404]	@ (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	4313      	orrs	r3, r2
 8004748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800474a:	4b63      	ldr	r3, [pc, #396]	@ (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d001      	beq.n	800475c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0b8      	b.n	80048ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d020      	beq.n	80047aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004774:	4b59      	ldr	r3, [pc, #356]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	4a58      	ldr	r2, [pc, #352]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 800477a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800477e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800478c:	4b53      	ldr	r3, [pc, #332]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	4a52      	ldr	r2, [pc, #328]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004792:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004796:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004798:	4b50      	ldr	r3, [pc, #320]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	494d      	ldr	r1, [pc, #308]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d040      	beq.n	8004838 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d107      	bne.n	80047ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047be:	4b47      	ldr	r3, [pc, #284]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d115      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e07f      	b.n	80048ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d107      	bne.n	80047e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d6:	4b41      	ldr	r3, [pc, #260]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d109      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e073      	b.n	80048ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047e6:	4b3d      	ldr	r3, [pc, #244]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0302 	and.w	r3, r3, #2
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e06b      	b.n	80048ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047f6:	4b39      	ldr	r3, [pc, #228]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f023 0203 	bic.w	r2, r3, #3
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	4936      	ldr	r1, [pc, #216]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004804:	4313      	orrs	r3, r2
 8004806:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004808:	f7fe fd98 	bl	800333c <HAL_GetTick>
 800480c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800480e:	e00a      	b.n	8004826 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004810:	f7fe fd94 	bl	800333c <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800481e:	4293      	cmp	r3, r2
 8004820:	d901      	bls.n	8004826 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004822:	2303      	movs	r3, #3
 8004824:	e053      	b.n	80048ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004826:	4b2d      	ldr	r3, [pc, #180]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f003 020c 	and.w	r2, r3, #12
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	429a      	cmp	r2, r3
 8004836:	d1eb      	bne.n	8004810 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004838:	4b27      	ldr	r3, [pc, #156]	@ (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	429a      	cmp	r2, r3
 8004844:	d210      	bcs.n	8004868 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004846:	4b24      	ldr	r3, [pc, #144]	@ (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f023 0207 	bic.w	r2, r3, #7
 800484e:	4922      	ldr	r1, [pc, #136]	@ (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	4313      	orrs	r3, r2
 8004854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	4b20      	ldr	r3, [pc, #128]	@ (80048d8 <HAL_RCC_ClockConfig+0x1c0>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d001      	beq.n	8004868 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e032      	b.n	80048ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d008      	beq.n	8004886 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004874:	4b19      	ldr	r3, [pc, #100]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4916      	ldr	r1, [pc, #88]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004882:	4313      	orrs	r3, r2
 8004884:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d009      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004892:	4b12      	ldr	r3, [pc, #72]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	490e      	ldr	r1, [pc, #56]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048a6:	f000 f821 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 80048aa:	4602      	mov	r2, r0
 80048ac:	4b0b      	ldr	r3, [pc, #44]	@ (80048dc <HAL_RCC_ClockConfig+0x1c4>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	490a      	ldr	r1, [pc, #40]	@ (80048e0 <HAL_RCC_ClockConfig+0x1c8>)
 80048b8:	5ccb      	ldrb	r3, [r1, r3]
 80048ba:	fa22 f303 	lsr.w	r3, r2, r3
 80048be:	4a09      	ldr	r2, [pc, #36]	@ (80048e4 <HAL_RCC_ClockConfig+0x1cc>)
 80048c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048c2:	4b09      	ldr	r3, [pc, #36]	@ (80048e8 <HAL_RCC_ClockConfig+0x1d0>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fe fcf6 	bl	80032b8 <HAL_InitTick>

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40022000 	.word	0x40022000
 80048dc:	40021000 	.word	0x40021000
 80048e0:	0800a1c0 	.word	0x0800a1c0
 80048e4:	20000000 	.word	0x20000000
 80048e8:	20000018 	.word	0x20000018

080048ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b087      	sub	sp, #28
 80048f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
 80048f6:	2300      	movs	r3, #0
 80048f8:	60bb      	str	r3, [r7, #8]
 80048fa:	2300      	movs	r3, #0
 80048fc:	617b      	str	r3, [r7, #20]
 80048fe:	2300      	movs	r3, #0
 8004900:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004906:	4b1e      	ldr	r3, [pc, #120]	@ (8004980 <HAL_RCC_GetSysClockFreq+0x94>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 030c 	and.w	r3, r3, #12
 8004912:	2b04      	cmp	r3, #4
 8004914:	d002      	beq.n	800491c <HAL_RCC_GetSysClockFreq+0x30>
 8004916:	2b08      	cmp	r3, #8
 8004918:	d003      	beq.n	8004922 <HAL_RCC_GetSysClockFreq+0x36>
 800491a:	e027      	b.n	800496c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800491c:	4b19      	ldr	r3, [pc, #100]	@ (8004984 <HAL_RCC_GetSysClockFreq+0x98>)
 800491e:	613b      	str	r3, [r7, #16]
      break;
 8004920:	e027      	b.n	8004972 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	0c9b      	lsrs	r3, r3, #18
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	4a17      	ldr	r2, [pc, #92]	@ (8004988 <HAL_RCC_GetSysClockFreq+0x9c>)
 800492c:	5cd3      	ldrb	r3, [r2, r3]
 800492e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d010      	beq.n	800495c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800493a:	4b11      	ldr	r3, [pc, #68]	@ (8004980 <HAL_RCC_GetSysClockFreq+0x94>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	0c5b      	lsrs	r3, r3, #17
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	4a11      	ldr	r2, [pc, #68]	@ (800498c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004946:	5cd3      	ldrb	r3, [r2, r3]
 8004948:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a0d      	ldr	r2, [pc, #52]	@ (8004984 <HAL_RCC_GetSysClockFreq+0x98>)
 800494e:	fb03 f202 	mul.w	r2, r3, r2
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	fbb2 f3f3 	udiv	r3, r2, r3
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	e004      	b.n	8004966 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a0c      	ldr	r2, [pc, #48]	@ (8004990 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004960:	fb02 f303 	mul.w	r3, r2, r3
 8004964:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	613b      	str	r3, [r7, #16]
      break;
 800496a:	e002      	b.n	8004972 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800496c:	4b05      	ldr	r3, [pc, #20]	@ (8004984 <HAL_RCC_GetSysClockFreq+0x98>)
 800496e:	613b      	str	r3, [r7, #16]
      break;
 8004970:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004972:	693b      	ldr	r3, [r7, #16]
}
 8004974:	4618      	mov	r0, r3
 8004976:	371c      	adds	r7, #28
 8004978:	46bd      	mov	sp, r7
 800497a:	bc80      	pop	{r7}
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	40021000 	.word	0x40021000
 8004984:	007a1200 	.word	0x007a1200
 8004988:	0800a1e4 	.word	0x0800a1e4
 800498c:	0800a1f4 	.word	0x0800a1f4
 8004990:	003d0900 	.word	0x003d0900

08004994 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004998:	4b02      	ldr	r3, [pc, #8]	@ (80049a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800499a:	681b      	ldr	r3, [r3, #0]
}
 800499c:	4618      	mov	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	bc80      	pop	{r7}
 80049a2:	4770      	bx	lr
 80049a4:	20000000 	.word	0x20000000

080049a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80049ac:	f7ff fff2 	bl	8004994 <HAL_RCC_GetHCLKFreq>
 80049b0:	4602      	mov	r2, r0
 80049b2:	4b05      	ldr	r3, [pc, #20]	@ (80049c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	0a1b      	lsrs	r3, r3, #8
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	4903      	ldr	r1, [pc, #12]	@ (80049cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80049be:	5ccb      	ldrb	r3, [r1, r3]
 80049c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40021000 	.word	0x40021000
 80049cc:	0800a1d0 	.word	0x0800a1d0

080049d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80049d4:	f7ff ffde 	bl	8004994 <HAL_RCC_GetHCLKFreq>
 80049d8:	4602      	mov	r2, r0
 80049da:	4b05      	ldr	r3, [pc, #20]	@ (80049f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	0adb      	lsrs	r3, r3, #11
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	4903      	ldr	r1, [pc, #12]	@ (80049f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049e6:	5ccb      	ldrb	r3, [r1, r3]
 80049e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	40021000 	.word	0x40021000
 80049f4:	0800a1d0 	.word	0x0800a1d0

080049f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b085      	sub	sp, #20
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a00:	4b0a      	ldr	r3, [pc, #40]	@ (8004a2c <RCC_Delay+0x34>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a0a      	ldr	r2, [pc, #40]	@ (8004a30 <RCC_Delay+0x38>)
 8004a06:	fba2 2303 	umull	r2, r3, r2, r3
 8004a0a:	0a5b      	lsrs	r3, r3, #9
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	fb02 f303 	mul.w	r3, r2, r3
 8004a12:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004a14:	bf00      	nop
  }
  while (Delay --);
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	1e5a      	subs	r2, r3, #1
 8004a1a:	60fa      	str	r2, [r7, #12]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1f9      	bne.n	8004a14 <RCC_Delay+0x1c>
}
 8004a20:	bf00      	nop
 8004a22:	bf00      	nop
 8004a24:	3714      	adds	r7, #20
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bc80      	pop	{r7}
 8004a2a:	4770      	bx	lr
 8004a2c:	20000000 	.word	0x20000000
 8004a30:	10624dd3 	.word	0x10624dd3

08004a34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b082      	sub	sp, #8
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d101      	bne.n	8004a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e042      	b.n	8004acc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d106      	bne.n	8004a60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f7fe fad4 	bl	8003008 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2224      	movs	r2, #36	@ 0x24
 8004a64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 ff7d 	bl	8005978 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	695a      	ldr	r2, [r3, #20]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68da      	ldr	r2, [r3, #12]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004aac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e024      	b.n	8004b30 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2224      	movs	r2, #36	@ 0x24
 8004aea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68da      	ldr	r2, [r3, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004afc:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7fe fb6a 	bl	80031d8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08a      	sub	sp, #40	@ 0x28
 8004b3c:	af02      	add	r7, sp, #8
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	603b      	str	r3, [r7, #0]
 8004b44:	4613      	mov	r3, r2
 8004b46:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d16d      	bne.n	8004c34 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d002      	beq.n	8004b64 <HAL_UART_Transmit+0x2c>
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e066      	b.n	8004c36 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2221      	movs	r2, #33	@ 0x21
 8004b72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b76:	f7fe fbe1 	bl	800333c <HAL_GetTick>
 8004b7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	88fa      	ldrh	r2, [r7, #6]
 8004b80:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	88fa      	ldrh	r2, [r7, #6]
 8004b86:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b90:	d108      	bne.n	8004ba4 <HAL_UART_Transmit+0x6c>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d104      	bne.n	8004ba4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	61bb      	str	r3, [r7, #24]
 8004ba2:	e003      	b.n	8004bac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bac:	e02a      	b.n	8004c04 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	2180      	movs	r1, #128	@ 0x80
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f000 fc12 	bl	80053e2 <UART_WaitOnFlagUntilTimeout>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d001      	beq.n	8004bc8 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e036      	b.n	8004c36 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10b      	bne.n	8004be6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	3302      	adds	r3, #2
 8004be2:	61bb      	str	r3, [r7, #24]
 8004be4:	e007      	b.n	8004bf6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	781a      	ldrb	r2, [r3, #0]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d1cf      	bne.n	8004bae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	2200      	movs	r2, #0
 8004c16:	2140      	movs	r1, #64	@ 0x40
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 fbe2 	bl	80053e2 <UART_WaitOnFlagUntilTimeout>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d001      	beq.n	8004c28 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e006      	b.n	8004c36 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	e000      	b.n	8004c36 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004c34:	2302      	movs	r3, #2
  }
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3720      	adds	r7, #32
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c3e:	b580      	push	{r7, lr}
 8004c40:	b084      	sub	sp, #16
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	60b9      	str	r1, [r7, #8]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b20      	cmp	r3, #32
 8004c56:	d112      	bne.n	8004c7e <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d002      	beq.n	8004c64 <HAL_UART_Receive_DMA+0x26>
 8004c5e:	88fb      	ldrh	r3, [r7, #6]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e00b      	b.n	8004c80 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004c6e:	88fb      	ldrh	r3, [r7, #6]
 8004c70:	461a      	mov	r2, r3
 8004c72:	68b9      	ldr	r1, [r7, #8]
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 fc23 	bl	80054c0 <UART_Start_Receive_DMA>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	e000      	b.n	8004c80 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c7e:	2302      	movs	r3, #2
  }
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b0ba      	sub	sp, #232	@ 0xe8
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004cc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10f      	bne.n	8004cee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cd2:	f003 0320 	and.w	r3, r3, #32
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d009      	beq.n	8004cee <HAL_UART_IRQHandler+0x66>
 8004cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cde:	f003 0320 	and.w	r3, r3, #32
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fd88 	bl	80057fc <UART_Receive_IT>
      return;
 8004cec:	e25b      	b.n	80051a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004cee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 80de 	beq.w	8004eb4 <HAL_UART_IRQHandler+0x22c>
 8004cf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cfc:	f003 0301 	and.w	r3, r3, #1
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d106      	bne.n	8004d12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d08:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f000 80d1 	beq.w	8004eb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00b      	beq.n	8004d36 <HAL_UART_IRQHandler+0xae>
 8004d1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d005      	beq.n	8004d36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2e:	f043 0201 	orr.w	r2, r3, #1
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d3a:	f003 0304 	and.w	r3, r3, #4
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00b      	beq.n	8004d5a <HAL_UART_IRQHandler+0xd2>
 8004d42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d46:	f003 0301 	and.w	r3, r3, #1
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d005      	beq.n	8004d5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d52:	f043 0202 	orr.w	r2, r3, #2
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00b      	beq.n	8004d7e <HAL_UART_IRQHandler+0xf6>
 8004d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d6a:	f003 0301 	and.w	r3, r3, #1
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d005      	beq.n	8004d7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d76:	f043 0204 	orr.w	r2, r3, #4
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d011      	beq.n	8004dae <HAL_UART_IRQHandler+0x126>
 8004d8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d8e:	f003 0320 	and.w	r3, r3, #32
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d105      	bne.n	8004da2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d005      	beq.n	8004dae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004da6:	f043 0208 	orr.w	r2, r3, #8
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 81f2 	beq.w	800519c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dbc:	f003 0320 	and.w	r3, r3, #32
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <HAL_UART_IRQHandler+0x14e>
 8004dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dc8:	f003 0320 	and.w	r3, r3, #32
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 fd13 	bl	80057fc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	695b      	ldr	r3, [r3, #20]
 8004ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	bf14      	ite	ne
 8004de4:	2301      	movne	r3, #1
 8004de6:	2300      	moveq	r3, #0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004df2:	f003 0308 	and.w	r3, r3, #8
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d103      	bne.n	8004e02 <HAL_UART_IRQHandler+0x17a>
 8004dfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d04f      	beq.n	8004ea2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 fc1d 	bl	8005642 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d041      	beq.n	8004e9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3314      	adds	r3, #20
 8004e1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e20:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e30:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	3314      	adds	r3, #20
 8004e3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e42:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e52:	e841 2300 	strex	r3, r2, [r1]
 8004e56:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1d9      	bne.n	8004e16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d013      	beq.n	8004e92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e6e:	4a7e      	ldr	r2, [pc, #504]	@ (8005068 <HAL_UART_IRQHandler+0x3e0>)
 8004e70:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7fe fd3c 	bl	80038f4 <HAL_DMA_Abort_IT>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d016      	beq.n	8004eb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e8c:	4610      	mov	r0, r2
 8004e8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e90:	e00e      	b.n	8004eb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fe f8a6 	bl	8002fe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e98:	e00a      	b.n	8004eb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f7fe f8a2 	bl	8002fe4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea0:	e006      	b.n	8004eb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f7fe f89e 	bl	8002fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004eae:	e175      	b.n	800519c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb0:	bf00      	nop
    return;
 8004eb2:	e173      	b.n	800519c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	f040 814f 	bne.w	800515c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ec2:	f003 0310 	and.w	r3, r3, #16
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f000 8148 	beq.w	800515c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ed0:	f003 0310 	and.w	r3, r3, #16
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	f000 8141 	beq.w	800515c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004eda:	2300      	movs	r3, #0
 8004edc:	60bb      	str	r3, [r7, #8]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	60bb      	str	r3, [r7, #8]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	60bb      	str	r3, [r7, #8]
 8004eee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 80b6 	beq.w	800506c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f0c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 8145 	beq.w	80051a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	f080 813e 	bcs.w	80051a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f2a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	2b20      	cmp	r3, #32
 8004f34:	f000 8088 	beq.w	8005048 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	330c      	adds	r3, #12
 8004f3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f42:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f46:	e853 3f00 	ldrex	r3, [r3]
 8004f4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f56:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	330c      	adds	r3, #12
 8004f60:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004f64:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f68:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f70:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f74:	e841 2300 	strex	r3, r2, [r1]
 8004f78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1d9      	bne.n	8004f38 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3314      	adds	r3, #20
 8004f8a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f8e:	e853 3f00 	ldrex	r3, [r3]
 8004f92:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f96:	f023 0301 	bic.w	r3, r3, #1
 8004f9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3314      	adds	r3, #20
 8004fa4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004fa8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004fac:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fae:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004fb0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004fb4:	e841 2300 	strex	r3, r2, [r1]
 8004fb8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004fba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e1      	bne.n	8004f84 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3314      	adds	r3, #20
 8004fc6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fca:	e853 3f00 	ldrex	r3, [r3]
 8004fce:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004fd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fd6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3314      	adds	r3, #20
 8004fe0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004fe4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004fe6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004fea:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004fec:	e841 2300 	strex	r3, r2, [r1]
 8004ff0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004ff2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e3      	bne.n	8004fc0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	330c      	adds	r3, #12
 800500c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005010:	e853 3f00 	ldrex	r3, [r3]
 8005014:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005016:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005018:	f023 0310 	bic.w	r3, r3, #16
 800501c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	330c      	adds	r3, #12
 8005026:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800502a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800502c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800502e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005030:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005032:	e841 2300 	strex	r3, r2, [r1]
 8005036:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005038:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800503a:	2b00      	cmp	r3, #0
 800503c:	d1e3      	bne.n	8005006 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005042:	4618      	mov	r0, r3
 8005044:	f7fe fc1a 	bl	800387c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005056:	b29b      	uxth	r3, r3
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	b29b      	uxth	r3, r3
 800505c:	4619      	mov	r1, r3
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f8b6 	bl	80051d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005064:	e09c      	b.n	80051a0 <HAL_UART_IRQHandler+0x518>
 8005066:	bf00      	nop
 8005068:	08005707 	.word	0x08005707
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005074:	b29b      	uxth	r3, r3
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005080:	b29b      	uxth	r3, r3
 8005082:	2b00      	cmp	r3, #0
 8005084:	f000 808e 	beq.w	80051a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005088:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 8089 	beq.w	80051a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	330c      	adds	r3, #12
 8005098:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509c:	e853 3f00 	ldrex	r3, [r3]
 80050a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	330c      	adds	r3, #12
 80050b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80050b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80050b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050be:	e841 2300 	strex	r3, r2, [r1]
 80050c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1e3      	bne.n	8005092 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	3314      	adds	r3, #20
 80050d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d4:	e853 3f00 	ldrex	r3, [r3]
 80050d8:	623b      	str	r3, [r7, #32]
   return(result);
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	f023 0301 	bic.w	r3, r3, #1
 80050e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3314      	adds	r3, #20
 80050ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80050ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80050f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050f6:	e841 2300 	strex	r3, r2, [r1]
 80050fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1e3      	bne.n	80050ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2200      	movs	r2, #0
 800510e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	330c      	adds	r3, #12
 8005116:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	e853 3f00 	ldrex	r3, [r3]
 800511e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 0310 	bic.w	r3, r3, #16
 8005126:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	330c      	adds	r3, #12
 8005130:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005134:	61fa      	str	r2, [r7, #28]
 8005136:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005138:	69b9      	ldr	r1, [r7, #24]
 800513a:	69fa      	ldr	r2, [r7, #28]
 800513c:	e841 2300 	strex	r3, r2, [r1]
 8005140:	617b      	str	r3, [r7, #20]
   return(result);
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e3      	bne.n	8005110 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800514e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005152:	4619      	mov	r1, r3
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f83b 	bl	80051d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800515a:	e023      	b.n	80051a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800515c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005160:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005164:	2b00      	cmp	r3, #0
 8005166:	d009      	beq.n	800517c <HAL_UART_IRQHandler+0x4f4>
 8005168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800516c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 fada 	bl	800572e <UART_Transmit_IT>
    return;
 800517a:	e014      	b.n	80051a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800517c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005184:	2b00      	cmp	r3, #0
 8005186:	d00e      	beq.n	80051a6 <HAL_UART_IRQHandler+0x51e>
 8005188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800518c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005190:	2b00      	cmp	r3, #0
 8005192:	d008      	beq.n	80051a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f000 fb19 	bl	80057cc <UART_EndTransmit_IT>
    return;
 800519a:	e004      	b.n	80051a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800519c:	bf00      	nop
 800519e:	e002      	b.n	80051a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80051a0:	bf00      	nop
 80051a2:	e000      	b.n	80051a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80051a4:	bf00      	nop
  }
}
 80051a6:	37e8      	adds	r7, #232	@ 0xe8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}

080051ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bc80      	pop	{r7}
 80051bc:	4770      	bx	lr

080051be <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80051be:	b480      	push	{r7}
 80051c0:	b083      	sub	sp, #12
 80051c2:	af00      	add	r7, sp, #0
 80051c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80051c6:	bf00      	nop
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bc80      	pop	{r7}
 80051ce:	4770      	bx	lr

080051d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bc80      	pop	{r7}
 80051e4:	4770      	bx	lr

080051e6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	b09c      	sub	sp, #112	@ 0x70
 80051ea:	af00      	add	r7, sp, #0
 80051ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0320 	and.w	r3, r3, #32
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d172      	bne.n	80052e8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005202:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005204:	2200      	movs	r2, #0
 8005206:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005208:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	330c      	adds	r3, #12
 800520e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005212:	e853 3f00 	ldrex	r3, [r3]
 8005216:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005218:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800521a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800521e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005220:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	330c      	adds	r3, #12
 8005226:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005228:	65ba      	str	r2, [r7, #88]	@ 0x58
 800522a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800522e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005230:	e841 2300 	strex	r3, r2, [r1]
 8005234:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005236:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e5      	bne.n	8005208 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	3314      	adds	r3, #20
 8005242:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005246:	e853 3f00 	ldrex	r3, [r3]
 800524a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800524c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800524e:	f023 0301 	bic.w	r3, r3, #1
 8005252:	667b      	str	r3, [r7, #100]	@ 0x64
 8005254:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3314      	adds	r3, #20
 800525a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800525c:	647a      	str	r2, [r7, #68]	@ 0x44
 800525e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005260:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005262:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005264:	e841 2300 	strex	r3, r2, [r1]
 8005268:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800526a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1e5      	bne.n	800523c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3314      	adds	r3, #20
 8005276:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527a:	e853 3f00 	ldrex	r3, [r3]
 800527e:	623b      	str	r3, [r7, #32]
   return(result);
 8005280:	6a3b      	ldr	r3, [r7, #32]
 8005282:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005286:	663b      	str	r3, [r7, #96]	@ 0x60
 8005288:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3314      	adds	r3, #20
 800528e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005290:	633a      	str	r2, [r7, #48]	@ 0x30
 8005292:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005294:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005296:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005298:	e841 2300 	strex	r3, r2, [r1]
 800529c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800529e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1e5      	bne.n	8005270 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80052a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052a6:	2220      	movs	r2, #32
 80052a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d119      	bne.n	80052e8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	330c      	adds	r3, #12
 80052ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	e853 3f00 	ldrex	r3, [r3]
 80052c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0310 	bic.w	r3, r3, #16
 80052ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80052cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	330c      	adds	r3, #12
 80052d2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80052d4:	61fa      	str	r2, [r7, #28]
 80052d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d8:	69b9      	ldr	r1, [r7, #24]
 80052da:	69fa      	ldr	r2, [r7, #28]
 80052dc:	e841 2300 	strex	r3, r2, [r1]
 80052e0:	617b      	str	r3, [r7, #20]
   return(result);
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1e5      	bne.n	80052b4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052ea:	2200      	movs	r2, #0
 80052ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	d106      	bne.n	8005304 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80052f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80052fa:	4619      	mov	r1, r3
 80052fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80052fe:	f7ff ff67 	bl	80051d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005302:	e002      	b.n	800530a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005304:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005306:	f7fd fe76 	bl	8002ff6 <HAL_UART_RxCpltCallback>
}
 800530a:	bf00      	nop
 800530c:	3770      	adds	r7, #112	@ 0x70
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2201      	movs	r2, #1
 8005324:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800532a:	2b01      	cmp	r3, #1
 800532c:	d108      	bne.n	8005340 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005332:	085b      	lsrs	r3, r3, #1
 8005334:	b29b      	uxth	r3, r3
 8005336:	4619      	mov	r1, r3
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f7ff ff49 	bl	80051d0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800533e:	e002      	b.n	8005346 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f7ff ff3c 	bl	80051be <HAL_UART_RxHalfCpltCallback>
}
 8005346:	bf00      	nop
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b084      	sub	sp, #16
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800535e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800536a:	2b00      	cmp	r3, #0
 800536c:	bf14      	ite	ne
 800536e:	2301      	movne	r3, #1
 8005370:	2300      	moveq	r3, #0
 8005372:	b2db      	uxtb	r3, r3
 8005374:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b21      	cmp	r3, #33	@ 0x21
 8005380:	d108      	bne.n	8005394 <UART_DMAError+0x46>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2200      	movs	r2, #0
 800538c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800538e:	68b8      	ldr	r0, [r7, #8]
 8005390:	f000 f930 	bl	80055f4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800539e:	2b00      	cmp	r3, #0
 80053a0:	bf14      	ite	ne
 80053a2:	2301      	movne	r3, #1
 80053a4:	2300      	moveq	r3, #0
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b22      	cmp	r3, #34	@ 0x22
 80053b4:	d108      	bne.n	80053c8 <UART_DMAError+0x7a>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2200      	movs	r2, #0
 80053c0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80053c2:	68b8      	ldr	r0, [r7, #8]
 80053c4:	f000 f93d 	bl	8005642 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053cc:	f043 0210 	orr.w	r2, r3, #16
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053d4:	68b8      	ldr	r0, [r7, #8]
 80053d6:	f7fd fe05 	bl	8002fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053da:	bf00      	nop
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b090      	sub	sp, #64	@ 0x40
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	60f8      	str	r0, [r7, #12]
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	603b      	str	r3, [r7, #0]
 80053ee:	4613      	mov	r3, r2
 80053f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053f2:	e050      	b.n	8005496 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053fa:	d04c      	beq.n	8005496 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80053fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d007      	beq.n	8005412 <UART_WaitOnFlagUntilTimeout+0x30>
 8005402:	f7fd ff9b 	bl	800333c <HAL_GetTick>
 8005406:	4602      	mov	r2, r0
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	1ad3      	subs	r3, r2, r3
 800540c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800540e:	429a      	cmp	r2, r3
 8005410:	d241      	bcs.n	8005496 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	330c      	adds	r3, #12
 8005418:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005424:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005428:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	330c      	adds	r3, #12
 8005430:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005432:	637a      	str	r2, [r7, #52]	@ 0x34
 8005434:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005436:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005438:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800543a:	e841 2300 	strex	r3, r2, [r1]
 800543e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1e5      	bne.n	8005412 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	3314      	adds	r3, #20
 800544c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	e853 3f00 	ldrex	r3, [r3]
 8005454:	613b      	str	r3, [r7, #16]
   return(result);
 8005456:	693b      	ldr	r3, [r7, #16]
 8005458:	f023 0301 	bic.w	r3, r3, #1
 800545c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3314      	adds	r3, #20
 8005464:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005466:	623a      	str	r2, [r7, #32]
 8005468:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546a:	69f9      	ldr	r1, [r7, #28]
 800546c:	6a3a      	ldr	r2, [r7, #32]
 800546e:	e841 2300 	strex	r3, r2, [r1]
 8005472:	61bb      	str	r3, [r7, #24]
   return(result);
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1e5      	bne.n	8005446 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2220      	movs	r2, #32
 800547e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2220      	movs	r2, #32
 8005486:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8005492:	2303      	movs	r3, #3
 8005494:	e00f      	b.n	80054b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4013      	ands	r3, r2
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	bf0c      	ite	eq
 80054a6:	2301      	moveq	r3, #1
 80054a8:	2300      	movne	r3, #0
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	461a      	mov	r2, r3
 80054ae:	79fb      	ldrb	r3, [r7, #7]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d09f      	beq.n	80053f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3740      	adds	r7, #64	@ 0x40
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
	...

080054c0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b098      	sub	sp, #96	@ 0x60
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	4613      	mov	r3, r2
 80054cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	88fa      	ldrh	r2, [r7, #6]
 80054d8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2222      	movs	r2, #34	@ 0x22
 80054e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ec:	4a3e      	ldr	r2, [pc, #248]	@ (80055e8 <UART_Start_Receive_DMA+0x128>)
 80054ee:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054f4:	4a3d      	ldr	r2, [pc, #244]	@ (80055ec <UART_Start_Receive_DMA+0x12c>)
 80054f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054fc:	4a3c      	ldr	r2, [pc, #240]	@ (80055f0 <UART_Start_Receive_DMA+0x130>)
 80054fe:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005504:	2200      	movs	r2, #0
 8005506:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005508:	f107 0308 	add.w	r3, r7, #8
 800550c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	3304      	adds	r3, #4
 8005518:	4619      	mov	r1, r3
 800551a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	88fb      	ldrh	r3, [r7, #6]
 8005520:	f7fe f94c 	bl	80037bc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005524:	2300      	movs	r3, #0
 8005526:	613b      	str	r3, [r7, #16]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	613b      	str	r3, [r7, #16]
 8005538:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d019      	beq.n	8005576 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	330c      	adds	r3, #12
 8005548:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005558:	65bb      	str	r3, [r7, #88]	@ 0x58
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	330c      	adds	r3, #12
 8005560:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005562:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005564:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005568:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005570:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e5      	bne.n	8005542 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3314      	adds	r3, #20
 800557c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005580:	e853 3f00 	ldrex	r3, [r3]
 8005584:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005588:	f043 0301 	orr.w	r3, r3, #1
 800558c:	657b      	str	r3, [r7, #84]	@ 0x54
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3314      	adds	r3, #20
 8005594:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005596:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005598:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800559c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1e5      	bne.n	8005576 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	3314      	adds	r3, #20
 80055b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	e853 3f00 	ldrex	r3, [r3]
 80055b8:	617b      	str	r3, [r7, #20]
   return(result);
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	3314      	adds	r3, #20
 80055c8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80055ca:	627a      	str	r2, [r7, #36]	@ 0x24
 80055cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ce:	6a39      	ldr	r1, [r7, #32]
 80055d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055d2:	e841 2300 	strex	r3, r2, [r1]
 80055d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1e5      	bne.n	80055aa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3760      	adds	r7, #96	@ 0x60
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	080051e7 	.word	0x080051e7
 80055ec:	08005313 	.word	0x08005313
 80055f0:	0800534f 	.word	0x0800534f

080055f4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b089      	sub	sp, #36	@ 0x24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	330c      	adds	r3, #12
 8005602:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	e853 3f00 	ldrex	r3, [r3]
 800560a:	60bb      	str	r3, [r7, #8]
   return(result);
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005612:	61fb      	str	r3, [r7, #28]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	330c      	adds	r3, #12
 800561a:	69fa      	ldr	r2, [r7, #28]
 800561c:	61ba      	str	r2, [r7, #24]
 800561e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005620:	6979      	ldr	r1, [r7, #20]
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	e841 2300 	strex	r3, r2, [r1]
 8005628:	613b      	str	r3, [r7, #16]
   return(result);
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1e5      	bne.n	80055fc <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005638:	bf00      	nop
 800563a:	3724      	adds	r7, #36	@ 0x24
 800563c:	46bd      	mov	sp, r7
 800563e:	bc80      	pop	{r7}
 8005640:	4770      	bx	lr

08005642 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005642:	b480      	push	{r7}
 8005644:	b095      	sub	sp, #84	@ 0x54
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	330c      	adds	r3, #12
 8005650:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005652:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005654:	e853 3f00 	ldrex	r3, [r3]
 8005658:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800565a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005660:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	330c      	adds	r3, #12
 8005668:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800566a:	643a      	str	r2, [r7, #64]	@ 0x40
 800566c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005670:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005672:	e841 2300 	strex	r3, r2, [r1]
 8005676:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1e5      	bne.n	800564a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	3314      	adds	r3, #20
 8005684:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005686:	6a3b      	ldr	r3, [r7, #32]
 8005688:	e853 3f00 	ldrex	r3, [r3]
 800568c:	61fb      	str	r3, [r7, #28]
   return(result);
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	f023 0301 	bic.w	r3, r3, #1
 8005694:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	3314      	adds	r3, #20
 800569c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800569e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056a6:	e841 2300 	strex	r3, r2, [r1]
 80056aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1e5      	bne.n	800567e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d119      	bne.n	80056ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	330c      	adds	r3, #12
 80056c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f023 0310 	bic.w	r3, r3, #16
 80056d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	330c      	adds	r3, #12
 80056d8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80056da:	61ba      	str	r2, [r7, #24]
 80056dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	6979      	ldr	r1, [r7, #20]
 80056e0:	69ba      	ldr	r2, [r7, #24]
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	613b      	str	r3, [r7, #16]
   return(result);
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e5      	bne.n	80056ba <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80056fc:	bf00      	nop
 80056fe:	3754      	adds	r7, #84	@ 0x54
 8005700:	46bd      	mov	sp, r7
 8005702:	bc80      	pop	{r7}
 8005704:	4770      	bx	lr

08005706 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005706:	b580      	push	{r7, lr}
 8005708:	b084      	sub	sp, #16
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005712:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	2200      	movs	r2, #0
 8005718:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f7fd fc5f 	bl	8002fe4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005726:	bf00      	nop
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800572e:	b480      	push	{r7}
 8005730:	b085      	sub	sp, #20
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b21      	cmp	r3, #33	@ 0x21
 8005740:	d13e      	bne.n	80057c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800574a:	d114      	bne.n	8005776 <UART_Transmit_IT+0x48>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d110      	bne.n	8005776 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	881b      	ldrh	r3, [r3, #0]
 800575e:	461a      	mov	r2, r3
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005768:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	1c9a      	adds	r2, r3, #2
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	621a      	str	r2, [r3, #32]
 8005774:	e008      	b.n	8005788 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	1c59      	adds	r1, r3, #1
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	6211      	str	r1, [r2, #32]
 8005780:	781a      	ldrb	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800578c:	b29b      	uxth	r3, r3
 800578e:	3b01      	subs	r3, #1
 8005790:	b29b      	uxth	r3, r3
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	4619      	mov	r1, r3
 8005796:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005798:	2b00      	cmp	r3, #0
 800579a:	d10f      	bne.n	80057bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	68da      	ldr	r2, [r3, #12]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68da      	ldr	r2, [r3, #12]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057bc:	2300      	movs	r3, #0
 80057be:	e000      	b.n	80057c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057c0:	2302      	movs	r3, #2
  }
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3714      	adds	r7, #20
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bc80      	pop	{r7}
 80057ca:	4770      	bx	lr

080057cc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057e2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2220      	movs	r2, #32
 80057e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7ff fcdd 	bl	80051ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	3708      	adds	r7, #8
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}

080057fc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08c      	sub	sp, #48	@ 0x30
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b22      	cmp	r3, #34	@ 0x22
 800580e:	f040 80ae 	bne.w	800596e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800581a:	d117      	bne.n	800584c <UART_Receive_IT+0x50>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d113      	bne.n	800584c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005824:	2300      	movs	r3, #0
 8005826:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800582c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	b29b      	uxth	r3, r3
 8005836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800583a:	b29a      	uxth	r2, r3
 800583c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005844:	1c9a      	adds	r2, r3, #2
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	629a      	str	r2, [r3, #40]	@ 0x28
 800584a:	e026      	b.n	800589a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005850:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005852:	2300      	movs	r3, #0
 8005854:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800585e:	d007      	beq.n	8005870 <UART_Receive_IT+0x74>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10a      	bne.n	800587e <UART_Receive_IT+0x82>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d106      	bne.n	800587e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	b2da      	uxtb	r2, r3
 8005878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587a:	701a      	strb	r2, [r3, #0]
 800587c:	e008      	b.n	8005890 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	b2db      	uxtb	r3, r3
 8005886:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800588a:	b2da      	uxtb	r2, r3
 800588c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800588e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005894:	1c5a      	adds	r2, r3, #1
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800589e:	b29b      	uxth	r3, r3
 80058a0:	3b01      	subs	r3, #1
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	4619      	mov	r1, r3
 80058a8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d15d      	bne.n	800596a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f022 0220 	bic.w	r2, r2, #32
 80058bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80058cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	695a      	ldr	r2, [r3, #20]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f022 0201 	bic.w	r2, r2, #1
 80058dc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2220      	movs	r2, #32
 80058e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d135      	bne.n	8005960 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	330c      	adds	r3, #12
 8005900:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	e853 3f00 	ldrex	r3, [r3]
 8005908:	613b      	str	r3, [r7, #16]
   return(result);
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f023 0310 	bic.w	r3, r3, #16
 8005910:	627b      	str	r3, [r7, #36]	@ 0x24
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	330c      	adds	r3, #12
 8005918:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800591a:	623a      	str	r2, [r7, #32]
 800591c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591e:	69f9      	ldr	r1, [r7, #28]
 8005920:	6a3a      	ldr	r2, [r7, #32]
 8005922:	e841 2300 	strex	r3, r2, [r1]
 8005926:	61bb      	str	r3, [r7, #24]
   return(result);
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1e5      	bne.n	80058fa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0310 	and.w	r3, r3, #16
 8005938:	2b10      	cmp	r3, #16
 800593a:	d10a      	bne.n	8005952 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800593c:	2300      	movs	r3, #0
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005956:	4619      	mov	r1, r3
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f7ff fc39 	bl	80051d0 <HAL_UARTEx_RxEventCallback>
 800595e:	e002      	b.n	8005966 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f7fd fb48 	bl	8002ff6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	e002      	b.n	8005970 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800596a:	2300      	movs	r3, #0
 800596c:	e000      	b.n	8005970 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800596e:	2302      	movs	r3, #2
  }
}
 8005970:	4618      	mov	r0, r3
 8005972:	3730      	adds	r7, #48	@ 0x30
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	430a      	orrs	r2, r1
 8005994:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	689a      	ldr	r2, [r3, #8]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80059b2:	f023 030c 	bic.w	r3, r3, #12
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	6812      	ldr	r2, [r2, #0]
 80059ba:	68b9      	ldr	r1, [r7, #8]
 80059bc:	430b      	orrs	r3, r1
 80059be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	699a      	ldr	r2, [r3, #24]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a2c      	ldr	r2, [pc, #176]	@ (8005a8c <UART_SetConfig+0x114>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d103      	bne.n	80059e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80059e0:	f7fe fff6 	bl	80049d0 <HAL_RCC_GetPCLK2Freq>
 80059e4:	60f8      	str	r0, [r7, #12]
 80059e6:	e002      	b.n	80059ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80059e8:	f7fe ffde 	bl	80049a8 <HAL_RCC_GetPCLK1Freq>
 80059ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4613      	mov	r3, r2
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4413      	add	r3, r2
 80059f6:	009a      	lsls	r2, r3, #2
 80059f8:	441a      	add	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a04:	4a22      	ldr	r2, [pc, #136]	@ (8005a90 <UART_SetConfig+0x118>)
 8005a06:	fba2 2303 	umull	r2, r3, r2, r3
 8005a0a:	095b      	lsrs	r3, r3, #5
 8005a0c:	0119      	lsls	r1, r3, #4
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4613      	mov	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	4413      	add	r3, r2
 8005a16:	009a      	lsls	r2, r3, #2
 8005a18:	441a      	add	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a24:	4b1a      	ldr	r3, [pc, #104]	@ (8005a90 <UART_SetConfig+0x118>)
 8005a26:	fba3 0302 	umull	r0, r3, r3, r2
 8005a2a:	095b      	lsrs	r3, r3, #5
 8005a2c:	2064      	movs	r0, #100	@ 0x64
 8005a2e:	fb00 f303 	mul.w	r3, r0, r3
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	3332      	adds	r3, #50	@ 0x32
 8005a38:	4a15      	ldr	r2, [pc, #84]	@ (8005a90 <UART_SetConfig+0x118>)
 8005a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a44:	4419      	add	r1, r3
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	4613      	mov	r3, r2
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	4413      	add	r3, r2
 8005a4e:	009a      	lsls	r2, r3, #2
 8005a50:	441a      	add	r2, r3
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a5c:	4b0c      	ldr	r3, [pc, #48]	@ (8005a90 <UART_SetConfig+0x118>)
 8005a5e:	fba3 0302 	umull	r0, r3, r3, r2
 8005a62:	095b      	lsrs	r3, r3, #5
 8005a64:	2064      	movs	r0, #100	@ 0x64
 8005a66:	fb00 f303 	mul.w	r3, r0, r3
 8005a6a:	1ad3      	subs	r3, r2, r3
 8005a6c:	011b      	lsls	r3, r3, #4
 8005a6e:	3332      	adds	r3, #50	@ 0x32
 8005a70:	4a07      	ldr	r2, [pc, #28]	@ (8005a90 <UART_SetConfig+0x118>)
 8005a72:	fba2 2303 	umull	r2, r3, r2, r3
 8005a76:	095b      	lsrs	r3, r3, #5
 8005a78:	f003 020f 	and.w	r2, r3, #15
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	440a      	add	r2, r1
 8005a82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a84:	bf00      	nop
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	40013800 	.word	0x40013800
 8005a90:	51eb851f 	.word	0x51eb851f

08005a94 <main>:


#include "main.h"

int main(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
  hwInit();
 8005a98:	f7fd fbde 	bl	8003258 <hwInit>
  apInit();
 8005a9c:	f7fb fb8e 	bl	80011bc <apInit>

  apMain();
 8005aa0:	f7fb fb9e 	bl	80011e0 <apMain>
 8005aa4:	2300      	movs	r3, #0
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	bd80      	pop	{r7, pc}

08005aaa <sulp>:
 8005aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005aae:	460f      	mov	r7, r1
 8005ab0:	4690      	mov	r8, r2
 8005ab2:	f003 fb2d 	bl	8009110 <__ulp>
 8005ab6:	4604      	mov	r4, r0
 8005ab8:	460d      	mov	r5, r1
 8005aba:	f1b8 0f00 	cmp.w	r8, #0
 8005abe:	d011      	beq.n	8005ae4 <sulp+0x3a>
 8005ac0:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8005ac4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	dd0b      	ble.n	8005ae4 <sulp+0x3a>
 8005acc:	2400      	movs	r4, #0
 8005ace:	051b      	lsls	r3, r3, #20
 8005ad0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005ad4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005ad8:	4622      	mov	r2, r4
 8005ada:	462b      	mov	r3, r5
 8005adc:	f7fa fd06 	bl	80004ec <__aeabi_dmul>
 8005ae0:	4604      	mov	r4, r0
 8005ae2:	460d      	mov	r5, r1
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aec:	0000      	movs	r0, r0
	...

08005af0 <_strtod_l>:
 8005af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af4:	b09f      	sub	sp, #124	@ 0x7c
 8005af6:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005af8:	2200      	movs	r2, #0
 8005afa:	460c      	mov	r4, r1
 8005afc:	921a      	str	r2, [sp, #104]	@ 0x68
 8005afe:	f04f 0a00 	mov.w	sl, #0
 8005b02:	f04f 0b00 	mov.w	fp, #0
 8005b06:	460a      	mov	r2, r1
 8005b08:	9005      	str	r0, [sp, #20]
 8005b0a:	9219      	str	r2, [sp, #100]	@ 0x64
 8005b0c:	7811      	ldrb	r1, [r2, #0]
 8005b0e:	292b      	cmp	r1, #43	@ 0x2b
 8005b10:	d048      	beq.n	8005ba4 <_strtod_l+0xb4>
 8005b12:	d836      	bhi.n	8005b82 <_strtod_l+0x92>
 8005b14:	290d      	cmp	r1, #13
 8005b16:	d830      	bhi.n	8005b7a <_strtod_l+0x8a>
 8005b18:	2908      	cmp	r1, #8
 8005b1a:	d830      	bhi.n	8005b7e <_strtod_l+0x8e>
 8005b1c:	2900      	cmp	r1, #0
 8005b1e:	d039      	beq.n	8005b94 <_strtod_l+0xa4>
 8005b20:	2200      	movs	r2, #0
 8005b22:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005b24:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005b26:	782a      	ldrb	r2, [r5, #0]
 8005b28:	2a30      	cmp	r2, #48	@ 0x30
 8005b2a:	f040 80b1 	bne.w	8005c90 <_strtod_l+0x1a0>
 8005b2e:	786a      	ldrb	r2, [r5, #1]
 8005b30:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005b34:	2a58      	cmp	r2, #88	@ 0x58
 8005b36:	d16c      	bne.n	8005c12 <_strtod_l+0x122>
 8005b38:	9302      	str	r3, [sp, #8]
 8005b3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b3c:	4a8e      	ldr	r2, [pc, #568]	@ (8005d78 <_strtod_l+0x288>)
 8005b3e:	9301      	str	r3, [sp, #4]
 8005b40:	ab1a      	add	r3, sp, #104	@ 0x68
 8005b42:	9300      	str	r3, [sp, #0]
 8005b44:	9805      	ldr	r0, [sp, #20]
 8005b46:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005b48:	a919      	add	r1, sp, #100	@ 0x64
 8005b4a:	f002 fbd5 	bl	80082f8 <__gethex>
 8005b4e:	f010 060f 	ands.w	r6, r0, #15
 8005b52:	4604      	mov	r4, r0
 8005b54:	d005      	beq.n	8005b62 <_strtod_l+0x72>
 8005b56:	2e06      	cmp	r6, #6
 8005b58:	d126      	bne.n	8005ba8 <_strtod_l+0xb8>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	3501      	adds	r5, #1
 8005b5e:	9519      	str	r5, [sp, #100]	@ 0x64
 8005b60:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b62:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f040 8584 	bne.w	8006672 <_strtod_l+0xb82>
 8005b6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b6c:	b1bb      	cbz	r3, 8005b9e <_strtod_l+0xae>
 8005b6e:	4650      	mov	r0, sl
 8005b70:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8005b74:	b01f      	add	sp, #124	@ 0x7c
 8005b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7a:	2920      	cmp	r1, #32
 8005b7c:	d1d0      	bne.n	8005b20 <_strtod_l+0x30>
 8005b7e:	3201      	adds	r2, #1
 8005b80:	e7c3      	b.n	8005b0a <_strtod_l+0x1a>
 8005b82:	292d      	cmp	r1, #45	@ 0x2d
 8005b84:	d1cc      	bne.n	8005b20 <_strtod_l+0x30>
 8005b86:	2101      	movs	r1, #1
 8005b88:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005b8a:	1c51      	adds	r1, r2, #1
 8005b8c:	9119      	str	r1, [sp, #100]	@ 0x64
 8005b8e:	7852      	ldrb	r2, [r2, #1]
 8005b90:	2a00      	cmp	r2, #0
 8005b92:	d1c7      	bne.n	8005b24 <_strtod_l+0x34>
 8005b94:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005b96:	9419      	str	r4, [sp, #100]	@ 0x64
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f040 8568 	bne.w	800666e <_strtod_l+0xb7e>
 8005b9e:	4650      	mov	r0, sl
 8005ba0:	4659      	mov	r1, fp
 8005ba2:	e7e7      	b.n	8005b74 <_strtod_l+0x84>
 8005ba4:	2100      	movs	r1, #0
 8005ba6:	e7ef      	b.n	8005b88 <_strtod_l+0x98>
 8005ba8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005baa:	b13a      	cbz	r2, 8005bbc <_strtod_l+0xcc>
 8005bac:	2135      	movs	r1, #53	@ 0x35
 8005bae:	a81c      	add	r0, sp, #112	@ 0x70
 8005bb0:	f003 fb9e 	bl	80092f0 <__copybits>
 8005bb4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005bb6:	9805      	ldr	r0, [sp, #20]
 8005bb8:	f002 ff78 	bl	8008aac <_Bfree>
 8005bbc:	3e01      	subs	r6, #1
 8005bbe:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005bc0:	2e04      	cmp	r6, #4
 8005bc2:	d806      	bhi.n	8005bd2 <_strtod_l+0xe2>
 8005bc4:	e8df f006 	tbb	[pc, r6]
 8005bc8:	201d0314 	.word	0x201d0314
 8005bcc:	14          	.byte	0x14
 8005bcd:	00          	.byte	0x00
 8005bce:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005bd2:	05e1      	lsls	r1, r4, #23
 8005bd4:	bf48      	it	mi
 8005bd6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005bda:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005bde:	0d1b      	lsrs	r3, r3, #20
 8005be0:	051b      	lsls	r3, r3, #20
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d1bd      	bne.n	8005b62 <_strtod_l+0x72>
 8005be6:	f001 fc29 	bl	800743c <__errno>
 8005bea:	2322      	movs	r3, #34	@ 0x22
 8005bec:	6003      	str	r3, [r0, #0]
 8005bee:	e7b8      	b.n	8005b62 <_strtod_l+0x72>
 8005bf0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005bf4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005bf8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005bfc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005c00:	e7e7      	b.n	8005bd2 <_strtod_l+0xe2>
 8005c02:	f8df b178 	ldr.w	fp, [pc, #376]	@ 8005d7c <_strtod_l+0x28c>
 8005c06:	e7e4      	b.n	8005bd2 <_strtod_l+0xe2>
 8005c08:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005c0c:	f04f 3aff 	mov.w	sl, #4294967295
 8005c10:	e7df      	b.n	8005bd2 <_strtod_l+0xe2>
 8005c12:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c18:	785b      	ldrb	r3, [r3, #1]
 8005c1a:	2b30      	cmp	r3, #48	@ 0x30
 8005c1c:	d0f9      	beq.n	8005c12 <_strtod_l+0x122>
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d09f      	beq.n	8005b62 <_strtod_l+0x72>
 8005c22:	2301      	movs	r3, #1
 8005c24:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c28:	220a      	movs	r2, #10
 8005c2a:	930c      	str	r3, [sp, #48]	@ 0x30
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	461f      	mov	r7, r3
 8005c30:	9308      	str	r3, [sp, #32]
 8005c32:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c34:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005c36:	7805      	ldrb	r5, [r0, #0]
 8005c38:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005c3c:	b2d9      	uxtb	r1, r3
 8005c3e:	2909      	cmp	r1, #9
 8005c40:	d928      	bls.n	8005c94 <_strtod_l+0x1a4>
 8005c42:	2201      	movs	r2, #1
 8005c44:	494e      	ldr	r1, [pc, #312]	@ (8005d80 <_strtod_l+0x290>)
 8005c46:	f001 fb9d 	bl	8007384 <strncmp>
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	d032      	beq.n	8005cb4 <_strtod_l+0x1c4>
 8005c4e:	2000      	movs	r0, #0
 8005c50:	462a      	mov	r2, r5
 8005c52:	4681      	mov	r9, r0
 8005c54:	463d      	mov	r5, r7
 8005c56:	4603      	mov	r3, r0
 8005c58:	2a65      	cmp	r2, #101	@ 0x65
 8005c5a:	d001      	beq.n	8005c60 <_strtod_l+0x170>
 8005c5c:	2a45      	cmp	r2, #69	@ 0x45
 8005c5e:	d114      	bne.n	8005c8a <_strtod_l+0x19a>
 8005c60:	b91d      	cbnz	r5, 8005c6a <_strtod_l+0x17a>
 8005c62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c64:	4302      	orrs	r2, r0
 8005c66:	d095      	beq.n	8005b94 <_strtod_l+0xa4>
 8005c68:	2500      	movs	r5, #0
 8005c6a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005c6c:	1c62      	adds	r2, r4, #1
 8005c6e:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c70:	7862      	ldrb	r2, [r4, #1]
 8005c72:	2a2b      	cmp	r2, #43	@ 0x2b
 8005c74:	d077      	beq.n	8005d66 <_strtod_l+0x276>
 8005c76:	2a2d      	cmp	r2, #45	@ 0x2d
 8005c78:	d07b      	beq.n	8005d72 <_strtod_l+0x282>
 8005c7a:	f04f 0c00 	mov.w	ip, #0
 8005c7e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005c82:	2909      	cmp	r1, #9
 8005c84:	f240 8082 	bls.w	8005d8c <_strtod_l+0x29c>
 8005c88:	9419      	str	r4, [sp, #100]	@ 0x64
 8005c8a:	f04f 0800 	mov.w	r8, #0
 8005c8e:	e0a2      	b.n	8005dd6 <_strtod_l+0x2e6>
 8005c90:	2300      	movs	r3, #0
 8005c92:	e7c7      	b.n	8005c24 <_strtod_l+0x134>
 8005c94:	2f08      	cmp	r7, #8
 8005c96:	bfd5      	itete	le
 8005c98:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005c9a:	9908      	ldrgt	r1, [sp, #32]
 8005c9c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005ca0:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005ca4:	f100 0001 	add.w	r0, r0, #1
 8005ca8:	bfd4      	ite	le
 8005caa:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005cac:	9308      	strgt	r3, [sp, #32]
 8005cae:	3701      	adds	r7, #1
 8005cb0:	9019      	str	r0, [sp, #100]	@ 0x64
 8005cb2:	e7bf      	b.n	8005c34 <_strtod_l+0x144>
 8005cb4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	9219      	str	r2, [sp, #100]	@ 0x64
 8005cba:	785a      	ldrb	r2, [r3, #1]
 8005cbc:	b37f      	cbz	r7, 8005d1e <_strtod_l+0x22e>
 8005cbe:	4681      	mov	r9, r0
 8005cc0:	463d      	mov	r5, r7
 8005cc2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005cc6:	2b09      	cmp	r3, #9
 8005cc8:	d912      	bls.n	8005cf0 <_strtod_l+0x200>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e7c4      	b.n	8005c58 <_strtod_l+0x168>
 8005cce:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005cd0:	3001      	adds	r0, #1
 8005cd2:	1c5a      	adds	r2, r3, #1
 8005cd4:	9219      	str	r2, [sp, #100]	@ 0x64
 8005cd6:	785a      	ldrb	r2, [r3, #1]
 8005cd8:	2a30      	cmp	r2, #48	@ 0x30
 8005cda:	d0f8      	beq.n	8005cce <_strtod_l+0x1de>
 8005cdc:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	f200 84cb 	bhi.w	800667c <_strtod_l+0xb8c>
 8005ce6:	4681      	mov	r9, r0
 8005ce8:	2000      	movs	r0, #0
 8005cea:	4605      	mov	r5, r0
 8005cec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005cee:	930c      	str	r3, [sp, #48]	@ 0x30
 8005cf0:	3a30      	subs	r2, #48	@ 0x30
 8005cf2:	f100 0301 	add.w	r3, r0, #1
 8005cf6:	d02a      	beq.n	8005d4e <_strtod_l+0x25e>
 8005cf8:	4499      	add	r9, r3
 8005cfa:	210a      	movs	r1, #10
 8005cfc:	462b      	mov	r3, r5
 8005cfe:	eb00 0c05 	add.w	ip, r0, r5
 8005d02:	4563      	cmp	r3, ip
 8005d04:	d10d      	bne.n	8005d22 <_strtod_l+0x232>
 8005d06:	1c69      	adds	r1, r5, #1
 8005d08:	4401      	add	r1, r0
 8005d0a:	4428      	add	r0, r5
 8005d0c:	2808      	cmp	r0, #8
 8005d0e:	dc16      	bgt.n	8005d3e <_strtod_l+0x24e>
 8005d10:	230a      	movs	r3, #10
 8005d12:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005d14:	fb03 2300 	mla	r3, r3, r0, r2
 8005d18:	930a      	str	r3, [sp, #40]	@ 0x28
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	e018      	b.n	8005d50 <_strtod_l+0x260>
 8005d1e:	4638      	mov	r0, r7
 8005d20:	e7da      	b.n	8005cd8 <_strtod_l+0x1e8>
 8005d22:	2b08      	cmp	r3, #8
 8005d24:	f103 0301 	add.w	r3, r3, #1
 8005d28:	dc03      	bgt.n	8005d32 <_strtod_l+0x242>
 8005d2a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005d2c:	434e      	muls	r6, r1
 8005d2e:	960a      	str	r6, [sp, #40]	@ 0x28
 8005d30:	e7e7      	b.n	8005d02 <_strtod_l+0x212>
 8005d32:	2b10      	cmp	r3, #16
 8005d34:	bfde      	ittt	le
 8005d36:	9e08      	ldrle	r6, [sp, #32]
 8005d38:	434e      	mulle	r6, r1
 8005d3a:	9608      	strle	r6, [sp, #32]
 8005d3c:	e7e1      	b.n	8005d02 <_strtod_l+0x212>
 8005d3e:	280f      	cmp	r0, #15
 8005d40:	dceb      	bgt.n	8005d1a <_strtod_l+0x22a>
 8005d42:	230a      	movs	r3, #10
 8005d44:	9808      	ldr	r0, [sp, #32]
 8005d46:	fb03 2300 	mla	r3, r3, r0, r2
 8005d4a:	9308      	str	r3, [sp, #32]
 8005d4c:	e7e5      	b.n	8005d1a <_strtod_l+0x22a>
 8005d4e:	4629      	mov	r1, r5
 8005d50:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005d52:	460d      	mov	r5, r1
 8005d54:	1c50      	adds	r0, r2, #1
 8005d56:	9019      	str	r0, [sp, #100]	@ 0x64
 8005d58:	7852      	ldrb	r2, [r2, #1]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	e7b1      	b.n	8005cc2 <_strtod_l+0x1d2>
 8005d5e:	f04f 0900 	mov.w	r9, #0
 8005d62:	2301      	movs	r3, #1
 8005d64:	e77d      	b.n	8005c62 <_strtod_l+0x172>
 8005d66:	f04f 0c00 	mov.w	ip, #0
 8005d6a:	1ca2      	adds	r2, r4, #2
 8005d6c:	9219      	str	r2, [sp, #100]	@ 0x64
 8005d6e:	78a2      	ldrb	r2, [r4, #2]
 8005d70:	e785      	b.n	8005c7e <_strtod_l+0x18e>
 8005d72:	f04f 0c01 	mov.w	ip, #1
 8005d76:	e7f8      	b.n	8005d6a <_strtod_l+0x27a>
 8005d78:	0800a20c 	.word	0x0800a20c
 8005d7c:	7ff00000 	.word	0x7ff00000
 8005d80:	0800a1f6 	.word	0x0800a1f6
 8005d84:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005d86:	1c51      	adds	r1, r2, #1
 8005d88:	9119      	str	r1, [sp, #100]	@ 0x64
 8005d8a:	7852      	ldrb	r2, [r2, #1]
 8005d8c:	2a30      	cmp	r2, #48	@ 0x30
 8005d8e:	d0f9      	beq.n	8005d84 <_strtod_l+0x294>
 8005d90:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005d94:	2908      	cmp	r1, #8
 8005d96:	f63f af78 	bhi.w	8005c8a <_strtod_l+0x19a>
 8005d9a:	f04f 080a 	mov.w	r8, #10
 8005d9e:	3a30      	subs	r2, #48	@ 0x30
 8005da0:	920e      	str	r2, [sp, #56]	@ 0x38
 8005da2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005da4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005da6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005da8:	1c56      	adds	r6, r2, #1
 8005daa:	9619      	str	r6, [sp, #100]	@ 0x64
 8005dac:	7852      	ldrb	r2, [r2, #1]
 8005dae:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005db2:	f1be 0f09 	cmp.w	lr, #9
 8005db6:	d939      	bls.n	8005e2c <_strtod_l+0x33c>
 8005db8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005dba:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005dbe:	1a76      	subs	r6, r6, r1
 8005dc0:	2e08      	cmp	r6, #8
 8005dc2:	dc03      	bgt.n	8005dcc <_strtod_l+0x2dc>
 8005dc4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005dc6:	4588      	cmp	r8, r1
 8005dc8:	bfa8      	it	ge
 8005dca:	4688      	movge	r8, r1
 8005dcc:	f1bc 0f00 	cmp.w	ip, #0
 8005dd0:	d001      	beq.n	8005dd6 <_strtod_l+0x2e6>
 8005dd2:	f1c8 0800 	rsb	r8, r8, #0
 8005dd6:	2d00      	cmp	r5, #0
 8005dd8:	d14e      	bne.n	8005e78 <_strtod_l+0x388>
 8005dda:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005ddc:	4308      	orrs	r0, r1
 8005dde:	f47f aec0 	bne.w	8005b62 <_strtod_l+0x72>
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	f47f aed6 	bne.w	8005b94 <_strtod_l+0xa4>
 8005de8:	2a69      	cmp	r2, #105	@ 0x69
 8005dea:	d028      	beq.n	8005e3e <_strtod_l+0x34e>
 8005dec:	dc25      	bgt.n	8005e3a <_strtod_l+0x34a>
 8005dee:	2a49      	cmp	r2, #73	@ 0x49
 8005df0:	d025      	beq.n	8005e3e <_strtod_l+0x34e>
 8005df2:	2a4e      	cmp	r2, #78	@ 0x4e
 8005df4:	f47f aece 	bne.w	8005b94 <_strtod_l+0xa4>
 8005df8:	499a      	ldr	r1, [pc, #616]	@ (8006064 <_strtod_l+0x574>)
 8005dfa:	a819      	add	r0, sp, #100	@ 0x64
 8005dfc:	f002 fc9e 	bl	800873c <__match>
 8005e00:	2800      	cmp	r0, #0
 8005e02:	f43f aec7 	beq.w	8005b94 <_strtod_l+0xa4>
 8005e06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e08:	781b      	ldrb	r3, [r3, #0]
 8005e0a:	2b28      	cmp	r3, #40	@ 0x28
 8005e0c:	d12e      	bne.n	8005e6c <_strtod_l+0x37c>
 8005e0e:	4996      	ldr	r1, [pc, #600]	@ (8006068 <_strtod_l+0x578>)
 8005e10:	aa1c      	add	r2, sp, #112	@ 0x70
 8005e12:	a819      	add	r0, sp, #100	@ 0x64
 8005e14:	f002 fca6 	bl	8008764 <__hexnan>
 8005e18:	2805      	cmp	r0, #5
 8005e1a:	d127      	bne.n	8005e6c <_strtod_l+0x37c>
 8005e1c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005e1e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005e22:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005e26:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005e2a:	e69a      	b.n	8005b62 <_strtod_l+0x72>
 8005e2c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005e2e:	fb08 2101 	mla	r1, r8, r1, r2
 8005e32:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005e36:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e38:	e7b5      	b.n	8005da6 <_strtod_l+0x2b6>
 8005e3a:	2a6e      	cmp	r2, #110	@ 0x6e
 8005e3c:	e7da      	b.n	8005df4 <_strtod_l+0x304>
 8005e3e:	498b      	ldr	r1, [pc, #556]	@ (800606c <_strtod_l+0x57c>)
 8005e40:	a819      	add	r0, sp, #100	@ 0x64
 8005e42:	f002 fc7b 	bl	800873c <__match>
 8005e46:	2800      	cmp	r0, #0
 8005e48:	f43f aea4 	beq.w	8005b94 <_strtod_l+0xa4>
 8005e4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e4e:	4988      	ldr	r1, [pc, #544]	@ (8006070 <_strtod_l+0x580>)
 8005e50:	3b01      	subs	r3, #1
 8005e52:	a819      	add	r0, sp, #100	@ 0x64
 8005e54:	9319      	str	r3, [sp, #100]	@ 0x64
 8005e56:	f002 fc71 	bl	800873c <__match>
 8005e5a:	b910      	cbnz	r0, 8005e62 <_strtod_l+0x372>
 8005e5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005e5e:	3301      	adds	r3, #1
 8005e60:	9319      	str	r3, [sp, #100]	@ 0x64
 8005e62:	f04f 0a00 	mov.w	sl, #0
 8005e66:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006074 <_strtod_l+0x584>
 8005e6a:	e67a      	b.n	8005b62 <_strtod_l+0x72>
 8005e6c:	4882      	ldr	r0, [pc, #520]	@ (8006078 <_strtod_l+0x588>)
 8005e6e:	f001 fb37 	bl	80074e0 <nan>
 8005e72:	4682      	mov	sl, r0
 8005e74:	468b      	mov	fp, r1
 8005e76:	e674      	b.n	8005b62 <_strtod_l+0x72>
 8005e78:	eba8 0309 	sub.w	r3, r8, r9
 8005e7c:	2f00      	cmp	r7, #0
 8005e7e:	bf08      	it	eq
 8005e80:	462f      	moveq	r7, r5
 8005e82:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005e84:	2d10      	cmp	r5, #16
 8005e86:	462c      	mov	r4, r5
 8005e88:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e8a:	bfa8      	it	ge
 8005e8c:	2410      	movge	r4, #16
 8005e8e:	f7fa fab3 	bl	80003f8 <__aeabi_ui2d>
 8005e92:	2d09      	cmp	r5, #9
 8005e94:	4682      	mov	sl, r0
 8005e96:	468b      	mov	fp, r1
 8005e98:	dc11      	bgt.n	8005ebe <_strtod_l+0x3ce>
 8005e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f43f ae60 	beq.w	8005b62 <_strtod_l+0x72>
 8005ea2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ea4:	dd76      	ble.n	8005f94 <_strtod_l+0x4a4>
 8005ea6:	2b16      	cmp	r3, #22
 8005ea8:	dc5d      	bgt.n	8005f66 <_strtod_l+0x476>
 8005eaa:	4974      	ldr	r1, [pc, #464]	@ (800607c <_strtod_l+0x58c>)
 8005eac:	4652      	mov	r2, sl
 8005eae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005eb2:	465b      	mov	r3, fp
 8005eb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005eb8:	f7fa fb18 	bl	80004ec <__aeabi_dmul>
 8005ebc:	e7d9      	b.n	8005e72 <_strtod_l+0x382>
 8005ebe:	4b6f      	ldr	r3, [pc, #444]	@ (800607c <_strtod_l+0x58c>)
 8005ec0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ec4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005ec8:	f7fa fb10 	bl	80004ec <__aeabi_dmul>
 8005ecc:	4682      	mov	sl, r0
 8005ece:	9808      	ldr	r0, [sp, #32]
 8005ed0:	468b      	mov	fp, r1
 8005ed2:	f7fa fa91 	bl	80003f8 <__aeabi_ui2d>
 8005ed6:	4602      	mov	r2, r0
 8005ed8:	460b      	mov	r3, r1
 8005eda:	4650      	mov	r0, sl
 8005edc:	4659      	mov	r1, fp
 8005ede:	f7fa f94f 	bl	8000180 <__adddf3>
 8005ee2:	2d0f      	cmp	r5, #15
 8005ee4:	4682      	mov	sl, r0
 8005ee6:	468b      	mov	fp, r1
 8005ee8:	ddd7      	ble.n	8005e9a <_strtod_l+0x3aa>
 8005eea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005eec:	1b2c      	subs	r4, r5, r4
 8005eee:	441c      	add	r4, r3
 8005ef0:	2c00      	cmp	r4, #0
 8005ef2:	f340 8096 	ble.w	8006022 <_strtod_l+0x532>
 8005ef6:	f014 030f 	ands.w	r3, r4, #15
 8005efa:	d00a      	beq.n	8005f12 <_strtod_l+0x422>
 8005efc:	495f      	ldr	r1, [pc, #380]	@ (800607c <_strtod_l+0x58c>)
 8005efe:	4652      	mov	r2, sl
 8005f00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005f04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f08:	465b      	mov	r3, fp
 8005f0a:	f7fa faef 	bl	80004ec <__aeabi_dmul>
 8005f0e:	4682      	mov	sl, r0
 8005f10:	468b      	mov	fp, r1
 8005f12:	f034 040f 	bics.w	r4, r4, #15
 8005f16:	d073      	beq.n	8006000 <_strtod_l+0x510>
 8005f18:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005f1c:	dd48      	ble.n	8005fb0 <_strtod_l+0x4c0>
 8005f1e:	2400      	movs	r4, #0
 8005f20:	46a0      	mov	r8, r4
 8005f22:	46a1      	mov	r9, r4
 8005f24:	940a      	str	r4, [sp, #40]	@ 0x28
 8005f26:	2322      	movs	r3, #34	@ 0x22
 8005f28:	f04f 0a00 	mov.w	sl, #0
 8005f2c:	9a05      	ldr	r2, [sp, #20]
 8005f2e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006074 <_strtod_l+0x584>
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	f43f ae13 	beq.w	8005b62 <_strtod_l+0x72>
 8005f3c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005f3e:	9805      	ldr	r0, [sp, #20]
 8005f40:	f002 fdb4 	bl	8008aac <_Bfree>
 8005f44:	4649      	mov	r1, r9
 8005f46:	9805      	ldr	r0, [sp, #20]
 8005f48:	f002 fdb0 	bl	8008aac <_Bfree>
 8005f4c:	4641      	mov	r1, r8
 8005f4e:	9805      	ldr	r0, [sp, #20]
 8005f50:	f002 fdac 	bl	8008aac <_Bfree>
 8005f54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005f56:	9805      	ldr	r0, [sp, #20]
 8005f58:	f002 fda8 	bl	8008aac <_Bfree>
 8005f5c:	4621      	mov	r1, r4
 8005f5e:	9805      	ldr	r0, [sp, #20]
 8005f60:	f002 fda4 	bl	8008aac <_Bfree>
 8005f64:	e5fd      	b.n	8005b62 <_strtod_l+0x72>
 8005f66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f68:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	dbbc      	blt.n	8005eea <_strtod_l+0x3fa>
 8005f70:	4c42      	ldr	r4, [pc, #264]	@ (800607c <_strtod_l+0x58c>)
 8005f72:	f1c5 050f 	rsb	r5, r5, #15
 8005f76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005f7a:	4652      	mov	r2, sl
 8005f7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f80:	465b      	mov	r3, fp
 8005f82:	f7fa fab3 	bl	80004ec <__aeabi_dmul>
 8005f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f88:	1b5d      	subs	r5, r3, r5
 8005f8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005f8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005f92:	e791      	b.n	8005eb8 <_strtod_l+0x3c8>
 8005f94:	3316      	adds	r3, #22
 8005f96:	dba8      	blt.n	8005eea <_strtod_l+0x3fa>
 8005f98:	4b38      	ldr	r3, [pc, #224]	@ (800607c <_strtod_l+0x58c>)
 8005f9a:	eba9 0808 	sub.w	r8, r9, r8
 8005f9e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005fa2:	4650      	mov	r0, sl
 8005fa4:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005fa8:	4659      	mov	r1, fp
 8005faa:	f7fa fbc9 	bl	8000740 <__aeabi_ddiv>
 8005fae:	e760      	b.n	8005e72 <_strtod_l+0x382>
 8005fb0:	4b33      	ldr	r3, [pc, #204]	@ (8006080 <_strtod_l+0x590>)
 8005fb2:	4650      	mov	r0, sl
 8005fb4:	9308      	str	r3, [sp, #32]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	4659      	mov	r1, fp
 8005fba:	461e      	mov	r6, r3
 8005fbc:	1124      	asrs	r4, r4, #4
 8005fbe:	2c01      	cmp	r4, #1
 8005fc0:	dc21      	bgt.n	8006006 <_strtod_l+0x516>
 8005fc2:	b10b      	cbz	r3, 8005fc8 <_strtod_l+0x4d8>
 8005fc4:	4682      	mov	sl, r0
 8005fc6:	468b      	mov	fp, r1
 8005fc8:	492d      	ldr	r1, [pc, #180]	@ (8006080 <_strtod_l+0x590>)
 8005fca:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005fce:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005fd2:	4652      	mov	r2, sl
 8005fd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fd8:	465b      	mov	r3, fp
 8005fda:	f7fa fa87 	bl	80004ec <__aeabi_dmul>
 8005fde:	4b25      	ldr	r3, [pc, #148]	@ (8006074 <_strtod_l+0x584>)
 8005fe0:	460a      	mov	r2, r1
 8005fe2:	400b      	ands	r3, r1
 8005fe4:	4927      	ldr	r1, [pc, #156]	@ (8006084 <_strtod_l+0x594>)
 8005fe6:	4682      	mov	sl, r0
 8005fe8:	428b      	cmp	r3, r1
 8005fea:	d898      	bhi.n	8005f1e <_strtod_l+0x42e>
 8005fec:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005ff0:	428b      	cmp	r3, r1
 8005ff2:	bf86      	itte	hi
 8005ff4:	f04f 3aff 	movhi.w	sl, #4294967295
 8005ff8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006088 <_strtod_l+0x598>
 8005ffc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006000:	2300      	movs	r3, #0
 8006002:	9308      	str	r3, [sp, #32]
 8006004:	e07a      	b.n	80060fc <_strtod_l+0x60c>
 8006006:	07e2      	lsls	r2, r4, #31
 8006008:	d505      	bpl.n	8006016 <_strtod_l+0x526>
 800600a:	9b08      	ldr	r3, [sp, #32]
 800600c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006010:	f7fa fa6c 	bl	80004ec <__aeabi_dmul>
 8006014:	2301      	movs	r3, #1
 8006016:	9a08      	ldr	r2, [sp, #32]
 8006018:	3601      	adds	r6, #1
 800601a:	3208      	adds	r2, #8
 800601c:	1064      	asrs	r4, r4, #1
 800601e:	9208      	str	r2, [sp, #32]
 8006020:	e7cd      	b.n	8005fbe <_strtod_l+0x4ce>
 8006022:	d0ed      	beq.n	8006000 <_strtod_l+0x510>
 8006024:	4264      	negs	r4, r4
 8006026:	f014 020f 	ands.w	r2, r4, #15
 800602a:	d00a      	beq.n	8006042 <_strtod_l+0x552>
 800602c:	4b13      	ldr	r3, [pc, #76]	@ (800607c <_strtod_l+0x58c>)
 800602e:	4650      	mov	r0, sl
 8006030:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006034:	4659      	mov	r1, fp
 8006036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603a:	f7fa fb81 	bl	8000740 <__aeabi_ddiv>
 800603e:	4682      	mov	sl, r0
 8006040:	468b      	mov	fp, r1
 8006042:	1124      	asrs	r4, r4, #4
 8006044:	d0dc      	beq.n	8006000 <_strtod_l+0x510>
 8006046:	2c1f      	cmp	r4, #31
 8006048:	dd20      	ble.n	800608c <_strtod_l+0x59c>
 800604a:	2400      	movs	r4, #0
 800604c:	46a0      	mov	r8, r4
 800604e:	46a1      	mov	r9, r4
 8006050:	940a      	str	r4, [sp, #40]	@ 0x28
 8006052:	2322      	movs	r3, #34	@ 0x22
 8006054:	9a05      	ldr	r2, [sp, #20]
 8006056:	f04f 0a00 	mov.w	sl, #0
 800605a:	f04f 0b00 	mov.w	fp, #0
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	e768      	b.n	8005f34 <_strtod_l+0x444>
 8006062:	bf00      	nop
 8006064:	0800a356 	.word	0x0800a356
 8006068:	0800a1f8 	.word	0x0800a1f8
 800606c:	0800a34e 	.word	0x0800a34e
 8006070:	0800a388 	.word	0x0800a388
 8006074:	7ff00000 	.word	0x7ff00000
 8006078:	0800a614 	.word	0x0800a614
 800607c:	0800a500 	.word	0x0800a500
 8006080:	0800a4d8 	.word	0x0800a4d8
 8006084:	7ca00000 	.word	0x7ca00000
 8006088:	7fefffff 	.word	0x7fefffff
 800608c:	f014 0310 	ands.w	r3, r4, #16
 8006090:	bf18      	it	ne
 8006092:	236a      	movne	r3, #106	@ 0x6a
 8006094:	4650      	mov	r0, sl
 8006096:	9308      	str	r3, [sp, #32]
 8006098:	4659      	mov	r1, fp
 800609a:	2300      	movs	r3, #0
 800609c:	4ea9      	ldr	r6, [pc, #676]	@ (8006344 <_strtod_l+0x854>)
 800609e:	07e2      	lsls	r2, r4, #31
 80060a0:	d504      	bpl.n	80060ac <_strtod_l+0x5bc>
 80060a2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80060a6:	f7fa fa21 	bl	80004ec <__aeabi_dmul>
 80060aa:	2301      	movs	r3, #1
 80060ac:	1064      	asrs	r4, r4, #1
 80060ae:	f106 0608 	add.w	r6, r6, #8
 80060b2:	d1f4      	bne.n	800609e <_strtod_l+0x5ae>
 80060b4:	b10b      	cbz	r3, 80060ba <_strtod_l+0x5ca>
 80060b6:	4682      	mov	sl, r0
 80060b8:	468b      	mov	fp, r1
 80060ba:	9b08      	ldr	r3, [sp, #32]
 80060bc:	b1b3      	cbz	r3, 80060ec <_strtod_l+0x5fc>
 80060be:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80060c2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	4659      	mov	r1, fp
 80060ca:	dd0f      	ble.n	80060ec <_strtod_l+0x5fc>
 80060cc:	2b1f      	cmp	r3, #31
 80060ce:	dd57      	ble.n	8006180 <_strtod_l+0x690>
 80060d0:	2b34      	cmp	r3, #52	@ 0x34
 80060d2:	bfd8      	it	le
 80060d4:	f04f 33ff 	movle.w	r3, #4294967295
 80060d8:	f04f 0a00 	mov.w	sl, #0
 80060dc:	bfcf      	iteee	gt
 80060de:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80060e2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80060e6:	4093      	lslle	r3, r2
 80060e8:	ea03 0b01 	andle.w	fp, r3, r1
 80060ec:	2200      	movs	r2, #0
 80060ee:	2300      	movs	r3, #0
 80060f0:	4650      	mov	r0, sl
 80060f2:	4659      	mov	r1, fp
 80060f4:	f7fa fc62 	bl	80009bc <__aeabi_dcmpeq>
 80060f8:	2800      	cmp	r0, #0
 80060fa:	d1a6      	bne.n	800604a <_strtod_l+0x55a>
 80060fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060fe:	463a      	mov	r2, r7
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006104:	462b      	mov	r3, r5
 8006106:	9805      	ldr	r0, [sp, #20]
 8006108:	f002 fd38 	bl	8008b7c <__s2b>
 800610c:	900a      	str	r0, [sp, #40]	@ 0x28
 800610e:	2800      	cmp	r0, #0
 8006110:	f43f af05 	beq.w	8005f1e <_strtod_l+0x42e>
 8006114:	2400      	movs	r4, #0
 8006116:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006118:	eba9 0308 	sub.w	r3, r9, r8
 800611c:	2a00      	cmp	r2, #0
 800611e:	bfa8      	it	ge
 8006120:	2300      	movge	r3, #0
 8006122:	46a0      	mov	r8, r4
 8006124:	9312      	str	r3, [sp, #72]	@ 0x48
 8006126:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800612a:	9316      	str	r3, [sp, #88]	@ 0x58
 800612c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800612e:	9805      	ldr	r0, [sp, #20]
 8006130:	6859      	ldr	r1, [r3, #4]
 8006132:	f002 fc7b 	bl	8008a2c <_Balloc>
 8006136:	4681      	mov	r9, r0
 8006138:	2800      	cmp	r0, #0
 800613a:	f43f aef4 	beq.w	8005f26 <_strtod_l+0x436>
 800613e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006140:	300c      	adds	r0, #12
 8006142:	691a      	ldr	r2, [r3, #16]
 8006144:	f103 010c 	add.w	r1, r3, #12
 8006148:	3202      	adds	r2, #2
 800614a:	0092      	lsls	r2, r2, #2
 800614c:	f001 f9b9 	bl	80074c2 <memcpy>
 8006150:	ab1c      	add	r3, sp, #112	@ 0x70
 8006152:	9301      	str	r3, [sp, #4]
 8006154:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006156:	9300      	str	r3, [sp, #0]
 8006158:	4652      	mov	r2, sl
 800615a:	465b      	mov	r3, fp
 800615c:	9805      	ldr	r0, [sp, #20]
 800615e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006162:	f003 f83d 	bl	80091e0 <__d2b>
 8006166:	901a      	str	r0, [sp, #104]	@ 0x68
 8006168:	2800      	cmp	r0, #0
 800616a:	f43f aedc 	beq.w	8005f26 <_strtod_l+0x436>
 800616e:	2101      	movs	r1, #1
 8006170:	9805      	ldr	r0, [sp, #20]
 8006172:	f002 fd99 	bl	8008ca8 <__i2b>
 8006176:	4680      	mov	r8, r0
 8006178:	b948      	cbnz	r0, 800618e <_strtod_l+0x69e>
 800617a:	f04f 0800 	mov.w	r8, #0
 800617e:	e6d2      	b.n	8005f26 <_strtod_l+0x436>
 8006180:	f04f 32ff 	mov.w	r2, #4294967295
 8006184:	fa02 f303 	lsl.w	r3, r2, r3
 8006188:	ea03 0a0a 	and.w	sl, r3, sl
 800618c:	e7ae      	b.n	80060ec <_strtod_l+0x5fc>
 800618e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006190:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006192:	2d00      	cmp	r5, #0
 8006194:	bfab      	itete	ge
 8006196:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006198:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800619a:	18ef      	addge	r7, r5, r3
 800619c:	1b5e      	sublt	r6, r3, r5
 800619e:	9b08      	ldr	r3, [sp, #32]
 80061a0:	bfa8      	it	ge
 80061a2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80061a4:	eba5 0503 	sub.w	r5, r5, r3
 80061a8:	4415      	add	r5, r2
 80061aa:	4b67      	ldr	r3, [pc, #412]	@ (8006348 <_strtod_l+0x858>)
 80061ac:	f105 35ff 	add.w	r5, r5, #4294967295
 80061b0:	bfb8      	it	lt
 80061b2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80061b4:	429d      	cmp	r5, r3
 80061b6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80061ba:	da50      	bge.n	800625e <_strtod_l+0x76e>
 80061bc:	1b5b      	subs	r3, r3, r5
 80061be:	2b1f      	cmp	r3, #31
 80061c0:	f04f 0101 	mov.w	r1, #1
 80061c4:	eba2 0203 	sub.w	r2, r2, r3
 80061c8:	dc3d      	bgt.n	8006246 <_strtod_l+0x756>
 80061ca:	fa01 f303 	lsl.w	r3, r1, r3
 80061ce:	9313      	str	r3, [sp, #76]	@ 0x4c
 80061d0:	2300      	movs	r3, #0
 80061d2:	9310      	str	r3, [sp, #64]	@ 0x40
 80061d4:	18bd      	adds	r5, r7, r2
 80061d6:	9b08      	ldr	r3, [sp, #32]
 80061d8:	42af      	cmp	r7, r5
 80061da:	4416      	add	r6, r2
 80061dc:	441e      	add	r6, r3
 80061de:	463b      	mov	r3, r7
 80061e0:	bfa8      	it	ge
 80061e2:	462b      	movge	r3, r5
 80061e4:	42b3      	cmp	r3, r6
 80061e6:	bfa8      	it	ge
 80061e8:	4633      	movge	r3, r6
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	bfc2      	ittt	gt
 80061ee:	1aed      	subgt	r5, r5, r3
 80061f0:	1af6      	subgt	r6, r6, r3
 80061f2:	1aff      	subgt	r7, r7, r3
 80061f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	dd16      	ble.n	8006228 <_strtod_l+0x738>
 80061fa:	4641      	mov	r1, r8
 80061fc:	461a      	mov	r2, r3
 80061fe:	9805      	ldr	r0, [sp, #20]
 8006200:	f002 fe10 	bl	8008e24 <__pow5mult>
 8006204:	4680      	mov	r8, r0
 8006206:	2800      	cmp	r0, #0
 8006208:	d0b7      	beq.n	800617a <_strtod_l+0x68a>
 800620a:	4601      	mov	r1, r0
 800620c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800620e:	9805      	ldr	r0, [sp, #20]
 8006210:	f002 fd60 	bl	8008cd4 <__multiply>
 8006214:	900e      	str	r0, [sp, #56]	@ 0x38
 8006216:	2800      	cmp	r0, #0
 8006218:	f43f ae85 	beq.w	8005f26 <_strtod_l+0x436>
 800621c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800621e:	9805      	ldr	r0, [sp, #20]
 8006220:	f002 fc44 	bl	8008aac <_Bfree>
 8006224:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006226:	931a      	str	r3, [sp, #104]	@ 0x68
 8006228:	2d00      	cmp	r5, #0
 800622a:	dc1d      	bgt.n	8006268 <_strtod_l+0x778>
 800622c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800622e:	2b00      	cmp	r3, #0
 8006230:	dd23      	ble.n	800627a <_strtod_l+0x78a>
 8006232:	4649      	mov	r1, r9
 8006234:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006236:	9805      	ldr	r0, [sp, #20]
 8006238:	f002 fdf4 	bl	8008e24 <__pow5mult>
 800623c:	4681      	mov	r9, r0
 800623e:	b9e0      	cbnz	r0, 800627a <_strtod_l+0x78a>
 8006240:	f04f 0900 	mov.w	r9, #0
 8006244:	e66f      	b.n	8005f26 <_strtod_l+0x436>
 8006246:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800624a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800624e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006252:	35e2      	adds	r5, #226	@ 0xe2
 8006254:	fa01 f305 	lsl.w	r3, r1, r5
 8006258:	9310      	str	r3, [sp, #64]	@ 0x40
 800625a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800625c:	e7ba      	b.n	80061d4 <_strtod_l+0x6e4>
 800625e:	2300      	movs	r3, #0
 8006260:	9310      	str	r3, [sp, #64]	@ 0x40
 8006262:	2301      	movs	r3, #1
 8006264:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006266:	e7b5      	b.n	80061d4 <_strtod_l+0x6e4>
 8006268:	462a      	mov	r2, r5
 800626a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800626c:	9805      	ldr	r0, [sp, #20]
 800626e:	f002 fe33 	bl	8008ed8 <__lshift>
 8006272:	901a      	str	r0, [sp, #104]	@ 0x68
 8006274:	2800      	cmp	r0, #0
 8006276:	d1d9      	bne.n	800622c <_strtod_l+0x73c>
 8006278:	e655      	b.n	8005f26 <_strtod_l+0x436>
 800627a:	2e00      	cmp	r6, #0
 800627c:	dd07      	ble.n	800628e <_strtod_l+0x79e>
 800627e:	4649      	mov	r1, r9
 8006280:	4632      	mov	r2, r6
 8006282:	9805      	ldr	r0, [sp, #20]
 8006284:	f002 fe28 	bl	8008ed8 <__lshift>
 8006288:	4681      	mov	r9, r0
 800628a:	2800      	cmp	r0, #0
 800628c:	d0d8      	beq.n	8006240 <_strtod_l+0x750>
 800628e:	2f00      	cmp	r7, #0
 8006290:	dd08      	ble.n	80062a4 <_strtod_l+0x7b4>
 8006292:	4641      	mov	r1, r8
 8006294:	463a      	mov	r2, r7
 8006296:	9805      	ldr	r0, [sp, #20]
 8006298:	f002 fe1e 	bl	8008ed8 <__lshift>
 800629c:	4680      	mov	r8, r0
 800629e:	2800      	cmp	r0, #0
 80062a0:	f43f ae41 	beq.w	8005f26 <_strtod_l+0x436>
 80062a4:	464a      	mov	r2, r9
 80062a6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80062a8:	9805      	ldr	r0, [sp, #20]
 80062aa:	f002 fe9d 	bl	8008fe8 <__mdiff>
 80062ae:	4604      	mov	r4, r0
 80062b0:	2800      	cmp	r0, #0
 80062b2:	f43f ae38 	beq.w	8005f26 <_strtod_l+0x436>
 80062b6:	68c3      	ldr	r3, [r0, #12]
 80062b8:	4641      	mov	r1, r8
 80062ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 80062bc:	2300      	movs	r3, #0
 80062be:	60c3      	str	r3, [r0, #12]
 80062c0:	f002 fe76 	bl	8008fb0 <__mcmp>
 80062c4:	2800      	cmp	r0, #0
 80062c6:	da45      	bge.n	8006354 <_strtod_l+0x864>
 80062c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062ca:	ea53 030a 	orrs.w	r3, r3, sl
 80062ce:	d16b      	bne.n	80063a8 <_strtod_l+0x8b8>
 80062d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d167      	bne.n	80063a8 <_strtod_l+0x8b8>
 80062d8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80062dc:	0d1b      	lsrs	r3, r3, #20
 80062de:	051b      	lsls	r3, r3, #20
 80062e0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80062e4:	d960      	bls.n	80063a8 <_strtod_l+0x8b8>
 80062e6:	6963      	ldr	r3, [r4, #20]
 80062e8:	b913      	cbnz	r3, 80062f0 <_strtod_l+0x800>
 80062ea:	6923      	ldr	r3, [r4, #16]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	dd5b      	ble.n	80063a8 <_strtod_l+0x8b8>
 80062f0:	4621      	mov	r1, r4
 80062f2:	2201      	movs	r2, #1
 80062f4:	9805      	ldr	r0, [sp, #20]
 80062f6:	f002 fdef 	bl	8008ed8 <__lshift>
 80062fa:	4641      	mov	r1, r8
 80062fc:	4604      	mov	r4, r0
 80062fe:	f002 fe57 	bl	8008fb0 <__mcmp>
 8006302:	2800      	cmp	r0, #0
 8006304:	dd50      	ble.n	80063a8 <_strtod_l+0x8b8>
 8006306:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800630a:	9a08      	ldr	r2, [sp, #32]
 800630c:	0d1b      	lsrs	r3, r3, #20
 800630e:	051b      	lsls	r3, r3, #20
 8006310:	2a00      	cmp	r2, #0
 8006312:	d06a      	beq.n	80063ea <_strtod_l+0x8fa>
 8006314:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006318:	d867      	bhi.n	80063ea <_strtod_l+0x8fa>
 800631a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800631e:	f67f ae98 	bls.w	8006052 <_strtod_l+0x562>
 8006322:	4650      	mov	r0, sl
 8006324:	4659      	mov	r1, fp
 8006326:	4b09      	ldr	r3, [pc, #36]	@ (800634c <_strtod_l+0x85c>)
 8006328:	2200      	movs	r2, #0
 800632a:	f7fa f8df 	bl	80004ec <__aeabi_dmul>
 800632e:	4b08      	ldr	r3, [pc, #32]	@ (8006350 <_strtod_l+0x860>)
 8006330:	4682      	mov	sl, r0
 8006332:	400b      	ands	r3, r1
 8006334:	468b      	mov	fp, r1
 8006336:	2b00      	cmp	r3, #0
 8006338:	f47f ae00 	bne.w	8005f3c <_strtod_l+0x44c>
 800633c:	2322      	movs	r3, #34	@ 0x22
 800633e:	9a05      	ldr	r2, [sp, #20]
 8006340:	6013      	str	r3, [r2, #0]
 8006342:	e5fb      	b.n	8005f3c <_strtod_l+0x44c>
 8006344:	0800a220 	.word	0x0800a220
 8006348:	fffffc02 	.word	0xfffffc02
 800634c:	39500000 	.word	0x39500000
 8006350:	7ff00000 	.word	0x7ff00000
 8006354:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006358:	d165      	bne.n	8006426 <_strtod_l+0x936>
 800635a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800635c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006360:	b35a      	cbz	r2, 80063ba <_strtod_l+0x8ca>
 8006362:	4a99      	ldr	r2, [pc, #612]	@ (80065c8 <_strtod_l+0xad8>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d12b      	bne.n	80063c0 <_strtod_l+0x8d0>
 8006368:	9b08      	ldr	r3, [sp, #32]
 800636a:	4651      	mov	r1, sl
 800636c:	b303      	cbz	r3, 80063b0 <_strtod_l+0x8c0>
 800636e:	465a      	mov	r2, fp
 8006370:	4b96      	ldr	r3, [pc, #600]	@ (80065cc <_strtod_l+0xadc>)
 8006372:	4013      	ands	r3, r2
 8006374:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006378:	f04f 32ff 	mov.w	r2, #4294967295
 800637c:	d81b      	bhi.n	80063b6 <_strtod_l+0x8c6>
 800637e:	0d1b      	lsrs	r3, r3, #20
 8006380:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006384:	fa02 f303 	lsl.w	r3, r2, r3
 8006388:	4299      	cmp	r1, r3
 800638a:	d119      	bne.n	80063c0 <_strtod_l+0x8d0>
 800638c:	4b90      	ldr	r3, [pc, #576]	@ (80065d0 <_strtod_l+0xae0>)
 800638e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006390:	429a      	cmp	r2, r3
 8006392:	d102      	bne.n	800639a <_strtod_l+0x8aa>
 8006394:	3101      	adds	r1, #1
 8006396:	f43f adc6 	beq.w	8005f26 <_strtod_l+0x436>
 800639a:	f04f 0a00 	mov.w	sl, #0
 800639e:	4b8b      	ldr	r3, [pc, #556]	@ (80065cc <_strtod_l+0xadc>)
 80063a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80063a2:	401a      	ands	r2, r3
 80063a4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80063a8:	9b08      	ldr	r3, [sp, #32]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d1b9      	bne.n	8006322 <_strtod_l+0x832>
 80063ae:	e5c5      	b.n	8005f3c <_strtod_l+0x44c>
 80063b0:	f04f 33ff 	mov.w	r3, #4294967295
 80063b4:	e7e8      	b.n	8006388 <_strtod_l+0x898>
 80063b6:	4613      	mov	r3, r2
 80063b8:	e7e6      	b.n	8006388 <_strtod_l+0x898>
 80063ba:	ea53 030a 	orrs.w	r3, r3, sl
 80063be:	d0a2      	beq.n	8006306 <_strtod_l+0x816>
 80063c0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80063c2:	b1db      	cbz	r3, 80063fc <_strtod_l+0x90c>
 80063c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80063c6:	4213      	tst	r3, r2
 80063c8:	d0ee      	beq.n	80063a8 <_strtod_l+0x8b8>
 80063ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80063cc:	4650      	mov	r0, sl
 80063ce:	4659      	mov	r1, fp
 80063d0:	9a08      	ldr	r2, [sp, #32]
 80063d2:	b1bb      	cbz	r3, 8006404 <_strtod_l+0x914>
 80063d4:	f7ff fb69 	bl	8005aaa <sulp>
 80063d8:	4602      	mov	r2, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80063e0:	f7f9 fece 	bl	8000180 <__adddf3>
 80063e4:	4682      	mov	sl, r0
 80063e6:	468b      	mov	fp, r1
 80063e8:	e7de      	b.n	80063a8 <_strtod_l+0x8b8>
 80063ea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80063ee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80063f2:	f04f 3aff 	mov.w	sl, #4294967295
 80063f6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80063fa:	e7d5      	b.n	80063a8 <_strtod_l+0x8b8>
 80063fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80063fe:	ea13 0f0a 	tst.w	r3, sl
 8006402:	e7e1      	b.n	80063c8 <_strtod_l+0x8d8>
 8006404:	f7ff fb51 	bl	8005aaa <sulp>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006410:	f7f9 feb4 	bl	800017c <__aeabi_dsub>
 8006414:	2200      	movs	r2, #0
 8006416:	2300      	movs	r3, #0
 8006418:	4682      	mov	sl, r0
 800641a:	468b      	mov	fp, r1
 800641c:	f7fa face 	bl	80009bc <__aeabi_dcmpeq>
 8006420:	2800      	cmp	r0, #0
 8006422:	d0c1      	beq.n	80063a8 <_strtod_l+0x8b8>
 8006424:	e615      	b.n	8006052 <_strtod_l+0x562>
 8006426:	4641      	mov	r1, r8
 8006428:	4620      	mov	r0, r4
 800642a:	f002 ff31 	bl	8009290 <__ratio>
 800642e:	2200      	movs	r2, #0
 8006430:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006434:	4606      	mov	r6, r0
 8006436:	460f      	mov	r7, r1
 8006438:	f7fa fad4 	bl	80009e4 <__aeabi_dcmple>
 800643c:	2800      	cmp	r0, #0
 800643e:	d06d      	beq.n	800651c <_strtod_l+0xa2c>
 8006440:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006442:	2b00      	cmp	r3, #0
 8006444:	d178      	bne.n	8006538 <_strtod_l+0xa48>
 8006446:	f1ba 0f00 	cmp.w	sl, #0
 800644a:	d156      	bne.n	80064fa <_strtod_l+0xa0a>
 800644c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800644e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006452:	2b00      	cmp	r3, #0
 8006454:	d158      	bne.n	8006508 <_strtod_l+0xa18>
 8006456:	2200      	movs	r2, #0
 8006458:	4630      	mov	r0, r6
 800645a:	4639      	mov	r1, r7
 800645c:	4b5d      	ldr	r3, [pc, #372]	@ (80065d4 <_strtod_l+0xae4>)
 800645e:	f7fa fab7 	bl	80009d0 <__aeabi_dcmplt>
 8006462:	2800      	cmp	r0, #0
 8006464:	d157      	bne.n	8006516 <_strtod_l+0xa26>
 8006466:	4630      	mov	r0, r6
 8006468:	4639      	mov	r1, r7
 800646a:	2200      	movs	r2, #0
 800646c:	4b5a      	ldr	r3, [pc, #360]	@ (80065d8 <_strtod_l+0xae8>)
 800646e:	f7fa f83d 	bl	80004ec <__aeabi_dmul>
 8006472:	4606      	mov	r6, r0
 8006474:	460f      	mov	r7, r1
 8006476:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800647a:	9606      	str	r6, [sp, #24]
 800647c:	9307      	str	r3, [sp, #28]
 800647e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006482:	4d52      	ldr	r5, [pc, #328]	@ (80065cc <_strtod_l+0xadc>)
 8006484:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006488:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800648a:	401d      	ands	r5, r3
 800648c:	4b53      	ldr	r3, [pc, #332]	@ (80065dc <_strtod_l+0xaec>)
 800648e:	429d      	cmp	r5, r3
 8006490:	f040 80aa 	bne.w	80065e8 <_strtod_l+0xaf8>
 8006494:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006496:	4650      	mov	r0, sl
 8006498:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800649c:	4659      	mov	r1, fp
 800649e:	f002 fe37 	bl	8009110 <__ulp>
 80064a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80064a6:	f7fa f821 	bl	80004ec <__aeabi_dmul>
 80064aa:	4652      	mov	r2, sl
 80064ac:	465b      	mov	r3, fp
 80064ae:	f7f9 fe67 	bl	8000180 <__adddf3>
 80064b2:	460b      	mov	r3, r1
 80064b4:	4945      	ldr	r1, [pc, #276]	@ (80065cc <_strtod_l+0xadc>)
 80064b6:	4a4a      	ldr	r2, [pc, #296]	@ (80065e0 <_strtod_l+0xaf0>)
 80064b8:	4019      	ands	r1, r3
 80064ba:	4291      	cmp	r1, r2
 80064bc:	4682      	mov	sl, r0
 80064be:	d942      	bls.n	8006546 <_strtod_l+0xa56>
 80064c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80064c2:	4b43      	ldr	r3, [pc, #268]	@ (80065d0 <_strtod_l+0xae0>)
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d103      	bne.n	80064d0 <_strtod_l+0x9e0>
 80064c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80064ca:	3301      	adds	r3, #1
 80064cc:	f43f ad2b 	beq.w	8005f26 <_strtod_l+0x436>
 80064d0:	f04f 3aff 	mov.w	sl, #4294967295
 80064d4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80065d0 <_strtod_l+0xae0>
 80064d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80064da:	9805      	ldr	r0, [sp, #20]
 80064dc:	f002 fae6 	bl	8008aac <_Bfree>
 80064e0:	4649      	mov	r1, r9
 80064e2:	9805      	ldr	r0, [sp, #20]
 80064e4:	f002 fae2 	bl	8008aac <_Bfree>
 80064e8:	4641      	mov	r1, r8
 80064ea:	9805      	ldr	r0, [sp, #20]
 80064ec:	f002 fade 	bl	8008aac <_Bfree>
 80064f0:	4621      	mov	r1, r4
 80064f2:	9805      	ldr	r0, [sp, #20]
 80064f4:	f002 fada 	bl	8008aac <_Bfree>
 80064f8:	e618      	b.n	800612c <_strtod_l+0x63c>
 80064fa:	f1ba 0f01 	cmp.w	sl, #1
 80064fe:	d103      	bne.n	8006508 <_strtod_l+0xa18>
 8006500:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006502:	2b00      	cmp	r3, #0
 8006504:	f43f ada5 	beq.w	8006052 <_strtod_l+0x562>
 8006508:	2200      	movs	r2, #0
 800650a:	4b36      	ldr	r3, [pc, #216]	@ (80065e4 <_strtod_l+0xaf4>)
 800650c:	2600      	movs	r6, #0
 800650e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006512:	4f30      	ldr	r7, [pc, #192]	@ (80065d4 <_strtod_l+0xae4>)
 8006514:	e7b3      	b.n	800647e <_strtod_l+0x98e>
 8006516:	2600      	movs	r6, #0
 8006518:	4f2f      	ldr	r7, [pc, #188]	@ (80065d8 <_strtod_l+0xae8>)
 800651a:	e7ac      	b.n	8006476 <_strtod_l+0x986>
 800651c:	4630      	mov	r0, r6
 800651e:	4639      	mov	r1, r7
 8006520:	4b2d      	ldr	r3, [pc, #180]	@ (80065d8 <_strtod_l+0xae8>)
 8006522:	2200      	movs	r2, #0
 8006524:	f7f9 ffe2 	bl	80004ec <__aeabi_dmul>
 8006528:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800652a:	4606      	mov	r6, r0
 800652c:	460f      	mov	r7, r1
 800652e:	2b00      	cmp	r3, #0
 8006530:	d0a1      	beq.n	8006476 <_strtod_l+0x986>
 8006532:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006536:	e7a2      	b.n	800647e <_strtod_l+0x98e>
 8006538:	2200      	movs	r2, #0
 800653a:	4b26      	ldr	r3, [pc, #152]	@ (80065d4 <_strtod_l+0xae4>)
 800653c:	4616      	mov	r6, r2
 800653e:	461f      	mov	r7, r3
 8006540:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006544:	e79b      	b.n	800647e <_strtod_l+0x98e>
 8006546:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800654a:	9b08      	ldr	r3, [sp, #32]
 800654c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006550:	2b00      	cmp	r3, #0
 8006552:	d1c1      	bne.n	80064d8 <_strtod_l+0x9e8>
 8006554:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006558:	0d1b      	lsrs	r3, r3, #20
 800655a:	051b      	lsls	r3, r3, #20
 800655c:	429d      	cmp	r5, r3
 800655e:	d1bb      	bne.n	80064d8 <_strtod_l+0x9e8>
 8006560:	4630      	mov	r0, r6
 8006562:	4639      	mov	r1, r7
 8006564:	f7fa fdf4 	bl	8001150 <__aeabi_d2lz>
 8006568:	f7f9 ff92 	bl	8000490 <__aeabi_l2d>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4630      	mov	r0, r6
 8006572:	4639      	mov	r1, r7
 8006574:	f7f9 fe02 	bl	800017c <__aeabi_dsub>
 8006578:	460b      	mov	r3, r1
 800657a:	4602      	mov	r2, r0
 800657c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006580:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006586:	ea46 060a 	orr.w	r6, r6, sl
 800658a:	431e      	orrs	r6, r3
 800658c:	d069      	beq.n	8006662 <_strtod_l+0xb72>
 800658e:	a30a      	add	r3, pc, #40	@ (adr r3, 80065b8 <_strtod_l+0xac8>)
 8006590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006594:	f7fa fa1c 	bl	80009d0 <__aeabi_dcmplt>
 8006598:	2800      	cmp	r0, #0
 800659a:	f47f accf 	bne.w	8005f3c <_strtod_l+0x44c>
 800659e:	a308      	add	r3, pc, #32	@ (adr r3, 80065c0 <_strtod_l+0xad0>)
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065a8:	f7fa fa30 	bl	8000a0c <__aeabi_dcmpgt>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	d093      	beq.n	80064d8 <_strtod_l+0x9e8>
 80065b0:	e4c4      	b.n	8005f3c <_strtod_l+0x44c>
 80065b2:	bf00      	nop
 80065b4:	f3af 8000 	nop.w
 80065b8:	94a03595 	.word	0x94a03595
 80065bc:	3fdfffff 	.word	0x3fdfffff
 80065c0:	35afe535 	.word	0x35afe535
 80065c4:	3fe00000 	.word	0x3fe00000
 80065c8:	000fffff 	.word	0x000fffff
 80065cc:	7ff00000 	.word	0x7ff00000
 80065d0:	7fefffff 	.word	0x7fefffff
 80065d4:	3ff00000 	.word	0x3ff00000
 80065d8:	3fe00000 	.word	0x3fe00000
 80065dc:	7fe00000 	.word	0x7fe00000
 80065e0:	7c9fffff 	.word	0x7c9fffff
 80065e4:	bff00000 	.word	0xbff00000
 80065e8:	9b08      	ldr	r3, [sp, #32]
 80065ea:	b323      	cbz	r3, 8006636 <_strtod_l+0xb46>
 80065ec:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80065f0:	d821      	bhi.n	8006636 <_strtod_l+0xb46>
 80065f2:	a327      	add	r3, pc, #156	@ (adr r3, 8006690 <_strtod_l+0xba0>)
 80065f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f8:	4630      	mov	r0, r6
 80065fa:	4639      	mov	r1, r7
 80065fc:	f7fa f9f2 	bl	80009e4 <__aeabi_dcmple>
 8006600:	b1a0      	cbz	r0, 800662c <_strtod_l+0xb3c>
 8006602:	4639      	mov	r1, r7
 8006604:	4630      	mov	r0, r6
 8006606:	f7fa fa49 	bl	8000a9c <__aeabi_d2uiz>
 800660a:	2801      	cmp	r0, #1
 800660c:	bf38      	it	cc
 800660e:	2001      	movcc	r0, #1
 8006610:	f7f9 fef2 	bl	80003f8 <__aeabi_ui2d>
 8006614:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006616:	4606      	mov	r6, r0
 8006618:	460f      	mov	r7, r1
 800661a:	b9fb      	cbnz	r3, 800665c <_strtod_l+0xb6c>
 800661c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006620:	9014      	str	r0, [sp, #80]	@ 0x50
 8006622:	9315      	str	r3, [sp, #84]	@ 0x54
 8006624:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006628:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800662c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800662e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006632:	1b5b      	subs	r3, r3, r5
 8006634:	9311      	str	r3, [sp, #68]	@ 0x44
 8006636:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800663a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800663e:	f002 fd67 	bl	8009110 <__ulp>
 8006642:	4602      	mov	r2, r0
 8006644:	460b      	mov	r3, r1
 8006646:	4650      	mov	r0, sl
 8006648:	4659      	mov	r1, fp
 800664a:	f7f9 ff4f 	bl	80004ec <__aeabi_dmul>
 800664e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006652:	f7f9 fd95 	bl	8000180 <__adddf3>
 8006656:	4682      	mov	sl, r0
 8006658:	468b      	mov	fp, r1
 800665a:	e776      	b.n	800654a <_strtod_l+0xa5a>
 800665c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006660:	e7e0      	b.n	8006624 <_strtod_l+0xb34>
 8006662:	a30d      	add	r3, pc, #52	@ (adr r3, 8006698 <_strtod_l+0xba8>)
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	f7fa f9b2 	bl	80009d0 <__aeabi_dcmplt>
 800666c:	e79e      	b.n	80065ac <_strtod_l+0xabc>
 800666e:	2300      	movs	r3, #0
 8006670:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006672:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006674:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	f7ff ba77 	b.w	8005b6a <_strtod_l+0x7a>
 800667c:	2a65      	cmp	r2, #101	@ 0x65
 800667e:	f43f ab6e 	beq.w	8005d5e <_strtod_l+0x26e>
 8006682:	2a45      	cmp	r2, #69	@ 0x45
 8006684:	f43f ab6b 	beq.w	8005d5e <_strtod_l+0x26e>
 8006688:	2301      	movs	r3, #1
 800668a:	f7ff bba6 	b.w	8005dda <_strtod_l+0x2ea>
 800668e:	bf00      	nop
 8006690:	ffc00000 	.word	0xffc00000
 8006694:	41dfffff 	.word	0x41dfffff
 8006698:	94a03595 	.word	0x94a03595
 800669c:	3fcfffff 	.word	0x3fcfffff

080066a0 <strtof>:
 80066a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066a4:	4d24      	ldr	r5, [pc, #144]	@ (8006738 <strtof+0x98>)
 80066a6:	460a      	mov	r2, r1
 80066a8:	4b24      	ldr	r3, [pc, #144]	@ (800673c <strtof+0x9c>)
 80066aa:	4601      	mov	r1, r0
 80066ac:	6828      	ldr	r0, [r5, #0]
 80066ae:	f7ff fa1f 	bl	8005af0 <_strtod_l>
 80066b2:	4602      	mov	r2, r0
 80066b4:	460b      	mov	r3, r1
 80066b6:	4606      	mov	r6, r0
 80066b8:	460f      	mov	r7, r1
 80066ba:	f7fa f9b1 	bl	8000a20 <__aeabi_dcmpun>
 80066be:	b168      	cbz	r0, 80066dc <strtof+0x3c>
 80066c0:	2f00      	cmp	r7, #0
 80066c2:	481f      	ldr	r0, [pc, #124]	@ (8006740 <strtof+0xa0>)
 80066c4:	da06      	bge.n	80066d4 <strtof+0x34>
 80066c6:	f000 ff11 	bl	80074ec <nanf>
 80066ca:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 80066ce:	4620      	mov	r0, r4
 80066d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066d4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066d8:	f000 bf08 	b.w	80074ec <nanf>
 80066dc:	4639      	mov	r1, r7
 80066de:	4630      	mov	r0, r6
 80066e0:	f7fa f9fc 	bl	8000adc <__aeabi_d2f>
 80066e4:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 80066e8:	4604      	mov	r4, r0
 80066ea:	4916      	ldr	r1, [pc, #88]	@ (8006744 <strtof+0xa4>)
 80066ec:	4640      	mov	r0, r8
 80066ee:	f7fa fd19 	bl	8001124 <__aeabi_fcmpun>
 80066f2:	b9b0      	cbnz	r0, 8006722 <strtof+0x82>
 80066f4:	4640      	mov	r0, r8
 80066f6:	4913      	ldr	r1, [pc, #76]	@ (8006744 <strtof+0xa4>)
 80066f8:	f7fa fcf6 	bl	80010e8 <__aeabi_fcmple>
 80066fc:	b988      	cbnz	r0, 8006722 <strtof+0x82>
 80066fe:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 8006702:	f04f 32ff 	mov.w	r2, #4294967295
 8006706:	4630      	mov	r0, r6
 8006708:	4649      	mov	r1, r9
 800670a:	4b0f      	ldr	r3, [pc, #60]	@ (8006748 <strtof+0xa8>)
 800670c:	f7fa f988 	bl	8000a20 <__aeabi_dcmpun>
 8006710:	b970      	cbnz	r0, 8006730 <strtof+0x90>
 8006712:	f04f 32ff 	mov.w	r2, #4294967295
 8006716:	4630      	mov	r0, r6
 8006718:	4649      	mov	r1, r9
 800671a:	4b0b      	ldr	r3, [pc, #44]	@ (8006748 <strtof+0xa8>)
 800671c:	f7fa f962 	bl	80009e4 <__aeabi_dcmple>
 8006720:	b930      	cbnz	r0, 8006730 <strtof+0x90>
 8006722:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8006726:	d1d2      	bne.n	80066ce <strtof+0x2e>
 8006728:	4b08      	ldr	r3, [pc, #32]	@ (800674c <strtof+0xac>)
 800672a:	403b      	ands	r3, r7
 800672c:	2b00      	cmp	r3, #0
 800672e:	d0ce      	beq.n	80066ce <strtof+0x2e>
 8006730:	2222      	movs	r2, #34	@ 0x22
 8006732:	682b      	ldr	r3, [r5, #0]
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	e7ca      	b.n	80066ce <strtof+0x2e>
 8006738:	20000198 	.word	0x20000198
 800673c:	2000002c 	.word	0x2000002c
 8006740:	0800a614 	.word	0x0800a614
 8006744:	7f7fffff 	.word	0x7f7fffff
 8006748:	7fefffff 	.word	0x7fefffff
 800674c:	7ff00000 	.word	0x7ff00000

08006750 <_strtoul_l.constprop.0>:
 8006750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006754:	4686      	mov	lr, r0
 8006756:	460d      	mov	r5, r1
 8006758:	4e33      	ldr	r6, [pc, #204]	@ (8006828 <_strtoul_l.constprop.0+0xd8>)
 800675a:	4628      	mov	r0, r5
 800675c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006760:	5d37      	ldrb	r7, [r6, r4]
 8006762:	f017 0708 	ands.w	r7, r7, #8
 8006766:	d1f8      	bne.n	800675a <_strtoul_l.constprop.0+0xa>
 8006768:	2c2d      	cmp	r4, #45	@ 0x2d
 800676a:	d12f      	bne.n	80067cc <_strtoul_l.constprop.0+0x7c>
 800676c:	2701      	movs	r7, #1
 800676e:	782c      	ldrb	r4, [r5, #0]
 8006770:	1c85      	adds	r5, r0, #2
 8006772:	f033 0010 	bics.w	r0, r3, #16
 8006776:	d109      	bne.n	800678c <_strtoul_l.constprop.0+0x3c>
 8006778:	2c30      	cmp	r4, #48	@ 0x30
 800677a:	d12c      	bne.n	80067d6 <_strtoul_l.constprop.0+0x86>
 800677c:	7828      	ldrb	r0, [r5, #0]
 800677e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8006782:	2858      	cmp	r0, #88	@ 0x58
 8006784:	d127      	bne.n	80067d6 <_strtoul_l.constprop.0+0x86>
 8006786:	2310      	movs	r3, #16
 8006788:	786c      	ldrb	r4, [r5, #1]
 800678a:	3502      	adds	r5, #2
 800678c:	f04f 38ff 	mov.w	r8, #4294967295
 8006790:	fbb8 f8f3 	udiv	r8, r8, r3
 8006794:	2600      	movs	r6, #0
 8006796:	fb03 f908 	mul.w	r9, r3, r8
 800679a:	4630      	mov	r0, r6
 800679c:	ea6f 0909 	mvn.w	r9, r9
 80067a0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80067a4:	f1bc 0f09 	cmp.w	ip, #9
 80067a8:	d81c      	bhi.n	80067e4 <_strtoul_l.constprop.0+0x94>
 80067aa:	4664      	mov	r4, ip
 80067ac:	42a3      	cmp	r3, r4
 80067ae:	dd2a      	ble.n	8006806 <_strtoul_l.constprop.0+0xb6>
 80067b0:	f1b6 3fff 	cmp.w	r6, #4294967295
 80067b4:	d007      	beq.n	80067c6 <_strtoul_l.constprop.0+0x76>
 80067b6:	4580      	cmp	r8, r0
 80067b8:	d322      	bcc.n	8006800 <_strtoul_l.constprop.0+0xb0>
 80067ba:	d101      	bne.n	80067c0 <_strtoul_l.constprop.0+0x70>
 80067bc:	45a1      	cmp	r9, r4
 80067be:	db1f      	blt.n	8006800 <_strtoul_l.constprop.0+0xb0>
 80067c0:	2601      	movs	r6, #1
 80067c2:	fb00 4003 	mla	r0, r0, r3, r4
 80067c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067ca:	e7e9      	b.n	80067a0 <_strtoul_l.constprop.0+0x50>
 80067cc:	2c2b      	cmp	r4, #43	@ 0x2b
 80067ce:	bf04      	itt	eq
 80067d0:	782c      	ldrbeq	r4, [r5, #0]
 80067d2:	1c85      	addeq	r5, r0, #2
 80067d4:	e7cd      	b.n	8006772 <_strtoul_l.constprop.0+0x22>
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1d8      	bne.n	800678c <_strtoul_l.constprop.0+0x3c>
 80067da:	2c30      	cmp	r4, #48	@ 0x30
 80067dc:	bf0c      	ite	eq
 80067de:	2308      	moveq	r3, #8
 80067e0:	230a      	movne	r3, #10
 80067e2:	e7d3      	b.n	800678c <_strtoul_l.constprop.0+0x3c>
 80067e4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80067e8:	f1bc 0f19 	cmp.w	ip, #25
 80067ec:	d801      	bhi.n	80067f2 <_strtoul_l.constprop.0+0xa2>
 80067ee:	3c37      	subs	r4, #55	@ 0x37
 80067f0:	e7dc      	b.n	80067ac <_strtoul_l.constprop.0+0x5c>
 80067f2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80067f6:	f1bc 0f19 	cmp.w	ip, #25
 80067fa:	d804      	bhi.n	8006806 <_strtoul_l.constprop.0+0xb6>
 80067fc:	3c57      	subs	r4, #87	@ 0x57
 80067fe:	e7d5      	b.n	80067ac <_strtoul_l.constprop.0+0x5c>
 8006800:	f04f 36ff 	mov.w	r6, #4294967295
 8006804:	e7df      	b.n	80067c6 <_strtoul_l.constprop.0+0x76>
 8006806:	1c73      	adds	r3, r6, #1
 8006808:	d106      	bne.n	8006818 <_strtoul_l.constprop.0+0xc8>
 800680a:	2322      	movs	r3, #34	@ 0x22
 800680c:	4630      	mov	r0, r6
 800680e:	f8ce 3000 	str.w	r3, [lr]
 8006812:	b932      	cbnz	r2, 8006822 <_strtoul_l.constprop.0+0xd2>
 8006814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006818:	b107      	cbz	r7, 800681c <_strtoul_l.constprop.0+0xcc>
 800681a:	4240      	negs	r0, r0
 800681c:	2a00      	cmp	r2, #0
 800681e:	d0f9      	beq.n	8006814 <_strtoul_l.constprop.0+0xc4>
 8006820:	b106      	cbz	r6, 8006824 <_strtoul_l.constprop.0+0xd4>
 8006822:	1e69      	subs	r1, r5, #1
 8006824:	6011      	str	r1, [r2, #0]
 8006826:	e7f5      	b.n	8006814 <_strtoul_l.constprop.0+0xc4>
 8006828:	0800a249 	.word	0x0800a249

0800682c <strtoul>:
 800682c:	4613      	mov	r3, r2
 800682e:	460a      	mov	r2, r1
 8006830:	4601      	mov	r1, r0
 8006832:	4802      	ldr	r0, [pc, #8]	@ (800683c <strtoul+0x10>)
 8006834:	6800      	ldr	r0, [r0, #0]
 8006836:	f7ff bf8b 	b.w	8006750 <_strtoul_l.constprop.0>
 800683a:	bf00      	nop
 800683c:	20000198 	.word	0x20000198

08006840 <__cvt>:
 8006840:	2b00      	cmp	r3, #0
 8006842:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006846:	461d      	mov	r5, r3
 8006848:	bfbb      	ittet	lt
 800684a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800684e:	461d      	movlt	r5, r3
 8006850:	2300      	movge	r3, #0
 8006852:	232d      	movlt	r3, #45	@ 0x2d
 8006854:	b088      	sub	sp, #32
 8006856:	4614      	mov	r4, r2
 8006858:	bfb8      	it	lt
 800685a:	4614      	movlt	r4, r2
 800685c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800685e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006860:	7013      	strb	r3, [r2, #0]
 8006862:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006864:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006868:	f023 0820 	bic.w	r8, r3, #32
 800686c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006870:	d005      	beq.n	800687e <__cvt+0x3e>
 8006872:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006876:	d100      	bne.n	800687a <__cvt+0x3a>
 8006878:	3601      	adds	r6, #1
 800687a:	2302      	movs	r3, #2
 800687c:	e000      	b.n	8006880 <__cvt+0x40>
 800687e:	2303      	movs	r3, #3
 8006880:	aa07      	add	r2, sp, #28
 8006882:	9204      	str	r2, [sp, #16]
 8006884:	aa06      	add	r2, sp, #24
 8006886:	e9cd a202 	strd	sl, r2, [sp, #8]
 800688a:	e9cd 3600 	strd	r3, r6, [sp]
 800688e:	4622      	mov	r2, r4
 8006890:	462b      	mov	r3, r5
 8006892:	f000 feb9 	bl	8007608 <_dtoa_r>
 8006896:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800689a:	4607      	mov	r7, r0
 800689c:	d119      	bne.n	80068d2 <__cvt+0x92>
 800689e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80068a0:	07db      	lsls	r3, r3, #31
 80068a2:	d50e      	bpl.n	80068c2 <__cvt+0x82>
 80068a4:	eb00 0906 	add.w	r9, r0, r6
 80068a8:	2200      	movs	r2, #0
 80068aa:	2300      	movs	r3, #0
 80068ac:	4620      	mov	r0, r4
 80068ae:	4629      	mov	r1, r5
 80068b0:	f7fa f884 	bl	80009bc <__aeabi_dcmpeq>
 80068b4:	b108      	cbz	r0, 80068ba <__cvt+0x7a>
 80068b6:	f8cd 901c 	str.w	r9, [sp, #28]
 80068ba:	2230      	movs	r2, #48	@ 0x30
 80068bc:	9b07      	ldr	r3, [sp, #28]
 80068be:	454b      	cmp	r3, r9
 80068c0:	d31e      	bcc.n	8006900 <__cvt+0xc0>
 80068c2:	4638      	mov	r0, r7
 80068c4:	9b07      	ldr	r3, [sp, #28]
 80068c6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80068c8:	1bdb      	subs	r3, r3, r7
 80068ca:	6013      	str	r3, [r2, #0]
 80068cc:	b008      	add	sp, #32
 80068ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068d2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80068d6:	eb00 0906 	add.w	r9, r0, r6
 80068da:	d1e5      	bne.n	80068a8 <__cvt+0x68>
 80068dc:	7803      	ldrb	r3, [r0, #0]
 80068de:	2b30      	cmp	r3, #48	@ 0x30
 80068e0:	d10a      	bne.n	80068f8 <__cvt+0xb8>
 80068e2:	2200      	movs	r2, #0
 80068e4:	2300      	movs	r3, #0
 80068e6:	4620      	mov	r0, r4
 80068e8:	4629      	mov	r1, r5
 80068ea:	f7fa f867 	bl	80009bc <__aeabi_dcmpeq>
 80068ee:	b918      	cbnz	r0, 80068f8 <__cvt+0xb8>
 80068f0:	f1c6 0601 	rsb	r6, r6, #1
 80068f4:	f8ca 6000 	str.w	r6, [sl]
 80068f8:	f8da 3000 	ldr.w	r3, [sl]
 80068fc:	4499      	add	r9, r3
 80068fe:	e7d3      	b.n	80068a8 <__cvt+0x68>
 8006900:	1c59      	adds	r1, r3, #1
 8006902:	9107      	str	r1, [sp, #28]
 8006904:	701a      	strb	r2, [r3, #0]
 8006906:	e7d9      	b.n	80068bc <__cvt+0x7c>

08006908 <__exponent>:
 8006908:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800690a:	2900      	cmp	r1, #0
 800690c:	bfb6      	itet	lt
 800690e:	232d      	movlt	r3, #45	@ 0x2d
 8006910:	232b      	movge	r3, #43	@ 0x2b
 8006912:	4249      	neglt	r1, r1
 8006914:	2909      	cmp	r1, #9
 8006916:	7002      	strb	r2, [r0, #0]
 8006918:	7043      	strb	r3, [r0, #1]
 800691a:	dd29      	ble.n	8006970 <__exponent+0x68>
 800691c:	f10d 0307 	add.w	r3, sp, #7
 8006920:	461d      	mov	r5, r3
 8006922:	270a      	movs	r7, #10
 8006924:	fbb1 f6f7 	udiv	r6, r1, r7
 8006928:	461a      	mov	r2, r3
 800692a:	fb07 1416 	mls	r4, r7, r6, r1
 800692e:	3430      	adds	r4, #48	@ 0x30
 8006930:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006934:	460c      	mov	r4, r1
 8006936:	2c63      	cmp	r4, #99	@ 0x63
 8006938:	4631      	mov	r1, r6
 800693a:	f103 33ff 	add.w	r3, r3, #4294967295
 800693e:	dcf1      	bgt.n	8006924 <__exponent+0x1c>
 8006940:	3130      	adds	r1, #48	@ 0x30
 8006942:	1e94      	subs	r4, r2, #2
 8006944:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006948:	4623      	mov	r3, r4
 800694a:	1c41      	adds	r1, r0, #1
 800694c:	42ab      	cmp	r3, r5
 800694e:	d30a      	bcc.n	8006966 <__exponent+0x5e>
 8006950:	f10d 0309 	add.w	r3, sp, #9
 8006954:	1a9b      	subs	r3, r3, r2
 8006956:	42ac      	cmp	r4, r5
 8006958:	bf88      	it	hi
 800695a:	2300      	movhi	r3, #0
 800695c:	3302      	adds	r3, #2
 800695e:	4403      	add	r3, r0
 8006960:	1a18      	subs	r0, r3, r0
 8006962:	b003      	add	sp, #12
 8006964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006966:	f813 6b01 	ldrb.w	r6, [r3], #1
 800696a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800696e:	e7ed      	b.n	800694c <__exponent+0x44>
 8006970:	2330      	movs	r3, #48	@ 0x30
 8006972:	3130      	adds	r1, #48	@ 0x30
 8006974:	7083      	strb	r3, [r0, #2]
 8006976:	70c1      	strb	r1, [r0, #3]
 8006978:	1d03      	adds	r3, r0, #4
 800697a:	e7f1      	b.n	8006960 <__exponent+0x58>

0800697c <_printf_float>:
 800697c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006980:	b091      	sub	sp, #68	@ 0x44
 8006982:	460c      	mov	r4, r1
 8006984:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006988:	4616      	mov	r6, r2
 800698a:	461f      	mov	r7, r3
 800698c:	4605      	mov	r5, r0
 800698e:	f000 fd0b 	bl	80073a8 <_localeconv_r>
 8006992:	6803      	ldr	r3, [r0, #0]
 8006994:	4618      	mov	r0, r3
 8006996:	9308      	str	r3, [sp, #32]
 8006998:	f7f9 fbe4 	bl	8000164 <strlen>
 800699c:	2300      	movs	r3, #0
 800699e:	930e      	str	r3, [sp, #56]	@ 0x38
 80069a0:	f8d8 3000 	ldr.w	r3, [r8]
 80069a4:	9009      	str	r0, [sp, #36]	@ 0x24
 80069a6:	3307      	adds	r3, #7
 80069a8:	f023 0307 	bic.w	r3, r3, #7
 80069ac:	f103 0208 	add.w	r2, r3, #8
 80069b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80069b4:	f8d4 b000 	ldr.w	fp, [r4]
 80069b8:	f8c8 2000 	str.w	r2, [r8]
 80069bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80069c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069c6:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80069ca:	f04f 32ff 	mov.w	r2, #4294967295
 80069ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80069d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80069d6:	4b9c      	ldr	r3, [pc, #624]	@ (8006c48 <_printf_float+0x2cc>)
 80069d8:	f7fa f822 	bl	8000a20 <__aeabi_dcmpun>
 80069dc:	bb70      	cbnz	r0, 8006a3c <_printf_float+0xc0>
 80069de:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80069e2:	f04f 32ff 	mov.w	r2, #4294967295
 80069e6:	4b98      	ldr	r3, [pc, #608]	@ (8006c48 <_printf_float+0x2cc>)
 80069e8:	f7f9 fffc 	bl	80009e4 <__aeabi_dcmple>
 80069ec:	bb30      	cbnz	r0, 8006a3c <_printf_float+0xc0>
 80069ee:	2200      	movs	r2, #0
 80069f0:	2300      	movs	r3, #0
 80069f2:	4640      	mov	r0, r8
 80069f4:	4649      	mov	r1, r9
 80069f6:	f7f9 ffeb 	bl	80009d0 <__aeabi_dcmplt>
 80069fa:	b110      	cbz	r0, 8006a02 <_printf_float+0x86>
 80069fc:	232d      	movs	r3, #45	@ 0x2d
 80069fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a02:	4a92      	ldr	r2, [pc, #584]	@ (8006c4c <_printf_float+0x2d0>)
 8006a04:	4b92      	ldr	r3, [pc, #584]	@ (8006c50 <_printf_float+0x2d4>)
 8006a06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006a0a:	bf94      	ite	ls
 8006a0c:	4690      	movls	r8, r2
 8006a0e:	4698      	movhi	r8, r3
 8006a10:	2303      	movs	r3, #3
 8006a12:	f04f 0900 	mov.w	r9, #0
 8006a16:	6123      	str	r3, [r4, #16]
 8006a18:	f02b 0304 	bic.w	r3, fp, #4
 8006a1c:	6023      	str	r3, [r4, #0]
 8006a1e:	4633      	mov	r3, r6
 8006a20:	4621      	mov	r1, r4
 8006a22:	4628      	mov	r0, r5
 8006a24:	9700      	str	r7, [sp, #0]
 8006a26:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006a28:	f000 f9d4 	bl	8006dd4 <_printf_common>
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	f040 8090 	bne.w	8006b52 <_printf_float+0x1d6>
 8006a32:	f04f 30ff 	mov.w	r0, #4294967295
 8006a36:	b011      	add	sp, #68	@ 0x44
 8006a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3c:	4642      	mov	r2, r8
 8006a3e:	464b      	mov	r3, r9
 8006a40:	4640      	mov	r0, r8
 8006a42:	4649      	mov	r1, r9
 8006a44:	f7f9 ffec 	bl	8000a20 <__aeabi_dcmpun>
 8006a48:	b148      	cbz	r0, 8006a5e <_printf_float+0xe2>
 8006a4a:	464b      	mov	r3, r9
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	bfb8      	it	lt
 8006a50:	232d      	movlt	r3, #45	@ 0x2d
 8006a52:	4a80      	ldr	r2, [pc, #512]	@ (8006c54 <_printf_float+0x2d8>)
 8006a54:	bfb8      	it	lt
 8006a56:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006a5a:	4b7f      	ldr	r3, [pc, #508]	@ (8006c58 <_printf_float+0x2dc>)
 8006a5c:	e7d3      	b.n	8006a06 <_printf_float+0x8a>
 8006a5e:	6863      	ldr	r3, [r4, #4]
 8006a60:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006a64:	1c5a      	adds	r2, r3, #1
 8006a66:	d13f      	bne.n	8006ae8 <_printf_float+0x16c>
 8006a68:	2306      	movs	r3, #6
 8006a6a:	6063      	str	r3, [r4, #4]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006a72:	6023      	str	r3, [r4, #0]
 8006a74:	9206      	str	r2, [sp, #24]
 8006a76:	aa0e      	add	r2, sp, #56	@ 0x38
 8006a78:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006a7c:	aa0d      	add	r2, sp, #52	@ 0x34
 8006a7e:	9203      	str	r2, [sp, #12]
 8006a80:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006a84:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006a88:	6863      	ldr	r3, [r4, #4]
 8006a8a:	4642      	mov	r2, r8
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	4628      	mov	r0, r5
 8006a90:	464b      	mov	r3, r9
 8006a92:	910a      	str	r1, [sp, #40]	@ 0x28
 8006a94:	f7ff fed4 	bl	8006840 <__cvt>
 8006a98:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006a9a:	4680      	mov	r8, r0
 8006a9c:	2947      	cmp	r1, #71	@ 0x47
 8006a9e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006aa0:	d128      	bne.n	8006af4 <_printf_float+0x178>
 8006aa2:	1cc8      	adds	r0, r1, #3
 8006aa4:	db02      	blt.n	8006aac <_printf_float+0x130>
 8006aa6:	6863      	ldr	r3, [r4, #4]
 8006aa8:	4299      	cmp	r1, r3
 8006aaa:	dd40      	ble.n	8006b2e <_printf_float+0x1b2>
 8006aac:	f1aa 0a02 	sub.w	sl, sl, #2
 8006ab0:	fa5f fa8a 	uxtb.w	sl, sl
 8006ab4:	4652      	mov	r2, sl
 8006ab6:	3901      	subs	r1, #1
 8006ab8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006abc:	910d      	str	r1, [sp, #52]	@ 0x34
 8006abe:	f7ff ff23 	bl	8006908 <__exponent>
 8006ac2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ac4:	4681      	mov	r9, r0
 8006ac6:	1813      	adds	r3, r2, r0
 8006ac8:	2a01      	cmp	r2, #1
 8006aca:	6123      	str	r3, [r4, #16]
 8006acc:	dc02      	bgt.n	8006ad4 <_printf_float+0x158>
 8006ace:	6822      	ldr	r2, [r4, #0]
 8006ad0:	07d2      	lsls	r2, r2, #31
 8006ad2:	d501      	bpl.n	8006ad8 <_printf_float+0x15c>
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	6123      	str	r3, [r4, #16]
 8006ad8:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d09e      	beq.n	8006a1e <_printf_float+0xa2>
 8006ae0:	232d      	movs	r3, #45	@ 0x2d
 8006ae2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ae6:	e79a      	b.n	8006a1e <_printf_float+0xa2>
 8006ae8:	2947      	cmp	r1, #71	@ 0x47
 8006aea:	d1bf      	bne.n	8006a6c <_printf_float+0xf0>
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1bd      	bne.n	8006a6c <_printf_float+0xf0>
 8006af0:	2301      	movs	r3, #1
 8006af2:	e7ba      	b.n	8006a6a <_printf_float+0xee>
 8006af4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006af8:	d9dc      	bls.n	8006ab4 <_printf_float+0x138>
 8006afa:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006afe:	d118      	bne.n	8006b32 <_printf_float+0x1b6>
 8006b00:	2900      	cmp	r1, #0
 8006b02:	6863      	ldr	r3, [r4, #4]
 8006b04:	dd0b      	ble.n	8006b1e <_printf_float+0x1a2>
 8006b06:	6121      	str	r1, [r4, #16]
 8006b08:	b913      	cbnz	r3, 8006b10 <_printf_float+0x194>
 8006b0a:	6822      	ldr	r2, [r4, #0]
 8006b0c:	07d0      	lsls	r0, r2, #31
 8006b0e:	d502      	bpl.n	8006b16 <_printf_float+0x19a>
 8006b10:	3301      	adds	r3, #1
 8006b12:	440b      	add	r3, r1
 8006b14:	6123      	str	r3, [r4, #16]
 8006b16:	f04f 0900 	mov.w	r9, #0
 8006b1a:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006b1c:	e7dc      	b.n	8006ad8 <_printf_float+0x15c>
 8006b1e:	b913      	cbnz	r3, 8006b26 <_printf_float+0x1aa>
 8006b20:	6822      	ldr	r2, [r4, #0]
 8006b22:	07d2      	lsls	r2, r2, #31
 8006b24:	d501      	bpl.n	8006b2a <_printf_float+0x1ae>
 8006b26:	3302      	adds	r3, #2
 8006b28:	e7f4      	b.n	8006b14 <_printf_float+0x198>
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e7f2      	b.n	8006b14 <_printf_float+0x198>
 8006b2e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006b32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b34:	4299      	cmp	r1, r3
 8006b36:	db05      	blt.n	8006b44 <_printf_float+0x1c8>
 8006b38:	6823      	ldr	r3, [r4, #0]
 8006b3a:	6121      	str	r1, [r4, #16]
 8006b3c:	07d8      	lsls	r0, r3, #31
 8006b3e:	d5ea      	bpl.n	8006b16 <_printf_float+0x19a>
 8006b40:	1c4b      	adds	r3, r1, #1
 8006b42:	e7e7      	b.n	8006b14 <_printf_float+0x198>
 8006b44:	2900      	cmp	r1, #0
 8006b46:	bfcc      	ite	gt
 8006b48:	2201      	movgt	r2, #1
 8006b4a:	f1c1 0202 	rsble	r2, r1, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	e7e0      	b.n	8006b14 <_printf_float+0x198>
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	055a      	lsls	r2, r3, #21
 8006b56:	d407      	bmi.n	8006b68 <_printf_float+0x1ec>
 8006b58:	6923      	ldr	r3, [r4, #16]
 8006b5a:	4642      	mov	r2, r8
 8006b5c:	4631      	mov	r1, r6
 8006b5e:	4628      	mov	r0, r5
 8006b60:	47b8      	blx	r7
 8006b62:	3001      	adds	r0, #1
 8006b64:	d12b      	bne.n	8006bbe <_printf_float+0x242>
 8006b66:	e764      	b.n	8006a32 <_printf_float+0xb6>
 8006b68:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b6c:	f240 80dc 	bls.w	8006d28 <_printf_float+0x3ac>
 8006b70:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b74:	2200      	movs	r2, #0
 8006b76:	2300      	movs	r3, #0
 8006b78:	f7f9 ff20 	bl	80009bc <__aeabi_dcmpeq>
 8006b7c:	2800      	cmp	r0, #0
 8006b7e:	d033      	beq.n	8006be8 <_printf_float+0x26c>
 8006b80:	2301      	movs	r3, #1
 8006b82:	4631      	mov	r1, r6
 8006b84:	4628      	mov	r0, r5
 8006b86:	4a35      	ldr	r2, [pc, #212]	@ (8006c5c <_printf_float+0x2e0>)
 8006b88:	47b8      	blx	r7
 8006b8a:	3001      	adds	r0, #1
 8006b8c:	f43f af51 	beq.w	8006a32 <_printf_float+0xb6>
 8006b90:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006b94:	4543      	cmp	r3, r8
 8006b96:	db02      	blt.n	8006b9e <_printf_float+0x222>
 8006b98:	6823      	ldr	r3, [r4, #0]
 8006b9a:	07d8      	lsls	r0, r3, #31
 8006b9c:	d50f      	bpl.n	8006bbe <_printf_float+0x242>
 8006b9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006ba2:	4631      	mov	r1, r6
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	47b8      	blx	r7
 8006ba8:	3001      	adds	r0, #1
 8006baa:	f43f af42 	beq.w	8006a32 <_printf_float+0xb6>
 8006bae:	f04f 0900 	mov.w	r9, #0
 8006bb2:	f108 38ff 	add.w	r8, r8, #4294967295
 8006bb6:	f104 0a1a 	add.w	sl, r4, #26
 8006bba:	45c8      	cmp	r8, r9
 8006bbc:	dc09      	bgt.n	8006bd2 <_printf_float+0x256>
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	079b      	lsls	r3, r3, #30
 8006bc2:	f100 8102 	bmi.w	8006dca <_printf_float+0x44e>
 8006bc6:	68e0      	ldr	r0, [r4, #12]
 8006bc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006bca:	4298      	cmp	r0, r3
 8006bcc:	bfb8      	it	lt
 8006bce:	4618      	movlt	r0, r3
 8006bd0:	e731      	b.n	8006a36 <_printf_float+0xba>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	4652      	mov	r2, sl
 8006bd6:	4631      	mov	r1, r6
 8006bd8:	4628      	mov	r0, r5
 8006bda:	47b8      	blx	r7
 8006bdc:	3001      	adds	r0, #1
 8006bde:	f43f af28 	beq.w	8006a32 <_printf_float+0xb6>
 8006be2:	f109 0901 	add.w	r9, r9, #1
 8006be6:	e7e8      	b.n	8006bba <_printf_float+0x23e>
 8006be8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	dc38      	bgt.n	8006c60 <_printf_float+0x2e4>
 8006bee:	2301      	movs	r3, #1
 8006bf0:	4631      	mov	r1, r6
 8006bf2:	4628      	mov	r0, r5
 8006bf4:	4a19      	ldr	r2, [pc, #100]	@ (8006c5c <_printf_float+0x2e0>)
 8006bf6:	47b8      	blx	r7
 8006bf8:	3001      	adds	r0, #1
 8006bfa:	f43f af1a 	beq.w	8006a32 <_printf_float+0xb6>
 8006bfe:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006c02:	ea59 0303 	orrs.w	r3, r9, r3
 8006c06:	d102      	bne.n	8006c0e <_printf_float+0x292>
 8006c08:	6823      	ldr	r3, [r4, #0]
 8006c0a:	07d9      	lsls	r1, r3, #31
 8006c0c:	d5d7      	bpl.n	8006bbe <_printf_float+0x242>
 8006c0e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c12:	4631      	mov	r1, r6
 8006c14:	4628      	mov	r0, r5
 8006c16:	47b8      	blx	r7
 8006c18:	3001      	adds	r0, #1
 8006c1a:	f43f af0a 	beq.w	8006a32 <_printf_float+0xb6>
 8006c1e:	f04f 0a00 	mov.w	sl, #0
 8006c22:	f104 0b1a 	add.w	fp, r4, #26
 8006c26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c28:	425b      	negs	r3, r3
 8006c2a:	4553      	cmp	r3, sl
 8006c2c:	dc01      	bgt.n	8006c32 <_printf_float+0x2b6>
 8006c2e:	464b      	mov	r3, r9
 8006c30:	e793      	b.n	8006b5a <_printf_float+0x1de>
 8006c32:	2301      	movs	r3, #1
 8006c34:	465a      	mov	r2, fp
 8006c36:	4631      	mov	r1, r6
 8006c38:	4628      	mov	r0, r5
 8006c3a:	47b8      	blx	r7
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	f43f aef8 	beq.w	8006a32 <_printf_float+0xb6>
 8006c42:	f10a 0a01 	add.w	sl, sl, #1
 8006c46:	e7ee      	b.n	8006c26 <_printf_float+0x2aa>
 8006c48:	7fefffff 	.word	0x7fefffff
 8006c4c:	0800a349 	.word	0x0800a349
 8006c50:	0800a34d 	.word	0x0800a34d
 8006c54:	0800a351 	.word	0x0800a351
 8006c58:	0800a355 	.word	0x0800a355
 8006c5c:	0800a359 	.word	0x0800a359
 8006c60:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c62:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006c66:	4553      	cmp	r3, sl
 8006c68:	bfa8      	it	ge
 8006c6a:	4653      	movge	r3, sl
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	4699      	mov	r9, r3
 8006c70:	dc36      	bgt.n	8006ce0 <_printf_float+0x364>
 8006c72:	f04f 0b00 	mov.w	fp, #0
 8006c76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c7a:	f104 021a 	add.w	r2, r4, #26
 8006c7e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006c80:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c82:	eba3 0309 	sub.w	r3, r3, r9
 8006c86:	455b      	cmp	r3, fp
 8006c88:	dc31      	bgt.n	8006cee <_printf_float+0x372>
 8006c8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c8c:	459a      	cmp	sl, r3
 8006c8e:	dc3a      	bgt.n	8006d06 <_printf_float+0x38a>
 8006c90:	6823      	ldr	r3, [r4, #0]
 8006c92:	07da      	lsls	r2, r3, #31
 8006c94:	d437      	bmi.n	8006d06 <_printf_float+0x38a>
 8006c96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c98:	ebaa 0903 	sub.w	r9, sl, r3
 8006c9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c9e:	ebaa 0303 	sub.w	r3, sl, r3
 8006ca2:	4599      	cmp	r9, r3
 8006ca4:	bfa8      	it	ge
 8006ca6:	4699      	movge	r9, r3
 8006ca8:	f1b9 0f00 	cmp.w	r9, #0
 8006cac:	dc33      	bgt.n	8006d16 <_printf_float+0x39a>
 8006cae:	f04f 0800 	mov.w	r8, #0
 8006cb2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cb6:	f104 0b1a 	add.w	fp, r4, #26
 8006cba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cbc:	ebaa 0303 	sub.w	r3, sl, r3
 8006cc0:	eba3 0309 	sub.w	r3, r3, r9
 8006cc4:	4543      	cmp	r3, r8
 8006cc6:	f77f af7a 	ble.w	8006bbe <_printf_float+0x242>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	465a      	mov	r2, fp
 8006cce:	4631      	mov	r1, r6
 8006cd0:	4628      	mov	r0, r5
 8006cd2:	47b8      	blx	r7
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	f43f aeac 	beq.w	8006a32 <_printf_float+0xb6>
 8006cda:	f108 0801 	add.w	r8, r8, #1
 8006cde:	e7ec      	b.n	8006cba <_printf_float+0x33e>
 8006ce0:	4642      	mov	r2, r8
 8006ce2:	4631      	mov	r1, r6
 8006ce4:	4628      	mov	r0, r5
 8006ce6:	47b8      	blx	r7
 8006ce8:	3001      	adds	r0, #1
 8006cea:	d1c2      	bne.n	8006c72 <_printf_float+0x2f6>
 8006cec:	e6a1      	b.n	8006a32 <_printf_float+0xb6>
 8006cee:	2301      	movs	r3, #1
 8006cf0:	4631      	mov	r1, r6
 8006cf2:	4628      	mov	r0, r5
 8006cf4:	920a      	str	r2, [sp, #40]	@ 0x28
 8006cf6:	47b8      	blx	r7
 8006cf8:	3001      	adds	r0, #1
 8006cfa:	f43f ae9a 	beq.w	8006a32 <_printf_float+0xb6>
 8006cfe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d00:	f10b 0b01 	add.w	fp, fp, #1
 8006d04:	e7bb      	b.n	8006c7e <_printf_float+0x302>
 8006d06:	4631      	mov	r1, r6
 8006d08:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	47b8      	blx	r7
 8006d10:	3001      	adds	r0, #1
 8006d12:	d1c0      	bne.n	8006c96 <_printf_float+0x31a>
 8006d14:	e68d      	b.n	8006a32 <_printf_float+0xb6>
 8006d16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d18:	464b      	mov	r3, r9
 8006d1a:	4631      	mov	r1, r6
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	4442      	add	r2, r8
 8006d20:	47b8      	blx	r7
 8006d22:	3001      	adds	r0, #1
 8006d24:	d1c3      	bne.n	8006cae <_printf_float+0x332>
 8006d26:	e684      	b.n	8006a32 <_printf_float+0xb6>
 8006d28:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006d2c:	f1ba 0f01 	cmp.w	sl, #1
 8006d30:	dc01      	bgt.n	8006d36 <_printf_float+0x3ba>
 8006d32:	07db      	lsls	r3, r3, #31
 8006d34:	d536      	bpl.n	8006da4 <_printf_float+0x428>
 8006d36:	2301      	movs	r3, #1
 8006d38:	4642      	mov	r2, r8
 8006d3a:	4631      	mov	r1, r6
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	47b8      	blx	r7
 8006d40:	3001      	adds	r0, #1
 8006d42:	f43f ae76 	beq.w	8006a32 <_printf_float+0xb6>
 8006d46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d4a:	4631      	mov	r1, r6
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	47b8      	blx	r7
 8006d50:	3001      	adds	r0, #1
 8006d52:	f43f ae6e 	beq.w	8006a32 <_printf_float+0xb6>
 8006d56:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d62:	f7f9 fe2b 	bl	80009bc <__aeabi_dcmpeq>
 8006d66:	b9c0      	cbnz	r0, 8006d9a <_printf_float+0x41e>
 8006d68:	4653      	mov	r3, sl
 8006d6a:	f108 0201 	add.w	r2, r8, #1
 8006d6e:	4631      	mov	r1, r6
 8006d70:	4628      	mov	r0, r5
 8006d72:	47b8      	blx	r7
 8006d74:	3001      	adds	r0, #1
 8006d76:	d10c      	bne.n	8006d92 <_printf_float+0x416>
 8006d78:	e65b      	b.n	8006a32 <_printf_float+0xb6>
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	465a      	mov	r2, fp
 8006d7e:	4631      	mov	r1, r6
 8006d80:	4628      	mov	r0, r5
 8006d82:	47b8      	blx	r7
 8006d84:	3001      	adds	r0, #1
 8006d86:	f43f ae54 	beq.w	8006a32 <_printf_float+0xb6>
 8006d8a:	f108 0801 	add.w	r8, r8, #1
 8006d8e:	45d0      	cmp	r8, sl
 8006d90:	dbf3      	blt.n	8006d7a <_printf_float+0x3fe>
 8006d92:	464b      	mov	r3, r9
 8006d94:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006d98:	e6e0      	b.n	8006b5c <_printf_float+0x1e0>
 8006d9a:	f04f 0800 	mov.w	r8, #0
 8006d9e:	f104 0b1a 	add.w	fp, r4, #26
 8006da2:	e7f4      	b.n	8006d8e <_printf_float+0x412>
 8006da4:	2301      	movs	r3, #1
 8006da6:	4642      	mov	r2, r8
 8006da8:	e7e1      	b.n	8006d6e <_printf_float+0x3f2>
 8006daa:	2301      	movs	r3, #1
 8006dac:	464a      	mov	r2, r9
 8006dae:	4631      	mov	r1, r6
 8006db0:	4628      	mov	r0, r5
 8006db2:	47b8      	blx	r7
 8006db4:	3001      	adds	r0, #1
 8006db6:	f43f ae3c 	beq.w	8006a32 <_printf_float+0xb6>
 8006dba:	f108 0801 	add.w	r8, r8, #1
 8006dbe:	68e3      	ldr	r3, [r4, #12]
 8006dc0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006dc2:	1a5b      	subs	r3, r3, r1
 8006dc4:	4543      	cmp	r3, r8
 8006dc6:	dcf0      	bgt.n	8006daa <_printf_float+0x42e>
 8006dc8:	e6fd      	b.n	8006bc6 <_printf_float+0x24a>
 8006dca:	f04f 0800 	mov.w	r8, #0
 8006dce:	f104 0919 	add.w	r9, r4, #25
 8006dd2:	e7f4      	b.n	8006dbe <_printf_float+0x442>

08006dd4 <_printf_common>:
 8006dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd8:	4616      	mov	r6, r2
 8006dda:	4698      	mov	r8, r3
 8006ddc:	688a      	ldr	r2, [r1, #8]
 8006dde:	690b      	ldr	r3, [r1, #16]
 8006de0:	4607      	mov	r7, r0
 8006de2:	4293      	cmp	r3, r2
 8006de4:	bfb8      	it	lt
 8006de6:	4613      	movlt	r3, r2
 8006de8:	6033      	str	r3, [r6, #0]
 8006dea:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006dee:	460c      	mov	r4, r1
 8006df0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006df4:	b10a      	cbz	r2, 8006dfa <_printf_common+0x26>
 8006df6:	3301      	adds	r3, #1
 8006df8:	6033      	str	r3, [r6, #0]
 8006dfa:	6823      	ldr	r3, [r4, #0]
 8006dfc:	0699      	lsls	r1, r3, #26
 8006dfe:	bf42      	ittt	mi
 8006e00:	6833      	ldrmi	r3, [r6, #0]
 8006e02:	3302      	addmi	r3, #2
 8006e04:	6033      	strmi	r3, [r6, #0]
 8006e06:	6825      	ldr	r5, [r4, #0]
 8006e08:	f015 0506 	ands.w	r5, r5, #6
 8006e0c:	d106      	bne.n	8006e1c <_printf_common+0x48>
 8006e0e:	f104 0a19 	add.w	sl, r4, #25
 8006e12:	68e3      	ldr	r3, [r4, #12]
 8006e14:	6832      	ldr	r2, [r6, #0]
 8006e16:	1a9b      	subs	r3, r3, r2
 8006e18:	42ab      	cmp	r3, r5
 8006e1a:	dc2b      	bgt.n	8006e74 <_printf_common+0xa0>
 8006e1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e20:	6822      	ldr	r2, [r4, #0]
 8006e22:	3b00      	subs	r3, #0
 8006e24:	bf18      	it	ne
 8006e26:	2301      	movne	r3, #1
 8006e28:	0692      	lsls	r2, r2, #26
 8006e2a:	d430      	bmi.n	8006e8e <_printf_common+0xba>
 8006e2c:	4641      	mov	r1, r8
 8006e2e:	4638      	mov	r0, r7
 8006e30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e34:	47c8      	blx	r9
 8006e36:	3001      	adds	r0, #1
 8006e38:	d023      	beq.n	8006e82 <_printf_common+0xae>
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	6922      	ldr	r2, [r4, #16]
 8006e3e:	f003 0306 	and.w	r3, r3, #6
 8006e42:	2b04      	cmp	r3, #4
 8006e44:	bf14      	ite	ne
 8006e46:	2500      	movne	r5, #0
 8006e48:	6833      	ldreq	r3, [r6, #0]
 8006e4a:	f04f 0600 	mov.w	r6, #0
 8006e4e:	bf08      	it	eq
 8006e50:	68e5      	ldreq	r5, [r4, #12]
 8006e52:	f104 041a 	add.w	r4, r4, #26
 8006e56:	bf08      	it	eq
 8006e58:	1aed      	subeq	r5, r5, r3
 8006e5a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006e5e:	bf08      	it	eq
 8006e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e64:	4293      	cmp	r3, r2
 8006e66:	bfc4      	itt	gt
 8006e68:	1a9b      	subgt	r3, r3, r2
 8006e6a:	18ed      	addgt	r5, r5, r3
 8006e6c:	42b5      	cmp	r5, r6
 8006e6e:	d11a      	bne.n	8006ea6 <_printf_common+0xd2>
 8006e70:	2000      	movs	r0, #0
 8006e72:	e008      	b.n	8006e86 <_printf_common+0xb2>
 8006e74:	2301      	movs	r3, #1
 8006e76:	4652      	mov	r2, sl
 8006e78:	4641      	mov	r1, r8
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	47c8      	blx	r9
 8006e7e:	3001      	adds	r0, #1
 8006e80:	d103      	bne.n	8006e8a <_printf_common+0xb6>
 8006e82:	f04f 30ff 	mov.w	r0, #4294967295
 8006e86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e8a:	3501      	adds	r5, #1
 8006e8c:	e7c1      	b.n	8006e12 <_printf_common+0x3e>
 8006e8e:	2030      	movs	r0, #48	@ 0x30
 8006e90:	18e1      	adds	r1, r4, r3
 8006e92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e96:	1c5a      	adds	r2, r3, #1
 8006e98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e9c:	4422      	add	r2, r4
 8006e9e:	3302      	adds	r3, #2
 8006ea0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ea4:	e7c2      	b.n	8006e2c <_printf_common+0x58>
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	4622      	mov	r2, r4
 8006eaa:	4641      	mov	r1, r8
 8006eac:	4638      	mov	r0, r7
 8006eae:	47c8      	blx	r9
 8006eb0:	3001      	adds	r0, #1
 8006eb2:	d0e6      	beq.n	8006e82 <_printf_common+0xae>
 8006eb4:	3601      	adds	r6, #1
 8006eb6:	e7d9      	b.n	8006e6c <_printf_common+0x98>

08006eb8 <_printf_i>:
 8006eb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ebc:	7e0f      	ldrb	r7, [r1, #24]
 8006ebe:	4691      	mov	r9, r2
 8006ec0:	2f78      	cmp	r7, #120	@ 0x78
 8006ec2:	4680      	mov	r8, r0
 8006ec4:	460c      	mov	r4, r1
 8006ec6:	469a      	mov	sl, r3
 8006ec8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006eca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ece:	d807      	bhi.n	8006ee0 <_printf_i+0x28>
 8006ed0:	2f62      	cmp	r7, #98	@ 0x62
 8006ed2:	d80a      	bhi.n	8006eea <_printf_i+0x32>
 8006ed4:	2f00      	cmp	r7, #0
 8006ed6:	f000 80d3 	beq.w	8007080 <_printf_i+0x1c8>
 8006eda:	2f58      	cmp	r7, #88	@ 0x58
 8006edc:	f000 80ba 	beq.w	8007054 <_printf_i+0x19c>
 8006ee0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ee4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006ee8:	e03a      	b.n	8006f60 <_printf_i+0xa8>
 8006eea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006eee:	2b15      	cmp	r3, #21
 8006ef0:	d8f6      	bhi.n	8006ee0 <_printf_i+0x28>
 8006ef2:	a101      	add	r1, pc, #4	@ (adr r1, 8006ef8 <_printf_i+0x40>)
 8006ef4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ef8:	08006f51 	.word	0x08006f51
 8006efc:	08006f65 	.word	0x08006f65
 8006f00:	08006ee1 	.word	0x08006ee1
 8006f04:	08006ee1 	.word	0x08006ee1
 8006f08:	08006ee1 	.word	0x08006ee1
 8006f0c:	08006ee1 	.word	0x08006ee1
 8006f10:	08006f65 	.word	0x08006f65
 8006f14:	08006ee1 	.word	0x08006ee1
 8006f18:	08006ee1 	.word	0x08006ee1
 8006f1c:	08006ee1 	.word	0x08006ee1
 8006f20:	08006ee1 	.word	0x08006ee1
 8006f24:	08007067 	.word	0x08007067
 8006f28:	08006f8f 	.word	0x08006f8f
 8006f2c:	08007021 	.word	0x08007021
 8006f30:	08006ee1 	.word	0x08006ee1
 8006f34:	08006ee1 	.word	0x08006ee1
 8006f38:	08007089 	.word	0x08007089
 8006f3c:	08006ee1 	.word	0x08006ee1
 8006f40:	08006f8f 	.word	0x08006f8f
 8006f44:	08006ee1 	.word	0x08006ee1
 8006f48:	08006ee1 	.word	0x08006ee1
 8006f4c:	08007029 	.word	0x08007029
 8006f50:	6833      	ldr	r3, [r6, #0]
 8006f52:	1d1a      	adds	r2, r3, #4
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6032      	str	r2, [r6, #0]
 8006f58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006f60:	2301      	movs	r3, #1
 8006f62:	e09e      	b.n	80070a2 <_printf_i+0x1ea>
 8006f64:	6833      	ldr	r3, [r6, #0]
 8006f66:	6820      	ldr	r0, [r4, #0]
 8006f68:	1d19      	adds	r1, r3, #4
 8006f6a:	6031      	str	r1, [r6, #0]
 8006f6c:	0606      	lsls	r6, r0, #24
 8006f6e:	d501      	bpl.n	8006f74 <_printf_i+0xbc>
 8006f70:	681d      	ldr	r5, [r3, #0]
 8006f72:	e003      	b.n	8006f7c <_printf_i+0xc4>
 8006f74:	0645      	lsls	r5, r0, #25
 8006f76:	d5fb      	bpl.n	8006f70 <_printf_i+0xb8>
 8006f78:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f7c:	2d00      	cmp	r5, #0
 8006f7e:	da03      	bge.n	8006f88 <_printf_i+0xd0>
 8006f80:	232d      	movs	r3, #45	@ 0x2d
 8006f82:	426d      	negs	r5, r5
 8006f84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f88:	230a      	movs	r3, #10
 8006f8a:	4859      	ldr	r0, [pc, #356]	@ (80070f0 <_printf_i+0x238>)
 8006f8c:	e011      	b.n	8006fb2 <_printf_i+0xfa>
 8006f8e:	6821      	ldr	r1, [r4, #0]
 8006f90:	6833      	ldr	r3, [r6, #0]
 8006f92:	0608      	lsls	r0, r1, #24
 8006f94:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f98:	d402      	bmi.n	8006fa0 <_printf_i+0xe8>
 8006f9a:	0649      	lsls	r1, r1, #25
 8006f9c:	bf48      	it	mi
 8006f9e:	b2ad      	uxthmi	r5, r5
 8006fa0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006fa2:	6033      	str	r3, [r6, #0]
 8006fa4:	bf14      	ite	ne
 8006fa6:	230a      	movne	r3, #10
 8006fa8:	2308      	moveq	r3, #8
 8006faa:	4851      	ldr	r0, [pc, #324]	@ (80070f0 <_printf_i+0x238>)
 8006fac:	2100      	movs	r1, #0
 8006fae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006fb2:	6866      	ldr	r6, [r4, #4]
 8006fb4:	2e00      	cmp	r6, #0
 8006fb6:	bfa8      	it	ge
 8006fb8:	6821      	ldrge	r1, [r4, #0]
 8006fba:	60a6      	str	r6, [r4, #8]
 8006fbc:	bfa4      	itt	ge
 8006fbe:	f021 0104 	bicge.w	r1, r1, #4
 8006fc2:	6021      	strge	r1, [r4, #0]
 8006fc4:	b90d      	cbnz	r5, 8006fca <_printf_i+0x112>
 8006fc6:	2e00      	cmp	r6, #0
 8006fc8:	d04b      	beq.n	8007062 <_printf_i+0x1aa>
 8006fca:	4616      	mov	r6, r2
 8006fcc:	fbb5 f1f3 	udiv	r1, r5, r3
 8006fd0:	fb03 5711 	mls	r7, r3, r1, r5
 8006fd4:	5dc7      	ldrb	r7, [r0, r7]
 8006fd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006fda:	462f      	mov	r7, r5
 8006fdc:	42bb      	cmp	r3, r7
 8006fde:	460d      	mov	r5, r1
 8006fe0:	d9f4      	bls.n	8006fcc <_printf_i+0x114>
 8006fe2:	2b08      	cmp	r3, #8
 8006fe4:	d10b      	bne.n	8006ffe <_printf_i+0x146>
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	07df      	lsls	r7, r3, #31
 8006fea:	d508      	bpl.n	8006ffe <_printf_i+0x146>
 8006fec:	6923      	ldr	r3, [r4, #16]
 8006fee:	6861      	ldr	r1, [r4, #4]
 8006ff0:	4299      	cmp	r1, r3
 8006ff2:	bfde      	ittt	le
 8006ff4:	2330      	movle	r3, #48	@ 0x30
 8006ff6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ffa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ffe:	1b92      	subs	r2, r2, r6
 8007000:	6122      	str	r2, [r4, #16]
 8007002:	464b      	mov	r3, r9
 8007004:	4621      	mov	r1, r4
 8007006:	4640      	mov	r0, r8
 8007008:	f8cd a000 	str.w	sl, [sp]
 800700c:	aa03      	add	r2, sp, #12
 800700e:	f7ff fee1 	bl	8006dd4 <_printf_common>
 8007012:	3001      	adds	r0, #1
 8007014:	d14a      	bne.n	80070ac <_printf_i+0x1f4>
 8007016:	f04f 30ff 	mov.w	r0, #4294967295
 800701a:	b004      	add	sp, #16
 800701c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	f043 0320 	orr.w	r3, r3, #32
 8007026:	6023      	str	r3, [r4, #0]
 8007028:	2778      	movs	r7, #120	@ 0x78
 800702a:	4832      	ldr	r0, [pc, #200]	@ (80070f4 <_printf_i+0x23c>)
 800702c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007030:	6823      	ldr	r3, [r4, #0]
 8007032:	6831      	ldr	r1, [r6, #0]
 8007034:	061f      	lsls	r7, r3, #24
 8007036:	f851 5b04 	ldr.w	r5, [r1], #4
 800703a:	d402      	bmi.n	8007042 <_printf_i+0x18a>
 800703c:	065f      	lsls	r7, r3, #25
 800703e:	bf48      	it	mi
 8007040:	b2ad      	uxthmi	r5, r5
 8007042:	6031      	str	r1, [r6, #0]
 8007044:	07d9      	lsls	r1, r3, #31
 8007046:	bf44      	itt	mi
 8007048:	f043 0320 	orrmi.w	r3, r3, #32
 800704c:	6023      	strmi	r3, [r4, #0]
 800704e:	b11d      	cbz	r5, 8007058 <_printf_i+0x1a0>
 8007050:	2310      	movs	r3, #16
 8007052:	e7ab      	b.n	8006fac <_printf_i+0xf4>
 8007054:	4826      	ldr	r0, [pc, #152]	@ (80070f0 <_printf_i+0x238>)
 8007056:	e7e9      	b.n	800702c <_printf_i+0x174>
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	f023 0320 	bic.w	r3, r3, #32
 800705e:	6023      	str	r3, [r4, #0]
 8007060:	e7f6      	b.n	8007050 <_printf_i+0x198>
 8007062:	4616      	mov	r6, r2
 8007064:	e7bd      	b.n	8006fe2 <_printf_i+0x12a>
 8007066:	6833      	ldr	r3, [r6, #0]
 8007068:	6825      	ldr	r5, [r4, #0]
 800706a:	1d18      	adds	r0, r3, #4
 800706c:	6961      	ldr	r1, [r4, #20]
 800706e:	6030      	str	r0, [r6, #0]
 8007070:	062e      	lsls	r6, r5, #24
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	d501      	bpl.n	800707a <_printf_i+0x1c2>
 8007076:	6019      	str	r1, [r3, #0]
 8007078:	e002      	b.n	8007080 <_printf_i+0x1c8>
 800707a:	0668      	lsls	r0, r5, #25
 800707c:	d5fb      	bpl.n	8007076 <_printf_i+0x1be>
 800707e:	8019      	strh	r1, [r3, #0]
 8007080:	2300      	movs	r3, #0
 8007082:	4616      	mov	r6, r2
 8007084:	6123      	str	r3, [r4, #16]
 8007086:	e7bc      	b.n	8007002 <_printf_i+0x14a>
 8007088:	6833      	ldr	r3, [r6, #0]
 800708a:	2100      	movs	r1, #0
 800708c:	1d1a      	adds	r2, r3, #4
 800708e:	6032      	str	r2, [r6, #0]
 8007090:	681e      	ldr	r6, [r3, #0]
 8007092:	6862      	ldr	r2, [r4, #4]
 8007094:	4630      	mov	r0, r6
 8007096:	f000 fa06 	bl	80074a6 <memchr>
 800709a:	b108      	cbz	r0, 80070a0 <_printf_i+0x1e8>
 800709c:	1b80      	subs	r0, r0, r6
 800709e:	6060      	str	r0, [r4, #4]
 80070a0:	6863      	ldr	r3, [r4, #4]
 80070a2:	6123      	str	r3, [r4, #16]
 80070a4:	2300      	movs	r3, #0
 80070a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070aa:	e7aa      	b.n	8007002 <_printf_i+0x14a>
 80070ac:	4632      	mov	r2, r6
 80070ae:	4649      	mov	r1, r9
 80070b0:	4640      	mov	r0, r8
 80070b2:	6923      	ldr	r3, [r4, #16]
 80070b4:	47d0      	blx	sl
 80070b6:	3001      	adds	r0, #1
 80070b8:	d0ad      	beq.n	8007016 <_printf_i+0x15e>
 80070ba:	6823      	ldr	r3, [r4, #0]
 80070bc:	079b      	lsls	r3, r3, #30
 80070be:	d413      	bmi.n	80070e8 <_printf_i+0x230>
 80070c0:	68e0      	ldr	r0, [r4, #12]
 80070c2:	9b03      	ldr	r3, [sp, #12]
 80070c4:	4298      	cmp	r0, r3
 80070c6:	bfb8      	it	lt
 80070c8:	4618      	movlt	r0, r3
 80070ca:	e7a6      	b.n	800701a <_printf_i+0x162>
 80070cc:	2301      	movs	r3, #1
 80070ce:	4632      	mov	r2, r6
 80070d0:	4649      	mov	r1, r9
 80070d2:	4640      	mov	r0, r8
 80070d4:	47d0      	blx	sl
 80070d6:	3001      	adds	r0, #1
 80070d8:	d09d      	beq.n	8007016 <_printf_i+0x15e>
 80070da:	3501      	adds	r5, #1
 80070dc:	68e3      	ldr	r3, [r4, #12]
 80070de:	9903      	ldr	r1, [sp, #12]
 80070e0:	1a5b      	subs	r3, r3, r1
 80070e2:	42ab      	cmp	r3, r5
 80070e4:	dcf2      	bgt.n	80070cc <_printf_i+0x214>
 80070e6:	e7eb      	b.n	80070c0 <_printf_i+0x208>
 80070e8:	2500      	movs	r5, #0
 80070ea:	f104 0619 	add.w	r6, r4, #25
 80070ee:	e7f5      	b.n	80070dc <_printf_i+0x224>
 80070f0:	0800a35b 	.word	0x0800a35b
 80070f4:	0800a36c 	.word	0x0800a36c

080070f8 <std>:
 80070f8:	2300      	movs	r3, #0
 80070fa:	b510      	push	{r4, lr}
 80070fc:	4604      	mov	r4, r0
 80070fe:	e9c0 3300 	strd	r3, r3, [r0]
 8007102:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007106:	6083      	str	r3, [r0, #8]
 8007108:	8181      	strh	r1, [r0, #12]
 800710a:	6643      	str	r3, [r0, #100]	@ 0x64
 800710c:	81c2      	strh	r2, [r0, #14]
 800710e:	6183      	str	r3, [r0, #24]
 8007110:	4619      	mov	r1, r3
 8007112:	2208      	movs	r2, #8
 8007114:	305c      	adds	r0, #92	@ 0x5c
 8007116:	f000 f92d 	bl	8007374 <memset>
 800711a:	4b0d      	ldr	r3, [pc, #52]	@ (8007150 <std+0x58>)
 800711c:	6224      	str	r4, [r4, #32]
 800711e:	6263      	str	r3, [r4, #36]	@ 0x24
 8007120:	4b0c      	ldr	r3, [pc, #48]	@ (8007154 <std+0x5c>)
 8007122:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007124:	4b0c      	ldr	r3, [pc, #48]	@ (8007158 <std+0x60>)
 8007126:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007128:	4b0c      	ldr	r3, [pc, #48]	@ (800715c <std+0x64>)
 800712a:	6323      	str	r3, [r4, #48]	@ 0x30
 800712c:	4b0c      	ldr	r3, [pc, #48]	@ (8007160 <std+0x68>)
 800712e:	429c      	cmp	r4, r3
 8007130:	d006      	beq.n	8007140 <std+0x48>
 8007132:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007136:	4294      	cmp	r4, r2
 8007138:	d002      	beq.n	8007140 <std+0x48>
 800713a:	33d0      	adds	r3, #208	@ 0xd0
 800713c:	429c      	cmp	r4, r3
 800713e:	d105      	bne.n	800714c <std+0x54>
 8007140:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007144:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007148:	f000 b9a2 	b.w	8007490 <__retarget_lock_init_recursive>
 800714c:	bd10      	pop	{r4, pc}
 800714e:	bf00      	nop
 8007150:	0800727d 	.word	0x0800727d
 8007154:	0800729f 	.word	0x0800729f
 8007158:	080072d7 	.word	0x080072d7
 800715c:	080072fb 	.word	0x080072fb
 8007160:	20000a40 	.word	0x20000a40

08007164 <stdio_exit_handler>:
 8007164:	4a02      	ldr	r2, [pc, #8]	@ (8007170 <stdio_exit_handler+0xc>)
 8007166:	4903      	ldr	r1, [pc, #12]	@ (8007174 <stdio_exit_handler+0x10>)
 8007168:	4803      	ldr	r0, [pc, #12]	@ (8007178 <stdio_exit_handler+0x14>)
 800716a:	f000 b869 	b.w	8007240 <_fwalk_sglue>
 800716e:	bf00      	nop
 8007170:	20000020 	.word	0x20000020
 8007174:	08009741 	.word	0x08009741
 8007178:	2000019c 	.word	0x2000019c

0800717c <cleanup_stdio>:
 800717c:	6841      	ldr	r1, [r0, #4]
 800717e:	4b0c      	ldr	r3, [pc, #48]	@ (80071b0 <cleanup_stdio+0x34>)
 8007180:	b510      	push	{r4, lr}
 8007182:	4299      	cmp	r1, r3
 8007184:	4604      	mov	r4, r0
 8007186:	d001      	beq.n	800718c <cleanup_stdio+0x10>
 8007188:	f002 fada 	bl	8009740 <_fflush_r>
 800718c:	68a1      	ldr	r1, [r4, #8]
 800718e:	4b09      	ldr	r3, [pc, #36]	@ (80071b4 <cleanup_stdio+0x38>)
 8007190:	4299      	cmp	r1, r3
 8007192:	d002      	beq.n	800719a <cleanup_stdio+0x1e>
 8007194:	4620      	mov	r0, r4
 8007196:	f002 fad3 	bl	8009740 <_fflush_r>
 800719a:	68e1      	ldr	r1, [r4, #12]
 800719c:	4b06      	ldr	r3, [pc, #24]	@ (80071b8 <cleanup_stdio+0x3c>)
 800719e:	4299      	cmp	r1, r3
 80071a0:	d004      	beq.n	80071ac <cleanup_stdio+0x30>
 80071a2:	4620      	mov	r0, r4
 80071a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071a8:	f002 baca 	b.w	8009740 <_fflush_r>
 80071ac:	bd10      	pop	{r4, pc}
 80071ae:	bf00      	nop
 80071b0:	20000a40 	.word	0x20000a40
 80071b4:	20000aa8 	.word	0x20000aa8
 80071b8:	20000b10 	.word	0x20000b10

080071bc <global_stdio_init.part.0>:
 80071bc:	b510      	push	{r4, lr}
 80071be:	4b0b      	ldr	r3, [pc, #44]	@ (80071ec <global_stdio_init.part.0+0x30>)
 80071c0:	4c0b      	ldr	r4, [pc, #44]	@ (80071f0 <global_stdio_init.part.0+0x34>)
 80071c2:	4a0c      	ldr	r2, [pc, #48]	@ (80071f4 <global_stdio_init.part.0+0x38>)
 80071c4:	4620      	mov	r0, r4
 80071c6:	601a      	str	r2, [r3, #0]
 80071c8:	2104      	movs	r1, #4
 80071ca:	2200      	movs	r2, #0
 80071cc:	f7ff ff94 	bl	80070f8 <std>
 80071d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80071d4:	2201      	movs	r2, #1
 80071d6:	2109      	movs	r1, #9
 80071d8:	f7ff ff8e 	bl	80070f8 <std>
 80071dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80071e0:	2202      	movs	r2, #2
 80071e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071e6:	2112      	movs	r1, #18
 80071e8:	f7ff bf86 	b.w	80070f8 <std>
 80071ec:	20000b78 	.word	0x20000b78
 80071f0:	20000a40 	.word	0x20000a40
 80071f4:	08007165 	.word	0x08007165

080071f8 <__sfp_lock_acquire>:
 80071f8:	4801      	ldr	r0, [pc, #4]	@ (8007200 <__sfp_lock_acquire+0x8>)
 80071fa:	f000 b94a 	b.w	8007492 <__retarget_lock_acquire_recursive>
 80071fe:	bf00      	nop
 8007200:	20000b81 	.word	0x20000b81

08007204 <__sfp_lock_release>:
 8007204:	4801      	ldr	r0, [pc, #4]	@ (800720c <__sfp_lock_release+0x8>)
 8007206:	f000 b945 	b.w	8007494 <__retarget_lock_release_recursive>
 800720a:	bf00      	nop
 800720c:	20000b81 	.word	0x20000b81

08007210 <__sinit>:
 8007210:	b510      	push	{r4, lr}
 8007212:	4604      	mov	r4, r0
 8007214:	f7ff fff0 	bl	80071f8 <__sfp_lock_acquire>
 8007218:	6a23      	ldr	r3, [r4, #32]
 800721a:	b11b      	cbz	r3, 8007224 <__sinit+0x14>
 800721c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007220:	f7ff bff0 	b.w	8007204 <__sfp_lock_release>
 8007224:	4b04      	ldr	r3, [pc, #16]	@ (8007238 <__sinit+0x28>)
 8007226:	6223      	str	r3, [r4, #32]
 8007228:	4b04      	ldr	r3, [pc, #16]	@ (800723c <__sinit+0x2c>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1f5      	bne.n	800721c <__sinit+0xc>
 8007230:	f7ff ffc4 	bl	80071bc <global_stdio_init.part.0>
 8007234:	e7f2      	b.n	800721c <__sinit+0xc>
 8007236:	bf00      	nop
 8007238:	0800717d 	.word	0x0800717d
 800723c:	20000b78 	.word	0x20000b78

08007240 <_fwalk_sglue>:
 8007240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007244:	4607      	mov	r7, r0
 8007246:	4688      	mov	r8, r1
 8007248:	4614      	mov	r4, r2
 800724a:	2600      	movs	r6, #0
 800724c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007250:	f1b9 0901 	subs.w	r9, r9, #1
 8007254:	d505      	bpl.n	8007262 <_fwalk_sglue+0x22>
 8007256:	6824      	ldr	r4, [r4, #0]
 8007258:	2c00      	cmp	r4, #0
 800725a:	d1f7      	bne.n	800724c <_fwalk_sglue+0xc>
 800725c:	4630      	mov	r0, r6
 800725e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007262:	89ab      	ldrh	r3, [r5, #12]
 8007264:	2b01      	cmp	r3, #1
 8007266:	d907      	bls.n	8007278 <_fwalk_sglue+0x38>
 8007268:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800726c:	3301      	adds	r3, #1
 800726e:	d003      	beq.n	8007278 <_fwalk_sglue+0x38>
 8007270:	4629      	mov	r1, r5
 8007272:	4638      	mov	r0, r7
 8007274:	47c0      	blx	r8
 8007276:	4306      	orrs	r6, r0
 8007278:	3568      	adds	r5, #104	@ 0x68
 800727a:	e7e9      	b.n	8007250 <_fwalk_sglue+0x10>

0800727c <__sread>:
 800727c:	b510      	push	{r4, lr}
 800727e:	460c      	mov	r4, r1
 8007280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007284:	f000 f8b6 	bl	80073f4 <_read_r>
 8007288:	2800      	cmp	r0, #0
 800728a:	bfab      	itete	ge
 800728c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800728e:	89a3      	ldrhlt	r3, [r4, #12]
 8007290:	181b      	addge	r3, r3, r0
 8007292:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007296:	bfac      	ite	ge
 8007298:	6563      	strge	r3, [r4, #84]	@ 0x54
 800729a:	81a3      	strhlt	r3, [r4, #12]
 800729c:	bd10      	pop	{r4, pc}

0800729e <__swrite>:
 800729e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072a2:	461f      	mov	r7, r3
 80072a4:	898b      	ldrh	r3, [r1, #12]
 80072a6:	4605      	mov	r5, r0
 80072a8:	05db      	lsls	r3, r3, #23
 80072aa:	460c      	mov	r4, r1
 80072ac:	4616      	mov	r6, r2
 80072ae:	d505      	bpl.n	80072bc <__swrite+0x1e>
 80072b0:	2302      	movs	r3, #2
 80072b2:	2200      	movs	r2, #0
 80072b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072b8:	f000 f88a 	bl	80073d0 <_lseek_r>
 80072bc:	89a3      	ldrh	r3, [r4, #12]
 80072be:	4632      	mov	r2, r6
 80072c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072c4:	81a3      	strh	r3, [r4, #12]
 80072c6:	4628      	mov	r0, r5
 80072c8:	463b      	mov	r3, r7
 80072ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072d2:	f000 b8a1 	b.w	8007418 <_write_r>

080072d6 <__sseek>:
 80072d6:	b510      	push	{r4, lr}
 80072d8:	460c      	mov	r4, r1
 80072da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072de:	f000 f877 	bl	80073d0 <_lseek_r>
 80072e2:	1c43      	adds	r3, r0, #1
 80072e4:	89a3      	ldrh	r3, [r4, #12]
 80072e6:	bf15      	itete	ne
 80072e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80072ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80072ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80072f2:	81a3      	strheq	r3, [r4, #12]
 80072f4:	bf18      	it	ne
 80072f6:	81a3      	strhne	r3, [r4, #12]
 80072f8:	bd10      	pop	{r4, pc}

080072fa <__sclose>:
 80072fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072fe:	f000 b857 	b.w	80073b0 <_close_r>

08007302 <_vsniprintf_r>:
 8007302:	b530      	push	{r4, r5, lr}
 8007304:	4614      	mov	r4, r2
 8007306:	2c00      	cmp	r4, #0
 8007308:	4605      	mov	r5, r0
 800730a:	461a      	mov	r2, r3
 800730c:	b09b      	sub	sp, #108	@ 0x6c
 800730e:	da05      	bge.n	800731c <_vsniprintf_r+0x1a>
 8007310:	238b      	movs	r3, #139	@ 0x8b
 8007312:	6003      	str	r3, [r0, #0]
 8007314:	f04f 30ff 	mov.w	r0, #4294967295
 8007318:	b01b      	add	sp, #108	@ 0x6c
 800731a:	bd30      	pop	{r4, r5, pc}
 800731c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007320:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007324:	bf0c      	ite	eq
 8007326:	4623      	moveq	r3, r4
 8007328:	f104 33ff 	addne.w	r3, r4, #4294967295
 800732c:	9302      	str	r3, [sp, #8]
 800732e:	9305      	str	r3, [sp, #20]
 8007330:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007334:	9100      	str	r1, [sp, #0]
 8007336:	9104      	str	r1, [sp, #16]
 8007338:	f8ad 300e 	strh.w	r3, [sp, #14]
 800733c:	4669      	mov	r1, sp
 800733e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007340:	f002 f882 	bl	8009448 <_svfiprintf_r>
 8007344:	1c43      	adds	r3, r0, #1
 8007346:	bfbc      	itt	lt
 8007348:	238b      	movlt	r3, #139	@ 0x8b
 800734a:	602b      	strlt	r3, [r5, #0]
 800734c:	2c00      	cmp	r4, #0
 800734e:	d0e3      	beq.n	8007318 <_vsniprintf_r+0x16>
 8007350:	2200      	movs	r2, #0
 8007352:	9b00      	ldr	r3, [sp, #0]
 8007354:	701a      	strb	r2, [r3, #0]
 8007356:	e7df      	b.n	8007318 <_vsniprintf_r+0x16>

08007358 <vsniprintf>:
 8007358:	b507      	push	{r0, r1, r2, lr}
 800735a:	9300      	str	r3, [sp, #0]
 800735c:	4613      	mov	r3, r2
 800735e:	460a      	mov	r2, r1
 8007360:	4601      	mov	r1, r0
 8007362:	4803      	ldr	r0, [pc, #12]	@ (8007370 <vsniprintf+0x18>)
 8007364:	6800      	ldr	r0, [r0, #0]
 8007366:	f7ff ffcc 	bl	8007302 <_vsniprintf_r>
 800736a:	b003      	add	sp, #12
 800736c:	f85d fb04 	ldr.w	pc, [sp], #4
 8007370:	20000198 	.word	0x20000198

08007374 <memset>:
 8007374:	4603      	mov	r3, r0
 8007376:	4402      	add	r2, r0
 8007378:	4293      	cmp	r3, r2
 800737a:	d100      	bne.n	800737e <memset+0xa>
 800737c:	4770      	bx	lr
 800737e:	f803 1b01 	strb.w	r1, [r3], #1
 8007382:	e7f9      	b.n	8007378 <memset+0x4>

08007384 <strncmp>:
 8007384:	b510      	push	{r4, lr}
 8007386:	b16a      	cbz	r2, 80073a4 <strncmp+0x20>
 8007388:	3901      	subs	r1, #1
 800738a:	1884      	adds	r4, r0, r2
 800738c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007390:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007394:	429a      	cmp	r2, r3
 8007396:	d103      	bne.n	80073a0 <strncmp+0x1c>
 8007398:	42a0      	cmp	r0, r4
 800739a:	d001      	beq.n	80073a0 <strncmp+0x1c>
 800739c:	2a00      	cmp	r2, #0
 800739e:	d1f5      	bne.n	800738c <strncmp+0x8>
 80073a0:	1ad0      	subs	r0, r2, r3
 80073a2:	bd10      	pop	{r4, pc}
 80073a4:	4610      	mov	r0, r2
 80073a6:	e7fc      	b.n	80073a2 <strncmp+0x1e>

080073a8 <_localeconv_r>:
 80073a8:	4800      	ldr	r0, [pc, #0]	@ (80073ac <_localeconv_r+0x4>)
 80073aa:	4770      	bx	lr
 80073ac:	2000011c 	.word	0x2000011c

080073b0 <_close_r>:
 80073b0:	b538      	push	{r3, r4, r5, lr}
 80073b2:	2300      	movs	r3, #0
 80073b4:	4d05      	ldr	r5, [pc, #20]	@ (80073cc <_close_r+0x1c>)
 80073b6:	4604      	mov	r4, r0
 80073b8:	4608      	mov	r0, r1
 80073ba:	602b      	str	r3, [r5, #0]
 80073bc:	f7fa f8dd 	bl	800157a <_close>
 80073c0:	1c43      	adds	r3, r0, #1
 80073c2:	d102      	bne.n	80073ca <_close_r+0x1a>
 80073c4:	682b      	ldr	r3, [r5, #0]
 80073c6:	b103      	cbz	r3, 80073ca <_close_r+0x1a>
 80073c8:	6023      	str	r3, [r4, #0]
 80073ca:	bd38      	pop	{r3, r4, r5, pc}
 80073cc:	20000b7c 	.word	0x20000b7c

080073d0 <_lseek_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4604      	mov	r4, r0
 80073d4:	4608      	mov	r0, r1
 80073d6:	4611      	mov	r1, r2
 80073d8:	2200      	movs	r2, #0
 80073da:	4d05      	ldr	r5, [pc, #20]	@ (80073f0 <_lseek_r+0x20>)
 80073dc:	602a      	str	r2, [r5, #0]
 80073de:	461a      	mov	r2, r3
 80073e0:	f7fa f8ef 	bl	80015c2 <_lseek>
 80073e4:	1c43      	adds	r3, r0, #1
 80073e6:	d102      	bne.n	80073ee <_lseek_r+0x1e>
 80073e8:	682b      	ldr	r3, [r5, #0]
 80073ea:	b103      	cbz	r3, 80073ee <_lseek_r+0x1e>
 80073ec:	6023      	str	r3, [r4, #0]
 80073ee:	bd38      	pop	{r3, r4, r5, pc}
 80073f0:	20000b7c 	.word	0x20000b7c

080073f4 <_read_r>:
 80073f4:	b538      	push	{r3, r4, r5, lr}
 80073f6:	4604      	mov	r4, r0
 80073f8:	4608      	mov	r0, r1
 80073fa:	4611      	mov	r1, r2
 80073fc:	2200      	movs	r2, #0
 80073fe:	4d05      	ldr	r5, [pc, #20]	@ (8007414 <_read_r+0x20>)
 8007400:	602a      	str	r2, [r5, #0]
 8007402:	461a      	mov	r2, r3
 8007404:	f7fa f880 	bl	8001508 <_read>
 8007408:	1c43      	adds	r3, r0, #1
 800740a:	d102      	bne.n	8007412 <_read_r+0x1e>
 800740c:	682b      	ldr	r3, [r5, #0]
 800740e:	b103      	cbz	r3, 8007412 <_read_r+0x1e>
 8007410:	6023      	str	r3, [r4, #0]
 8007412:	bd38      	pop	{r3, r4, r5, pc}
 8007414:	20000b7c 	.word	0x20000b7c

08007418 <_write_r>:
 8007418:	b538      	push	{r3, r4, r5, lr}
 800741a:	4604      	mov	r4, r0
 800741c:	4608      	mov	r0, r1
 800741e:	4611      	mov	r1, r2
 8007420:	2200      	movs	r2, #0
 8007422:	4d05      	ldr	r5, [pc, #20]	@ (8007438 <_write_r+0x20>)
 8007424:	602a      	str	r2, [r5, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	f7fa f88b 	bl	8001542 <_write>
 800742c:	1c43      	adds	r3, r0, #1
 800742e:	d102      	bne.n	8007436 <_write_r+0x1e>
 8007430:	682b      	ldr	r3, [r5, #0]
 8007432:	b103      	cbz	r3, 8007436 <_write_r+0x1e>
 8007434:	6023      	str	r3, [r4, #0]
 8007436:	bd38      	pop	{r3, r4, r5, pc}
 8007438:	20000b7c 	.word	0x20000b7c

0800743c <__errno>:
 800743c:	4b01      	ldr	r3, [pc, #4]	@ (8007444 <__errno+0x8>)
 800743e:	6818      	ldr	r0, [r3, #0]
 8007440:	4770      	bx	lr
 8007442:	bf00      	nop
 8007444:	20000198 	.word	0x20000198

08007448 <__libc_init_array>:
 8007448:	b570      	push	{r4, r5, r6, lr}
 800744a:	2600      	movs	r6, #0
 800744c:	4d0c      	ldr	r5, [pc, #48]	@ (8007480 <__libc_init_array+0x38>)
 800744e:	4c0d      	ldr	r4, [pc, #52]	@ (8007484 <__libc_init_array+0x3c>)
 8007450:	1b64      	subs	r4, r4, r5
 8007452:	10a4      	asrs	r4, r4, #2
 8007454:	42a6      	cmp	r6, r4
 8007456:	d109      	bne.n	800746c <__libc_init_array+0x24>
 8007458:	f002 fce0 	bl	8009e1c <_init>
 800745c:	2600      	movs	r6, #0
 800745e:	4d0a      	ldr	r5, [pc, #40]	@ (8007488 <__libc_init_array+0x40>)
 8007460:	4c0a      	ldr	r4, [pc, #40]	@ (800748c <__libc_init_array+0x44>)
 8007462:	1b64      	subs	r4, r4, r5
 8007464:	10a4      	asrs	r4, r4, #2
 8007466:	42a6      	cmp	r6, r4
 8007468:	d105      	bne.n	8007476 <__libc_init_array+0x2e>
 800746a:	bd70      	pop	{r4, r5, r6, pc}
 800746c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007470:	4798      	blx	r3
 8007472:	3601      	adds	r6, #1
 8007474:	e7ee      	b.n	8007454 <__libc_init_array+0xc>
 8007476:	f855 3b04 	ldr.w	r3, [r5], #4
 800747a:	4798      	blx	r3
 800747c:	3601      	adds	r6, #1
 800747e:	e7f2      	b.n	8007466 <__libc_init_array+0x1e>
 8007480:	0800a620 	.word	0x0800a620
 8007484:	0800a620 	.word	0x0800a620
 8007488:	0800a620 	.word	0x0800a620
 800748c:	0800a624 	.word	0x0800a624

08007490 <__retarget_lock_init_recursive>:
 8007490:	4770      	bx	lr

08007492 <__retarget_lock_acquire_recursive>:
 8007492:	4770      	bx	lr

08007494 <__retarget_lock_release_recursive>:
 8007494:	4770      	bx	lr

08007496 <strcpy>:
 8007496:	4603      	mov	r3, r0
 8007498:	f811 2b01 	ldrb.w	r2, [r1], #1
 800749c:	f803 2b01 	strb.w	r2, [r3], #1
 80074a0:	2a00      	cmp	r2, #0
 80074a2:	d1f9      	bne.n	8007498 <strcpy+0x2>
 80074a4:	4770      	bx	lr

080074a6 <memchr>:
 80074a6:	4603      	mov	r3, r0
 80074a8:	b510      	push	{r4, lr}
 80074aa:	b2c9      	uxtb	r1, r1
 80074ac:	4402      	add	r2, r0
 80074ae:	4293      	cmp	r3, r2
 80074b0:	4618      	mov	r0, r3
 80074b2:	d101      	bne.n	80074b8 <memchr+0x12>
 80074b4:	2000      	movs	r0, #0
 80074b6:	e003      	b.n	80074c0 <memchr+0x1a>
 80074b8:	7804      	ldrb	r4, [r0, #0]
 80074ba:	3301      	adds	r3, #1
 80074bc:	428c      	cmp	r4, r1
 80074be:	d1f6      	bne.n	80074ae <memchr+0x8>
 80074c0:	bd10      	pop	{r4, pc}

080074c2 <memcpy>:
 80074c2:	440a      	add	r2, r1
 80074c4:	4291      	cmp	r1, r2
 80074c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80074ca:	d100      	bne.n	80074ce <memcpy+0xc>
 80074cc:	4770      	bx	lr
 80074ce:	b510      	push	{r4, lr}
 80074d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074d4:	4291      	cmp	r1, r2
 80074d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074da:	d1f9      	bne.n	80074d0 <memcpy+0xe>
 80074dc:	bd10      	pop	{r4, pc}
	...

080074e0 <nan>:
 80074e0:	2000      	movs	r0, #0
 80074e2:	4901      	ldr	r1, [pc, #4]	@ (80074e8 <nan+0x8>)
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	7ff80000 	.word	0x7ff80000

080074ec <nanf>:
 80074ec:	4800      	ldr	r0, [pc, #0]	@ (80074f0 <nanf+0x4>)
 80074ee:	4770      	bx	lr
 80074f0:	7fc00000 	.word	0x7fc00000

080074f4 <quorem>:
 80074f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f8:	6903      	ldr	r3, [r0, #16]
 80074fa:	690c      	ldr	r4, [r1, #16]
 80074fc:	4607      	mov	r7, r0
 80074fe:	42a3      	cmp	r3, r4
 8007500:	db7e      	blt.n	8007600 <quorem+0x10c>
 8007502:	3c01      	subs	r4, #1
 8007504:	00a3      	lsls	r3, r4, #2
 8007506:	f100 0514 	add.w	r5, r0, #20
 800750a:	f101 0814 	add.w	r8, r1, #20
 800750e:	9300      	str	r3, [sp, #0]
 8007510:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007514:	9301      	str	r3, [sp, #4]
 8007516:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800751a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800751e:	3301      	adds	r3, #1
 8007520:	429a      	cmp	r2, r3
 8007522:	fbb2 f6f3 	udiv	r6, r2, r3
 8007526:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800752a:	d32e      	bcc.n	800758a <quorem+0x96>
 800752c:	f04f 0a00 	mov.w	sl, #0
 8007530:	46c4      	mov	ip, r8
 8007532:	46ae      	mov	lr, r5
 8007534:	46d3      	mov	fp, sl
 8007536:	f85c 3b04 	ldr.w	r3, [ip], #4
 800753a:	b298      	uxth	r0, r3
 800753c:	fb06 a000 	mla	r0, r6, r0, sl
 8007540:	0c1b      	lsrs	r3, r3, #16
 8007542:	0c02      	lsrs	r2, r0, #16
 8007544:	fb06 2303 	mla	r3, r6, r3, r2
 8007548:	f8de 2000 	ldr.w	r2, [lr]
 800754c:	b280      	uxth	r0, r0
 800754e:	b292      	uxth	r2, r2
 8007550:	1a12      	subs	r2, r2, r0
 8007552:	445a      	add	r2, fp
 8007554:	f8de 0000 	ldr.w	r0, [lr]
 8007558:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800755c:	b29b      	uxth	r3, r3
 800755e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007562:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007566:	b292      	uxth	r2, r2
 8007568:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800756c:	45e1      	cmp	r9, ip
 800756e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007572:	f84e 2b04 	str.w	r2, [lr], #4
 8007576:	d2de      	bcs.n	8007536 <quorem+0x42>
 8007578:	9b00      	ldr	r3, [sp, #0]
 800757a:	58eb      	ldr	r3, [r5, r3]
 800757c:	b92b      	cbnz	r3, 800758a <quorem+0x96>
 800757e:	9b01      	ldr	r3, [sp, #4]
 8007580:	3b04      	subs	r3, #4
 8007582:	429d      	cmp	r5, r3
 8007584:	461a      	mov	r2, r3
 8007586:	d32f      	bcc.n	80075e8 <quorem+0xf4>
 8007588:	613c      	str	r4, [r7, #16]
 800758a:	4638      	mov	r0, r7
 800758c:	f001 fd10 	bl	8008fb0 <__mcmp>
 8007590:	2800      	cmp	r0, #0
 8007592:	db25      	blt.n	80075e0 <quorem+0xec>
 8007594:	4629      	mov	r1, r5
 8007596:	2000      	movs	r0, #0
 8007598:	f858 2b04 	ldr.w	r2, [r8], #4
 800759c:	f8d1 c000 	ldr.w	ip, [r1]
 80075a0:	fa1f fe82 	uxth.w	lr, r2
 80075a4:	fa1f f38c 	uxth.w	r3, ip
 80075a8:	eba3 030e 	sub.w	r3, r3, lr
 80075ac:	4403      	add	r3, r0
 80075ae:	0c12      	lsrs	r2, r2, #16
 80075b0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80075b4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075be:	45c1      	cmp	r9, r8
 80075c0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80075c4:	f841 3b04 	str.w	r3, [r1], #4
 80075c8:	d2e6      	bcs.n	8007598 <quorem+0xa4>
 80075ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80075d2:	b922      	cbnz	r2, 80075de <quorem+0xea>
 80075d4:	3b04      	subs	r3, #4
 80075d6:	429d      	cmp	r5, r3
 80075d8:	461a      	mov	r2, r3
 80075da:	d30b      	bcc.n	80075f4 <quorem+0x100>
 80075dc:	613c      	str	r4, [r7, #16]
 80075de:	3601      	adds	r6, #1
 80075e0:	4630      	mov	r0, r6
 80075e2:	b003      	add	sp, #12
 80075e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e8:	6812      	ldr	r2, [r2, #0]
 80075ea:	3b04      	subs	r3, #4
 80075ec:	2a00      	cmp	r2, #0
 80075ee:	d1cb      	bne.n	8007588 <quorem+0x94>
 80075f0:	3c01      	subs	r4, #1
 80075f2:	e7c6      	b.n	8007582 <quorem+0x8e>
 80075f4:	6812      	ldr	r2, [r2, #0]
 80075f6:	3b04      	subs	r3, #4
 80075f8:	2a00      	cmp	r2, #0
 80075fa:	d1ef      	bne.n	80075dc <quorem+0xe8>
 80075fc:	3c01      	subs	r4, #1
 80075fe:	e7ea      	b.n	80075d6 <quorem+0xe2>
 8007600:	2000      	movs	r0, #0
 8007602:	e7ee      	b.n	80075e2 <quorem+0xee>
 8007604:	0000      	movs	r0, r0
	...

08007608 <_dtoa_r>:
 8007608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760c:	4614      	mov	r4, r2
 800760e:	461d      	mov	r5, r3
 8007610:	69c7      	ldr	r7, [r0, #28]
 8007612:	b097      	sub	sp, #92	@ 0x5c
 8007614:	4683      	mov	fp, r0
 8007616:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800761a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800761c:	b97f      	cbnz	r7, 800763e <_dtoa_r+0x36>
 800761e:	2010      	movs	r0, #16
 8007620:	f001 f93c 	bl	800889c <malloc>
 8007624:	4602      	mov	r2, r0
 8007626:	f8cb 001c 	str.w	r0, [fp, #28]
 800762a:	b920      	cbnz	r0, 8007636 <_dtoa_r+0x2e>
 800762c:	21ef      	movs	r1, #239	@ 0xef
 800762e:	4ba8      	ldr	r3, [pc, #672]	@ (80078d0 <_dtoa_r+0x2c8>)
 8007630:	48a8      	ldr	r0, [pc, #672]	@ (80078d4 <_dtoa_r+0x2cc>)
 8007632:	f002 f8d7 	bl	80097e4 <__assert_func>
 8007636:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800763a:	6007      	str	r7, [r0, #0]
 800763c:	60c7      	str	r7, [r0, #12]
 800763e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007642:	6819      	ldr	r1, [r3, #0]
 8007644:	b159      	cbz	r1, 800765e <_dtoa_r+0x56>
 8007646:	685a      	ldr	r2, [r3, #4]
 8007648:	2301      	movs	r3, #1
 800764a:	4093      	lsls	r3, r2
 800764c:	604a      	str	r2, [r1, #4]
 800764e:	608b      	str	r3, [r1, #8]
 8007650:	4658      	mov	r0, fp
 8007652:	f001 fa2b 	bl	8008aac <_Bfree>
 8007656:	2200      	movs	r2, #0
 8007658:	f8db 301c 	ldr.w	r3, [fp, #28]
 800765c:	601a      	str	r2, [r3, #0]
 800765e:	1e2b      	subs	r3, r5, #0
 8007660:	bfaf      	iteee	ge
 8007662:	2300      	movge	r3, #0
 8007664:	2201      	movlt	r2, #1
 8007666:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800766a:	9303      	strlt	r3, [sp, #12]
 800766c:	bfa8      	it	ge
 800766e:	6033      	strge	r3, [r6, #0]
 8007670:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007674:	4b98      	ldr	r3, [pc, #608]	@ (80078d8 <_dtoa_r+0x2d0>)
 8007676:	bfb8      	it	lt
 8007678:	6032      	strlt	r2, [r6, #0]
 800767a:	ea33 0308 	bics.w	r3, r3, r8
 800767e:	d112      	bne.n	80076a6 <_dtoa_r+0x9e>
 8007680:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007684:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007686:	6013      	str	r3, [r2, #0]
 8007688:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800768c:	4323      	orrs	r3, r4
 800768e:	f000 8550 	beq.w	8008132 <_dtoa_r+0xb2a>
 8007692:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007694:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80078dc <_dtoa_r+0x2d4>
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 8552 	beq.w	8008142 <_dtoa_r+0xb3a>
 800769e:	f10a 0303 	add.w	r3, sl, #3
 80076a2:	f000 bd4c 	b.w	800813e <_dtoa_r+0xb36>
 80076a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80076aa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80076ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076b2:	2200      	movs	r2, #0
 80076b4:	2300      	movs	r3, #0
 80076b6:	f7f9 f981 	bl	80009bc <__aeabi_dcmpeq>
 80076ba:	4607      	mov	r7, r0
 80076bc:	b158      	cbz	r0, 80076d6 <_dtoa_r+0xce>
 80076be:	2301      	movs	r3, #1
 80076c0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80076c2:	6013      	str	r3, [r2, #0]
 80076c4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80076c6:	b113      	cbz	r3, 80076ce <_dtoa_r+0xc6>
 80076c8:	4b85      	ldr	r3, [pc, #532]	@ (80078e0 <_dtoa_r+0x2d8>)
 80076ca:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80076cc:	6013      	str	r3, [r2, #0]
 80076ce:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80078e4 <_dtoa_r+0x2dc>
 80076d2:	f000 bd36 	b.w	8008142 <_dtoa_r+0xb3a>
 80076d6:	ab14      	add	r3, sp, #80	@ 0x50
 80076d8:	9301      	str	r3, [sp, #4]
 80076da:	ab15      	add	r3, sp, #84	@ 0x54
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	4658      	mov	r0, fp
 80076e0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80076e4:	f001 fd7c 	bl	80091e0 <__d2b>
 80076e8:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80076ec:	4681      	mov	r9, r0
 80076ee:	2e00      	cmp	r6, #0
 80076f0:	d077      	beq.n	80077e2 <_dtoa_r+0x1da>
 80076f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80076f8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80076fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007700:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007704:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007708:	9712      	str	r7, [sp, #72]	@ 0x48
 800770a:	4619      	mov	r1, r3
 800770c:	2200      	movs	r2, #0
 800770e:	4b76      	ldr	r3, [pc, #472]	@ (80078e8 <_dtoa_r+0x2e0>)
 8007710:	f7f8 fd34 	bl	800017c <__aeabi_dsub>
 8007714:	a368      	add	r3, pc, #416	@ (adr r3, 80078b8 <_dtoa_r+0x2b0>)
 8007716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771a:	f7f8 fee7 	bl	80004ec <__aeabi_dmul>
 800771e:	a368      	add	r3, pc, #416	@ (adr r3, 80078c0 <_dtoa_r+0x2b8>)
 8007720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007724:	f7f8 fd2c 	bl	8000180 <__adddf3>
 8007728:	4604      	mov	r4, r0
 800772a:	4630      	mov	r0, r6
 800772c:	460d      	mov	r5, r1
 800772e:	f7f8 fe73 	bl	8000418 <__aeabi_i2d>
 8007732:	a365      	add	r3, pc, #404	@ (adr r3, 80078c8 <_dtoa_r+0x2c0>)
 8007734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007738:	f7f8 fed8 	bl	80004ec <__aeabi_dmul>
 800773c:	4602      	mov	r2, r0
 800773e:	460b      	mov	r3, r1
 8007740:	4620      	mov	r0, r4
 8007742:	4629      	mov	r1, r5
 8007744:	f7f8 fd1c 	bl	8000180 <__adddf3>
 8007748:	4604      	mov	r4, r0
 800774a:	460d      	mov	r5, r1
 800774c:	f7f9 f97e 	bl	8000a4c <__aeabi_d2iz>
 8007750:	2200      	movs	r2, #0
 8007752:	4607      	mov	r7, r0
 8007754:	2300      	movs	r3, #0
 8007756:	4620      	mov	r0, r4
 8007758:	4629      	mov	r1, r5
 800775a:	f7f9 f939 	bl	80009d0 <__aeabi_dcmplt>
 800775e:	b140      	cbz	r0, 8007772 <_dtoa_r+0x16a>
 8007760:	4638      	mov	r0, r7
 8007762:	f7f8 fe59 	bl	8000418 <__aeabi_i2d>
 8007766:	4622      	mov	r2, r4
 8007768:	462b      	mov	r3, r5
 800776a:	f7f9 f927 	bl	80009bc <__aeabi_dcmpeq>
 800776e:	b900      	cbnz	r0, 8007772 <_dtoa_r+0x16a>
 8007770:	3f01      	subs	r7, #1
 8007772:	2f16      	cmp	r7, #22
 8007774:	d853      	bhi.n	800781e <_dtoa_r+0x216>
 8007776:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800777a:	4b5c      	ldr	r3, [pc, #368]	@ (80078ec <_dtoa_r+0x2e4>)
 800777c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007784:	f7f9 f924 	bl	80009d0 <__aeabi_dcmplt>
 8007788:	2800      	cmp	r0, #0
 800778a:	d04a      	beq.n	8007822 <_dtoa_r+0x21a>
 800778c:	2300      	movs	r3, #0
 800778e:	3f01      	subs	r7, #1
 8007790:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007792:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007794:	1b9b      	subs	r3, r3, r6
 8007796:	1e5a      	subs	r2, r3, #1
 8007798:	bf46      	itte	mi
 800779a:	f1c3 0801 	rsbmi	r8, r3, #1
 800779e:	2300      	movmi	r3, #0
 80077a0:	f04f 0800 	movpl.w	r8, #0
 80077a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80077a6:	bf48      	it	mi
 80077a8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80077aa:	2f00      	cmp	r7, #0
 80077ac:	db3b      	blt.n	8007826 <_dtoa_r+0x21e>
 80077ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077b0:	970e      	str	r7, [sp, #56]	@ 0x38
 80077b2:	443b      	add	r3, r7
 80077b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80077b6:	2300      	movs	r3, #0
 80077b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80077ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80077bc:	2b09      	cmp	r3, #9
 80077be:	d866      	bhi.n	800788e <_dtoa_r+0x286>
 80077c0:	2b05      	cmp	r3, #5
 80077c2:	bfc4      	itt	gt
 80077c4:	3b04      	subgt	r3, #4
 80077c6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80077c8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80077ca:	bfc8      	it	gt
 80077cc:	2400      	movgt	r4, #0
 80077ce:	f1a3 0302 	sub.w	r3, r3, #2
 80077d2:	bfd8      	it	le
 80077d4:	2401      	movle	r4, #1
 80077d6:	2b03      	cmp	r3, #3
 80077d8:	d864      	bhi.n	80078a4 <_dtoa_r+0x29c>
 80077da:	e8df f003 	tbb	[pc, r3]
 80077de:	382b      	.short	0x382b
 80077e0:	5636      	.short	0x5636
 80077e2:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80077e6:	441e      	add	r6, r3
 80077e8:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80077ec:	2b20      	cmp	r3, #32
 80077ee:	bfc1      	itttt	gt
 80077f0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80077f4:	fa08 f803 	lslgt.w	r8, r8, r3
 80077f8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80077fc:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007800:	bfd6      	itet	le
 8007802:	f1c3 0320 	rsble	r3, r3, #32
 8007806:	ea48 0003 	orrgt.w	r0, r8, r3
 800780a:	fa04 f003 	lslle.w	r0, r4, r3
 800780e:	f7f8 fdf3 	bl	80003f8 <__aeabi_ui2d>
 8007812:	2201      	movs	r2, #1
 8007814:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007818:	3e01      	subs	r6, #1
 800781a:	9212      	str	r2, [sp, #72]	@ 0x48
 800781c:	e775      	b.n	800770a <_dtoa_r+0x102>
 800781e:	2301      	movs	r3, #1
 8007820:	e7b6      	b.n	8007790 <_dtoa_r+0x188>
 8007822:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007824:	e7b5      	b.n	8007792 <_dtoa_r+0x18a>
 8007826:	427b      	negs	r3, r7
 8007828:	930a      	str	r3, [sp, #40]	@ 0x28
 800782a:	2300      	movs	r3, #0
 800782c:	eba8 0807 	sub.w	r8, r8, r7
 8007830:	930e      	str	r3, [sp, #56]	@ 0x38
 8007832:	e7c2      	b.n	80077ba <_dtoa_r+0x1b2>
 8007834:	2300      	movs	r3, #0
 8007836:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007838:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800783a:	2b00      	cmp	r3, #0
 800783c:	dc35      	bgt.n	80078aa <_dtoa_r+0x2a2>
 800783e:	2301      	movs	r3, #1
 8007840:	461a      	mov	r2, r3
 8007842:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007846:	9221      	str	r2, [sp, #132]	@ 0x84
 8007848:	e00b      	b.n	8007862 <_dtoa_r+0x25a>
 800784a:	2301      	movs	r3, #1
 800784c:	e7f3      	b.n	8007836 <_dtoa_r+0x22e>
 800784e:	2300      	movs	r3, #0
 8007850:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007852:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007854:	18fb      	adds	r3, r7, r3
 8007856:	9308      	str	r3, [sp, #32]
 8007858:	3301      	adds	r3, #1
 800785a:	2b01      	cmp	r3, #1
 800785c:	9307      	str	r3, [sp, #28]
 800785e:	bfb8      	it	lt
 8007860:	2301      	movlt	r3, #1
 8007862:	2100      	movs	r1, #0
 8007864:	2204      	movs	r2, #4
 8007866:	f8db 001c 	ldr.w	r0, [fp, #28]
 800786a:	f102 0514 	add.w	r5, r2, #20
 800786e:	429d      	cmp	r5, r3
 8007870:	d91f      	bls.n	80078b2 <_dtoa_r+0x2aa>
 8007872:	6041      	str	r1, [r0, #4]
 8007874:	4658      	mov	r0, fp
 8007876:	f001 f8d9 	bl	8008a2c <_Balloc>
 800787a:	4682      	mov	sl, r0
 800787c:	2800      	cmp	r0, #0
 800787e:	d139      	bne.n	80078f4 <_dtoa_r+0x2ec>
 8007880:	4602      	mov	r2, r0
 8007882:	f240 11af 	movw	r1, #431	@ 0x1af
 8007886:	4b1a      	ldr	r3, [pc, #104]	@ (80078f0 <_dtoa_r+0x2e8>)
 8007888:	e6d2      	b.n	8007630 <_dtoa_r+0x28>
 800788a:	2301      	movs	r3, #1
 800788c:	e7e0      	b.n	8007850 <_dtoa_r+0x248>
 800788e:	2401      	movs	r4, #1
 8007890:	2300      	movs	r3, #0
 8007892:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007894:	9320      	str	r3, [sp, #128]	@ 0x80
 8007896:	f04f 33ff 	mov.w	r3, #4294967295
 800789a:	2200      	movs	r2, #0
 800789c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80078a0:	2312      	movs	r3, #18
 80078a2:	e7d0      	b.n	8007846 <_dtoa_r+0x23e>
 80078a4:	2301      	movs	r3, #1
 80078a6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078a8:	e7f5      	b.n	8007896 <_dtoa_r+0x28e>
 80078aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80078ac:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80078b0:	e7d7      	b.n	8007862 <_dtoa_r+0x25a>
 80078b2:	3101      	adds	r1, #1
 80078b4:	0052      	lsls	r2, r2, #1
 80078b6:	e7d8      	b.n	800786a <_dtoa_r+0x262>
 80078b8:	636f4361 	.word	0x636f4361
 80078bc:	3fd287a7 	.word	0x3fd287a7
 80078c0:	8b60c8b3 	.word	0x8b60c8b3
 80078c4:	3fc68a28 	.word	0x3fc68a28
 80078c8:	509f79fb 	.word	0x509f79fb
 80078cc:	3fd34413 	.word	0x3fd34413
 80078d0:	0800a392 	.word	0x0800a392
 80078d4:	0800a3a9 	.word	0x0800a3a9
 80078d8:	7ff00000 	.word	0x7ff00000
 80078dc:	0800a38e 	.word	0x0800a38e
 80078e0:	0800a35a 	.word	0x0800a35a
 80078e4:	0800a359 	.word	0x0800a359
 80078e8:	3ff80000 	.word	0x3ff80000
 80078ec:	0800a500 	.word	0x0800a500
 80078f0:	0800a401 	.word	0x0800a401
 80078f4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80078f8:	6018      	str	r0, [r3, #0]
 80078fa:	9b07      	ldr	r3, [sp, #28]
 80078fc:	2b0e      	cmp	r3, #14
 80078fe:	f200 80a4 	bhi.w	8007a4a <_dtoa_r+0x442>
 8007902:	2c00      	cmp	r4, #0
 8007904:	f000 80a1 	beq.w	8007a4a <_dtoa_r+0x442>
 8007908:	2f00      	cmp	r7, #0
 800790a:	dd33      	ble.n	8007974 <_dtoa_r+0x36c>
 800790c:	4b86      	ldr	r3, [pc, #536]	@ (8007b28 <_dtoa_r+0x520>)
 800790e:	f007 020f 	and.w	r2, r7, #15
 8007912:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007916:	05f8      	lsls	r0, r7, #23
 8007918:	e9d3 3400 	ldrd	r3, r4, [r3]
 800791c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007920:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007924:	d516      	bpl.n	8007954 <_dtoa_r+0x34c>
 8007926:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800792a:	4b80      	ldr	r3, [pc, #512]	@ (8007b2c <_dtoa_r+0x524>)
 800792c:	2603      	movs	r6, #3
 800792e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007932:	f7f8 ff05 	bl	8000740 <__aeabi_ddiv>
 8007936:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800793a:	f004 040f 	and.w	r4, r4, #15
 800793e:	4d7b      	ldr	r5, [pc, #492]	@ (8007b2c <_dtoa_r+0x524>)
 8007940:	b954      	cbnz	r4, 8007958 <_dtoa_r+0x350>
 8007942:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800794a:	f7f8 fef9 	bl	8000740 <__aeabi_ddiv>
 800794e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007952:	e028      	b.n	80079a6 <_dtoa_r+0x39e>
 8007954:	2602      	movs	r6, #2
 8007956:	e7f2      	b.n	800793e <_dtoa_r+0x336>
 8007958:	07e1      	lsls	r1, r4, #31
 800795a:	d508      	bpl.n	800796e <_dtoa_r+0x366>
 800795c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007960:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007964:	f7f8 fdc2 	bl	80004ec <__aeabi_dmul>
 8007968:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800796c:	3601      	adds	r6, #1
 800796e:	1064      	asrs	r4, r4, #1
 8007970:	3508      	adds	r5, #8
 8007972:	e7e5      	b.n	8007940 <_dtoa_r+0x338>
 8007974:	f000 80d2 	beq.w	8007b1c <_dtoa_r+0x514>
 8007978:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800797c:	427c      	negs	r4, r7
 800797e:	4b6a      	ldr	r3, [pc, #424]	@ (8007b28 <_dtoa_r+0x520>)
 8007980:	f004 020f 	and.w	r2, r4, #15
 8007984:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798c:	f7f8 fdae 	bl	80004ec <__aeabi_dmul>
 8007990:	2602      	movs	r6, #2
 8007992:	2300      	movs	r3, #0
 8007994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007998:	4d64      	ldr	r5, [pc, #400]	@ (8007b2c <_dtoa_r+0x524>)
 800799a:	1124      	asrs	r4, r4, #4
 800799c:	2c00      	cmp	r4, #0
 800799e:	f040 80b2 	bne.w	8007b06 <_dtoa_r+0x4fe>
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1d3      	bne.n	800794e <_dtoa_r+0x346>
 80079a6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80079aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	f000 80b7 	beq.w	8007b20 <_dtoa_r+0x518>
 80079b2:	2200      	movs	r2, #0
 80079b4:	4620      	mov	r0, r4
 80079b6:	4629      	mov	r1, r5
 80079b8:	4b5d      	ldr	r3, [pc, #372]	@ (8007b30 <_dtoa_r+0x528>)
 80079ba:	f7f9 f809 	bl	80009d0 <__aeabi_dcmplt>
 80079be:	2800      	cmp	r0, #0
 80079c0:	f000 80ae 	beq.w	8007b20 <_dtoa_r+0x518>
 80079c4:	9b07      	ldr	r3, [sp, #28]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f000 80aa 	beq.w	8007b20 <_dtoa_r+0x518>
 80079cc:	9b08      	ldr	r3, [sp, #32]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	dd37      	ble.n	8007a42 <_dtoa_r+0x43a>
 80079d2:	1e7b      	subs	r3, r7, #1
 80079d4:	4620      	mov	r0, r4
 80079d6:	9304      	str	r3, [sp, #16]
 80079d8:	2200      	movs	r2, #0
 80079da:	4629      	mov	r1, r5
 80079dc:	4b55      	ldr	r3, [pc, #340]	@ (8007b34 <_dtoa_r+0x52c>)
 80079de:	f7f8 fd85 	bl	80004ec <__aeabi_dmul>
 80079e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079e6:	9c08      	ldr	r4, [sp, #32]
 80079e8:	3601      	adds	r6, #1
 80079ea:	4630      	mov	r0, r6
 80079ec:	f7f8 fd14 	bl	8000418 <__aeabi_i2d>
 80079f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079f4:	f7f8 fd7a 	bl	80004ec <__aeabi_dmul>
 80079f8:	2200      	movs	r2, #0
 80079fa:	4b4f      	ldr	r3, [pc, #316]	@ (8007b38 <_dtoa_r+0x530>)
 80079fc:	f7f8 fbc0 	bl	8000180 <__adddf3>
 8007a00:	4605      	mov	r5, r0
 8007a02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007a06:	2c00      	cmp	r4, #0
 8007a08:	f040 809a 	bne.w	8007b40 <_dtoa_r+0x538>
 8007a0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a10:	2200      	movs	r2, #0
 8007a12:	4b4a      	ldr	r3, [pc, #296]	@ (8007b3c <_dtoa_r+0x534>)
 8007a14:	f7f8 fbb2 	bl	800017c <__aeabi_dsub>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a20:	462a      	mov	r2, r5
 8007a22:	4633      	mov	r3, r6
 8007a24:	f7f8 fff2 	bl	8000a0c <__aeabi_dcmpgt>
 8007a28:	2800      	cmp	r0, #0
 8007a2a:	f040 828e 	bne.w	8007f4a <_dtoa_r+0x942>
 8007a2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a32:	462a      	mov	r2, r5
 8007a34:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007a38:	f7f8 ffca 	bl	80009d0 <__aeabi_dcmplt>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	f040 8127 	bne.w	8007c90 <_dtoa_r+0x688>
 8007a42:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007a46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007a4a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	f2c0 8163 	blt.w	8007d18 <_dtoa_r+0x710>
 8007a52:	2f0e      	cmp	r7, #14
 8007a54:	f300 8160 	bgt.w	8007d18 <_dtoa_r+0x710>
 8007a58:	4b33      	ldr	r3, [pc, #204]	@ (8007b28 <_dtoa_r+0x520>)
 8007a5a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a62:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007a66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	da03      	bge.n	8007a74 <_dtoa_r+0x46c>
 8007a6c:	9b07      	ldr	r3, [sp, #28]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f340 8100 	ble.w	8007c74 <_dtoa_r+0x66c>
 8007a74:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007a78:	4656      	mov	r6, sl
 8007a7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a7e:	4620      	mov	r0, r4
 8007a80:	4629      	mov	r1, r5
 8007a82:	f7f8 fe5d 	bl	8000740 <__aeabi_ddiv>
 8007a86:	f7f8 ffe1 	bl	8000a4c <__aeabi_d2iz>
 8007a8a:	4680      	mov	r8, r0
 8007a8c:	f7f8 fcc4 	bl	8000418 <__aeabi_i2d>
 8007a90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a94:	f7f8 fd2a 	bl	80004ec <__aeabi_dmul>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	4629      	mov	r1, r5
 8007aa0:	f7f8 fb6c 	bl	800017c <__aeabi_dsub>
 8007aa4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007aa8:	9d07      	ldr	r5, [sp, #28]
 8007aaa:	f806 4b01 	strb.w	r4, [r6], #1
 8007aae:	eba6 040a 	sub.w	r4, r6, sl
 8007ab2:	42a5      	cmp	r5, r4
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	460b      	mov	r3, r1
 8007ab8:	f040 8116 	bne.w	8007ce8 <_dtoa_r+0x6e0>
 8007abc:	f7f8 fb60 	bl	8000180 <__adddf3>
 8007ac0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	460d      	mov	r5, r1
 8007ac8:	f7f8 ffa0 	bl	8000a0c <__aeabi_dcmpgt>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	f040 80f8 	bne.w	8007cc2 <_dtoa_r+0x6ba>
 8007ad2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	4629      	mov	r1, r5
 8007ada:	f7f8 ff6f 	bl	80009bc <__aeabi_dcmpeq>
 8007ade:	b118      	cbz	r0, 8007ae8 <_dtoa_r+0x4e0>
 8007ae0:	f018 0f01 	tst.w	r8, #1
 8007ae4:	f040 80ed 	bne.w	8007cc2 <_dtoa_r+0x6ba>
 8007ae8:	4649      	mov	r1, r9
 8007aea:	4658      	mov	r0, fp
 8007aec:	f000 ffde 	bl	8008aac <_Bfree>
 8007af0:	2300      	movs	r3, #0
 8007af2:	7033      	strb	r3, [r6, #0]
 8007af4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007af6:	3701      	adds	r7, #1
 8007af8:	601f      	str	r7, [r3, #0]
 8007afa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f000 8320 	beq.w	8008142 <_dtoa_r+0xb3a>
 8007b02:	601e      	str	r6, [r3, #0]
 8007b04:	e31d      	b.n	8008142 <_dtoa_r+0xb3a>
 8007b06:	07e2      	lsls	r2, r4, #31
 8007b08:	d505      	bpl.n	8007b16 <_dtoa_r+0x50e>
 8007b0a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b0e:	f7f8 fced 	bl	80004ec <__aeabi_dmul>
 8007b12:	2301      	movs	r3, #1
 8007b14:	3601      	adds	r6, #1
 8007b16:	1064      	asrs	r4, r4, #1
 8007b18:	3508      	adds	r5, #8
 8007b1a:	e73f      	b.n	800799c <_dtoa_r+0x394>
 8007b1c:	2602      	movs	r6, #2
 8007b1e:	e742      	b.n	80079a6 <_dtoa_r+0x39e>
 8007b20:	9c07      	ldr	r4, [sp, #28]
 8007b22:	9704      	str	r7, [sp, #16]
 8007b24:	e761      	b.n	80079ea <_dtoa_r+0x3e2>
 8007b26:	bf00      	nop
 8007b28:	0800a500 	.word	0x0800a500
 8007b2c:	0800a4d8 	.word	0x0800a4d8
 8007b30:	3ff00000 	.word	0x3ff00000
 8007b34:	40240000 	.word	0x40240000
 8007b38:	401c0000 	.word	0x401c0000
 8007b3c:	40140000 	.word	0x40140000
 8007b40:	4b70      	ldr	r3, [pc, #448]	@ (8007d04 <_dtoa_r+0x6fc>)
 8007b42:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007b48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007b4c:	4454      	add	r4, sl
 8007b4e:	2900      	cmp	r1, #0
 8007b50:	d045      	beq.n	8007bde <_dtoa_r+0x5d6>
 8007b52:	2000      	movs	r0, #0
 8007b54:	496c      	ldr	r1, [pc, #432]	@ (8007d08 <_dtoa_r+0x700>)
 8007b56:	f7f8 fdf3 	bl	8000740 <__aeabi_ddiv>
 8007b5a:	4633      	mov	r3, r6
 8007b5c:	462a      	mov	r2, r5
 8007b5e:	f7f8 fb0d 	bl	800017c <__aeabi_dsub>
 8007b62:	4656      	mov	r6, sl
 8007b64:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007b68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b6c:	f7f8 ff6e 	bl	8000a4c <__aeabi_d2iz>
 8007b70:	4605      	mov	r5, r0
 8007b72:	f7f8 fc51 	bl	8000418 <__aeabi_i2d>
 8007b76:	4602      	mov	r2, r0
 8007b78:	460b      	mov	r3, r1
 8007b7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b7e:	f7f8 fafd 	bl	800017c <__aeabi_dsub>
 8007b82:	4602      	mov	r2, r0
 8007b84:	460b      	mov	r3, r1
 8007b86:	3530      	adds	r5, #48	@ 0x30
 8007b88:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007b90:	f806 5b01 	strb.w	r5, [r6], #1
 8007b94:	f7f8 ff1c 	bl	80009d0 <__aeabi_dcmplt>
 8007b98:	2800      	cmp	r0, #0
 8007b9a:	d163      	bne.n	8007c64 <_dtoa_r+0x65c>
 8007b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	495a      	ldr	r1, [pc, #360]	@ (8007d0c <_dtoa_r+0x704>)
 8007ba4:	f7f8 faea 	bl	800017c <__aeabi_dsub>
 8007ba8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007bac:	f7f8 ff10 	bl	80009d0 <__aeabi_dcmplt>
 8007bb0:	2800      	cmp	r0, #0
 8007bb2:	f040 8087 	bne.w	8007cc4 <_dtoa_r+0x6bc>
 8007bb6:	42a6      	cmp	r6, r4
 8007bb8:	f43f af43 	beq.w	8007a42 <_dtoa_r+0x43a>
 8007bbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	4b53      	ldr	r3, [pc, #332]	@ (8007d10 <_dtoa_r+0x708>)
 8007bc4:	f7f8 fc92 	bl	80004ec <__aeabi_dmul>
 8007bc8:	2200      	movs	r2, #0
 8007bca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007bce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bd2:	4b4f      	ldr	r3, [pc, #316]	@ (8007d10 <_dtoa_r+0x708>)
 8007bd4:	f7f8 fc8a 	bl	80004ec <__aeabi_dmul>
 8007bd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007bdc:	e7c4      	b.n	8007b68 <_dtoa_r+0x560>
 8007bde:	4631      	mov	r1, r6
 8007be0:	4628      	mov	r0, r5
 8007be2:	f7f8 fc83 	bl	80004ec <__aeabi_dmul>
 8007be6:	4656      	mov	r6, sl
 8007be8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007bec:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bf2:	f7f8 ff2b 	bl	8000a4c <__aeabi_d2iz>
 8007bf6:	4605      	mov	r5, r0
 8007bf8:	f7f8 fc0e 	bl	8000418 <__aeabi_i2d>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c04:	f7f8 faba 	bl	800017c <__aeabi_dsub>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	3530      	adds	r5, #48	@ 0x30
 8007c0e:	f806 5b01 	strb.w	r5, [r6], #1
 8007c12:	42a6      	cmp	r6, r4
 8007c14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c18:	f04f 0200 	mov.w	r2, #0
 8007c1c:	d124      	bne.n	8007c68 <_dtoa_r+0x660>
 8007c1e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007c22:	4b39      	ldr	r3, [pc, #228]	@ (8007d08 <_dtoa_r+0x700>)
 8007c24:	f7f8 faac 	bl	8000180 <__adddf3>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c30:	f7f8 feec 	bl	8000a0c <__aeabi_dcmpgt>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	d145      	bne.n	8007cc4 <_dtoa_r+0x6bc>
 8007c38:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	4932      	ldr	r1, [pc, #200]	@ (8007d08 <_dtoa_r+0x700>)
 8007c40:	f7f8 fa9c 	bl	800017c <__aeabi_dsub>
 8007c44:	4602      	mov	r2, r0
 8007c46:	460b      	mov	r3, r1
 8007c48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c4c:	f7f8 fec0 	bl	80009d0 <__aeabi_dcmplt>
 8007c50:	2800      	cmp	r0, #0
 8007c52:	f43f aef6 	beq.w	8007a42 <_dtoa_r+0x43a>
 8007c56:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007c58:	1e73      	subs	r3, r6, #1
 8007c5a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c5c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c60:	2b30      	cmp	r3, #48	@ 0x30
 8007c62:	d0f8      	beq.n	8007c56 <_dtoa_r+0x64e>
 8007c64:	9f04      	ldr	r7, [sp, #16]
 8007c66:	e73f      	b.n	8007ae8 <_dtoa_r+0x4e0>
 8007c68:	4b29      	ldr	r3, [pc, #164]	@ (8007d10 <_dtoa_r+0x708>)
 8007c6a:	f7f8 fc3f 	bl	80004ec <__aeabi_dmul>
 8007c6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c72:	e7bc      	b.n	8007bee <_dtoa_r+0x5e6>
 8007c74:	d10c      	bne.n	8007c90 <_dtoa_r+0x688>
 8007c76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	4b25      	ldr	r3, [pc, #148]	@ (8007d14 <_dtoa_r+0x70c>)
 8007c7e:	f7f8 fc35 	bl	80004ec <__aeabi_dmul>
 8007c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c86:	f7f8 feb7 	bl	80009f8 <__aeabi_dcmpge>
 8007c8a:	2800      	cmp	r0, #0
 8007c8c:	f000 815b 	beq.w	8007f46 <_dtoa_r+0x93e>
 8007c90:	2400      	movs	r4, #0
 8007c92:	4625      	mov	r5, r4
 8007c94:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c96:	4656      	mov	r6, sl
 8007c98:	43db      	mvns	r3, r3
 8007c9a:	9304      	str	r3, [sp, #16]
 8007c9c:	2700      	movs	r7, #0
 8007c9e:	4621      	mov	r1, r4
 8007ca0:	4658      	mov	r0, fp
 8007ca2:	f000 ff03 	bl	8008aac <_Bfree>
 8007ca6:	2d00      	cmp	r5, #0
 8007ca8:	d0dc      	beq.n	8007c64 <_dtoa_r+0x65c>
 8007caa:	b12f      	cbz	r7, 8007cb8 <_dtoa_r+0x6b0>
 8007cac:	42af      	cmp	r7, r5
 8007cae:	d003      	beq.n	8007cb8 <_dtoa_r+0x6b0>
 8007cb0:	4639      	mov	r1, r7
 8007cb2:	4658      	mov	r0, fp
 8007cb4:	f000 fefa 	bl	8008aac <_Bfree>
 8007cb8:	4629      	mov	r1, r5
 8007cba:	4658      	mov	r0, fp
 8007cbc:	f000 fef6 	bl	8008aac <_Bfree>
 8007cc0:	e7d0      	b.n	8007c64 <_dtoa_r+0x65c>
 8007cc2:	9704      	str	r7, [sp, #16]
 8007cc4:	4633      	mov	r3, r6
 8007cc6:	461e      	mov	r6, r3
 8007cc8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ccc:	2a39      	cmp	r2, #57	@ 0x39
 8007cce:	d107      	bne.n	8007ce0 <_dtoa_r+0x6d8>
 8007cd0:	459a      	cmp	sl, r3
 8007cd2:	d1f8      	bne.n	8007cc6 <_dtoa_r+0x6be>
 8007cd4:	9a04      	ldr	r2, [sp, #16]
 8007cd6:	3201      	adds	r2, #1
 8007cd8:	9204      	str	r2, [sp, #16]
 8007cda:	2230      	movs	r2, #48	@ 0x30
 8007cdc:	f88a 2000 	strb.w	r2, [sl]
 8007ce0:	781a      	ldrb	r2, [r3, #0]
 8007ce2:	3201      	adds	r2, #1
 8007ce4:	701a      	strb	r2, [r3, #0]
 8007ce6:	e7bd      	b.n	8007c64 <_dtoa_r+0x65c>
 8007ce8:	2200      	movs	r2, #0
 8007cea:	4b09      	ldr	r3, [pc, #36]	@ (8007d10 <_dtoa_r+0x708>)
 8007cec:	f7f8 fbfe 	bl	80004ec <__aeabi_dmul>
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	4604      	mov	r4, r0
 8007cf6:	460d      	mov	r5, r1
 8007cf8:	f7f8 fe60 	bl	80009bc <__aeabi_dcmpeq>
 8007cfc:	2800      	cmp	r0, #0
 8007cfe:	f43f aebc 	beq.w	8007a7a <_dtoa_r+0x472>
 8007d02:	e6f1      	b.n	8007ae8 <_dtoa_r+0x4e0>
 8007d04:	0800a500 	.word	0x0800a500
 8007d08:	3fe00000 	.word	0x3fe00000
 8007d0c:	3ff00000 	.word	0x3ff00000
 8007d10:	40240000 	.word	0x40240000
 8007d14:	40140000 	.word	0x40140000
 8007d18:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007d1a:	2a00      	cmp	r2, #0
 8007d1c:	f000 80db 	beq.w	8007ed6 <_dtoa_r+0x8ce>
 8007d20:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007d22:	2a01      	cmp	r2, #1
 8007d24:	f300 80bf 	bgt.w	8007ea6 <_dtoa_r+0x89e>
 8007d28:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007d2a:	2a00      	cmp	r2, #0
 8007d2c:	f000 80b7 	beq.w	8007e9e <_dtoa_r+0x896>
 8007d30:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007d34:	4646      	mov	r6, r8
 8007d36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007d38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d3a:	2101      	movs	r1, #1
 8007d3c:	441a      	add	r2, r3
 8007d3e:	4658      	mov	r0, fp
 8007d40:	4498      	add	r8, r3
 8007d42:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d44:	f000 ffb0 	bl	8008ca8 <__i2b>
 8007d48:	4605      	mov	r5, r0
 8007d4a:	b15e      	cbz	r6, 8007d64 <_dtoa_r+0x75c>
 8007d4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	dd08      	ble.n	8007d64 <_dtoa_r+0x75c>
 8007d52:	42b3      	cmp	r3, r6
 8007d54:	bfa8      	it	ge
 8007d56:	4633      	movge	r3, r6
 8007d58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d5a:	eba8 0803 	sub.w	r8, r8, r3
 8007d5e:	1af6      	subs	r6, r6, r3
 8007d60:	1ad3      	subs	r3, r2, r3
 8007d62:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d66:	b1f3      	cbz	r3, 8007da6 <_dtoa_r+0x79e>
 8007d68:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	f000 80b7 	beq.w	8007ede <_dtoa_r+0x8d6>
 8007d70:	b18c      	cbz	r4, 8007d96 <_dtoa_r+0x78e>
 8007d72:	4629      	mov	r1, r5
 8007d74:	4622      	mov	r2, r4
 8007d76:	4658      	mov	r0, fp
 8007d78:	f001 f854 	bl	8008e24 <__pow5mult>
 8007d7c:	464a      	mov	r2, r9
 8007d7e:	4601      	mov	r1, r0
 8007d80:	4605      	mov	r5, r0
 8007d82:	4658      	mov	r0, fp
 8007d84:	f000 ffa6 	bl	8008cd4 <__multiply>
 8007d88:	4649      	mov	r1, r9
 8007d8a:	9004      	str	r0, [sp, #16]
 8007d8c:	4658      	mov	r0, fp
 8007d8e:	f000 fe8d 	bl	8008aac <_Bfree>
 8007d92:	9b04      	ldr	r3, [sp, #16]
 8007d94:	4699      	mov	r9, r3
 8007d96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d98:	1b1a      	subs	r2, r3, r4
 8007d9a:	d004      	beq.n	8007da6 <_dtoa_r+0x79e>
 8007d9c:	4649      	mov	r1, r9
 8007d9e:	4658      	mov	r0, fp
 8007da0:	f001 f840 	bl	8008e24 <__pow5mult>
 8007da4:	4681      	mov	r9, r0
 8007da6:	2101      	movs	r1, #1
 8007da8:	4658      	mov	r0, fp
 8007daa:	f000 ff7d 	bl	8008ca8 <__i2b>
 8007dae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007db0:	4604      	mov	r4, r0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	f000 81c9 	beq.w	800814a <_dtoa_r+0xb42>
 8007db8:	461a      	mov	r2, r3
 8007dba:	4601      	mov	r1, r0
 8007dbc:	4658      	mov	r0, fp
 8007dbe:	f001 f831 	bl	8008e24 <__pow5mult>
 8007dc2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007dc4:	4604      	mov	r4, r0
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	f300 808f 	bgt.w	8007eea <_dtoa_r+0x8e2>
 8007dcc:	9b02      	ldr	r3, [sp, #8]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f040 8087 	bne.w	8007ee2 <_dtoa_r+0x8da>
 8007dd4:	9b03      	ldr	r3, [sp, #12]
 8007dd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f040 8083 	bne.w	8007ee6 <_dtoa_r+0x8de>
 8007de0:	9b03      	ldr	r3, [sp, #12]
 8007de2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007de6:	0d1b      	lsrs	r3, r3, #20
 8007de8:	051b      	lsls	r3, r3, #20
 8007dea:	b12b      	cbz	r3, 8007df8 <_dtoa_r+0x7f0>
 8007dec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007dee:	f108 0801 	add.w	r8, r8, #1
 8007df2:	3301      	adds	r3, #1
 8007df4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007df6:	2301      	movs	r3, #1
 8007df8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dfa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 81aa 	beq.w	8008156 <_dtoa_r+0xb4e>
 8007e02:	6923      	ldr	r3, [r4, #16]
 8007e04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e08:	6918      	ldr	r0, [r3, #16]
 8007e0a:	f000 ff01 	bl	8008c10 <__hi0bits>
 8007e0e:	f1c0 0020 	rsb	r0, r0, #32
 8007e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e14:	4418      	add	r0, r3
 8007e16:	f010 001f 	ands.w	r0, r0, #31
 8007e1a:	d071      	beq.n	8007f00 <_dtoa_r+0x8f8>
 8007e1c:	f1c0 0320 	rsb	r3, r0, #32
 8007e20:	2b04      	cmp	r3, #4
 8007e22:	dd65      	ble.n	8007ef0 <_dtoa_r+0x8e8>
 8007e24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e26:	f1c0 001c 	rsb	r0, r0, #28
 8007e2a:	4403      	add	r3, r0
 8007e2c:	4480      	add	r8, r0
 8007e2e:	4406      	add	r6, r0
 8007e30:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e32:	f1b8 0f00 	cmp.w	r8, #0
 8007e36:	dd05      	ble.n	8007e44 <_dtoa_r+0x83c>
 8007e38:	4649      	mov	r1, r9
 8007e3a:	4642      	mov	r2, r8
 8007e3c:	4658      	mov	r0, fp
 8007e3e:	f001 f84b 	bl	8008ed8 <__lshift>
 8007e42:	4681      	mov	r9, r0
 8007e44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	dd05      	ble.n	8007e56 <_dtoa_r+0x84e>
 8007e4a:	4621      	mov	r1, r4
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	4658      	mov	r0, fp
 8007e50:	f001 f842 	bl	8008ed8 <__lshift>
 8007e54:	4604      	mov	r4, r0
 8007e56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d053      	beq.n	8007f04 <_dtoa_r+0x8fc>
 8007e5c:	4621      	mov	r1, r4
 8007e5e:	4648      	mov	r0, r9
 8007e60:	f001 f8a6 	bl	8008fb0 <__mcmp>
 8007e64:	2800      	cmp	r0, #0
 8007e66:	da4d      	bge.n	8007f04 <_dtoa_r+0x8fc>
 8007e68:	1e7b      	subs	r3, r7, #1
 8007e6a:	4649      	mov	r1, r9
 8007e6c:	9304      	str	r3, [sp, #16]
 8007e6e:	220a      	movs	r2, #10
 8007e70:	2300      	movs	r3, #0
 8007e72:	4658      	mov	r0, fp
 8007e74:	f000 fe3c 	bl	8008af0 <__multadd>
 8007e78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e7a:	4681      	mov	r9, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	f000 816c 	beq.w	800815a <_dtoa_r+0xb52>
 8007e82:	2300      	movs	r3, #0
 8007e84:	4629      	mov	r1, r5
 8007e86:	220a      	movs	r2, #10
 8007e88:	4658      	mov	r0, fp
 8007e8a:	f000 fe31 	bl	8008af0 <__multadd>
 8007e8e:	9b08      	ldr	r3, [sp, #32]
 8007e90:	4605      	mov	r5, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	dc61      	bgt.n	8007f5a <_dtoa_r+0x952>
 8007e96:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007e98:	2b02      	cmp	r3, #2
 8007e9a:	dc3b      	bgt.n	8007f14 <_dtoa_r+0x90c>
 8007e9c:	e05d      	b.n	8007f5a <_dtoa_r+0x952>
 8007e9e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007ea0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007ea4:	e746      	b.n	8007d34 <_dtoa_r+0x72c>
 8007ea6:	9b07      	ldr	r3, [sp, #28]
 8007ea8:	1e5c      	subs	r4, r3, #1
 8007eaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007eac:	42a3      	cmp	r3, r4
 8007eae:	bfbf      	itttt	lt
 8007eb0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007eb2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007eb4:	1ae3      	sublt	r3, r4, r3
 8007eb6:	18d2      	addlt	r2, r2, r3
 8007eb8:	bfa8      	it	ge
 8007eba:	1b1c      	subge	r4, r3, r4
 8007ebc:	9b07      	ldr	r3, [sp, #28]
 8007ebe:	bfbe      	ittt	lt
 8007ec0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007ec2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007ec4:	2400      	movlt	r4, #0
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	bfb5      	itete	lt
 8007eca:	eba8 0603 	sublt.w	r6, r8, r3
 8007ece:	4646      	movge	r6, r8
 8007ed0:	2300      	movlt	r3, #0
 8007ed2:	9b07      	ldrge	r3, [sp, #28]
 8007ed4:	e730      	b.n	8007d38 <_dtoa_r+0x730>
 8007ed6:	4646      	mov	r6, r8
 8007ed8:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007eda:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007edc:	e735      	b.n	8007d4a <_dtoa_r+0x742>
 8007ede:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ee0:	e75c      	b.n	8007d9c <_dtoa_r+0x794>
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	e788      	b.n	8007df8 <_dtoa_r+0x7f0>
 8007ee6:	9b02      	ldr	r3, [sp, #8]
 8007ee8:	e786      	b.n	8007df8 <_dtoa_r+0x7f0>
 8007eea:	2300      	movs	r3, #0
 8007eec:	930a      	str	r3, [sp, #40]	@ 0x28
 8007eee:	e788      	b.n	8007e02 <_dtoa_r+0x7fa>
 8007ef0:	d09f      	beq.n	8007e32 <_dtoa_r+0x82a>
 8007ef2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ef4:	331c      	adds	r3, #28
 8007ef6:	441a      	add	r2, r3
 8007ef8:	4498      	add	r8, r3
 8007efa:	441e      	add	r6, r3
 8007efc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007efe:	e798      	b.n	8007e32 <_dtoa_r+0x82a>
 8007f00:	4603      	mov	r3, r0
 8007f02:	e7f6      	b.n	8007ef2 <_dtoa_r+0x8ea>
 8007f04:	9b07      	ldr	r3, [sp, #28]
 8007f06:	9704      	str	r7, [sp, #16]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	dc20      	bgt.n	8007f4e <_dtoa_r+0x946>
 8007f0c:	9308      	str	r3, [sp, #32]
 8007f0e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007f10:	2b02      	cmp	r3, #2
 8007f12:	dd1e      	ble.n	8007f52 <_dtoa_r+0x94a>
 8007f14:	9b08      	ldr	r3, [sp, #32]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f47f aebc 	bne.w	8007c94 <_dtoa_r+0x68c>
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	2205      	movs	r2, #5
 8007f20:	4658      	mov	r0, fp
 8007f22:	f000 fde5 	bl	8008af0 <__multadd>
 8007f26:	4601      	mov	r1, r0
 8007f28:	4604      	mov	r4, r0
 8007f2a:	4648      	mov	r0, r9
 8007f2c:	f001 f840 	bl	8008fb0 <__mcmp>
 8007f30:	2800      	cmp	r0, #0
 8007f32:	f77f aeaf 	ble.w	8007c94 <_dtoa_r+0x68c>
 8007f36:	2331      	movs	r3, #49	@ 0x31
 8007f38:	4656      	mov	r6, sl
 8007f3a:	f806 3b01 	strb.w	r3, [r6], #1
 8007f3e:	9b04      	ldr	r3, [sp, #16]
 8007f40:	3301      	adds	r3, #1
 8007f42:	9304      	str	r3, [sp, #16]
 8007f44:	e6aa      	b.n	8007c9c <_dtoa_r+0x694>
 8007f46:	9c07      	ldr	r4, [sp, #28]
 8007f48:	9704      	str	r7, [sp, #16]
 8007f4a:	4625      	mov	r5, r4
 8007f4c:	e7f3      	b.n	8007f36 <_dtoa_r+0x92e>
 8007f4e:	9b07      	ldr	r3, [sp, #28]
 8007f50:	9308      	str	r3, [sp, #32]
 8007f52:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f000 8104 	beq.w	8008162 <_dtoa_r+0xb5a>
 8007f5a:	2e00      	cmp	r6, #0
 8007f5c:	dd05      	ble.n	8007f6a <_dtoa_r+0x962>
 8007f5e:	4629      	mov	r1, r5
 8007f60:	4632      	mov	r2, r6
 8007f62:	4658      	mov	r0, fp
 8007f64:	f000 ffb8 	bl	8008ed8 <__lshift>
 8007f68:	4605      	mov	r5, r0
 8007f6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d05a      	beq.n	8008026 <_dtoa_r+0xa1e>
 8007f70:	4658      	mov	r0, fp
 8007f72:	6869      	ldr	r1, [r5, #4]
 8007f74:	f000 fd5a 	bl	8008a2c <_Balloc>
 8007f78:	4606      	mov	r6, r0
 8007f7a:	b928      	cbnz	r0, 8007f88 <_dtoa_r+0x980>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007f82:	4b83      	ldr	r3, [pc, #524]	@ (8008190 <_dtoa_r+0xb88>)
 8007f84:	f7ff bb54 	b.w	8007630 <_dtoa_r+0x28>
 8007f88:	692a      	ldr	r2, [r5, #16]
 8007f8a:	f105 010c 	add.w	r1, r5, #12
 8007f8e:	3202      	adds	r2, #2
 8007f90:	0092      	lsls	r2, r2, #2
 8007f92:	300c      	adds	r0, #12
 8007f94:	f7ff fa95 	bl	80074c2 <memcpy>
 8007f98:	2201      	movs	r2, #1
 8007f9a:	4631      	mov	r1, r6
 8007f9c:	4658      	mov	r0, fp
 8007f9e:	f000 ff9b 	bl	8008ed8 <__lshift>
 8007fa2:	462f      	mov	r7, r5
 8007fa4:	4605      	mov	r5, r0
 8007fa6:	f10a 0301 	add.w	r3, sl, #1
 8007faa:	9307      	str	r3, [sp, #28]
 8007fac:	9b08      	ldr	r3, [sp, #32]
 8007fae:	4453      	add	r3, sl
 8007fb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fb2:	9b02      	ldr	r3, [sp, #8]
 8007fb4:	f003 0301 	and.w	r3, r3, #1
 8007fb8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007fba:	9b07      	ldr	r3, [sp, #28]
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	4648      	mov	r0, r9
 8007fc2:	9302      	str	r3, [sp, #8]
 8007fc4:	f7ff fa96 	bl	80074f4 <quorem>
 8007fc8:	4639      	mov	r1, r7
 8007fca:	9008      	str	r0, [sp, #32]
 8007fcc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007fd0:	4648      	mov	r0, r9
 8007fd2:	f000 ffed 	bl	8008fb0 <__mcmp>
 8007fd6:	462a      	mov	r2, r5
 8007fd8:	9009      	str	r0, [sp, #36]	@ 0x24
 8007fda:	4621      	mov	r1, r4
 8007fdc:	4658      	mov	r0, fp
 8007fde:	f001 f803 	bl	8008fe8 <__mdiff>
 8007fe2:	68c2      	ldr	r2, [r0, #12]
 8007fe4:	4606      	mov	r6, r0
 8007fe6:	bb02      	cbnz	r2, 800802a <_dtoa_r+0xa22>
 8007fe8:	4601      	mov	r1, r0
 8007fea:	4648      	mov	r0, r9
 8007fec:	f000 ffe0 	bl	8008fb0 <__mcmp>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	4631      	mov	r1, r6
 8007ff4:	4658      	mov	r0, fp
 8007ff6:	920c      	str	r2, [sp, #48]	@ 0x30
 8007ff8:	f000 fd58 	bl	8008aac <_Bfree>
 8007ffc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007ffe:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008000:	9e07      	ldr	r6, [sp, #28]
 8008002:	ea43 0102 	orr.w	r1, r3, r2
 8008006:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008008:	4319      	orrs	r1, r3
 800800a:	d110      	bne.n	800802e <_dtoa_r+0xa26>
 800800c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008010:	d029      	beq.n	8008066 <_dtoa_r+0xa5e>
 8008012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008014:	2b00      	cmp	r3, #0
 8008016:	dd02      	ble.n	800801e <_dtoa_r+0xa16>
 8008018:	9b08      	ldr	r3, [sp, #32]
 800801a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800801e:	9b02      	ldr	r3, [sp, #8]
 8008020:	f883 8000 	strb.w	r8, [r3]
 8008024:	e63b      	b.n	8007c9e <_dtoa_r+0x696>
 8008026:	4628      	mov	r0, r5
 8008028:	e7bb      	b.n	8007fa2 <_dtoa_r+0x99a>
 800802a:	2201      	movs	r2, #1
 800802c:	e7e1      	b.n	8007ff2 <_dtoa_r+0x9ea>
 800802e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008030:	2b00      	cmp	r3, #0
 8008032:	db04      	blt.n	800803e <_dtoa_r+0xa36>
 8008034:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008036:	430b      	orrs	r3, r1
 8008038:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800803a:	430b      	orrs	r3, r1
 800803c:	d120      	bne.n	8008080 <_dtoa_r+0xa78>
 800803e:	2a00      	cmp	r2, #0
 8008040:	dded      	ble.n	800801e <_dtoa_r+0xa16>
 8008042:	4649      	mov	r1, r9
 8008044:	2201      	movs	r2, #1
 8008046:	4658      	mov	r0, fp
 8008048:	f000 ff46 	bl	8008ed8 <__lshift>
 800804c:	4621      	mov	r1, r4
 800804e:	4681      	mov	r9, r0
 8008050:	f000 ffae 	bl	8008fb0 <__mcmp>
 8008054:	2800      	cmp	r0, #0
 8008056:	dc03      	bgt.n	8008060 <_dtoa_r+0xa58>
 8008058:	d1e1      	bne.n	800801e <_dtoa_r+0xa16>
 800805a:	f018 0f01 	tst.w	r8, #1
 800805e:	d0de      	beq.n	800801e <_dtoa_r+0xa16>
 8008060:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008064:	d1d8      	bne.n	8008018 <_dtoa_r+0xa10>
 8008066:	2339      	movs	r3, #57	@ 0x39
 8008068:	9a02      	ldr	r2, [sp, #8]
 800806a:	7013      	strb	r3, [r2, #0]
 800806c:	4633      	mov	r3, r6
 800806e:	461e      	mov	r6, r3
 8008070:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008074:	3b01      	subs	r3, #1
 8008076:	2a39      	cmp	r2, #57	@ 0x39
 8008078:	d052      	beq.n	8008120 <_dtoa_r+0xb18>
 800807a:	3201      	adds	r2, #1
 800807c:	701a      	strb	r2, [r3, #0]
 800807e:	e60e      	b.n	8007c9e <_dtoa_r+0x696>
 8008080:	2a00      	cmp	r2, #0
 8008082:	dd07      	ble.n	8008094 <_dtoa_r+0xa8c>
 8008084:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008088:	d0ed      	beq.n	8008066 <_dtoa_r+0xa5e>
 800808a:	9a02      	ldr	r2, [sp, #8]
 800808c:	f108 0301 	add.w	r3, r8, #1
 8008090:	7013      	strb	r3, [r2, #0]
 8008092:	e604      	b.n	8007c9e <_dtoa_r+0x696>
 8008094:	9b07      	ldr	r3, [sp, #28]
 8008096:	9a07      	ldr	r2, [sp, #28]
 8008098:	f803 8c01 	strb.w	r8, [r3, #-1]
 800809c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800809e:	4293      	cmp	r3, r2
 80080a0:	d028      	beq.n	80080f4 <_dtoa_r+0xaec>
 80080a2:	4649      	mov	r1, r9
 80080a4:	2300      	movs	r3, #0
 80080a6:	220a      	movs	r2, #10
 80080a8:	4658      	mov	r0, fp
 80080aa:	f000 fd21 	bl	8008af0 <__multadd>
 80080ae:	42af      	cmp	r7, r5
 80080b0:	4681      	mov	r9, r0
 80080b2:	f04f 0300 	mov.w	r3, #0
 80080b6:	f04f 020a 	mov.w	r2, #10
 80080ba:	4639      	mov	r1, r7
 80080bc:	4658      	mov	r0, fp
 80080be:	d107      	bne.n	80080d0 <_dtoa_r+0xac8>
 80080c0:	f000 fd16 	bl	8008af0 <__multadd>
 80080c4:	4607      	mov	r7, r0
 80080c6:	4605      	mov	r5, r0
 80080c8:	9b07      	ldr	r3, [sp, #28]
 80080ca:	3301      	adds	r3, #1
 80080cc:	9307      	str	r3, [sp, #28]
 80080ce:	e774      	b.n	8007fba <_dtoa_r+0x9b2>
 80080d0:	f000 fd0e 	bl	8008af0 <__multadd>
 80080d4:	4629      	mov	r1, r5
 80080d6:	4607      	mov	r7, r0
 80080d8:	2300      	movs	r3, #0
 80080da:	220a      	movs	r2, #10
 80080dc:	4658      	mov	r0, fp
 80080de:	f000 fd07 	bl	8008af0 <__multadd>
 80080e2:	4605      	mov	r5, r0
 80080e4:	e7f0      	b.n	80080c8 <_dtoa_r+0xac0>
 80080e6:	9b08      	ldr	r3, [sp, #32]
 80080e8:	2700      	movs	r7, #0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	bfcc      	ite	gt
 80080ee:	461e      	movgt	r6, r3
 80080f0:	2601      	movle	r6, #1
 80080f2:	4456      	add	r6, sl
 80080f4:	4649      	mov	r1, r9
 80080f6:	2201      	movs	r2, #1
 80080f8:	4658      	mov	r0, fp
 80080fa:	f000 feed 	bl	8008ed8 <__lshift>
 80080fe:	4621      	mov	r1, r4
 8008100:	4681      	mov	r9, r0
 8008102:	f000 ff55 	bl	8008fb0 <__mcmp>
 8008106:	2800      	cmp	r0, #0
 8008108:	dcb0      	bgt.n	800806c <_dtoa_r+0xa64>
 800810a:	d102      	bne.n	8008112 <_dtoa_r+0xb0a>
 800810c:	f018 0f01 	tst.w	r8, #1
 8008110:	d1ac      	bne.n	800806c <_dtoa_r+0xa64>
 8008112:	4633      	mov	r3, r6
 8008114:	461e      	mov	r6, r3
 8008116:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800811a:	2a30      	cmp	r2, #48	@ 0x30
 800811c:	d0fa      	beq.n	8008114 <_dtoa_r+0xb0c>
 800811e:	e5be      	b.n	8007c9e <_dtoa_r+0x696>
 8008120:	459a      	cmp	sl, r3
 8008122:	d1a4      	bne.n	800806e <_dtoa_r+0xa66>
 8008124:	9b04      	ldr	r3, [sp, #16]
 8008126:	3301      	adds	r3, #1
 8008128:	9304      	str	r3, [sp, #16]
 800812a:	2331      	movs	r3, #49	@ 0x31
 800812c:	f88a 3000 	strb.w	r3, [sl]
 8008130:	e5b5      	b.n	8007c9e <_dtoa_r+0x696>
 8008132:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008134:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008194 <_dtoa_r+0xb8c>
 8008138:	b11b      	cbz	r3, 8008142 <_dtoa_r+0xb3a>
 800813a:	f10a 0308 	add.w	r3, sl, #8
 800813e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008140:	6013      	str	r3, [r2, #0]
 8008142:	4650      	mov	r0, sl
 8008144:	b017      	add	sp, #92	@ 0x5c
 8008146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800814a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800814c:	2b01      	cmp	r3, #1
 800814e:	f77f ae3d 	ble.w	8007dcc <_dtoa_r+0x7c4>
 8008152:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008154:	930a      	str	r3, [sp, #40]	@ 0x28
 8008156:	2001      	movs	r0, #1
 8008158:	e65b      	b.n	8007e12 <_dtoa_r+0x80a>
 800815a:	9b08      	ldr	r3, [sp, #32]
 800815c:	2b00      	cmp	r3, #0
 800815e:	f77f aed6 	ble.w	8007f0e <_dtoa_r+0x906>
 8008162:	4656      	mov	r6, sl
 8008164:	4621      	mov	r1, r4
 8008166:	4648      	mov	r0, r9
 8008168:	f7ff f9c4 	bl	80074f4 <quorem>
 800816c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008170:	9b08      	ldr	r3, [sp, #32]
 8008172:	f806 8b01 	strb.w	r8, [r6], #1
 8008176:	eba6 020a 	sub.w	r2, r6, sl
 800817a:	4293      	cmp	r3, r2
 800817c:	ddb3      	ble.n	80080e6 <_dtoa_r+0xade>
 800817e:	4649      	mov	r1, r9
 8008180:	2300      	movs	r3, #0
 8008182:	220a      	movs	r2, #10
 8008184:	4658      	mov	r0, fp
 8008186:	f000 fcb3 	bl	8008af0 <__multadd>
 800818a:	4681      	mov	r9, r0
 800818c:	e7ea      	b.n	8008164 <_dtoa_r+0xb5c>
 800818e:	bf00      	nop
 8008190:	0800a401 	.word	0x0800a401
 8008194:	0800a385 	.word	0x0800a385

08008198 <_free_r>:
 8008198:	b538      	push	{r3, r4, r5, lr}
 800819a:	4605      	mov	r5, r0
 800819c:	2900      	cmp	r1, #0
 800819e:	d040      	beq.n	8008222 <_free_r+0x8a>
 80081a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081a4:	1f0c      	subs	r4, r1, #4
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	bfb8      	it	lt
 80081aa:	18e4      	addlt	r4, r4, r3
 80081ac:	f000 fc32 	bl	8008a14 <__malloc_lock>
 80081b0:	4a1c      	ldr	r2, [pc, #112]	@ (8008224 <_free_r+0x8c>)
 80081b2:	6813      	ldr	r3, [r2, #0]
 80081b4:	b933      	cbnz	r3, 80081c4 <_free_r+0x2c>
 80081b6:	6063      	str	r3, [r4, #4]
 80081b8:	6014      	str	r4, [r2, #0]
 80081ba:	4628      	mov	r0, r5
 80081bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80081c0:	f000 bc2e 	b.w	8008a20 <__malloc_unlock>
 80081c4:	42a3      	cmp	r3, r4
 80081c6:	d908      	bls.n	80081da <_free_r+0x42>
 80081c8:	6820      	ldr	r0, [r4, #0]
 80081ca:	1821      	adds	r1, r4, r0
 80081cc:	428b      	cmp	r3, r1
 80081ce:	bf01      	itttt	eq
 80081d0:	6819      	ldreq	r1, [r3, #0]
 80081d2:	685b      	ldreq	r3, [r3, #4]
 80081d4:	1809      	addeq	r1, r1, r0
 80081d6:	6021      	streq	r1, [r4, #0]
 80081d8:	e7ed      	b.n	80081b6 <_free_r+0x1e>
 80081da:	461a      	mov	r2, r3
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	b10b      	cbz	r3, 80081e4 <_free_r+0x4c>
 80081e0:	42a3      	cmp	r3, r4
 80081e2:	d9fa      	bls.n	80081da <_free_r+0x42>
 80081e4:	6811      	ldr	r1, [r2, #0]
 80081e6:	1850      	adds	r0, r2, r1
 80081e8:	42a0      	cmp	r0, r4
 80081ea:	d10b      	bne.n	8008204 <_free_r+0x6c>
 80081ec:	6820      	ldr	r0, [r4, #0]
 80081ee:	4401      	add	r1, r0
 80081f0:	1850      	adds	r0, r2, r1
 80081f2:	4283      	cmp	r3, r0
 80081f4:	6011      	str	r1, [r2, #0]
 80081f6:	d1e0      	bne.n	80081ba <_free_r+0x22>
 80081f8:	6818      	ldr	r0, [r3, #0]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	4408      	add	r0, r1
 80081fe:	6010      	str	r0, [r2, #0]
 8008200:	6053      	str	r3, [r2, #4]
 8008202:	e7da      	b.n	80081ba <_free_r+0x22>
 8008204:	d902      	bls.n	800820c <_free_r+0x74>
 8008206:	230c      	movs	r3, #12
 8008208:	602b      	str	r3, [r5, #0]
 800820a:	e7d6      	b.n	80081ba <_free_r+0x22>
 800820c:	6820      	ldr	r0, [r4, #0]
 800820e:	1821      	adds	r1, r4, r0
 8008210:	428b      	cmp	r3, r1
 8008212:	bf01      	itttt	eq
 8008214:	6819      	ldreq	r1, [r3, #0]
 8008216:	685b      	ldreq	r3, [r3, #4]
 8008218:	1809      	addeq	r1, r1, r0
 800821a:	6021      	streq	r1, [r4, #0]
 800821c:	6063      	str	r3, [r4, #4]
 800821e:	6054      	str	r4, [r2, #4]
 8008220:	e7cb      	b.n	80081ba <_free_r+0x22>
 8008222:	bd38      	pop	{r3, r4, r5, pc}
 8008224:	20000b88 	.word	0x20000b88

08008228 <rshift>:
 8008228:	6903      	ldr	r3, [r0, #16]
 800822a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800822e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008232:	f100 0414 	add.w	r4, r0, #20
 8008236:	ea4f 1261 	mov.w	r2, r1, asr #5
 800823a:	dd46      	ble.n	80082ca <rshift+0xa2>
 800823c:	f011 011f 	ands.w	r1, r1, #31
 8008240:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008244:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008248:	d10c      	bne.n	8008264 <rshift+0x3c>
 800824a:	4629      	mov	r1, r5
 800824c:	f100 0710 	add.w	r7, r0, #16
 8008250:	42b1      	cmp	r1, r6
 8008252:	d335      	bcc.n	80082c0 <rshift+0x98>
 8008254:	1a9b      	subs	r3, r3, r2
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	1eea      	subs	r2, r5, #3
 800825a:	4296      	cmp	r6, r2
 800825c:	bf38      	it	cc
 800825e:	2300      	movcc	r3, #0
 8008260:	4423      	add	r3, r4
 8008262:	e015      	b.n	8008290 <rshift+0x68>
 8008264:	46a1      	mov	r9, r4
 8008266:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800826a:	f1c1 0820 	rsb	r8, r1, #32
 800826e:	40cf      	lsrs	r7, r1
 8008270:	f105 0e04 	add.w	lr, r5, #4
 8008274:	4576      	cmp	r6, lr
 8008276:	46f4      	mov	ip, lr
 8008278:	d816      	bhi.n	80082a8 <rshift+0x80>
 800827a:	1a9a      	subs	r2, r3, r2
 800827c:	0092      	lsls	r2, r2, #2
 800827e:	3a04      	subs	r2, #4
 8008280:	3501      	adds	r5, #1
 8008282:	42ae      	cmp	r6, r5
 8008284:	bf38      	it	cc
 8008286:	2200      	movcc	r2, #0
 8008288:	18a3      	adds	r3, r4, r2
 800828a:	50a7      	str	r7, [r4, r2]
 800828c:	b107      	cbz	r7, 8008290 <rshift+0x68>
 800828e:	3304      	adds	r3, #4
 8008290:	42a3      	cmp	r3, r4
 8008292:	eba3 0204 	sub.w	r2, r3, r4
 8008296:	bf08      	it	eq
 8008298:	2300      	moveq	r3, #0
 800829a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800829e:	6102      	str	r2, [r0, #16]
 80082a0:	bf08      	it	eq
 80082a2:	6143      	streq	r3, [r0, #20]
 80082a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082a8:	f8dc c000 	ldr.w	ip, [ip]
 80082ac:	fa0c fc08 	lsl.w	ip, ip, r8
 80082b0:	ea4c 0707 	orr.w	r7, ip, r7
 80082b4:	f849 7b04 	str.w	r7, [r9], #4
 80082b8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80082bc:	40cf      	lsrs	r7, r1
 80082be:	e7d9      	b.n	8008274 <rshift+0x4c>
 80082c0:	f851 cb04 	ldr.w	ip, [r1], #4
 80082c4:	f847 cf04 	str.w	ip, [r7, #4]!
 80082c8:	e7c2      	b.n	8008250 <rshift+0x28>
 80082ca:	4623      	mov	r3, r4
 80082cc:	e7e0      	b.n	8008290 <rshift+0x68>

080082ce <__hexdig_fun>:
 80082ce:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80082d2:	2b09      	cmp	r3, #9
 80082d4:	d802      	bhi.n	80082dc <__hexdig_fun+0xe>
 80082d6:	3820      	subs	r0, #32
 80082d8:	b2c0      	uxtb	r0, r0
 80082da:	4770      	bx	lr
 80082dc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80082e0:	2b05      	cmp	r3, #5
 80082e2:	d801      	bhi.n	80082e8 <__hexdig_fun+0x1a>
 80082e4:	3847      	subs	r0, #71	@ 0x47
 80082e6:	e7f7      	b.n	80082d8 <__hexdig_fun+0xa>
 80082e8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80082ec:	2b05      	cmp	r3, #5
 80082ee:	d801      	bhi.n	80082f4 <__hexdig_fun+0x26>
 80082f0:	3827      	subs	r0, #39	@ 0x27
 80082f2:	e7f1      	b.n	80082d8 <__hexdig_fun+0xa>
 80082f4:	2000      	movs	r0, #0
 80082f6:	4770      	bx	lr

080082f8 <__gethex>:
 80082f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082fc:	468a      	mov	sl, r1
 80082fe:	4690      	mov	r8, r2
 8008300:	b085      	sub	sp, #20
 8008302:	9302      	str	r3, [sp, #8]
 8008304:	680b      	ldr	r3, [r1, #0]
 8008306:	9001      	str	r0, [sp, #4]
 8008308:	1c9c      	adds	r4, r3, #2
 800830a:	46a1      	mov	r9, r4
 800830c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008310:	2830      	cmp	r0, #48	@ 0x30
 8008312:	d0fa      	beq.n	800830a <__gethex+0x12>
 8008314:	eba9 0303 	sub.w	r3, r9, r3
 8008318:	f1a3 0b02 	sub.w	fp, r3, #2
 800831c:	f7ff ffd7 	bl	80082ce <__hexdig_fun>
 8008320:	4605      	mov	r5, r0
 8008322:	2800      	cmp	r0, #0
 8008324:	d168      	bne.n	80083f8 <__gethex+0x100>
 8008326:	2201      	movs	r2, #1
 8008328:	4648      	mov	r0, r9
 800832a:	499f      	ldr	r1, [pc, #636]	@ (80085a8 <__gethex+0x2b0>)
 800832c:	f7ff f82a 	bl	8007384 <strncmp>
 8008330:	4607      	mov	r7, r0
 8008332:	2800      	cmp	r0, #0
 8008334:	d167      	bne.n	8008406 <__gethex+0x10e>
 8008336:	f899 0001 	ldrb.w	r0, [r9, #1]
 800833a:	4626      	mov	r6, r4
 800833c:	f7ff ffc7 	bl	80082ce <__hexdig_fun>
 8008340:	2800      	cmp	r0, #0
 8008342:	d062      	beq.n	800840a <__gethex+0x112>
 8008344:	4623      	mov	r3, r4
 8008346:	7818      	ldrb	r0, [r3, #0]
 8008348:	4699      	mov	r9, r3
 800834a:	2830      	cmp	r0, #48	@ 0x30
 800834c:	f103 0301 	add.w	r3, r3, #1
 8008350:	d0f9      	beq.n	8008346 <__gethex+0x4e>
 8008352:	f7ff ffbc 	bl	80082ce <__hexdig_fun>
 8008356:	fab0 f580 	clz	r5, r0
 800835a:	f04f 0b01 	mov.w	fp, #1
 800835e:	096d      	lsrs	r5, r5, #5
 8008360:	464a      	mov	r2, r9
 8008362:	4616      	mov	r6, r2
 8008364:	7830      	ldrb	r0, [r6, #0]
 8008366:	3201      	adds	r2, #1
 8008368:	f7ff ffb1 	bl	80082ce <__hexdig_fun>
 800836c:	2800      	cmp	r0, #0
 800836e:	d1f8      	bne.n	8008362 <__gethex+0x6a>
 8008370:	2201      	movs	r2, #1
 8008372:	4630      	mov	r0, r6
 8008374:	498c      	ldr	r1, [pc, #560]	@ (80085a8 <__gethex+0x2b0>)
 8008376:	f7ff f805 	bl	8007384 <strncmp>
 800837a:	2800      	cmp	r0, #0
 800837c:	d13f      	bne.n	80083fe <__gethex+0x106>
 800837e:	b944      	cbnz	r4, 8008392 <__gethex+0x9a>
 8008380:	1c74      	adds	r4, r6, #1
 8008382:	4622      	mov	r2, r4
 8008384:	4616      	mov	r6, r2
 8008386:	7830      	ldrb	r0, [r6, #0]
 8008388:	3201      	adds	r2, #1
 800838a:	f7ff ffa0 	bl	80082ce <__hexdig_fun>
 800838e:	2800      	cmp	r0, #0
 8008390:	d1f8      	bne.n	8008384 <__gethex+0x8c>
 8008392:	1ba4      	subs	r4, r4, r6
 8008394:	00a7      	lsls	r7, r4, #2
 8008396:	7833      	ldrb	r3, [r6, #0]
 8008398:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800839c:	2b50      	cmp	r3, #80	@ 0x50
 800839e:	d13e      	bne.n	800841e <__gethex+0x126>
 80083a0:	7873      	ldrb	r3, [r6, #1]
 80083a2:	2b2b      	cmp	r3, #43	@ 0x2b
 80083a4:	d033      	beq.n	800840e <__gethex+0x116>
 80083a6:	2b2d      	cmp	r3, #45	@ 0x2d
 80083a8:	d034      	beq.n	8008414 <__gethex+0x11c>
 80083aa:	2400      	movs	r4, #0
 80083ac:	1c71      	adds	r1, r6, #1
 80083ae:	7808      	ldrb	r0, [r1, #0]
 80083b0:	f7ff ff8d 	bl	80082ce <__hexdig_fun>
 80083b4:	1e43      	subs	r3, r0, #1
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	2b18      	cmp	r3, #24
 80083ba:	d830      	bhi.n	800841e <__gethex+0x126>
 80083bc:	f1a0 0210 	sub.w	r2, r0, #16
 80083c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80083c4:	f7ff ff83 	bl	80082ce <__hexdig_fun>
 80083c8:	f100 3cff 	add.w	ip, r0, #4294967295
 80083cc:	fa5f fc8c 	uxtb.w	ip, ip
 80083d0:	f1bc 0f18 	cmp.w	ip, #24
 80083d4:	f04f 030a 	mov.w	r3, #10
 80083d8:	d91e      	bls.n	8008418 <__gethex+0x120>
 80083da:	b104      	cbz	r4, 80083de <__gethex+0xe6>
 80083dc:	4252      	negs	r2, r2
 80083de:	4417      	add	r7, r2
 80083e0:	f8ca 1000 	str.w	r1, [sl]
 80083e4:	b1ed      	cbz	r5, 8008422 <__gethex+0x12a>
 80083e6:	f1bb 0f00 	cmp.w	fp, #0
 80083ea:	bf0c      	ite	eq
 80083ec:	2506      	moveq	r5, #6
 80083ee:	2500      	movne	r5, #0
 80083f0:	4628      	mov	r0, r5
 80083f2:	b005      	add	sp, #20
 80083f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f8:	2500      	movs	r5, #0
 80083fa:	462c      	mov	r4, r5
 80083fc:	e7b0      	b.n	8008360 <__gethex+0x68>
 80083fe:	2c00      	cmp	r4, #0
 8008400:	d1c7      	bne.n	8008392 <__gethex+0x9a>
 8008402:	4627      	mov	r7, r4
 8008404:	e7c7      	b.n	8008396 <__gethex+0x9e>
 8008406:	464e      	mov	r6, r9
 8008408:	462f      	mov	r7, r5
 800840a:	2501      	movs	r5, #1
 800840c:	e7c3      	b.n	8008396 <__gethex+0x9e>
 800840e:	2400      	movs	r4, #0
 8008410:	1cb1      	adds	r1, r6, #2
 8008412:	e7cc      	b.n	80083ae <__gethex+0xb6>
 8008414:	2401      	movs	r4, #1
 8008416:	e7fb      	b.n	8008410 <__gethex+0x118>
 8008418:	fb03 0002 	mla	r0, r3, r2, r0
 800841c:	e7ce      	b.n	80083bc <__gethex+0xc4>
 800841e:	4631      	mov	r1, r6
 8008420:	e7de      	b.n	80083e0 <__gethex+0xe8>
 8008422:	4629      	mov	r1, r5
 8008424:	eba6 0309 	sub.w	r3, r6, r9
 8008428:	3b01      	subs	r3, #1
 800842a:	2b07      	cmp	r3, #7
 800842c:	dc0a      	bgt.n	8008444 <__gethex+0x14c>
 800842e:	9801      	ldr	r0, [sp, #4]
 8008430:	f000 fafc 	bl	8008a2c <_Balloc>
 8008434:	4604      	mov	r4, r0
 8008436:	b940      	cbnz	r0, 800844a <__gethex+0x152>
 8008438:	4602      	mov	r2, r0
 800843a:	21e4      	movs	r1, #228	@ 0xe4
 800843c:	4b5b      	ldr	r3, [pc, #364]	@ (80085ac <__gethex+0x2b4>)
 800843e:	485c      	ldr	r0, [pc, #368]	@ (80085b0 <__gethex+0x2b8>)
 8008440:	f001 f9d0 	bl	80097e4 <__assert_func>
 8008444:	3101      	adds	r1, #1
 8008446:	105b      	asrs	r3, r3, #1
 8008448:	e7ef      	b.n	800842a <__gethex+0x132>
 800844a:	2300      	movs	r3, #0
 800844c:	f100 0a14 	add.w	sl, r0, #20
 8008450:	4655      	mov	r5, sl
 8008452:	469b      	mov	fp, r3
 8008454:	45b1      	cmp	r9, r6
 8008456:	d337      	bcc.n	80084c8 <__gethex+0x1d0>
 8008458:	f845 bb04 	str.w	fp, [r5], #4
 800845c:	eba5 050a 	sub.w	r5, r5, sl
 8008460:	10ad      	asrs	r5, r5, #2
 8008462:	6125      	str	r5, [r4, #16]
 8008464:	4658      	mov	r0, fp
 8008466:	f000 fbd3 	bl	8008c10 <__hi0bits>
 800846a:	016d      	lsls	r5, r5, #5
 800846c:	f8d8 6000 	ldr.w	r6, [r8]
 8008470:	1a2d      	subs	r5, r5, r0
 8008472:	42b5      	cmp	r5, r6
 8008474:	dd54      	ble.n	8008520 <__gethex+0x228>
 8008476:	1bad      	subs	r5, r5, r6
 8008478:	4629      	mov	r1, r5
 800847a:	4620      	mov	r0, r4
 800847c:	f000 ff5b 	bl	8009336 <__any_on>
 8008480:	4681      	mov	r9, r0
 8008482:	b178      	cbz	r0, 80084a4 <__gethex+0x1ac>
 8008484:	f04f 0901 	mov.w	r9, #1
 8008488:	1e6b      	subs	r3, r5, #1
 800848a:	1159      	asrs	r1, r3, #5
 800848c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008490:	f003 021f 	and.w	r2, r3, #31
 8008494:	fa09 f202 	lsl.w	r2, r9, r2
 8008498:	420a      	tst	r2, r1
 800849a:	d003      	beq.n	80084a4 <__gethex+0x1ac>
 800849c:	454b      	cmp	r3, r9
 800849e:	dc36      	bgt.n	800850e <__gethex+0x216>
 80084a0:	f04f 0902 	mov.w	r9, #2
 80084a4:	4629      	mov	r1, r5
 80084a6:	4620      	mov	r0, r4
 80084a8:	f7ff febe 	bl	8008228 <rshift>
 80084ac:	442f      	add	r7, r5
 80084ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80084b2:	42bb      	cmp	r3, r7
 80084b4:	da42      	bge.n	800853c <__gethex+0x244>
 80084b6:	4621      	mov	r1, r4
 80084b8:	9801      	ldr	r0, [sp, #4]
 80084ba:	f000 faf7 	bl	8008aac <_Bfree>
 80084be:	2300      	movs	r3, #0
 80084c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80084c2:	25a3      	movs	r5, #163	@ 0xa3
 80084c4:	6013      	str	r3, [r2, #0]
 80084c6:	e793      	b.n	80083f0 <__gethex+0xf8>
 80084c8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80084cc:	2a2e      	cmp	r2, #46	@ 0x2e
 80084ce:	d012      	beq.n	80084f6 <__gethex+0x1fe>
 80084d0:	2b20      	cmp	r3, #32
 80084d2:	d104      	bne.n	80084de <__gethex+0x1e6>
 80084d4:	f845 bb04 	str.w	fp, [r5], #4
 80084d8:	f04f 0b00 	mov.w	fp, #0
 80084dc:	465b      	mov	r3, fp
 80084de:	7830      	ldrb	r0, [r6, #0]
 80084e0:	9303      	str	r3, [sp, #12]
 80084e2:	f7ff fef4 	bl	80082ce <__hexdig_fun>
 80084e6:	9b03      	ldr	r3, [sp, #12]
 80084e8:	f000 000f 	and.w	r0, r0, #15
 80084ec:	4098      	lsls	r0, r3
 80084ee:	ea4b 0b00 	orr.w	fp, fp, r0
 80084f2:	3304      	adds	r3, #4
 80084f4:	e7ae      	b.n	8008454 <__gethex+0x15c>
 80084f6:	45b1      	cmp	r9, r6
 80084f8:	d8ea      	bhi.n	80084d0 <__gethex+0x1d8>
 80084fa:	2201      	movs	r2, #1
 80084fc:	4630      	mov	r0, r6
 80084fe:	492a      	ldr	r1, [pc, #168]	@ (80085a8 <__gethex+0x2b0>)
 8008500:	9303      	str	r3, [sp, #12]
 8008502:	f7fe ff3f 	bl	8007384 <strncmp>
 8008506:	9b03      	ldr	r3, [sp, #12]
 8008508:	2800      	cmp	r0, #0
 800850a:	d1e1      	bne.n	80084d0 <__gethex+0x1d8>
 800850c:	e7a2      	b.n	8008454 <__gethex+0x15c>
 800850e:	4620      	mov	r0, r4
 8008510:	1ea9      	subs	r1, r5, #2
 8008512:	f000 ff10 	bl	8009336 <__any_on>
 8008516:	2800      	cmp	r0, #0
 8008518:	d0c2      	beq.n	80084a0 <__gethex+0x1a8>
 800851a:	f04f 0903 	mov.w	r9, #3
 800851e:	e7c1      	b.n	80084a4 <__gethex+0x1ac>
 8008520:	da09      	bge.n	8008536 <__gethex+0x23e>
 8008522:	1b75      	subs	r5, r6, r5
 8008524:	4621      	mov	r1, r4
 8008526:	462a      	mov	r2, r5
 8008528:	9801      	ldr	r0, [sp, #4]
 800852a:	f000 fcd5 	bl	8008ed8 <__lshift>
 800852e:	4604      	mov	r4, r0
 8008530:	1b7f      	subs	r7, r7, r5
 8008532:	f100 0a14 	add.w	sl, r0, #20
 8008536:	f04f 0900 	mov.w	r9, #0
 800853a:	e7b8      	b.n	80084ae <__gethex+0x1b6>
 800853c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008540:	42bd      	cmp	r5, r7
 8008542:	dd6f      	ble.n	8008624 <__gethex+0x32c>
 8008544:	1bed      	subs	r5, r5, r7
 8008546:	42ae      	cmp	r6, r5
 8008548:	dc34      	bgt.n	80085b4 <__gethex+0x2bc>
 800854a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800854e:	2b02      	cmp	r3, #2
 8008550:	d022      	beq.n	8008598 <__gethex+0x2a0>
 8008552:	2b03      	cmp	r3, #3
 8008554:	d024      	beq.n	80085a0 <__gethex+0x2a8>
 8008556:	2b01      	cmp	r3, #1
 8008558:	d115      	bne.n	8008586 <__gethex+0x28e>
 800855a:	42ae      	cmp	r6, r5
 800855c:	d113      	bne.n	8008586 <__gethex+0x28e>
 800855e:	2e01      	cmp	r6, #1
 8008560:	d10b      	bne.n	800857a <__gethex+0x282>
 8008562:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008566:	9a02      	ldr	r2, [sp, #8]
 8008568:	2562      	movs	r5, #98	@ 0x62
 800856a:	6013      	str	r3, [r2, #0]
 800856c:	2301      	movs	r3, #1
 800856e:	6123      	str	r3, [r4, #16]
 8008570:	f8ca 3000 	str.w	r3, [sl]
 8008574:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008576:	601c      	str	r4, [r3, #0]
 8008578:	e73a      	b.n	80083f0 <__gethex+0xf8>
 800857a:	4620      	mov	r0, r4
 800857c:	1e71      	subs	r1, r6, #1
 800857e:	f000 feda 	bl	8009336 <__any_on>
 8008582:	2800      	cmp	r0, #0
 8008584:	d1ed      	bne.n	8008562 <__gethex+0x26a>
 8008586:	4621      	mov	r1, r4
 8008588:	9801      	ldr	r0, [sp, #4]
 800858a:	f000 fa8f 	bl	8008aac <_Bfree>
 800858e:	2300      	movs	r3, #0
 8008590:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008592:	2550      	movs	r5, #80	@ 0x50
 8008594:	6013      	str	r3, [r2, #0]
 8008596:	e72b      	b.n	80083f0 <__gethex+0xf8>
 8008598:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800859a:	2b00      	cmp	r3, #0
 800859c:	d1f3      	bne.n	8008586 <__gethex+0x28e>
 800859e:	e7e0      	b.n	8008562 <__gethex+0x26a>
 80085a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d1dd      	bne.n	8008562 <__gethex+0x26a>
 80085a6:	e7ee      	b.n	8008586 <__gethex+0x28e>
 80085a8:	0800a1f6 	.word	0x0800a1f6
 80085ac:	0800a401 	.word	0x0800a401
 80085b0:	0800a412 	.word	0x0800a412
 80085b4:	1e6f      	subs	r7, r5, #1
 80085b6:	f1b9 0f00 	cmp.w	r9, #0
 80085ba:	d130      	bne.n	800861e <__gethex+0x326>
 80085bc:	b127      	cbz	r7, 80085c8 <__gethex+0x2d0>
 80085be:	4639      	mov	r1, r7
 80085c0:	4620      	mov	r0, r4
 80085c2:	f000 feb8 	bl	8009336 <__any_on>
 80085c6:	4681      	mov	r9, r0
 80085c8:	2301      	movs	r3, #1
 80085ca:	4629      	mov	r1, r5
 80085cc:	1b76      	subs	r6, r6, r5
 80085ce:	2502      	movs	r5, #2
 80085d0:	117a      	asrs	r2, r7, #5
 80085d2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80085d6:	f007 071f 	and.w	r7, r7, #31
 80085da:	40bb      	lsls	r3, r7
 80085dc:	4213      	tst	r3, r2
 80085de:	4620      	mov	r0, r4
 80085e0:	bf18      	it	ne
 80085e2:	f049 0902 	orrne.w	r9, r9, #2
 80085e6:	f7ff fe1f 	bl	8008228 <rshift>
 80085ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80085ee:	f1b9 0f00 	cmp.w	r9, #0
 80085f2:	d047      	beq.n	8008684 <__gethex+0x38c>
 80085f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d015      	beq.n	8008628 <__gethex+0x330>
 80085fc:	2b03      	cmp	r3, #3
 80085fe:	d017      	beq.n	8008630 <__gethex+0x338>
 8008600:	2b01      	cmp	r3, #1
 8008602:	d109      	bne.n	8008618 <__gethex+0x320>
 8008604:	f019 0f02 	tst.w	r9, #2
 8008608:	d006      	beq.n	8008618 <__gethex+0x320>
 800860a:	f8da 3000 	ldr.w	r3, [sl]
 800860e:	ea49 0903 	orr.w	r9, r9, r3
 8008612:	f019 0f01 	tst.w	r9, #1
 8008616:	d10e      	bne.n	8008636 <__gethex+0x33e>
 8008618:	f045 0510 	orr.w	r5, r5, #16
 800861c:	e032      	b.n	8008684 <__gethex+0x38c>
 800861e:	f04f 0901 	mov.w	r9, #1
 8008622:	e7d1      	b.n	80085c8 <__gethex+0x2d0>
 8008624:	2501      	movs	r5, #1
 8008626:	e7e2      	b.n	80085ee <__gethex+0x2f6>
 8008628:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800862a:	f1c3 0301 	rsb	r3, r3, #1
 800862e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008630:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008632:	2b00      	cmp	r3, #0
 8008634:	d0f0      	beq.n	8008618 <__gethex+0x320>
 8008636:	f04f 0c00 	mov.w	ip, #0
 800863a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800863e:	f104 0314 	add.w	r3, r4, #20
 8008642:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008646:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800864a:	4618      	mov	r0, r3
 800864c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008650:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008654:	d01b      	beq.n	800868e <__gethex+0x396>
 8008656:	3201      	adds	r2, #1
 8008658:	6002      	str	r2, [r0, #0]
 800865a:	2d02      	cmp	r5, #2
 800865c:	f104 0314 	add.w	r3, r4, #20
 8008660:	d13c      	bne.n	80086dc <__gethex+0x3e4>
 8008662:	f8d8 2000 	ldr.w	r2, [r8]
 8008666:	3a01      	subs	r2, #1
 8008668:	42b2      	cmp	r2, r6
 800866a:	d109      	bne.n	8008680 <__gethex+0x388>
 800866c:	2201      	movs	r2, #1
 800866e:	1171      	asrs	r1, r6, #5
 8008670:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008674:	f006 061f 	and.w	r6, r6, #31
 8008678:	fa02 f606 	lsl.w	r6, r2, r6
 800867c:	421e      	tst	r6, r3
 800867e:	d13a      	bne.n	80086f6 <__gethex+0x3fe>
 8008680:	f045 0520 	orr.w	r5, r5, #32
 8008684:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008686:	601c      	str	r4, [r3, #0]
 8008688:	9b02      	ldr	r3, [sp, #8]
 800868a:	601f      	str	r7, [r3, #0]
 800868c:	e6b0      	b.n	80083f0 <__gethex+0xf8>
 800868e:	4299      	cmp	r1, r3
 8008690:	f843 cc04 	str.w	ip, [r3, #-4]
 8008694:	d8d9      	bhi.n	800864a <__gethex+0x352>
 8008696:	68a3      	ldr	r3, [r4, #8]
 8008698:	459b      	cmp	fp, r3
 800869a:	db17      	blt.n	80086cc <__gethex+0x3d4>
 800869c:	6861      	ldr	r1, [r4, #4]
 800869e:	9801      	ldr	r0, [sp, #4]
 80086a0:	3101      	adds	r1, #1
 80086a2:	f000 f9c3 	bl	8008a2c <_Balloc>
 80086a6:	4681      	mov	r9, r0
 80086a8:	b918      	cbnz	r0, 80086b2 <__gethex+0x3ba>
 80086aa:	4602      	mov	r2, r0
 80086ac:	2184      	movs	r1, #132	@ 0x84
 80086ae:	4b19      	ldr	r3, [pc, #100]	@ (8008714 <__gethex+0x41c>)
 80086b0:	e6c5      	b.n	800843e <__gethex+0x146>
 80086b2:	6922      	ldr	r2, [r4, #16]
 80086b4:	f104 010c 	add.w	r1, r4, #12
 80086b8:	3202      	adds	r2, #2
 80086ba:	0092      	lsls	r2, r2, #2
 80086bc:	300c      	adds	r0, #12
 80086be:	f7fe ff00 	bl	80074c2 <memcpy>
 80086c2:	4621      	mov	r1, r4
 80086c4:	9801      	ldr	r0, [sp, #4]
 80086c6:	f000 f9f1 	bl	8008aac <_Bfree>
 80086ca:	464c      	mov	r4, r9
 80086cc:	6923      	ldr	r3, [r4, #16]
 80086ce:	1c5a      	adds	r2, r3, #1
 80086d0:	6122      	str	r2, [r4, #16]
 80086d2:	2201      	movs	r2, #1
 80086d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80086d8:	615a      	str	r2, [r3, #20]
 80086da:	e7be      	b.n	800865a <__gethex+0x362>
 80086dc:	6922      	ldr	r2, [r4, #16]
 80086de:	455a      	cmp	r2, fp
 80086e0:	dd0b      	ble.n	80086fa <__gethex+0x402>
 80086e2:	2101      	movs	r1, #1
 80086e4:	4620      	mov	r0, r4
 80086e6:	f7ff fd9f 	bl	8008228 <rshift>
 80086ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80086ee:	3701      	adds	r7, #1
 80086f0:	42bb      	cmp	r3, r7
 80086f2:	f6ff aee0 	blt.w	80084b6 <__gethex+0x1be>
 80086f6:	2501      	movs	r5, #1
 80086f8:	e7c2      	b.n	8008680 <__gethex+0x388>
 80086fa:	f016 061f 	ands.w	r6, r6, #31
 80086fe:	d0fa      	beq.n	80086f6 <__gethex+0x3fe>
 8008700:	4453      	add	r3, sl
 8008702:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008706:	f000 fa83 	bl	8008c10 <__hi0bits>
 800870a:	f1c6 0620 	rsb	r6, r6, #32
 800870e:	42b0      	cmp	r0, r6
 8008710:	dbe7      	blt.n	80086e2 <__gethex+0x3ea>
 8008712:	e7f0      	b.n	80086f6 <__gethex+0x3fe>
 8008714:	0800a401 	.word	0x0800a401

08008718 <L_shift>:
 8008718:	f1c2 0208 	rsb	r2, r2, #8
 800871c:	0092      	lsls	r2, r2, #2
 800871e:	b570      	push	{r4, r5, r6, lr}
 8008720:	f1c2 0620 	rsb	r6, r2, #32
 8008724:	6843      	ldr	r3, [r0, #4]
 8008726:	6804      	ldr	r4, [r0, #0]
 8008728:	fa03 f506 	lsl.w	r5, r3, r6
 800872c:	432c      	orrs	r4, r5
 800872e:	40d3      	lsrs	r3, r2
 8008730:	6004      	str	r4, [r0, #0]
 8008732:	f840 3f04 	str.w	r3, [r0, #4]!
 8008736:	4288      	cmp	r0, r1
 8008738:	d3f4      	bcc.n	8008724 <L_shift+0xc>
 800873a:	bd70      	pop	{r4, r5, r6, pc}

0800873c <__match>:
 800873c:	b530      	push	{r4, r5, lr}
 800873e:	6803      	ldr	r3, [r0, #0]
 8008740:	3301      	adds	r3, #1
 8008742:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008746:	b914      	cbnz	r4, 800874e <__match+0x12>
 8008748:	6003      	str	r3, [r0, #0]
 800874a:	2001      	movs	r0, #1
 800874c:	bd30      	pop	{r4, r5, pc}
 800874e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008752:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008756:	2d19      	cmp	r5, #25
 8008758:	bf98      	it	ls
 800875a:	3220      	addls	r2, #32
 800875c:	42a2      	cmp	r2, r4
 800875e:	d0f0      	beq.n	8008742 <__match+0x6>
 8008760:	2000      	movs	r0, #0
 8008762:	e7f3      	b.n	800874c <__match+0x10>

08008764 <__hexnan>:
 8008764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008768:	2500      	movs	r5, #0
 800876a:	680b      	ldr	r3, [r1, #0]
 800876c:	4682      	mov	sl, r0
 800876e:	115e      	asrs	r6, r3, #5
 8008770:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008774:	f013 031f 	ands.w	r3, r3, #31
 8008778:	bf18      	it	ne
 800877a:	3604      	addne	r6, #4
 800877c:	1f37      	subs	r7, r6, #4
 800877e:	4690      	mov	r8, r2
 8008780:	46b9      	mov	r9, r7
 8008782:	463c      	mov	r4, r7
 8008784:	46ab      	mov	fp, r5
 8008786:	b087      	sub	sp, #28
 8008788:	6801      	ldr	r1, [r0, #0]
 800878a:	9301      	str	r3, [sp, #4]
 800878c:	f846 5c04 	str.w	r5, [r6, #-4]
 8008790:	9502      	str	r5, [sp, #8]
 8008792:	784a      	ldrb	r2, [r1, #1]
 8008794:	1c4b      	adds	r3, r1, #1
 8008796:	9303      	str	r3, [sp, #12]
 8008798:	b342      	cbz	r2, 80087ec <__hexnan+0x88>
 800879a:	4610      	mov	r0, r2
 800879c:	9105      	str	r1, [sp, #20]
 800879e:	9204      	str	r2, [sp, #16]
 80087a0:	f7ff fd95 	bl	80082ce <__hexdig_fun>
 80087a4:	2800      	cmp	r0, #0
 80087a6:	d151      	bne.n	800884c <__hexnan+0xe8>
 80087a8:	9a04      	ldr	r2, [sp, #16]
 80087aa:	9905      	ldr	r1, [sp, #20]
 80087ac:	2a20      	cmp	r2, #32
 80087ae:	d818      	bhi.n	80087e2 <__hexnan+0x7e>
 80087b0:	9b02      	ldr	r3, [sp, #8]
 80087b2:	459b      	cmp	fp, r3
 80087b4:	dd13      	ble.n	80087de <__hexnan+0x7a>
 80087b6:	454c      	cmp	r4, r9
 80087b8:	d206      	bcs.n	80087c8 <__hexnan+0x64>
 80087ba:	2d07      	cmp	r5, #7
 80087bc:	dc04      	bgt.n	80087c8 <__hexnan+0x64>
 80087be:	462a      	mov	r2, r5
 80087c0:	4649      	mov	r1, r9
 80087c2:	4620      	mov	r0, r4
 80087c4:	f7ff ffa8 	bl	8008718 <L_shift>
 80087c8:	4544      	cmp	r4, r8
 80087ca:	d952      	bls.n	8008872 <__hexnan+0x10e>
 80087cc:	2300      	movs	r3, #0
 80087ce:	f1a4 0904 	sub.w	r9, r4, #4
 80087d2:	f844 3c04 	str.w	r3, [r4, #-4]
 80087d6:	461d      	mov	r5, r3
 80087d8:	464c      	mov	r4, r9
 80087da:	f8cd b008 	str.w	fp, [sp, #8]
 80087de:	9903      	ldr	r1, [sp, #12]
 80087e0:	e7d7      	b.n	8008792 <__hexnan+0x2e>
 80087e2:	2a29      	cmp	r2, #41	@ 0x29
 80087e4:	d157      	bne.n	8008896 <__hexnan+0x132>
 80087e6:	3102      	adds	r1, #2
 80087e8:	f8ca 1000 	str.w	r1, [sl]
 80087ec:	f1bb 0f00 	cmp.w	fp, #0
 80087f0:	d051      	beq.n	8008896 <__hexnan+0x132>
 80087f2:	454c      	cmp	r4, r9
 80087f4:	d206      	bcs.n	8008804 <__hexnan+0xa0>
 80087f6:	2d07      	cmp	r5, #7
 80087f8:	dc04      	bgt.n	8008804 <__hexnan+0xa0>
 80087fa:	462a      	mov	r2, r5
 80087fc:	4649      	mov	r1, r9
 80087fe:	4620      	mov	r0, r4
 8008800:	f7ff ff8a 	bl	8008718 <L_shift>
 8008804:	4544      	cmp	r4, r8
 8008806:	d936      	bls.n	8008876 <__hexnan+0x112>
 8008808:	4623      	mov	r3, r4
 800880a:	f1a8 0204 	sub.w	r2, r8, #4
 800880e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008812:	429f      	cmp	r7, r3
 8008814:	f842 1f04 	str.w	r1, [r2, #4]!
 8008818:	d2f9      	bcs.n	800880e <__hexnan+0xaa>
 800881a:	1b3b      	subs	r3, r7, r4
 800881c:	f023 0303 	bic.w	r3, r3, #3
 8008820:	3304      	adds	r3, #4
 8008822:	3401      	adds	r4, #1
 8008824:	3e03      	subs	r6, #3
 8008826:	42b4      	cmp	r4, r6
 8008828:	bf88      	it	hi
 800882a:	2304      	movhi	r3, #4
 800882c:	2200      	movs	r2, #0
 800882e:	4443      	add	r3, r8
 8008830:	f843 2b04 	str.w	r2, [r3], #4
 8008834:	429f      	cmp	r7, r3
 8008836:	d2fb      	bcs.n	8008830 <__hexnan+0xcc>
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	b91b      	cbnz	r3, 8008844 <__hexnan+0xe0>
 800883c:	4547      	cmp	r7, r8
 800883e:	d128      	bne.n	8008892 <__hexnan+0x12e>
 8008840:	2301      	movs	r3, #1
 8008842:	603b      	str	r3, [r7, #0]
 8008844:	2005      	movs	r0, #5
 8008846:	b007      	add	sp, #28
 8008848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800884c:	3501      	adds	r5, #1
 800884e:	2d08      	cmp	r5, #8
 8008850:	f10b 0b01 	add.w	fp, fp, #1
 8008854:	dd06      	ble.n	8008864 <__hexnan+0x100>
 8008856:	4544      	cmp	r4, r8
 8008858:	d9c1      	bls.n	80087de <__hexnan+0x7a>
 800885a:	2300      	movs	r3, #0
 800885c:	2501      	movs	r5, #1
 800885e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008862:	3c04      	subs	r4, #4
 8008864:	6822      	ldr	r2, [r4, #0]
 8008866:	f000 000f 	and.w	r0, r0, #15
 800886a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800886e:	6020      	str	r0, [r4, #0]
 8008870:	e7b5      	b.n	80087de <__hexnan+0x7a>
 8008872:	2508      	movs	r5, #8
 8008874:	e7b3      	b.n	80087de <__hexnan+0x7a>
 8008876:	9b01      	ldr	r3, [sp, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d0dd      	beq.n	8008838 <__hexnan+0xd4>
 800887c:	f04f 32ff 	mov.w	r2, #4294967295
 8008880:	f1c3 0320 	rsb	r3, r3, #32
 8008884:	40da      	lsrs	r2, r3
 8008886:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800888a:	4013      	ands	r3, r2
 800888c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008890:	e7d2      	b.n	8008838 <__hexnan+0xd4>
 8008892:	3f04      	subs	r7, #4
 8008894:	e7d0      	b.n	8008838 <__hexnan+0xd4>
 8008896:	2004      	movs	r0, #4
 8008898:	e7d5      	b.n	8008846 <__hexnan+0xe2>
	...

0800889c <malloc>:
 800889c:	4b02      	ldr	r3, [pc, #8]	@ (80088a8 <malloc+0xc>)
 800889e:	4601      	mov	r1, r0
 80088a0:	6818      	ldr	r0, [r3, #0]
 80088a2:	f000 b825 	b.w	80088f0 <_malloc_r>
 80088a6:	bf00      	nop
 80088a8:	20000198 	.word	0x20000198

080088ac <sbrk_aligned>:
 80088ac:	b570      	push	{r4, r5, r6, lr}
 80088ae:	4e0f      	ldr	r6, [pc, #60]	@ (80088ec <sbrk_aligned+0x40>)
 80088b0:	460c      	mov	r4, r1
 80088b2:	6831      	ldr	r1, [r6, #0]
 80088b4:	4605      	mov	r5, r0
 80088b6:	b911      	cbnz	r1, 80088be <sbrk_aligned+0x12>
 80088b8:	f000 ff84 	bl	80097c4 <_sbrk_r>
 80088bc:	6030      	str	r0, [r6, #0]
 80088be:	4621      	mov	r1, r4
 80088c0:	4628      	mov	r0, r5
 80088c2:	f000 ff7f 	bl	80097c4 <_sbrk_r>
 80088c6:	1c43      	adds	r3, r0, #1
 80088c8:	d103      	bne.n	80088d2 <sbrk_aligned+0x26>
 80088ca:	f04f 34ff 	mov.w	r4, #4294967295
 80088ce:	4620      	mov	r0, r4
 80088d0:	bd70      	pop	{r4, r5, r6, pc}
 80088d2:	1cc4      	adds	r4, r0, #3
 80088d4:	f024 0403 	bic.w	r4, r4, #3
 80088d8:	42a0      	cmp	r0, r4
 80088da:	d0f8      	beq.n	80088ce <sbrk_aligned+0x22>
 80088dc:	1a21      	subs	r1, r4, r0
 80088de:	4628      	mov	r0, r5
 80088e0:	f000 ff70 	bl	80097c4 <_sbrk_r>
 80088e4:	3001      	adds	r0, #1
 80088e6:	d1f2      	bne.n	80088ce <sbrk_aligned+0x22>
 80088e8:	e7ef      	b.n	80088ca <sbrk_aligned+0x1e>
 80088ea:	bf00      	nop
 80088ec:	20000b84 	.word	0x20000b84

080088f0 <_malloc_r>:
 80088f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f4:	1ccd      	adds	r5, r1, #3
 80088f6:	f025 0503 	bic.w	r5, r5, #3
 80088fa:	3508      	adds	r5, #8
 80088fc:	2d0c      	cmp	r5, #12
 80088fe:	bf38      	it	cc
 8008900:	250c      	movcc	r5, #12
 8008902:	2d00      	cmp	r5, #0
 8008904:	4606      	mov	r6, r0
 8008906:	db01      	blt.n	800890c <_malloc_r+0x1c>
 8008908:	42a9      	cmp	r1, r5
 800890a:	d904      	bls.n	8008916 <_malloc_r+0x26>
 800890c:	230c      	movs	r3, #12
 800890e:	6033      	str	r3, [r6, #0]
 8008910:	2000      	movs	r0, #0
 8008912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008916:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80089ec <_malloc_r+0xfc>
 800891a:	f000 f87b 	bl	8008a14 <__malloc_lock>
 800891e:	f8d8 3000 	ldr.w	r3, [r8]
 8008922:	461c      	mov	r4, r3
 8008924:	bb44      	cbnz	r4, 8008978 <_malloc_r+0x88>
 8008926:	4629      	mov	r1, r5
 8008928:	4630      	mov	r0, r6
 800892a:	f7ff ffbf 	bl	80088ac <sbrk_aligned>
 800892e:	1c43      	adds	r3, r0, #1
 8008930:	4604      	mov	r4, r0
 8008932:	d158      	bne.n	80089e6 <_malloc_r+0xf6>
 8008934:	f8d8 4000 	ldr.w	r4, [r8]
 8008938:	4627      	mov	r7, r4
 800893a:	2f00      	cmp	r7, #0
 800893c:	d143      	bne.n	80089c6 <_malloc_r+0xd6>
 800893e:	2c00      	cmp	r4, #0
 8008940:	d04b      	beq.n	80089da <_malloc_r+0xea>
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	4639      	mov	r1, r7
 8008946:	4630      	mov	r0, r6
 8008948:	eb04 0903 	add.w	r9, r4, r3
 800894c:	f000 ff3a 	bl	80097c4 <_sbrk_r>
 8008950:	4581      	cmp	r9, r0
 8008952:	d142      	bne.n	80089da <_malloc_r+0xea>
 8008954:	6821      	ldr	r1, [r4, #0]
 8008956:	4630      	mov	r0, r6
 8008958:	1a6d      	subs	r5, r5, r1
 800895a:	4629      	mov	r1, r5
 800895c:	f7ff ffa6 	bl	80088ac <sbrk_aligned>
 8008960:	3001      	adds	r0, #1
 8008962:	d03a      	beq.n	80089da <_malloc_r+0xea>
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	442b      	add	r3, r5
 8008968:	6023      	str	r3, [r4, #0]
 800896a:	f8d8 3000 	ldr.w	r3, [r8]
 800896e:	685a      	ldr	r2, [r3, #4]
 8008970:	bb62      	cbnz	r2, 80089cc <_malloc_r+0xdc>
 8008972:	f8c8 7000 	str.w	r7, [r8]
 8008976:	e00f      	b.n	8008998 <_malloc_r+0xa8>
 8008978:	6822      	ldr	r2, [r4, #0]
 800897a:	1b52      	subs	r2, r2, r5
 800897c:	d420      	bmi.n	80089c0 <_malloc_r+0xd0>
 800897e:	2a0b      	cmp	r2, #11
 8008980:	d917      	bls.n	80089b2 <_malloc_r+0xc2>
 8008982:	1961      	adds	r1, r4, r5
 8008984:	42a3      	cmp	r3, r4
 8008986:	6025      	str	r5, [r4, #0]
 8008988:	bf18      	it	ne
 800898a:	6059      	strne	r1, [r3, #4]
 800898c:	6863      	ldr	r3, [r4, #4]
 800898e:	bf08      	it	eq
 8008990:	f8c8 1000 	streq.w	r1, [r8]
 8008994:	5162      	str	r2, [r4, r5]
 8008996:	604b      	str	r3, [r1, #4]
 8008998:	4630      	mov	r0, r6
 800899a:	f000 f841 	bl	8008a20 <__malloc_unlock>
 800899e:	f104 000b 	add.w	r0, r4, #11
 80089a2:	1d23      	adds	r3, r4, #4
 80089a4:	f020 0007 	bic.w	r0, r0, #7
 80089a8:	1ac2      	subs	r2, r0, r3
 80089aa:	bf1c      	itt	ne
 80089ac:	1a1b      	subne	r3, r3, r0
 80089ae:	50a3      	strne	r3, [r4, r2]
 80089b0:	e7af      	b.n	8008912 <_malloc_r+0x22>
 80089b2:	6862      	ldr	r2, [r4, #4]
 80089b4:	42a3      	cmp	r3, r4
 80089b6:	bf0c      	ite	eq
 80089b8:	f8c8 2000 	streq.w	r2, [r8]
 80089bc:	605a      	strne	r2, [r3, #4]
 80089be:	e7eb      	b.n	8008998 <_malloc_r+0xa8>
 80089c0:	4623      	mov	r3, r4
 80089c2:	6864      	ldr	r4, [r4, #4]
 80089c4:	e7ae      	b.n	8008924 <_malloc_r+0x34>
 80089c6:	463c      	mov	r4, r7
 80089c8:	687f      	ldr	r7, [r7, #4]
 80089ca:	e7b6      	b.n	800893a <_malloc_r+0x4a>
 80089cc:	461a      	mov	r2, r3
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	42a3      	cmp	r3, r4
 80089d2:	d1fb      	bne.n	80089cc <_malloc_r+0xdc>
 80089d4:	2300      	movs	r3, #0
 80089d6:	6053      	str	r3, [r2, #4]
 80089d8:	e7de      	b.n	8008998 <_malloc_r+0xa8>
 80089da:	230c      	movs	r3, #12
 80089dc:	4630      	mov	r0, r6
 80089de:	6033      	str	r3, [r6, #0]
 80089e0:	f000 f81e 	bl	8008a20 <__malloc_unlock>
 80089e4:	e794      	b.n	8008910 <_malloc_r+0x20>
 80089e6:	6005      	str	r5, [r0, #0]
 80089e8:	e7d6      	b.n	8008998 <_malloc_r+0xa8>
 80089ea:	bf00      	nop
 80089ec:	20000b88 	.word	0x20000b88

080089f0 <__ascii_mbtowc>:
 80089f0:	b082      	sub	sp, #8
 80089f2:	b901      	cbnz	r1, 80089f6 <__ascii_mbtowc+0x6>
 80089f4:	a901      	add	r1, sp, #4
 80089f6:	b142      	cbz	r2, 8008a0a <__ascii_mbtowc+0x1a>
 80089f8:	b14b      	cbz	r3, 8008a0e <__ascii_mbtowc+0x1e>
 80089fa:	7813      	ldrb	r3, [r2, #0]
 80089fc:	600b      	str	r3, [r1, #0]
 80089fe:	7812      	ldrb	r2, [r2, #0]
 8008a00:	1e10      	subs	r0, r2, #0
 8008a02:	bf18      	it	ne
 8008a04:	2001      	movne	r0, #1
 8008a06:	b002      	add	sp, #8
 8008a08:	4770      	bx	lr
 8008a0a:	4610      	mov	r0, r2
 8008a0c:	e7fb      	b.n	8008a06 <__ascii_mbtowc+0x16>
 8008a0e:	f06f 0001 	mvn.w	r0, #1
 8008a12:	e7f8      	b.n	8008a06 <__ascii_mbtowc+0x16>

08008a14 <__malloc_lock>:
 8008a14:	4801      	ldr	r0, [pc, #4]	@ (8008a1c <__malloc_lock+0x8>)
 8008a16:	f7fe bd3c 	b.w	8007492 <__retarget_lock_acquire_recursive>
 8008a1a:	bf00      	nop
 8008a1c:	20000b80 	.word	0x20000b80

08008a20 <__malloc_unlock>:
 8008a20:	4801      	ldr	r0, [pc, #4]	@ (8008a28 <__malloc_unlock+0x8>)
 8008a22:	f7fe bd37 	b.w	8007494 <__retarget_lock_release_recursive>
 8008a26:	bf00      	nop
 8008a28:	20000b80 	.word	0x20000b80

08008a2c <_Balloc>:
 8008a2c:	b570      	push	{r4, r5, r6, lr}
 8008a2e:	69c6      	ldr	r6, [r0, #28]
 8008a30:	4604      	mov	r4, r0
 8008a32:	460d      	mov	r5, r1
 8008a34:	b976      	cbnz	r6, 8008a54 <_Balloc+0x28>
 8008a36:	2010      	movs	r0, #16
 8008a38:	f7ff ff30 	bl	800889c <malloc>
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	61e0      	str	r0, [r4, #28]
 8008a40:	b920      	cbnz	r0, 8008a4c <_Balloc+0x20>
 8008a42:	216b      	movs	r1, #107	@ 0x6b
 8008a44:	4b17      	ldr	r3, [pc, #92]	@ (8008aa4 <_Balloc+0x78>)
 8008a46:	4818      	ldr	r0, [pc, #96]	@ (8008aa8 <_Balloc+0x7c>)
 8008a48:	f000 fecc 	bl	80097e4 <__assert_func>
 8008a4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008a50:	6006      	str	r6, [r0, #0]
 8008a52:	60c6      	str	r6, [r0, #12]
 8008a54:	69e6      	ldr	r6, [r4, #28]
 8008a56:	68f3      	ldr	r3, [r6, #12]
 8008a58:	b183      	cbz	r3, 8008a7c <_Balloc+0x50>
 8008a5a:	69e3      	ldr	r3, [r4, #28]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008a62:	b9b8      	cbnz	r0, 8008a94 <_Balloc+0x68>
 8008a64:	2101      	movs	r1, #1
 8008a66:	fa01 f605 	lsl.w	r6, r1, r5
 8008a6a:	1d72      	adds	r2, r6, #5
 8008a6c:	4620      	mov	r0, r4
 8008a6e:	0092      	lsls	r2, r2, #2
 8008a70:	f000 fed6 	bl	8009820 <_calloc_r>
 8008a74:	b160      	cbz	r0, 8008a90 <_Balloc+0x64>
 8008a76:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008a7a:	e00e      	b.n	8008a9a <_Balloc+0x6e>
 8008a7c:	2221      	movs	r2, #33	@ 0x21
 8008a7e:	2104      	movs	r1, #4
 8008a80:	4620      	mov	r0, r4
 8008a82:	f000 fecd 	bl	8009820 <_calloc_r>
 8008a86:	69e3      	ldr	r3, [r4, #28]
 8008a88:	60f0      	str	r0, [r6, #12]
 8008a8a:	68db      	ldr	r3, [r3, #12]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1e4      	bne.n	8008a5a <_Balloc+0x2e>
 8008a90:	2000      	movs	r0, #0
 8008a92:	bd70      	pop	{r4, r5, r6, pc}
 8008a94:	6802      	ldr	r2, [r0, #0]
 8008a96:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008aa0:	e7f7      	b.n	8008a92 <_Balloc+0x66>
 8008aa2:	bf00      	nop
 8008aa4:	0800a392 	.word	0x0800a392
 8008aa8:	0800a472 	.word	0x0800a472

08008aac <_Bfree>:
 8008aac:	b570      	push	{r4, r5, r6, lr}
 8008aae:	69c6      	ldr	r6, [r0, #28]
 8008ab0:	4605      	mov	r5, r0
 8008ab2:	460c      	mov	r4, r1
 8008ab4:	b976      	cbnz	r6, 8008ad4 <_Bfree+0x28>
 8008ab6:	2010      	movs	r0, #16
 8008ab8:	f7ff fef0 	bl	800889c <malloc>
 8008abc:	4602      	mov	r2, r0
 8008abe:	61e8      	str	r0, [r5, #28]
 8008ac0:	b920      	cbnz	r0, 8008acc <_Bfree+0x20>
 8008ac2:	218f      	movs	r1, #143	@ 0x8f
 8008ac4:	4b08      	ldr	r3, [pc, #32]	@ (8008ae8 <_Bfree+0x3c>)
 8008ac6:	4809      	ldr	r0, [pc, #36]	@ (8008aec <_Bfree+0x40>)
 8008ac8:	f000 fe8c 	bl	80097e4 <__assert_func>
 8008acc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008ad0:	6006      	str	r6, [r0, #0]
 8008ad2:	60c6      	str	r6, [r0, #12]
 8008ad4:	b13c      	cbz	r4, 8008ae6 <_Bfree+0x3a>
 8008ad6:	69eb      	ldr	r3, [r5, #28]
 8008ad8:	6862      	ldr	r2, [r4, #4]
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008ae0:	6021      	str	r1, [r4, #0]
 8008ae2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008ae6:	bd70      	pop	{r4, r5, r6, pc}
 8008ae8:	0800a392 	.word	0x0800a392
 8008aec:	0800a472 	.word	0x0800a472

08008af0 <__multadd>:
 8008af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008af4:	4607      	mov	r7, r0
 8008af6:	460c      	mov	r4, r1
 8008af8:	461e      	mov	r6, r3
 8008afa:	2000      	movs	r0, #0
 8008afc:	690d      	ldr	r5, [r1, #16]
 8008afe:	f101 0c14 	add.w	ip, r1, #20
 8008b02:	f8dc 3000 	ldr.w	r3, [ip]
 8008b06:	3001      	adds	r0, #1
 8008b08:	b299      	uxth	r1, r3
 8008b0a:	fb02 6101 	mla	r1, r2, r1, r6
 8008b0e:	0c1e      	lsrs	r6, r3, #16
 8008b10:	0c0b      	lsrs	r3, r1, #16
 8008b12:	fb02 3306 	mla	r3, r2, r6, r3
 8008b16:	b289      	uxth	r1, r1
 8008b18:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008b1c:	4285      	cmp	r5, r0
 8008b1e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008b22:	f84c 1b04 	str.w	r1, [ip], #4
 8008b26:	dcec      	bgt.n	8008b02 <__multadd+0x12>
 8008b28:	b30e      	cbz	r6, 8008b6e <__multadd+0x7e>
 8008b2a:	68a3      	ldr	r3, [r4, #8]
 8008b2c:	42ab      	cmp	r3, r5
 8008b2e:	dc19      	bgt.n	8008b64 <__multadd+0x74>
 8008b30:	6861      	ldr	r1, [r4, #4]
 8008b32:	4638      	mov	r0, r7
 8008b34:	3101      	adds	r1, #1
 8008b36:	f7ff ff79 	bl	8008a2c <_Balloc>
 8008b3a:	4680      	mov	r8, r0
 8008b3c:	b928      	cbnz	r0, 8008b4a <__multadd+0x5a>
 8008b3e:	4602      	mov	r2, r0
 8008b40:	21ba      	movs	r1, #186	@ 0xba
 8008b42:	4b0c      	ldr	r3, [pc, #48]	@ (8008b74 <__multadd+0x84>)
 8008b44:	480c      	ldr	r0, [pc, #48]	@ (8008b78 <__multadd+0x88>)
 8008b46:	f000 fe4d 	bl	80097e4 <__assert_func>
 8008b4a:	6922      	ldr	r2, [r4, #16]
 8008b4c:	f104 010c 	add.w	r1, r4, #12
 8008b50:	3202      	adds	r2, #2
 8008b52:	0092      	lsls	r2, r2, #2
 8008b54:	300c      	adds	r0, #12
 8008b56:	f7fe fcb4 	bl	80074c2 <memcpy>
 8008b5a:	4621      	mov	r1, r4
 8008b5c:	4638      	mov	r0, r7
 8008b5e:	f7ff ffa5 	bl	8008aac <_Bfree>
 8008b62:	4644      	mov	r4, r8
 8008b64:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008b68:	3501      	adds	r5, #1
 8008b6a:	615e      	str	r6, [r3, #20]
 8008b6c:	6125      	str	r5, [r4, #16]
 8008b6e:	4620      	mov	r0, r4
 8008b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b74:	0800a401 	.word	0x0800a401
 8008b78:	0800a472 	.word	0x0800a472

08008b7c <__s2b>:
 8008b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b80:	4615      	mov	r5, r2
 8008b82:	2209      	movs	r2, #9
 8008b84:	461f      	mov	r7, r3
 8008b86:	3308      	adds	r3, #8
 8008b88:	460c      	mov	r4, r1
 8008b8a:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b8e:	4606      	mov	r6, r0
 8008b90:	2201      	movs	r2, #1
 8008b92:	2100      	movs	r1, #0
 8008b94:	429a      	cmp	r2, r3
 8008b96:	db09      	blt.n	8008bac <__s2b+0x30>
 8008b98:	4630      	mov	r0, r6
 8008b9a:	f7ff ff47 	bl	8008a2c <_Balloc>
 8008b9e:	b940      	cbnz	r0, 8008bb2 <__s2b+0x36>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	21d3      	movs	r1, #211	@ 0xd3
 8008ba4:	4b18      	ldr	r3, [pc, #96]	@ (8008c08 <__s2b+0x8c>)
 8008ba6:	4819      	ldr	r0, [pc, #100]	@ (8008c0c <__s2b+0x90>)
 8008ba8:	f000 fe1c 	bl	80097e4 <__assert_func>
 8008bac:	0052      	lsls	r2, r2, #1
 8008bae:	3101      	adds	r1, #1
 8008bb0:	e7f0      	b.n	8008b94 <__s2b+0x18>
 8008bb2:	9b08      	ldr	r3, [sp, #32]
 8008bb4:	2d09      	cmp	r5, #9
 8008bb6:	6143      	str	r3, [r0, #20]
 8008bb8:	f04f 0301 	mov.w	r3, #1
 8008bbc:	6103      	str	r3, [r0, #16]
 8008bbe:	dd16      	ble.n	8008bee <__s2b+0x72>
 8008bc0:	f104 0909 	add.w	r9, r4, #9
 8008bc4:	46c8      	mov	r8, r9
 8008bc6:	442c      	add	r4, r5
 8008bc8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008bcc:	4601      	mov	r1, r0
 8008bce:	220a      	movs	r2, #10
 8008bd0:	4630      	mov	r0, r6
 8008bd2:	3b30      	subs	r3, #48	@ 0x30
 8008bd4:	f7ff ff8c 	bl	8008af0 <__multadd>
 8008bd8:	45a0      	cmp	r8, r4
 8008bda:	d1f5      	bne.n	8008bc8 <__s2b+0x4c>
 8008bdc:	f1a5 0408 	sub.w	r4, r5, #8
 8008be0:	444c      	add	r4, r9
 8008be2:	1b2d      	subs	r5, r5, r4
 8008be4:	1963      	adds	r3, r4, r5
 8008be6:	42bb      	cmp	r3, r7
 8008be8:	db04      	blt.n	8008bf4 <__s2b+0x78>
 8008bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bee:	2509      	movs	r5, #9
 8008bf0:	340a      	adds	r4, #10
 8008bf2:	e7f6      	b.n	8008be2 <__s2b+0x66>
 8008bf4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008bf8:	4601      	mov	r1, r0
 8008bfa:	220a      	movs	r2, #10
 8008bfc:	4630      	mov	r0, r6
 8008bfe:	3b30      	subs	r3, #48	@ 0x30
 8008c00:	f7ff ff76 	bl	8008af0 <__multadd>
 8008c04:	e7ee      	b.n	8008be4 <__s2b+0x68>
 8008c06:	bf00      	nop
 8008c08:	0800a401 	.word	0x0800a401
 8008c0c:	0800a472 	.word	0x0800a472

08008c10 <__hi0bits>:
 8008c10:	4603      	mov	r3, r0
 8008c12:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008c16:	bf3a      	itte	cc
 8008c18:	0403      	lslcc	r3, r0, #16
 8008c1a:	2010      	movcc	r0, #16
 8008c1c:	2000      	movcs	r0, #0
 8008c1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008c22:	bf3c      	itt	cc
 8008c24:	021b      	lslcc	r3, r3, #8
 8008c26:	3008      	addcc	r0, #8
 8008c28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008c2c:	bf3c      	itt	cc
 8008c2e:	011b      	lslcc	r3, r3, #4
 8008c30:	3004      	addcc	r0, #4
 8008c32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c36:	bf3c      	itt	cc
 8008c38:	009b      	lslcc	r3, r3, #2
 8008c3a:	3002      	addcc	r0, #2
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	db05      	blt.n	8008c4c <__hi0bits+0x3c>
 8008c40:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008c44:	f100 0001 	add.w	r0, r0, #1
 8008c48:	bf08      	it	eq
 8008c4a:	2020      	moveq	r0, #32
 8008c4c:	4770      	bx	lr

08008c4e <__lo0bits>:
 8008c4e:	6803      	ldr	r3, [r0, #0]
 8008c50:	4602      	mov	r2, r0
 8008c52:	f013 0007 	ands.w	r0, r3, #7
 8008c56:	d00b      	beq.n	8008c70 <__lo0bits+0x22>
 8008c58:	07d9      	lsls	r1, r3, #31
 8008c5a:	d421      	bmi.n	8008ca0 <__lo0bits+0x52>
 8008c5c:	0798      	lsls	r0, r3, #30
 8008c5e:	bf49      	itett	mi
 8008c60:	085b      	lsrmi	r3, r3, #1
 8008c62:	089b      	lsrpl	r3, r3, #2
 8008c64:	2001      	movmi	r0, #1
 8008c66:	6013      	strmi	r3, [r2, #0]
 8008c68:	bf5c      	itt	pl
 8008c6a:	2002      	movpl	r0, #2
 8008c6c:	6013      	strpl	r3, [r2, #0]
 8008c6e:	4770      	bx	lr
 8008c70:	b299      	uxth	r1, r3
 8008c72:	b909      	cbnz	r1, 8008c78 <__lo0bits+0x2a>
 8008c74:	2010      	movs	r0, #16
 8008c76:	0c1b      	lsrs	r3, r3, #16
 8008c78:	b2d9      	uxtb	r1, r3
 8008c7a:	b909      	cbnz	r1, 8008c80 <__lo0bits+0x32>
 8008c7c:	3008      	adds	r0, #8
 8008c7e:	0a1b      	lsrs	r3, r3, #8
 8008c80:	0719      	lsls	r1, r3, #28
 8008c82:	bf04      	itt	eq
 8008c84:	091b      	lsreq	r3, r3, #4
 8008c86:	3004      	addeq	r0, #4
 8008c88:	0799      	lsls	r1, r3, #30
 8008c8a:	bf04      	itt	eq
 8008c8c:	089b      	lsreq	r3, r3, #2
 8008c8e:	3002      	addeq	r0, #2
 8008c90:	07d9      	lsls	r1, r3, #31
 8008c92:	d403      	bmi.n	8008c9c <__lo0bits+0x4e>
 8008c94:	085b      	lsrs	r3, r3, #1
 8008c96:	f100 0001 	add.w	r0, r0, #1
 8008c9a:	d003      	beq.n	8008ca4 <__lo0bits+0x56>
 8008c9c:	6013      	str	r3, [r2, #0]
 8008c9e:	4770      	bx	lr
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	4770      	bx	lr
 8008ca4:	2020      	movs	r0, #32
 8008ca6:	4770      	bx	lr

08008ca8 <__i2b>:
 8008ca8:	b510      	push	{r4, lr}
 8008caa:	460c      	mov	r4, r1
 8008cac:	2101      	movs	r1, #1
 8008cae:	f7ff febd 	bl	8008a2c <_Balloc>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	b928      	cbnz	r0, 8008cc2 <__i2b+0x1a>
 8008cb6:	f240 1145 	movw	r1, #325	@ 0x145
 8008cba:	4b04      	ldr	r3, [pc, #16]	@ (8008ccc <__i2b+0x24>)
 8008cbc:	4804      	ldr	r0, [pc, #16]	@ (8008cd0 <__i2b+0x28>)
 8008cbe:	f000 fd91 	bl	80097e4 <__assert_func>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	6144      	str	r4, [r0, #20]
 8008cc6:	6103      	str	r3, [r0, #16]
 8008cc8:	bd10      	pop	{r4, pc}
 8008cca:	bf00      	nop
 8008ccc:	0800a401 	.word	0x0800a401
 8008cd0:	0800a472 	.word	0x0800a472

08008cd4 <__multiply>:
 8008cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd8:	4614      	mov	r4, r2
 8008cda:	690a      	ldr	r2, [r1, #16]
 8008cdc:	6923      	ldr	r3, [r4, #16]
 8008cde:	460f      	mov	r7, r1
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	bfa2      	ittt	ge
 8008ce4:	4623      	movge	r3, r4
 8008ce6:	460c      	movge	r4, r1
 8008ce8:	461f      	movge	r7, r3
 8008cea:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008cee:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008cf2:	68a3      	ldr	r3, [r4, #8]
 8008cf4:	6861      	ldr	r1, [r4, #4]
 8008cf6:	eb0a 0609 	add.w	r6, sl, r9
 8008cfa:	42b3      	cmp	r3, r6
 8008cfc:	b085      	sub	sp, #20
 8008cfe:	bfb8      	it	lt
 8008d00:	3101      	addlt	r1, #1
 8008d02:	f7ff fe93 	bl	8008a2c <_Balloc>
 8008d06:	b930      	cbnz	r0, 8008d16 <__multiply+0x42>
 8008d08:	4602      	mov	r2, r0
 8008d0a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008d0e:	4b43      	ldr	r3, [pc, #268]	@ (8008e1c <__multiply+0x148>)
 8008d10:	4843      	ldr	r0, [pc, #268]	@ (8008e20 <__multiply+0x14c>)
 8008d12:	f000 fd67 	bl	80097e4 <__assert_func>
 8008d16:	f100 0514 	add.w	r5, r0, #20
 8008d1a:	462b      	mov	r3, r5
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008d22:	4543      	cmp	r3, r8
 8008d24:	d321      	bcc.n	8008d6a <__multiply+0x96>
 8008d26:	f107 0114 	add.w	r1, r7, #20
 8008d2a:	f104 0214 	add.w	r2, r4, #20
 8008d2e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008d32:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008d36:	9302      	str	r3, [sp, #8]
 8008d38:	1b13      	subs	r3, r2, r4
 8008d3a:	3b15      	subs	r3, #21
 8008d3c:	f023 0303 	bic.w	r3, r3, #3
 8008d40:	3304      	adds	r3, #4
 8008d42:	f104 0715 	add.w	r7, r4, #21
 8008d46:	42ba      	cmp	r2, r7
 8008d48:	bf38      	it	cc
 8008d4a:	2304      	movcc	r3, #4
 8008d4c:	9301      	str	r3, [sp, #4]
 8008d4e:	9b02      	ldr	r3, [sp, #8]
 8008d50:	9103      	str	r1, [sp, #12]
 8008d52:	428b      	cmp	r3, r1
 8008d54:	d80c      	bhi.n	8008d70 <__multiply+0x9c>
 8008d56:	2e00      	cmp	r6, #0
 8008d58:	dd03      	ble.n	8008d62 <__multiply+0x8e>
 8008d5a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d05a      	beq.n	8008e18 <__multiply+0x144>
 8008d62:	6106      	str	r6, [r0, #16]
 8008d64:	b005      	add	sp, #20
 8008d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d6a:	f843 2b04 	str.w	r2, [r3], #4
 8008d6e:	e7d8      	b.n	8008d22 <__multiply+0x4e>
 8008d70:	f8b1 a000 	ldrh.w	sl, [r1]
 8008d74:	f1ba 0f00 	cmp.w	sl, #0
 8008d78:	d023      	beq.n	8008dc2 <__multiply+0xee>
 8008d7a:	46a9      	mov	r9, r5
 8008d7c:	f04f 0c00 	mov.w	ip, #0
 8008d80:	f104 0e14 	add.w	lr, r4, #20
 8008d84:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008d88:	f8d9 3000 	ldr.w	r3, [r9]
 8008d8c:	fa1f fb87 	uxth.w	fp, r7
 8008d90:	b29b      	uxth	r3, r3
 8008d92:	fb0a 330b 	mla	r3, sl, fp, r3
 8008d96:	4463      	add	r3, ip
 8008d98:	f8d9 c000 	ldr.w	ip, [r9]
 8008d9c:	0c3f      	lsrs	r7, r7, #16
 8008d9e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008da2:	fb0a c707 	mla	r7, sl, r7, ip
 8008da6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008db0:	4572      	cmp	r2, lr
 8008db2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008db6:	f849 3b04 	str.w	r3, [r9], #4
 8008dba:	d8e3      	bhi.n	8008d84 <__multiply+0xb0>
 8008dbc:	9b01      	ldr	r3, [sp, #4]
 8008dbe:	f845 c003 	str.w	ip, [r5, r3]
 8008dc2:	9b03      	ldr	r3, [sp, #12]
 8008dc4:	3104      	adds	r1, #4
 8008dc6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008dca:	f1b9 0f00 	cmp.w	r9, #0
 8008dce:	d021      	beq.n	8008e14 <__multiply+0x140>
 8008dd0:	46ae      	mov	lr, r5
 8008dd2:	f04f 0a00 	mov.w	sl, #0
 8008dd6:	682b      	ldr	r3, [r5, #0]
 8008dd8:	f104 0c14 	add.w	ip, r4, #20
 8008ddc:	f8bc b000 	ldrh.w	fp, [ip]
 8008de0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	fb09 770b 	mla	r7, r9, fp, r7
 8008dea:	4457      	add	r7, sl
 8008dec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008df0:	f84e 3b04 	str.w	r3, [lr], #4
 8008df4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008df8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008dfc:	f8be 3000 	ldrh.w	r3, [lr]
 8008e00:	4562      	cmp	r2, ip
 8008e02:	fb09 330a 	mla	r3, r9, sl, r3
 8008e06:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008e0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008e0e:	d8e5      	bhi.n	8008ddc <__multiply+0x108>
 8008e10:	9f01      	ldr	r7, [sp, #4]
 8008e12:	51eb      	str	r3, [r5, r7]
 8008e14:	3504      	adds	r5, #4
 8008e16:	e79a      	b.n	8008d4e <__multiply+0x7a>
 8008e18:	3e01      	subs	r6, #1
 8008e1a:	e79c      	b.n	8008d56 <__multiply+0x82>
 8008e1c:	0800a401 	.word	0x0800a401
 8008e20:	0800a472 	.word	0x0800a472

08008e24 <__pow5mult>:
 8008e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e28:	4615      	mov	r5, r2
 8008e2a:	f012 0203 	ands.w	r2, r2, #3
 8008e2e:	4607      	mov	r7, r0
 8008e30:	460e      	mov	r6, r1
 8008e32:	d007      	beq.n	8008e44 <__pow5mult+0x20>
 8008e34:	4c25      	ldr	r4, [pc, #148]	@ (8008ecc <__pow5mult+0xa8>)
 8008e36:	3a01      	subs	r2, #1
 8008e38:	2300      	movs	r3, #0
 8008e3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e3e:	f7ff fe57 	bl	8008af0 <__multadd>
 8008e42:	4606      	mov	r6, r0
 8008e44:	10ad      	asrs	r5, r5, #2
 8008e46:	d03d      	beq.n	8008ec4 <__pow5mult+0xa0>
 8008e48:	69fc      	ldr	r4, [r7, #28]
 8008e4a:	b97c      	cbnz	r4, 8008e6c <__pow5mult+0x48>
 8008e4c:	2010      	movs	r0, #16
 8008e4e:	f7ff fd25 	bl	800889c <malloc>
 8008e52:	4602      	mov	r2, r0
 8008e54:	61f8      	str	r0, [r7, #28]
 8008e56:	b928      	cbnz	r0, 8008e64 <__pow5mult+0x40>
 8008e58:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8008ed0 <__pow5mult+0xac>)
 8008e5e:	481d      	ldr	r0, [pc, #116]	@ (8008ed4 <__pow5mult+0xb0>)
 8008e60:	f000 fcc0 	bl	80097e4 <__assert_func>
 8008e64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008e68:	6004      	str	r4, [r0, #0]
 8008e6a:	60c4      	str	r4, [r0, #12]
 8008e6c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008e70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008e74:	b94c      	cbnz	r4, 8008e8a <__pow5mult+0x66>
 8008e76:	f240 2171 	movw	r1, #625	@ 0x271
 8008e7a:	4638      	mov	r0, r7
 8008e7c:	f7ff ff14 	bl	8008ca8 <__i2b>
 8008e80:	2300      	movs	r3, #0
 8008e82:	4604      	mov	r4, r0
 8008e84:	f8c8 0008 	str.w	r0, [r8, #8]
 8008e88:	6003      	str	r3, [r0, #0]
 8008e8a:	f04f 0900 	mov.w	r9, #0
 8008e8e:	07eb      	lsls	r3, r5, #31
 8008e90:	d50a      	bpl.n	8008ea8 <__pow5mult+0x84>
 8008e92:	4631      	mov	r1, r6
 8008e94:	4622      	mov	r2, r4
 8008e96:	4638      	mov	r0, r7
 8008e98:	f7ff ff1c 	bl	8008cd4 <__multiply>
 8008e9c:	4680      	mov	r8, r0
 8008e9e:	4631      	mov	r1, r6
 8008ea0:	4638      	mov	r0, r7
 8008ea2:	f7ff fe03 	bl	8008aac <_Bfree>
 8008ea6:	4646      	mov	r6, r8
 8008ea8:	106d      	asrs	r5, r5, #1
 8008eaa:	d00b      	beq.n	8008ec4 <__pow5mult+0xa0>
 8008eac:	6820      	ldr	r0, [r4, #0]
 8008eae:	b938      	cbnz	r0, 8008ec0 <__pow5mult+0x9c>
 8008eb0:	4622      	mov	r2, r4
 8008eb2:	4621      	mov	r1, r4
 8008eb4:	4638      	mov	r0, r7
 8008eb6:	f7ff ff0d 	bl	8008cd4 <__multiply>
 8008eba:	6020      	str	r0, [r4, #0]
 8008ebc:	f8c0 9000 	str.w	r9, [r0]
 8008ec0:	4604      	mov	r4, r0
 8008ec2:	e7e4      	b.n	8008e8e <__pow5mult+0x6a>
 8008ec4:	4630      	mov	r0, r6
 8008ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eca:	bf00      	nop
 8008ecc:	0800a4cc 	.word	0x0800a4cc
 8008ed0:	0800a392 	.word	0x0800a392
 8008ed4:	0800a472 	.word	0x0800a472

08008ed8 <__lshift>:
 8008ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008edc:	460c      	mov	r4, r1
 8008ede:	4607      	mov	r7, r0
 8008ee0:	4691      	mov	r9, r2
 8008ee2:	6923      	ldr	r3, [r4, #16]
 8008ee4:	6849      	ldr	r1, [r1, #4]
 8008ee6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008eea:	68a3      	ldr	r3, [r4, #8]
 8008eec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ef0:	f108 0601 	add.w	r6, r8, #1
 8008ef4:	42b3      	cmp	r3, r6
 8008ef6:	db0b      	blt.n	8008f10 <__lshift+0x38>
 8008ef8:	4638      	mov	r0, r7
 8008efa:	f7ff fd97 	bl	8008a2c <_Balloc>
 8008efe:	4605      	mov	r5, r0
 8008f00:	b948      	cbnz	r0, 8008f16 <__lshift+0x3e>
 8008f02:	4602      	mov	r2, r0
 8008f04:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008f08:	4b27      	ldr	r3, [pc, #156]	@ (8008fa8 <__lshift+0xd0>)
 8008f0a:	4828      	ldr	r0, [pc, #160]	@ (8008fac <__lshift+0xd4>)
 8008f0c:	f000 fc6a 	bl	80097e4 <__assert_func>
 8008f10:	3101      	adds	r1, #1
 8008f12:	005b      	lsls	r3, r3, #1
 8008f14:	e7ee      	b.n	8008ef4 <__lshift+0x1c>
 8008f16:	2300      	movs	r3, #0
 8008f18:	f100 0114 	add.w	r1, r0, #20
 8008f1c:	f100 0210 	add.w	r2, r0, #16
 8008f20:	4618      	mov	r0, r3
 8008f22:	4553      	cmp	r3, sl
 8008f24:	db33      	blt.n	8008f8e <__lshift+0xb6>
 8008f26:	6920      	ldr	r0, [r4, #16]
 8008f28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f2c:	f104 0314 	add.w	r3, r4, #20
 8008f30:	f019 091f 	ands.w	r9, r9, #31
 8008f34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008f38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008f3c:	d02b      	beq.n	8008f96 <__lshift+0xbe>
 8008f3e:	468a      	mov	sl, r1
 8008f40:	2200      	movs	r2, #0
 8008f42:	f1c9 0e20 	rsb	lr, r9, #32
 8008f46:	6818      	ldr	r0, [r3, #0]
 8008f48:	fa00 f009 	lsl.w	r0, r0, r9
 8008f4c:	4310      	orrs	r0, r2
 8008f4e:	f84a 0b04 	str.w	r0, [sl], #4
 8008f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f56:	459c      	cmp	ip, r3
 8008f58:	fa22 f20e 	lsr.w	r2, r2, lr
 8008f5c:	d8f3      	bhi.n	8008f46 <__lshift+0x6e>
 8008f5e:	ebac 0304 	sub.w	r3, ip, r4
 8008f62:	3b15      	subs	r3, #21
 8008f64:	f023 0303 	bic.w	r3, r3, #3
 8008f68:	3304      	adds	r3, #4
 8008f6a:	f104 0015 	add.w	r0, r4, #21
 8008f6e:	4584      	cmp	ip, r0
 8008f70:	bf38      	it	cc
 8008f72:	2304      	movcc	r3, #4
 8008f74:	50ca      	str	r2, [r1, r3]
 8008f76:	b10a      	cbz	r2, 8008f7c <__lshift+0xa4>
 8008f78:	f108 0602 	add.w	r6, r8, #2
 8008f7c:	3e01      	subs	r6, #1
 8008f7e:	4638      	mov	r0, r7
 8008f80:	4621      	mov	r1, r4
 8008f82:	612e      	str	r6, [r5, #16]
 8008f84:	f7ff fd92 	bl	8008aac <_Bfree>
 8008f88:	4628      	mov	r0, r5
 8008f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f8e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008f92:	3301      	adds	r3, #1
 8008f94:	e7c5      	b.n	8008f22 <__lshift+0x4a>
 8008f96:	3904      	subs	r1, #4
 8008f98:	f853 2b04 	ldr.w	r2, [r3], #4
 8008f9c:	459c      	cmp	ip, r3
 8008f9e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008fa2:	d8f9      	bhi.n	8008f98 <__lshift+0xc0>
 8008fa4:	e7ea      	b.n	8008f7c <__lshift+0xa4>
 8008fa6:	bf00      	nop
 8008fa8:	0800a401 	.word	0x0800a401
 8008fac:	0800a472 	.word	0x0800a472

08008fb0 <__mcmp>:
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	690a      	ldr	r2, [r1, #16]
 8008fb4:	6900      	ldr	r0, [r0, #16]
 8008fb6:	b530      	push	{r4, r5, lr}
 8008fb8:	1a80      	subs	r0, r0, r2
 8008fba:	d10e      	bne.n	8008fda <__mcmp+0x2a>
 8008fbc:	3314      	adds	r3, #20
 8008fbe:	3114      	adds	r1, #20
 8008fc0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008fc4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008fc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008fcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008fd0:	4295      	cmp	r5, r2
 8008fd2:	d003      	beq.n	8008fdc <__mcmp+0x2c>
 8008fd4:	d205      	bcs.n	8008fe2 <__mcmp+0x32>
 8008fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8008fda:	bd30      	pop	{r4, r5, pc}
 8008fdc:	42a3      	cmp	r3, r4
 8008fde:	d3f3      	bcc.n	8008fc8 <__mcmp+0x18>
 8008fe0:	e7fb      	b.n	8008fda <__mcmp+0x2a>
 8008fe2:	2001      	movs	r0, #1
 8008fe4:	e7f9      	b.n	8008fda <__mcmp+0x2a>
	...

08008fe8 <__mdiff>:
 8008fe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fec:	4689      	mov	r9, r1
 8008fee:	4606      	mov	r6, r0
 8008ff0:	4611      	mov	r1, r2
 8008ff2:	4648      	mov	r0, r9
 8008ff4:	4614      	mov	r4, r2
 8008ff6:	f7ff ffdb 	bl	8008fb0 <__mcmp>
 8008ffa:	1e05      	subs	r5, r0, #0
 8008ffc:	d112      	bne.n	8009024 <__mdiff+0x3c>
 8008ffe:	4629      	mov	r1, r5
 8009000:	4630      	mov	r0, r6
 8009002:	f7ff fd13 	bl	8008a2c <_Balloc>
 8009006:	4602      	mov	r2, r0
 8009008:	b928      	cbnz	r0, 8009016 <__mdiff+0x2e>
 800900a:	f240 2137 	movw	r1, #567	@ 0x237
 800900e:	4b3e      	ldr	r3, [pc, #248]	@ (8009108 <__mdiff+0x120>)
 8009010:	483e      	ldr	r0, [pc, #248]	@ (800910c <__mdiff+0x124>)
 8009012:	f000 fbe7 	bl	80097e4 <__assert_func>
 8009016:	2301      	movs	r3, #1
 8009018:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800901c:	4610      	mov	r0, r2
 800901e:	b003      	add	sp, #12
 8009020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009024:	bfbc      	itt	lt
 8009026:	464b      	movlt	r3, r9
 8009028:	46a1      	movlt	r9, r4
 800902a:	4630      	mov	r0, r6
 800902c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009030:	bfba      	itte	lt
 8009032:	461c      	movlt	r4, r3
 8009034:	2501      	movlt	r5, #1
 8009036:	2500      	movge	r5, #0
 8009038:	f7ff fcf8 	bl	8008a2c <_Balloc>
 800903c:	4602      	mov	r2, r0
 800903e:	b918      	cbnz	r0, 8009048 <__mdiff+0x60>
 8009040:	f240 2145 	movw	r1, #581	@ 0x245
 8009044:	4b30      	ldr	r3, [pc, #192]	@ (8009108 <__mdiff+0x120>)
 8009046:	e7e3      	b.n	8009010 <__mdiff+0x28>
 8009048:	f100 0b14 	add.w	fp, r0, #20
 800904c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009050:	f109 0310 	add.w	r3, r9, #16
 8009054:	60c5      	str	r5, [r0, #12]
 8009056:	f04f 0c00 	mov.w	ip, #0
 800905a:	f109 0514 	add.w	r5, r9, #20
 800905e:	46d9      	mov	r9, fp
 8009060:	6926      	ldr	r6, [r4, #16]
 8009062:	f104 0e14 	add.w	lr, r4, #20
 8009066:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800906a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800906e:	9301      	str	r3, [sp, #4]
 8009070:	9b01      	ldr	r3, [sp, #4]
 8009072:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009076:	f853 af04 	ldr.w	sl, [r3, #4]!
 800907a:	b281      	uxth	r1, r0
 800907c:	9301      	str	r3, [sp, #4]
 800907e:	fa1f f38a 	uxth.w	r3, sl
 8009082:	1a5b      	subs	r3, r3, r1
 8009084:	0c00      	lsrs	r0, r0, #16
 8009086:	4463      	add	r3, ip
 8009088:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800908c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009090:	b29b      	uxth	r3, r3
 8009092:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009096:	4576      	cmp	r6, lr
 8009098:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800909c:	f849 3b04 	str.w	r3, [r9], #4
 80090a0:	d8e6      	bhi.n	8009070 <__mdiff+0x88>
 80090a2:	1b33      	subs	r3, r6, r4
 80090a4:	3b15      	subs	r3, #21
 80090a6:	f023 0303 	bic.w	r3, r3, #3
 80090aa:	3415      	adds	r4, #21
 80090ac:	3304      	adds	r3, #4
 80090ae:	42a6      	cmp	r6, r4
 80090b0:	bf38      	it	cc
 80090b2:	2304      	movcc	r3, #4
 80090b4:	441d      	add	r5, r3
 80090b6:	445b      	add	r3, fp
 80090b8:	461e      	mov	r6, r3
 80090ba:	462c      	mov	r4, r5
 80090bc:	4544      	cmp	r4, r8
 80090be:	d30e      	bcc.n	80090de <__mdiff+0xf6>
 80090c0:	f108 0103 	add.w	r1, r8, #3
 80090c4:	1b49      	subs	r1, r1, r5
 80090c6:	f021 0103 	bic.w	r1, r1, #3
 80090ca:	3d03      	subs	r5, #3
 80090cc:	45a8      	cmp	r8, r5
 80090ce:	bf38      	it	cc
 80090d0:	2100      	movcc	r1, #0
 80090d2:	440b      	add	r3, r1
 80090d4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090d8:	b199      	cbz	r1, 8009102 <__mdiff+0x11a>
 80090da:	6117      	str	r7, [r2, #16]
 80090dc:	e79e      	b.n	800901c <__mdiff+0x34>
 80090de:	46e6      	mov	lr, ip
 80090e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80090e4:	fa1f fc81 	uxth.w	ip, r1
 80090e8:	44f4      	add	ip, lr
 80090ea:	0c08      	lsrs	r0, r1, #16
 80090ec:	4471      	add	r1, lr
 80090ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80090f2:	b289      	uxth	r1, r1
 80090f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80090f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80090fc:	f846 1b04 	str.w	r1, [r6], #4
 8009100:	e7dc      	b.n	80090bc <__mdiff+0xd4>
 8009102:	3f01      	subs	r7, #1
 8009104:	e7e6      	b.n	80090d4 <__mdiff+0xec>
 8009106:	bf00      	nop
 8009108:	0800a401 	.word	0x0800a401
 800910c:	0800a472 	.word	0x0800a472

08009110 <__ulp>:
 8009110:	4b0e      	ldr	r3, [pc, #56]	@ (800914c <__ulp+0x3c>)
 8009112:	400b      	ands	r3, r1
 8009114:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009118:	2b00      	cmp	r3, #0
 800911a:	dc08      	bgt.n	800912e <__ulp+0x1e>
 800911c:	425b      	negs	r3, r3
 800911e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009122:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009126:	da04      	bge.n	8009132 <__ulp+0x22>
 8009128:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800912c:	4113      	asrs	r3, r2
 800912e:	2200      	movs	r2, #0
 8009130:	e008      	b.n	8009144 <__ulp+0x34>
 8009132:	f1a2 0314 	sub.w	r3, r2, #20
 8009136:	2b1e      	cmp	r3, #30
 8009138:	bfd6      	itet	le
 800913a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800913e:	2201      	movgt	r2, #1
 8009140:	40da      	lsrle	r2, r3
 8009142:	2300      	movs	r3, #0
 8009144:	4619      	mov	r1, r3
 8009146:	4610      	mov	r0, r2
 8009148:	4770      	bx	lr
 800914a:	bf00      	nop
 800914c:	7ff00000 	.word	0x7ff00000

08009150 <__b2d>:
 8009150:	6902      	ldr	r2, [r0, #16]
 8009152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009154:	f100 0614 	add.w	r6, r0, #20
 8009158:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800915c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009160:	4f1e      	ldr	r7, [pc, #120]	@ (80091dc <__b2d+0x8c>)
 8009162:	4620      	mov	r0, r4
 8009164:	f7ff fd54 	bl	8008c10 <__hi0bits>
 8009168:	4603      	mov	r3, r0
 800916a:	f1c0 0020 	rsb	r0, r0, #32
 800916e:	2b0a      	cmp	r3, #10
 8009170:	f1a2 0504 	sub.w	r5, r2, #4
 8009174:	6008      	str	r0, [r1, #0]
 8009176:	dc12      	bgt.n	800919e <__b2d+0x4e>
 8009178:	42ae      	cmp	r6, r5
 800917a:	bf2c      	ite	cs
 800917c:	2200      	movcs	r2, #0
 800917e:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009182:	f1c3 0c0b 	rsb	ip, r3, #11
 8009186:	3315      	adds	r3, #21
 8009188:	fa24 fe0c 	lsr.w	lr, r4, ip
 800918c:	fa04 f303 	lsl.w	r3, r4, r3
 8009190:	fa22 f20c 	lsr.w	r2, r2, ip
 8009194:	ea4e 0107 	orr.w	r1, lr, r7
 8009198:	431a      	orrs	r2, r3
 800919a:	4610      	mov	r0, r2
 800919c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800919e:	42ae      	cmp	r6, r5
 80091a0:	bf36      	itet	cc
 80091a2:	f1a2 0508 	subcc.w	r5, r2, #8
 80091a6:	2200      	movcs	r2, #0
 80091a8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80091ac:	3b0b      	subs	r3, #11
 80091ae:	d012      	beq.n	80091d6 <__b2d+0x86>
 80091b0:	f1c3 0720 	rsb	r7, r3, #32
 80091b4:	fa22 f107 	lsr.w	r1, r2, r7
 80091b8:	409c      	lsls	r4, r3
 80091ba:	430c      	orrs	r4, r1
 80091bc:	42b5      	cmp	r5, r6
 80091be:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 80091c2:	bf94      	ite	ls
 80091c4:	2400      	movls	r4, #0
 80091c6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 80091ca:	409a      	lsls	r2, r3
 80091cc:	40fc      	lsrs	r4, r7
 80091ce:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80091d2:	4322      	orrs	r2, r4
 80091d4:	e7e1      	b.n	800919a <__b2d+0x4a>
 80091d6:	ea44 0107 	orr.w	r1, r4, r7
 80091da:	e7de      	b.n	800919a <__b2d+0x4a>
 80091dc:	3ff00000 	.word	0x3ff00000

080091e0 <__d2b>:
 80091e0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80091e4:	2101      	movs	r1, #1
 80091e6:	4690      	mov	r8, r2
 80091e8:	4699      	mov	r9, r3
 80091ea:	9e08      	ldr	r6, [sp, #32]
 80091ec:	f7ff fc1e 	bl	8008a2c <_Balloc>
 80091f0:	4604      	mov	r4, r0
 80091f2:	b930      	cbnz	r0, 8009202 <__d2b+0x22>
 80091f4:	4602      	mov	r2, r0
 80091f6:	f240 310f 	movw	r1, #783	@ 0x30f
 80091fa:	4b23      	ldr	r3, [pc, #140]	@ (8009288 <__d2b+0xa8>)
 80091fc:	4823      	ldr	r0, [pc, #140]	@ (800928c <__d2b+0xac>)
 80091fe:	f000 faf1 	bl	80097e4 <__assert_func>
 8009202:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009206:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800920a:	b10d      	cbz	r5, 8009210 <__d2b+0x30>
 800920c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009210:	9301      	str	r3, [sp, #4]
 8009212:	f1b8 0300 	subs.w	r3, r8, #0
 8009216:	d024      	beq.n	8009262 <__d2b+0x82>
 8009218:	4668      	mov	r0, sp
 800921a:	9300      	str	r3, [sp, #0]
 800921c:	f7ff fd17 	bl	8008c4e <__lo0bits>
 8009220:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009224:	b1d8      	cbz	r0, 800925e <__d2b+0x7e>
 8009226:	f1c0 0320 	rsb	r3, r0, #32
 800922a:	fa02 f303 	lsl.w	r3, r2, r3
 800922e:	430b      	orrs	r3, r1
 8009230:	40c2      	lsrs	r2, r0
 8009232:	6163      	str	r3, [r4, #20]
 8009234:	9201      	str	r2, [sp, #4]
 8009236:	9b01      	ldr	r3, [sp, #4]
 8009238:	2b00      	cmp	r3, #0
 800923a:	bf0c      	ite	eq
 800923c:	2201      	moveq	r2, #1
 800923e:	2202      	movne	r2, #2
 8009240:	61a3      	str	r3, [r4, #24]
 8009242:	6122      	str	r2, [r4, #16]
 8009244:	b1ad      	cbz	r5, 8009272 <__d2b+0x92>
 8009246:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800924a:	4405      	add	r5, r0
 800924c:	6035      	str	r5, [r6, #0]
 800924e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009252:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009254:	6018      	str	r0, [r3, #0]
 8009256:	4620      	mov	r0, r4
 8009258:	b002      	add	sp, #8
 800925a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800925e:	6161      	str	r1, [r4, #20]
 8009260:	e7e9      	b.n	8009236 <__d2b+0x56>
 8009262:	a801      	add	r0, sp, #4
 8009264:	f7ff fcf3 	bl	8008c4e <__lo0bits>
 8009268:	9b01      	ldr	r3, [sp, #4]
 800926a:	2201      	movs	r2, #1
 800926c:	6163      	str	r3, [r4, #20]
 800926e:	3020      	adds	r0, #32
 8009270:	e7e7      	b.n	8009242 <__d2b+0x62>
 8009272:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009276:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800927a:	6030      	str	r0, [r6, #0]
 800927c:	6918      	ldr	r0, [r3, #16]
 800927e:	f7ff fcc7 	bl	8008c10 <__hi0bits>
 8009282:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009286:	e7e4      	b.n	8009252 <__d2b+0x72>
 8009288:	0800a401 	.word	0x0800a401
 800928c:	0800a472 	.word	0x0800a472

08009290 <__ratio>:
 8009290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009294:	b085      	sub	sp, #20
 8009296:	e9cd 1000 	strd	r1, r0, [sp]
 800929a:	a902      	add	r1, sp, #8
 800929c:	f7ff ff58 	bl	8009150 <__b2d>
 80092a0:	468b      	mov	fp, r1
 80092a2:	4606      	mov	r6, r0
 80092a4:	460f      	mov	r7, r1
 80092a6:	9800      	ldr	r0, [sp, #0]
 80092a8:	a903      	add	r1, sp, #12
 80092aa:	f7ff ff51 	bl	8009150 <__b2d>
 80092ae:	460d      	mov	r5, r1
 80092b0:	9b01      	ldr	r3, [sp, #4]
 80092b2:	4689      	mov	r9, r1
 80092b4:	6919      	ldr	r1, [r3, #16]
 80092b6:	9b00      	ldr	r3, [sp, #0]
 80092b8:	4604      	mov	r4, r0
 80092ba:	691b      	ldr	r3, [r3, #16]
 80092bc:	4630      	mov	r0, r6
 80092be:	1ac9      	subs	r1, r1, r3
 80092c0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80092c4:	1a9b      	subs	r3, r3, r2
 80092c6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	bfcd      	iteet	gt
 80092ce:	463a      	movgt	r2, r7
 80092d0:	462a      	movle	r2, r5
 80092d2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80092d6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80092da:	bfd8      	it	le
 80092dc:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80092e0:	464b      	mov	r3, r9
 80092e2:	4622      	mov	r2, r4
 80092e4:	4659      	mov	r1, fp
 80092e6:	f7f7 fa2b 	bl	8000740 <__aeabi_ddiv>
 80092ea:	b005      	add	sp, #20
 80092ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080092f0 <__copybits>:
 80092f0:	3901      	subs	r1, #1
 80092f2:	b570      	push	{r4, r5, r6, lr}
 80092f4:	1149      	asrs	r1, r1, #5
 80092f6:	6914      	ldr	r4, [r2, #16]
 80092f8:	3101      	adds	r1, #1
 80092fa:	f102 0314 	add.w	r3, r2, #20
 80092fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009302:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009306:	1f05      	subs	r5, r0, #4
 8009308:	42a3      	cmp	r3, r4
 800930a:	d30c      	bcc.n	8009326 <__copybits+0x36>
 800930c:	1aa3      	subs	r3, r4, r2
 800930e:	3b11      	subs	r3, #17
 8009310:	f023 0303 	bic.w	r3, r3, #3
 8009314:	3211      	adds	r2, #17
 8009316:	42a2      	cmp	r2, r4
 8009318:	bf88      	it	hi
 800931a:	2300      	movhi	r3, #0
 800931c:	4418      	add	r0, r3
 800931e:	2300      	movs	r3, #0
 8009320:	4288      	cmp	r0, r1
 8009322:	d305      	bcc.n	8009330 <__copybits+0x40>
 8009324:	bd70      	pop	{r4, r5, r6, pc}
 8009326:	f853 6b04 	ldr.w	r6, [r3], #4
 800932a:	f845 6f04 	str.w	r6, [r5, #4]!
 800932e:	e7eb      	b.n	8009308 <__copybits+0x18>
 8009330:	f840 3b04 	str.w	r3, [r0], #4
 8009334:	e7f4      	b.n	8009320 <__copybits+0x30>

08009336 <__any_on>:
 8009336:	f100 0214 	add.w	r2, r0, #20
 800933a:	6900      	ldr	r0, [r0, #16]
 800933c:	114b      	asrs	r3, r1, #5
 800933e:	4298      	cmp	r0, r3
 8009340:	b510      	push	{r4, lr}
 8009342:	db11      	blt.n	8009368 <__any_on+0x32>
 8009344:	dd0a      	ble.n	800935c <__any_on+0x26>
 8009346:	f011 011f 	ands.w	r1, r1, #31
 800934a:	d007      	beq.n	800935c <__any_on+0x26>
 800934c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009350:	fa24 f001 	lsr.w	r0, r4, r1
 8009354:	fa00 f101 	lsl.w	r1, r0, r1
 8009358:	428c      	cmp	r4, r1
 800935a:	d10b      	bne.n	8009374 <__any_on+0x3e>
 800935c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009360:	4293      	cmp	r3, r2
 8009362:	d803      	bhi.n	800936c <__any_on+0x36>
 8009364:	2000      	movs	r0, #0
 8009366:	bd10      	pop	{r4, pc}
 8009368:	4603      	mov	r3, r0
 800936a:	e7f7      	b.n	800935c <__any_on+0x26>
 800936c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009370:	2900      	cmp	r1, #0
 8009372:	d0f5      	beq.n	8009360 <__any_on+0x2a>
 8009374:	2001      	movs	r0, #1
 8009376:	e7f6      	b.n	8009366 <__any_on+0x30>

08009378 <__ascii_wctomb>:
 8009378:	4603      	mov	r3, r0
 800937a:	4608      	mov	r0, r1
 800937c:	b141      	cbz	r1, 8009390 <__ascii_wctomb+0x18>
 800937e:	2aff      	cmp	r2, #255	@ 0xff
 8009380:	d904      	bls.n	800938c <__ascii_wctomb+0x14>
 8009382:	228a      	movs	r2, #138	@ 0x8a
 8009384:	f04f 30ff 	mov.w	r0, #4294967295
 8009388:	601a      	str	r2, [r3, #0]
 800938a:	4770      	bx	lr
 800938c:	2001      	movs	r0, #1
 800938e:	700a      	strb	r2, [r1, #0]
 8009390:	4770      	bx	lr

08009392 <__ssputs_r>:
 8009392:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009396:	461f      	mov	r7, r3
 8009398:	688e      	ldr	r6, [r1, #8]
 800939a:	4682      	mov	sl, r0
 800939c:	42be      	cmp	r6, r7
 800939e:	460c      	mov	r4, r1
 80093a0:	4690      	mov	r8, r2
 80093a2:	680b      	ldr	r3, [r1, #0]
 80093a4:	d82d      	bhi.n	8009402 <__ssputs_r+0x70>
 80093a6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80093aa:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80093ae:	d026      	beq.n	80093fe <__ssputs_r+0x6c>
 80093b0:	6965      	ldr	r5, [r4, #20]
 80093b2:	6909      	ldr	r1, [r1, #16]
 80093b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80093b8:	eba3 0901 	sub.w	r9, r3, r1
 80093bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80093c0:	1c7b      	adds	r3, r7, #1
 80093c2:	444b      	add	r3, r9
 80093c4:	106d      	asrs	r5, r5, #1
 80093c6:	429d      	cmp	r5, r3
 80093c8:	bf38      	it	cc
 80093ca:	461d      	movcc	r5, r3
 80093cc:	0553      	lsls	r3, r2, #21
 80093ce:	d527      	bpl.n	8009420 <__ssputs_r+0x8e>
 80093d0:	4629      	mov	r1, r5
 80093d2:	f7ff fa8d 	bl	80088f0 <_malloc_r>
 80093d6:	4606      	mov	r6, r0
 80093d8:	b360      	cbz	r0, 8009434 <__ssputs_r+0xa2>
 80093da:	464a      	mov	r2, r9
 80093dc:	6921      	ldr	r1, [r4, #16]
 80093de:	f7fe f870 	bl	80074c2 <memcpy>
 80093e2:	89a3      	ldrh	r3, [r4, #12]
 80093e4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80093e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80093ec:	81a3      	strh	r3, [r4, #12]
 80093ee:	6126      	str	r6, [r4, #16]
 80093f0:	444e      	add	r6, r9
 80093f2:	6026      	str	r6, [r4, #0]
 80093f4:	463e      	mov	r6, r7
 80093f6:	6165      	str	r5, [r4, #20]
 80093f8:	eba5 0509 	sub.w	r5, r5, r9
 80093fc:	60a5      	str	r5, [r4, #8]
 80093fe:	42be      	cmp	r6, r7
 8009400:	d900      	bls.n	8009404 <__ssputs_r+0x72>
 8009402:	463e      	mov	r6, r7
 8009404:	4632      	mov	r2, r6
 8009406:	4641      	mov	r1, r8
 8009408:	6820      	ldr	r0, [r4, #0]
 800940a:	f000 f9c1 	bl	8009790 <memmove>
 800940e:	2000      	movs	r0, #0
 8009410:	68a3      	ldr	r3, [r4, #8]
 8009412:	1b9b      	subs	r3, r3, r6
 8009414:	60a3      	str	r3, [r4, #8]
 8009416:	6823      	ldr	r3, [r4, #0]
 8009418:	4433      	add	r3, r6
 800941a:	6023      	str	r3, [r4, #0]
 800941c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009420:	462a      	mov	r2, r5
 8009422:	f000 fa11 	bl	8009848 <_realloc_r>
 8009426:	4606      	mov	r6, r0
 8009428:	2800      	cmp	r0, #0
 800942a:	d1e0      	bne.n	80093ee <__ssputs_r+0x5c>
 800942c:	4650      	mov	r0, sl
 800942e:	6921      	ldr	r1, [r4, #16]
 8009430:	f7fe feb2 	bl	8008198 <_free_r>
 8009434:	230c      	movs	r3, #12
 8009436:	f8ca 3000 	str.w	r3, [sl]
 800943a:	89a3      	ldrh	r3, [r4, #12]
 800943c:	f04f 30ff 	mov.w	r0, #4294967295
 8009440:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009444:	81a3      	strh	r3, [r4, #12]
 8009446:	e7e9      	b.n	800941c <__ssputs_r+0x8a>

08009448 <_svfiprintf_r>:
 8009448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800944c:	4698      	mov	r8, r3
 800944e:	898b      	ldrh	r3, [r1, #12]
 8009450:	4607      	mov	r7, r0
 8009452:	061b      	lsls	r3, r3, #24
 8009454:	460d      	mov	r5, r1
 8009456:	4614      	mov	r4, r2
 8009458:	b09d      	sub	sp, #116	@ 0x74
 800945a:	d510      	bpl.n	800947e <_svfiprintf_r+0x36>
 800945c:	690b      	ldr	r3, [r1, #16]
 800945e:	b973      	cbnz	r3, 800947e <_svfiprintf_r+0x36>
 8009460:	2140      	movs	r1, #64	@ 0x40
 8009462:	f7ff fa45 	bl	80088f0 <_malloc_r>
 8009466:	6028      	str	r0, [r5, #0]
 8009468:	6128      	str	r0, [r5, #16]
 800946a:	b930      	cbnz	r0, 800947a <_svfiprintf_r+0x32>
 800946c:	230c      	movs	r3, #12
 800946e:	603b      	str	r3, [r7, #0]
 8009470:	f04f 30ff 	mov.w	r0, #4294967295
 8009474:	b01d      	add	sp, #116	@ 0x74
 8009476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800947a:	2340      	movs	r3, #64	@ 0x40
 800947c:	616b      	str	r3, [r5, #20]
 800947e:	2300      	movs	r3, #0
 8009480:	9309      	str	r3, [sp, #36]	@ 0x24
 8009482:	2320      	movs	r3, #32
 8009484:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009488:	2330      	movs	r3, #48	@ 0x30
 800948a:	f04f 0901 	mov.w	r9, #1
 800948e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009492:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800962c <_svfiprintf_r+0x1e4>
 8009496:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800949a:	4623      	mov	r3, r4
 800949c:	469a      	mov	sl, r3
 800949e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80094a2:	b10a      	cbz	r2, 80094a8 <_svfiprintf_r+0x60>
 80094a4:	2a25      	cmp	r2, #37	@ 0x25
 80094a6:	d1f9      	bne.n	800949c <_svfiprintf_r+0x54>
 80094a8:	ebba 0b04 	subs.w	fp, sl, r4
 80094ac:	d00b      	beq.n	80094c6 <_svfiprintf_r+0x7e>
 80094ae:	465b      	mov	r3, fp
 80094b0:	4622      	mov	r2, r4
 80094b2:	4629      	mov	r1, r5
 80094b4:	4638      	mov	r0, r7
 80094b6:	f7ff ff6c 	bl	8009392 <__ssputs_r>
 80094ba:	3001      	adds	r0, #1
 80094bc:	f000 80a7 	beq.w	800960e <_svfiprintf_r+0x1c6>
 80094c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80094c2:	445a      	add	r2, fp
 80094c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80094c6:	f89a 3000 	ldrb.w	r3, [sl]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	f000 809f 	beq.w	800960e <_svfiprintf_r+0x1c6>
 80094d0:	2300      	movs	r3, #0
 80094d2:	f04f 32ff 	mov.w	r2, #4294967295
 80094d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094da:	f10a 0a01 	add.w	sl, sl, #1
 80094de:	9304      	str	r3, [sp, #16]
 80094e0:	9307      	str	r3, [sp, #28]
 80094e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80094e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80094e8:	4654      	mov	r4, sl
 80094ea:	2205      	movs	r2, #5
 80094ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094f0:	484e      	ldr	r0, [pc, #312]	@ (800962c <_svfiprintf_r+0x1e4>)
 80094f2:	f7fd ffd8 	bl	80074a6 <memchr>
 80094f6:	9a04      	ldr	r2, [sp, #16]
 80094f8:	b9d8      	cbnz	r0, 8009532 <_svfiprintf_r+0xea>
 80094fa:	06d0      	lsls	r0, r2, #27
 80094fc:	bf44      	itt	mi
 80094fe:	2320      	movmi	r3, #32
 8009500:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009504:	0711      	lsls	r1, r2, #28
 8009506:	bf44      	itt	mi
 8009508:	232b      	movmi	r3, #43	@ 0x2b
 800950a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800950e:	f89a 3000 	ldrb.w	r3, [sl]
 8009512:	2b2a      	cmp	r3, #42	@ 0x2a
 8009514:	d015      	beq.n	8009542 <_svfiprintf_r+0xfa>
 8009516:	4654      	mov	r4, sl
 8009518:	2000      	movs	r0, #0
 800951a:	f04f 0c0a 	mov.w	ip, #10
 800951e:	9a07      	ldr	r2, [sp, #28]
 8009520:	4621      	mov	r1, r4
 8009522:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009526:	3b30      	subs	r3, #48	@ 0x30
 8009528:	2b09      	cmp	r3, #9
 800952a:	d94b      	bls.n	80095c4 <_svfiprintf_r+0x17c>
 800952c:	b1b0      	cbz	r0, 800955c <_svfiprintf_r+0x114>
 800952e:	9207      	str	r2, [sp, #28]
 8009530:	e014      	b.n	800955c <_svfiprintf_r+0x114>
 8009532:	eba0 0308 	sub.w	r3, r0, r8
 8009536:	fa09 f303 	lsl.w	r3, r9, r3
 800953a:	4313      	orrs	r3, r2
 800953c:	46a2      	mov	sl, r4
 800953e:	9304      	str	r3, [sp, #16]
 8009540:	e7d2      	b.n	80094e8 <_svfiprintf_r+0xa0>
 8009542:	9b03      	ldr	r3, [sp, #12]
 8009544:	1d19      	adds	r1, r3, #4
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	9103      	str	r1, [sp, #12]
 800954a:	2b00      	cmp	r3, #0
 800954c:	bfbb      	ittet	lt
 800954e:	425b      	neglt	r3, r3
 8009550:	f042 0202 	orrlt.w	r2, r2, #2
 8009554:	9307      	strge	r3, [sp, #28]
 8009556:	9307      	strlt	r3, [sp, #28]
 8009558:	bfb8      	it	lt
 800955a:	9204      	strlt	r2, [sp, #16]
 800955c:	7823      	ldrb	r3, [r4, #0]
 800955e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009560:	d10a      	bne.n	8009578 <_svfiprintf_r+0x130>
 8009562:	7863      	ldrb	r3, [r4, #1]
 8009564:	2b2a      	cmp	r3, #42	@ 0x2a
 8009566:	d132      	bne.n	80095ce <_svfiprintf_r+0x186>
 8009568:	9b03      	ldr	r3, [sp, #12]
 800956a:	3402      	adds	r4, #2
 800956c:	1d1a      	adds	r2, r3, #4
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	9203      	str	r2, [sp, #12]
 8009572:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009576:	9305      	str	r3, [sp, #20]
 8009578:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009630 <_svfiprintf_r+0x1e8>
 800957c:	2203      	movs	r2, #3
 800957e:	4650      	mov	r0, sl
 8009580:	7821      	ldrb	r1, [r4, #0]
 8009582:	f7fd ff90 	bl	80074a6 <memchr>
 8009586:	b138      	cbz	r0, 8009598 <_svfiprintf_r+0x150>
 8009588:	2240      	movs	r2, #64	@ 0x40
 800958a:	9b04      	ldr	r3, [sp, #16]
 800958c:	eba0 000a 	sub.w	r0, r0, sl
 8009590:	4082      	lsls	r2, r0
 8009592:	4313      	orrs	r3, r2
 8009594:	3401      	adds	r4, #1
 8009596:	9304      	str	r3, [sp, #16]
 8009598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800959c:	2206      	movs	r2, #6
 800959e:	4825      	ldr	r0, [pc, #148]	@ (8009634 <_svfiprintf_r+0x1ec>)
 80095a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80095a4:	f7fd ff7f 	bl	80074a6 <memchr>
 80095a8:	2800      	cmp	r0, #0
 80095aa:	d036      	beq.n	800961a <_svfiprintf_r+0x1d2>
 80095ac:	4b22      	ldr	r3, [pc, #136]	@ (8009638 <_svfiprintf_r+0x1f0>)
 80095ae:	bb1b      	cbnz	r3, 80095f8 <_svfiprintf_r+0x1b0>
 80095b0:	9b03      	ldr	r3, [sp, #12]
 80095b2:	3307      	adds	r3, #7
 80095b4:	f023 0307 	bic.w	r3, r3, #7
 80095b8:	3308      	adds	r3, #8
 80095ba:	9303      	str	r3, [sp, #12]
 80095bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095be:	4433      	add	r3, r6
 80095c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80095c2:	e76a      	b.n	800949a <_svfiprintf_r+0x52>
 80095c4:	460c      	mov	r4, r1
 80095c6:	2001      	movs	r0, #1
 80095c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80095cc:	e7a8      	b.n	8009520 <_svfiprintf_r+0xd8>
 80095ce:	2300      	movs	r3, #0
 80095d0:	f04f 0c0a 	mov.w	ip, #10
 80095d4:	4619      	mov	r1, r3
 80095d6:	3401      	adds	r4, #1
 80095d8:	9305      	str	r3, [sp, #20]
 80095da:	4620      	mov	r0, r4
 80095dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095e0:	3a30      	subs	r2, #48	@ 0x30
 80095e2:	2a09      	cmp	r2, #9
 80095e4:	d903      	bls.n	80095ee <_svfiprintf_r+0x1a6>
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d0c6      	beq.n	8009578 <_svfiprintf_r+0x130>
 80095ea:	9105      	str	r1, [sp, #20]
 80095ec:	e7c4      	b.n	8009578 <_svfiprintf_r+0x130>
 80095ee:	4604      	mov	r4, r0
 80095f0:	2301      	movs	r3, #1
 80095f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80095f6:	e7f0      	b.n	80095da <_svfiprintf_r+0x192>
 80095f8:	ab03      	add	r3, sp, #12
 80095fa:	9300      	str	r3, [sp, #0]
 80095fc:	462a      	mov	r2, r5
 80095fe:	4638      	mov	r0, r7
 8009600:	4b0e      	ldr	r3, [pc, #56]	@ (800963c <_svfiprintf_r+0x1f4>)
 8009602:	a904      	add	r1, sp, #16
 8009604:	f7fd f9ba 	bl	800697c <_printf_float>
 8009608:	1c42      	adds	r2, r0, #1
 800960a:	4606      	mov	r6, r0
 800960c:	d1d6      	bne.n	80095bc <_svfiprintf_r+0x174>
 800960e:	89ab      	ldrh	r3, [r5, #12]
 8009610:	065b      	lsls	r3, r3, #25
 8009612:	f53f af2d 	bmi.w	8009470 <_svfiprintf_r+0x28>
 8009616:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009618:	e72c      	b.n	8009474 <_svfiprintf_r+0x2c>
 800961a:	ab03      	add	r3, sp, #12
 800961c:	9300      	str	r3, [sp, #0]
 800961e:	462a      	mov	r2, r5
 8009620:	4638      	mov	r0, r7
 8009622:	4b06      	ldr	r3, [pc, #24]	@ (800963c <_svfiprintf_r+0x1f4>)
 8009624:	a904      	add	r1, sp, #16
 8009626:	f7fd fc47 	bl	8006eb8 <_printf_i>
 800962a:	e7ed      	b.n	8009608 <_svfiprintf_r+0x1c0>
 800962c:	0800a5c8 	.word	0x0800a5c8
 8009630:	0800a5ce 	.word	0x0800a5ce
 8009634:	0800a5d2 	.word	0x0800a5d2
 8009638:	0800697d 	.word	0x0800697d
 800963c:	08009393 	.word	0x08009393

08009640 <__sflush_r>:
 8009640:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009646:	0716      	lsls	r6, r2, #28
 8009648:	4605      	mov	r5, r0
 800964a:	460c      	mov	r4, r1
 800964c:	d454      	bmi.n	80096f8 <__sflush_r+0xb8>
 800964e:	684b      	ldr	r3, [r1, #4]
 8009650:	2b00      	cmp	r3, #0
 8009652:	dc02      	bgt.n	800965a <__sflush_r+0x1a>
 8009654:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009656:	2b00      	cmp	r3, #0
 8009658:	dd48      	ble.n	80096ec <__sflush_r+0xac>
 800965a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800965c:	2e00      	cmp	r6, #0
 800965e:	d045      	beq.n	80096ec <__sflush_r+0xac>
 8009660:	2300      	movs	r3, #0
 8009662:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009666:	682f      	ldr	r7, [r5, #0]
 8009668:	6a21      	ldr	r1, [r4, #32]
 800966a:	602b      	str	r3, [r5, #0]
 800966c:	d030      	beq.n	80096d0 <__sflush_r+0x90>
 800966e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009670:	89a3      	ldrh	r3, [r4, #12]
 8009672:	0759      	lsls	r1, r3, #29
 8009674:	d505      	bpl.n	8009682 <__sflush_r+0x42>
 8009676:	6863      	ldr	r3, [r4, #4]
 8009678:	1ad2      	subs	r2, r2, r3
 800967a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800967c:	b10b      	cbz	r3, 8009682 <__sflush_r+0x42>
 800967e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009680:	1ad2      	subs	r2, r2, r3
 8009682:	2300      	movs	r3, #0
 8009684:	4628      	mov	r0, r5
 8009686:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009688:	6a21      	ldr	r1, [r4, #32]
 800968a:	47b0      	blx	r6
 800968c:	1c43      	adds	r3, r0, #1
 800968e:	89a3      	ldrh	r3, [r4, #12]
 8009690:	d106      	bne.n	80096a0 <__sflush_r+0x60>
 8009692:	6829      	ldr	r1, [r5, #0]
 8009694:	291d      	cmp	r1, #29
 8009696:	d82b      	bhi.n	80096f0 <__sflush_r+0xb0>
 8009698:	4a28      	ldr	r2, [pc, #160]	@ (800973c <__sflush_r+0xfc>)
 800969a:	410a      	asrs	r2, r1
 800969c:	07d6      	lsls	r6, r2, #31
 800969e:	d427      	bmi.n	80096f0 <__sflush_r+0xb0>
 80096a0:	2200      	movs	r2, #0
 80096a2:	6062      	str	r2, [r4, #4]
 80096a4:	6922      	ldr	r2, [r4, #16]
 80096a6:	04d9      	lsls	r1, r3, #19
 80096a8:	6022      	str	r2, [r4, #0]
 80096aa:	d504      	bpl.n	80096b6 <__sflush_r+0x76>
 80096ac:	1c42      	adds	r2, r0, #1
 80096ae:	d101      	bne.n	80096b4 <__sflush_r+0x74>
 80096b0:	682b      	ldr	r3, [r5, #0]
 80096b2:	b903      	cbnz	r3, 80096b6 <__sflush_r+0x76>
 80096b4:	6560      	str	r0, [r4, #84]	@ 0x54
 80096b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80096b8:	602f      	str	r7, [r5, #0]
 80096ba:	b1b9      	cbz	r1, 80096ec <__sflush_r+0xac>
 80096bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80096c0:	4299      	cmp	r1, r3
 80096c2:	d002      	beq.n	80096ca <__sflush_r+0x8a>
 80096c4:	4628      	mov	r0, r5
 80096c6:	f7fe fd67 	bl	8008198 <_free_r>
 80096ca:	2300      	movs	r3, #0
 80096cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80096ce:	e00d      	b.n	80096ec <__sflush_r+0xac>
 80096d0:	2301      	movs	r3, #1
 80096d2:	4628      	mov	r0, r5
 80096d4:	47b0      	blx	r6
 80096d6:	4602      	mov	r2, r0
 80096d8:	1c50      	adds	r0, r2, #1
 80096da:	d1c9      	bne.n	8009670 <__sflush_r+0x30>
 80096dc:	682b      	ldr	r3, [r5, #0]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d0c6      	beq.n	8009670 <__sflush_r+0x30>
 80096e2:	2b1d      	cmp	r3, #29
 80096e4:	d001      	beq.n	80096ea <__sflush_r+0xaa>
 80096e6:	2b16      	cmp	r3, #22
 80096e8:	d11d      	bne.n	8009726 <__sflush_r+0xe6>
 80096ea:	602f      	str	r7, [r5, #0]
 80096ec:	2000      	movs	r0, #0
 80096ee:	e021      	b.n	8009734 <__sflush_r+0xf4>
 80096f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096f4:	b21b      	sxth	r3, r3
 80096f6:	e01a      	b.n	800972e <__sflush_r+0xee>
 80096f8:	690f      	ldr	r7, [r1, #16]
 80096fa:	2f00      	cmp	r7, #0
 80096fc:	d0f6      	beq.n	80096ec <__sflush_r+0xac>
 80096fe:	0793      	lsls	r3, r2, #30
 8009700:	bf18      	it	ne
 8009702:	2300      	movne	r3, #0
 8009704:	680e      	ldr	r6, [r1, #0]
 8009706:	bf08      	it	eq
 8009708:	694b      	ldreq	r3, [r1, #20]
 800970a:	1bf6      	subs	r6, r6, r7
 800970c:	600f      	str	r7, [r1, #0]
 800970e:	608b      	str	r3, [r1, #8]
 8009710:	2e00      	cmp	r6, #0
 8009712:	ddeb      	ble.n	80096ec <__sflush_r+0xac>
 8009714:	4633      	mov	r3, r6
 8009716:	463a      	mov	r2, r7
 8009718:	4628      	mov	r0, r5
 800971a:	6a21      	ldr	r1, [r4, #32]
 800971c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009720:	47e0      	blx	ip
 8009722:	2800      	cmp	r0, #0
 8009724:	dc07      	bgt.n	8009736 <__sflush_r+0xf6>
 8009726:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800972a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800972e:	f04f 30ff 	mov.w	r0, #4294967295
 8009732:	81a3      	strh	r3, [r4, #12]
 8009734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009736:	4407      	add	r7, r0
 8009738:	1a36      	subs	r6, r6, r0
 800973a:	e7e9      	b.n	8009710 <__sflush_r+0xd0>
 800973c:	dfbffffe 	.word	0xdfbffffe

08009740 <_fflush_r>:
 8009740:	b538      	push	{r3, r4, r5, lr}
 8009742:	690b      	ldr	r3, [r1, #16]
 8009744:	4605      	mov	r5, r0
 8009746:	460c      	mov	r4, r1
 8009748:	b913      	cbnz	r3, 8009750 <_fflush_r+0x10>
 800974a:	2500      	movs	r5, #0
 800974c:	4628      	mov	r0, r5
 800974e:	bd38      	pop	{r3, r4, r5, pc}
 8009750:	b118      	cbz	r0, 800975a <_fflush_r+0x1a>
 8009752:	6a03      	ldr	r3, [r0, #32]
 8009754:	b90b      	cbnz	r3, 800975a <_fflush_r+0x1a>
 8009756:	f7fd fd5b 	bl	8007210 <__sinit>
 800975a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d0f3      	beq.n	800974a <_fflush_r+0xa>
 8009762:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009764:	07d0      	lsls	r0, r2, #31
 8009766:	d404      	bmi.n	8009772 <_fflush_r+0x32>
 8009768:	0599      	lsls	r1, r3, #22
 800976a:	d402      	bmi.n	8009772 <_fflush_r+0x32>
 800976c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800976e:	f7fd fe90 	bl	8007492 <__retarget_lock_acquire_recursive>
 8009772:	4628      	mov	r0, r5
 8009774:	4621      	mov	r1, r4
 8009776:	f7ff ff63 	bl	8009640 <__sflush_r>
 800977a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800977c:	4605      	mov	r5, r0
 800977e:	07da      	lsls	r2, r3, #31
 8009780:	d4e4      	bmi.n	800974c <_fflush_r+0xc>
 8009782:	89a3      	ldrh	r3, [r4, #12]
 8009784:	059b      	lsls	r3, r3, #22
 8009786:	d4e1      	bmi.n	800974c <_fflush_r+0xc>
 8009788:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800978a:	f7fd fe83 	bl	8007494 <__retarget_lock_release_recursive>
 800978e:	e7dd      	b.n	800974c <_fflush_r+0xc>

08009790 <memmove>:
 8009790:	4288      	cmp	r0, r1
 8009792:	b510      	push	{r4, lr}
 8009794:	eb01 0402 	add.w	r4, r1, r2
 8009798:	d902      	bls.n	80097a0 <memmove+0x10>
 800979a:	4284      	cmp	r4, r0
 800979c:	4623      	mov	r3, r4
 800979e:	d807      	bhi.n	80097b0 <memmove+0x20>
 80097a0:	1e43      	subs	r3, r0, #1
 80097a2:	42a1      	cmp	r1, r4
 80097a4:	d008      	beq.n	80097b8 <memmove+0x28>
 80097a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80097aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80097ae:	e7f8      	b.n	80097a2 <memmove+0x12>
 80097b0:	4601      	mov	r1, r0
 80097b2:	4402      	add	r2, r0
 80097b4:	428a      	cmp	r2, r1
 80097b6:	d100      	bne.n	80097ba <memmove+0x2a>
 80097b8:	bd10      	pop	{r4, pc}
 80097ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80097be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80097c2:	e7f7      	b.n	80097b4 <memmove+0x24>

080097c4 <_sbrk_r>:
 80097c4:	b538      	push	{r3, r4, r5, lr}
 80097c6:	2300      	movs	r3, #0
 80097c8:	4d05      	ldr	r5, [pc, #20]	@ (80097e0 <_sbrk_r+0x1c>)
 80097ca:	4604      	mov	r4, r0
 80097cc:	4608      	mov	r0, r1
 80097ce:	602b      	str	r3, [r5, #0]
 80097d0:	f7f7 ff04 	bl	80015dc <_sbrk>
 80097d4:	1c43      	adds	r3, r0, #1
 80097d6:	d102      	bne.n	80097de <_sbrk_r+0x1a>
 80097d8:	682b      	ldr	r3, [r5, #0]
 80097da:	b103      	cbz	r3, 80097de <_sbrk_r+0x1a>
 80097dc:	6023      	str	r3, [r4, #0]
 80097de:	bd38      	pop	{r3, r4, r5, pc}
 80097e0:	20000b7c 	.word	0x20000b7c

080097e4 <__assert_func>:
 80097e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80097e6:	4614      	mov	r4, r2
 80097e8:	461a      	mov	r2, r3
 80097ea:	4b09      	ldr	r3, [pc, #36]	@ (8009810 <__assert_func+0x2c>)
 80097ec:	4605      	mov	r5, r0
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68d8      	ldr	r0, [r3, #12]
 80097f2:	b954      	cbnz	r4, 800980a <__assert_func+0x26>
 80097f4:	4b07      	ldr	r3, [pc, #28]	@ (8009814 <__assert_func+0x30>)
 80097f6:	461c      	mov	r4, r3
 80097f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80097fc:	9100      	str	r1, [sp, #0]
 80097fe:	462b      	mov	r3, r5
 8009800:	4905      	ldr	r1, [pc, #20]	@ (8009818 <__assert_func+0x34>)
 8009802:	f000 f84f 	bl	80098a4 <fiprintf>
 8009806:	f000 f85f 	bl	80098c8 <abort>
 800980a:	4b04      	ldr	r3, [pc, #16]	@ (800981c <__assert_func+0x38>)
 800980c:	e7f4      	b.n	80097f8 <__assert_func+0x14>
 800980e:	bf00      	nop
 8009810:	20000198 	.word	0x20000198
 8009814:	0800a614 	.word	0x0800a614
 8009818:	0800a5e6 	.word	0x0800a5e6
 800981c:	0800a5d9 	.word	0x0800a5d9

08009820 <_calloc_r>:
 8009820:	b570      	push	{r4, r5, r6, lr}
 8009822:	fba1 5402 	umull	r5, r4, r1, r2
 8009826:	b93c      	cbnz	r4, 8009838 <_calloc_r+0x18>
 8009828:	4629      	mov	r1, r5
 800982a:	f7ff f861 	bl	80088f0 <_malloc_r>
 800982e:	4606      	mov	r6, r0
 8009830:	b928      	cbnz	r0, 800983e <_calloc_r+0x1e>
 8009832:	2600      	movs	r6, #0
 8009834:	4630      	mov	r0, r6
 8009836:	bd70      	pop	{r4, r5, r6, pc}
 8009838:	220c      	movs	r2, #12
 800983a:	6002      	str	r2, [r0, #0]
 800983c:	e7f9      	b.n	8009832 <_calloc_r+0x12>
 800983e:	462a      	mov	r2, r5
 8009840:	4621      	mov	r1, r4
 8009842:	f7fd fd97 	bl	8007374 <memset>
 8009846:	e7f5      	b.n	8009834 <_calloc_r+0x14>

08009848 <_realloc_r>:
 8009848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800984c:	4680      	mov	r8, r0
 800984e:	4615      	mov	r5, r2
 8009850:	460c      	mov	r4, r1
 8009852:	b921      	cbnz	r1, 800985e <_realloc_r+0x16>
 8009854:	4611      	mov	r1, r2
 8009856:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800985a:	f7ff b849 	b.w	80088f0 <_malloc_r>
 800985e:	b92a      	cbnz	r2, 800986c <_realloc_r+0x24>
 8009860:	f7fe fc9a 	bl	8008198 <_free_r>
 8009864:	2400      	movs	r4, #0
 8009866:	4620      	mov	r0, r4
 8009868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800986c:	f000 f833 	bl	80098d6 <_malloc_usable_size_r>
 8009870:	4285      	cmp	r5, r0
 8009872:	4606      	mov	r6, r0
 8009874:	d802      	bhi.n	800987c <_realloc_r+0x34>
 8009876:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800987a:	d8f4      	bhi.n	8009866 <_realloc_r+0x1e>
 800987c:	4629      	mov	r1, r5
 800987e:	4640      	mov	r0, r8
 8009880:	f7ff f836 	bl	80088f0 <_malloc_r>
 8009884:	4607      	mov	r7, r0
 8009886:	2800      	cmp	r0, #0
 8009888:	d0ec      	beq.n	8009864 <_realloc_r+0x1c>
 800988a:	42b5      	cmp	r5, r6
 800988c:	462a      	mov	r2, r5
 800988e:	4621      	mov	r1, r4
 8009890:	bf28      	it	cs
 8009892:	4632      	movcs	r2, r6
 8009894:	f7fd fe15 	bl	80074c2 <memcpy>
 8009898:	4621      	mov	r1, r4
 800989a:	4640      	mov	r0, r8
 800989c:	f7fe fc7c 	bl	8008198 <_free_r>
 80098a0:	463c      	mov	r4, r7
 80098a2:	e7e0      	b.n	8009866 <_realloc_r+0x1e>

080098a4 <fiprintf>:
 80098a4:	b40e      	push	{r1, r2, r3}
 80098a6:	b503      	push	{r0, r1, lr}
 80098a8:	4601      	mov	r1, r0
 80098aa:	ab03      	add	r3, sp, #12
 80098ac:	4805      	ldr	r0, [pc, #20]	@ (80098c4 <fiprintf+0x20>)
 80098ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80098b2:	6800      	ldr	r0, [r0, #0]
 80098b4:	9301      	str	r3, [sp, #4]
 80098b6:	f000 f83d 	bl	8009934 <_vfiprintf_r>
 80098ba:	b002      	add	sp, #8
 80098bc:	f85d eb04 	ldr.w	lr, [sp], #4
 80098c0:	b003      	add	sp, #12
 80098c2:	4770      	bx	lr
 80098c4:	20000198 	.word	0x20000198

080098c8 <abort>:
 80098c8:	2006      	movs	r0, #6
 80098ca:	b508      	push	{r3, lr}
 80098cc:	f000 fa06 	bl	8009cdc <raise>
 80098d0:	2001      	movs	r0, #1
 80098d2:	f7f7 fe0e 	bl	80014f2 <_exit>

080098d6 <_malloc_usable_size_r>:
 80098d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098da:	1f18      	subs	r0, r3, #4
 80098dc:	2b00      	cmp	r3, #0
 80098de:	bfbc      	itt	lt
 80098e0:	580b      	ldrlt	r3, [r1, r0]
 80098e2:	18c0      	addlt	r0, r0, r3
 80098e4:	4770      	bx	lr

080098e6 <__sfputc_r>:
 80098e6:	6893      	ldr	r3, [r2, #8]
 80098e8:	b410      	push	{r4}
 80098ea:	3b01      	subs	r3, #1
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	6093      	str	r3, [r2, #8]
 80098f0:	da07      	bge.n	8009902 <__sfputc_r+0x1c>
 80098f2:	6994      	ldr	r4, [r2, #24]
 80098f4:	42a3      	cmp	r3, r4
 80098f6:	db01      	blt.n	80098fc <__sfputc_r+0x16>
 80098f8:	290a      	cmp	r1, #10
 80098fa:	d102      	bne.n	8009902 <__sfputc_r+0x1c>
 80098fc:	bc10      	pop	{r4}
 80098fe:	f000 b931 	b.w	8009b64 <__swbuf_r>
 8009902:	6813      	ldr	r3, [r2, #0]
 8009904:	1c58      	adds	r0, r3, #1
 8009906:	6010      	str	r0, [r2, #0]
 8009908:	7019      	strb	r1, [r3, #0]
 800990a:	4608      	mov	r0, r1
 800990c:	bc10      	pop	{r4}
 800990e:	4770      	bx	lr

08009910 <__sfputs_r>:
 8009910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009912:	4606      	mov	r6, r0
 8009914:	460f      	mov	r7, r1
 8009916:	4614      	mov	r4, r2
 8009918:	18d5      	adds	r5, r2, r3
 800991a:	42ac      	cmp	r4, r5
 800991c:	d101      	bne.n	8009922 <__sfputs_r+0x12>
 800991e:	2000      	movs	r0, #0
 8009920:	e007      	b.n	8009932 <__sfputs_r+0x22>
 8009922:	463a      	mov	r2, r7
 8009924:	4630      	mov	r0, r6
 8009926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800992a:	f7ff ffdc 	bl	80098e6 <__sfputc_r>
 800992e:	1c43      	adds	r3, r0, #1
 8009930:	d1f3      	bne.n	800991a <__sfputs_r+0xa>
 8009932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009934 <_vfiprintf_r>:
 8009934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009938:	460d      	mov	r5, r1
 800993a:	4614      	mov	r4, r2
 800993c:	4698      	mov	r8, r3
 800993e:	4606      	mov	r6, r0
 8009940:	b09d      	sub	sp, #116	@ 0x74
 8009942:	b118      	cbz	r0, 800994c <_vfiprintf_r+0x18>
 8009944:	6a03      	ldr	r3, [r0, #32]
 8009946:	b90b      	cbnz	r3, 800994c <_vfiprintf_r+0x18>
 8009948:	f7fd fc62 	bl	8007210 <__sinit>
 800994c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800994e:	07d9      	lsls	r1, r3, #31
 8009950:	d405      	bmi.n	800995e <_vfiprintf_r+0x2a>
 8009952:	89ab      	ldrh	r3, [r5, #12]
 8009954:	059a      	lsls	r2, r3, #22
 8009956:	d402      	bmi.n	800995e <_vfiprintf_r+0x2a>
 8009958:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800995a:	f7fd fd9a 	bl	8007492 <__retarget_lock_acquire_recursive>
 800995e:	89ab      	ldrh	r3, [r5, #12]
 8009960:	071b      	lsls	r3, r3, #28
 8009962:	d501      	bpl.n	8009968 <_vfiprintf_r+0x34>
 8009964:	692b      	ldr	r3, [r5, #16]
 8009966:	b99b      	cbnz	r3, 8009990 <_vfiprintf_r+0x5c>
 8009968:	4629      	mov	r1, r5
 800996a:	4630      	mov	r0, r6
 800996c:	f000 f938 	bl	8009be0 <__swsetup_r>
 8009970:	b170      	cbz	r0, 8009990 <_vfiprintf_r+0x5c>
 8009972:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009974:	07dc      	lsls	r4, r3, #31
 8009976:	d504      	bpl.n	8009982 <_vfiprintf_r+0x4e>
 8009978:	f04f 30ff 	mov.w	r0, #4294967295
 800997c:	b01d      	add	sp, #116	@ 0x74
 800997e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009982:	89ab      	ldrh	r3, [r5, #12]
 8009984:	0598      	lsls	r0, r3, #22
 8009986:	d4f7      	bmi.n	8009978 <_vfiprintf_r+0x44>
 8009988:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800998a:	f7fd fd83 	bl	8007494 <__retarget_lock_release_recursive>
 800998e:	e7f3      	b.n	8009978 <_vfiprintf_r+0x44>
 8009990:	2300      	movs	r3, #0
 8009992:	9309      	str	r3, [sp, #36]	@ 0x24
 8009994:	2320      	movs	r3, #32
 8009996:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800999a:	2330      	movs	r3, #48	@ 0x30
 800999c:	f04f 0901 	mov.w	r9, #1
 80099a0:	f8cd 800c 	str.w	r8, [sp, #12]
 80099a4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009b50 <_vfiprintf_r+0x21c>
 80099a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099ac:	4623      	mov	r3, r4
 80099ae:	469a      	mov	sl, r3
 80099b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099b4:	b10a      	cbz	r2, 80099ba <_vfiprintf_r+0x86>
 80099b6:	2a25      	cmp	r2, #37	@ 0x25
 80099b8:	d1f9      	bne.n	80099ae <_vfiprintf_r+0x7a>
 80099ba:	ebba 0b04 	subs.w	fp, sl, r4
 80099be:	d00b      	beq.n	80099d8 <_vfiprintf_r+0xa4>
 80099c0:	465b      	mov	r3, fp
 80099c2:	4622      	mov	r2, r4
 80099c4:	4629      	mov	r1, r5
 80099c6:	4630      	mov	r0, r6
 80099c8:	f7ff ffa2 	bl	8009910 <__sfputs_r>
 80099cc:	3001      	adds	r0, #1
 80099ce:	f000 80a7 	beq.w	8009b20 <_vfiprintf_r+0x1ec>
 80099d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099d4:	445a      	add	r2, fp
 80099d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80099d8:	f89a 3000 	ldrb.w	r3, [sl]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f000 809f 	beq.w	8009b20 <_vfiprintf_r+0x1ec>
 80099e2:	2300      	movs	r3, #0
 80099e4:	f04f 32ff 	mov.w	r2, #4294967295
 80099e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099ec:	f10a 0a01 	add.w	sl, sl, #1
 80099f0:	9304      	str	r3, [sp, #16]
 80099f2:	9307      	str	r3, [sp, #28]
 80099f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80099f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80099fa:	4654      	mov	r4, sl
 80099fc:	2205      	movs	r2, #5
 80099fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a02:	4853      	ldr	r0, [pc, #332]	@ (8009b50 <_vfiprintf_r+0x21c>)
 8009a04:	f7fd fd4f 	bl	80074a6 <memchr>
 8009a08:	9a04      	ldr	r2, [sp, #16]
 8009a0a:	b9d8      	cbnz	r0, 8009a44 <_vfiprintf_r+0x110>
 8009a0c:	06d1      	lsls	r1, r2, #27
 8009a0e:	bf44      	itt	mi
 8009a10:	2320      	movmi	r3, #32
 8009a12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a16:	0713      	lsls	r3, r2, #28
 8009a18:	bf44      	itt	mi
 8009a1a:	232b      	movmi	r3, #43	@ 0x2b
 8009a1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a20:	f89a 3000 	ldrb.w	r3, [sl]
 8009a24:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a26:	d015      	beq.n	8009a54 <_vfiprintf_r+0x120>
 8009a28:	4654      	mov	r4, sl
 8009a2a:	2000      	movs	r0, #0
 8009a2c:	f04f 0c0a 	mov.w	ip, #10
 8009a30:	9a07      	ldr	r2, [sp, #28]
 8009a32:	4621      	mov	r1, r4
 8009a34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a38:	3b30      	subs	r3, #48	@ 0x30
 8009a3a:	2b09      	cmp	r3, #9
 8009a3c:	d94b      	bls.n	8009ad6 <_vfiprintf_r+0x1a2>
 8009a3e:	b1b0      	cbz	r0, 8009a6e <_vfiprintf_r+0x13a>
 8009a40:	9207      	str	r2, [sp, #28]
 8009a42:	e014      	b.n	8009a6e <_vfiprintf_r+0x13a>
 8009a44:	eba0 0308 	sub.w	r3, r0, r8
 8009a48:	fa09 f303 	lsl.w	r3, r9, r3
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	46a2      	mov	sl, r4
 8009a50:	9304      	str	r3, [sp, #16]
 8009a52:	e7d2      	b.n	80099fa <_vfiprintf_r+0xc6>
 8009a54:	9b03      	ldr	r3, [sp, #12]
 8009a56:	1d19      	adds	r1, r3, #4
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	9103      	str	r1, [sp, #12]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	bfbb      	ittet	lt
 8009a60:	425b      	neglt	r3, r3
 8009a62:	f042 0202 	orrlt.w	r2, r2, #2
 8009a66:	9307      	strge	r3, [sp, #28]
 8009a68:	9307      	strlt	r3, [sp, #28]
 8009a6a:	bfb8      	it	lt
 8009a6c:	9204      	strlt	r2, [sp, #16]
 8009a6e:	7823      	ldrb	r3, [r4, #0]
 8009a70:	2b2e      	cmp	r3, #46	@ 0x2e
 8009a72:	d10a      	bne.n	8009a8a <_vfiprintf_r+0x156>
 8009a74:	7863      	ldrb	r3, [r4, #1]
 8009a76:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a78:	d132      	bne.n	8009ae0 <_vfiprintf_r+0x1ac>
 8009a7a:	9b03      	ldr	r3, [sp, #12]
 8009a7c:	3402      	adds	r4, #2
 8009a7e:	1d1a      	adds	r2, r3, #4
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	9203      	str	r2, [sp, #12]
 8009a84:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a88:	9305      	str	r3, [sp, #20]
 8009a8a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009b54 <_vfiprintf_r+0x220>
 8009a8e:	2203      	movs	r2, #3
 8009a90:	4650      	mov	r0, sl
 8009a92:	7821      	ldrb	r1, [r4, #0]
 8009a94:	f7fd fd07 	bl	80074a6 <memchr>
 8009a98:	b138      	cbz	r0, 8009aaa <_vfiprintf_r+0x176>
 8009a9a:	2240      	movs	r2, #64	@ 0x40
 8009a9c:	9b04      	ldr	r3, [sp, #16]
 8009a9e:	eba0 000a 	sub.w	r0, r0, sl
 8009aa2:	4082      	lsls	r2, r0
 8009aa4:	4313      	orrs	r3, r2
 8009aa6:	3401      	adds	r4, #1
 8009aa8:	9304      	str	r3, [sp, #16]
 8009aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aae:	2206      	movs	r2, #6
 8009ab0:	4829      	ldr	r0, [pc, #164]	@ (8009b58 <_vfiprintf_r+0x224>)
 8009ab2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ab6:	f7fd fcf6 	bl	80074a6 <memchr>
 8009aba:	2800      	cmp	r0, #0
 8009abc:	d03f      	beq.n	8009b3e <_vfiprintf_r+0x20a>
 8009abe:	4b27      	ldr	r3, [pc, #156]	@ (8009b5c <_vfiprintf_r+0x228>)
 8009ac0:	bb1b      	cbnz	r3, 8009b0a <_vfiprintf_r+0x1d6>
 8009ac2:	9b03      	ldr	r3, [sp, #12]
 8009ac4:	3307      	adds	r3, #7
 8009ac6:	f023 0307 	bic.w	r3, r3, #7
 8009aca:	3308      	adds	r3, #8
 8009acc:	9303      	str	r3, [sp, #12]
 8009ace:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ad0:	443b      	add	r3, r7
 8009ad2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ad4:	e76a      	b.n	80099ac <_vfiprintf_r+0x78>
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	2001      	movs	r0, #1
 8009ada:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ade:	e7a8      	b.n	8009a32 <_vfiprintf_r+0xfe>
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	f04f 0c0a 	mov.w	ip, #10
 8009ae6:	4619      	mov	r1, r3
 8009ae8:	3401      	adds	r4, #1
 8009aea:	9305      	str	r3, [sp, #20]
 8009aec:	4620      	mov	r0, r4
 8009aee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009af2:	3a30      	subs	r2, #48	@ 0x30
 8009af4:	2a09      	cmp	r2, #9
 8009af6:	d903      	bls.n	8009b00 <_vfiprintf_r+0x1cc>
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d0c6      	beq.n	8009a8a <_vfiprintf_r+0x156>
 8009afc:	9105      	str	r1, [sp, #20]
 8009afe:	e7c4      	b.n	8009a8a <_vfiprintf_r+0x156>
 8009b00:	4604      	mov	r4, r0
 8009b02:	2301      	movs	r3, #1
 8009b04:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b08:	e7f0      	b.n	8009aec <_vfiprintf_r+0x1b8>
 8009b0a:	ab03      	add	r3, sp, #12
 8009b0c:	9300      	str	r3, [sp, #0]
 8009b0e:	462a      	mov	r2, r5
 8009b10:	4630      	mov	r0, r6
 8009b12:	4b13      	ldr	r3, [pc, #76]	@ (8009b60 <_vfiprintf_r+0x22c>)
 8009b14:	a904      	add	r1, sp, #16
 8009b16:	f7fc ff31 	bl	800697c <_printf_float>
 8009b1a:	4607      	mov	r7, r0
 8009b1c:	1c78      	adds	r0, r7, #1
 8009b1e:	d1d6      	bne.n	8009ace <_vfiprintf_r+0x19a>
 8009b20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b22:	07d9      	lsls	r1, r3, #31
 8009b24:	d405      	bmi.n	8009b32 <_vfiprintf_r+0x1fe>
 8009b26:	89ab      	ldrh	r3, [r5, #12]
 8009b28:	059a      	lsls	r2, r3, #22
 8009b2a:	d402      	bmi.n	8009b32 <_vfiprintf_r+0x1fe>
 8009b2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b2e:	f7fd fcb1 	bl	8007494 <__retarget_lock_release_recursive>
 8009b32:	89ab      	ldrh	r3, [r5, #12]
 8009b34:	065b      	lsls	r3, r3, #25
 8009b36:	f53f af1f 	bmi.w	8009978 <_vfiprintf_r+0x44>
 8009b3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b3c:	e71e      	b.n	800997c <_vfiprintf_r+0x48>
 8009b3e:	ab03      	add	r3, sp, #12
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	462a      	mov	r2, r5
 8009b44:	4630      	mov	r0, r6
 8009b46:	4b06      	ldr	r3, [pc, #24]	@ (8009b60 <_vfiprintf_r+0x22c>)
 8009b48:	a904      	add	r1, sp, #16
 8009b4a:	f7fd f9b5 	bl	8006eb8 <_printf_i>
 8009b4e:	e7e4      	b.n	8009b1a <_vfiprintf_r+0x1e6>
 8009b50:	0800a5c8 	.word	0x0800a5c8
 8009b54:	0800a5ce 	.word	0x0800a5ce
 8009b58:	0800a5d2 	.word	0x0800a5d2
 8009b5c:	0800697d 	.word	0x0800697d
 8009b60:	08009911 	.word	0x08009911

08009b64 <__swbuf_r>:
 8009b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b66:	460e      	mov	r6, r1
 8009b68:	4614      	mov	r4, r2
 8009b6a:	4605      	mov	r5, r0
 8009b6c:	b118      	cbz	r0, 8009b76 <__swbuf_r+0x12>
 8009b6e:	6a03      	ldr	r3, [r0, #32]
 8009b70:	b90b      	cbnz	r3, 8009b76 <__swbuf_r+0x12>
 8009b72:	f7fd fb4d 	bl	8007210 <__sinit>
 8009b76:	69a3      	ldr	r3, [r4, #24]
 8009b78:	60a3      	str	r3, [r4, #8]
 8009b7a:	89a3      	ldrh	r3, [r4, #12]
 8009b7c:	071a      	lsls	r2, r3, #28
 8009b7e:	d501      	bpl.n	8009b84 <__swbuf_r+0x20>
 8009b80:	6923      	ldr	r3, [r4, #16]
 8009b82:	b943      	cbnz	r3, 8009b96 <__swbuf_r+0x32>
 8009b84:	4621      	mov	r1, r4
 8009b86:	4628      	mov	r0, r5
 8009b88:	f000 f82a 	bl	8009be0 <__swsetup_r>
 8009b8c:	b118      	cbz	r0, 8009b96 <__swbuf_r+0x32>
 8009b8e:	f04f 37ff 	mov.w	r7, #4294967295
 8009b92:	4638      	mov	r0, r7
 8009b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b96:	6823      	ldr	r3, [r4, #0]
 8009b98:	6922      	ldr	r2, [r4, #16]
 8009b9a:	b2f6      	uxtb	r6, r6
 8009b9c:	1a98      	subs	r0, r3, r2
 8009b9e:	6963      	ldr	r3, [r4, #20]
 8009ba0:	4637      	mov	r7, r6
 8009ba2:	4283      	cmp	r3, r0
 8009ba4:	dc05      	bgt.n	8009bb2 <__swbuf_r+0x4e>
 8009ba6:	4621      	mov	r1, r4
 8009ba8:	4628      	mov	r0, r5
 8009baa:	f7ff fdc9 	bl	8009740 <_fflush_r>
 8009bae:	2800      	cmp	r0, #0
 8009bb0:	d1ed      	bne.n	8009b8e <__swbuf_r+0x2a>
 8009bb2:	68a3      	ldr	r3, [r4, #8]
 8009bb4:	3b01      	subs	r3, #1
 8009bb6:	60a3      	str	r3, [r4, #8]
 8009bb8:	6823      	ldr	r3, [r4, #0]
 8009bba:	1c5a      	adds	r2, r3, #1
 8009bbc:	6022      	str	r2, [r4, #0]
 8009bbe:	701e      	strb	r6, [r3, #0]
 8009bc0:	6962      	ldr	r2, [r4, #20]
 8009bc2:	1c43      	adds	r3, r0, #1
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	d004      	beq.n	8009bd2 <__swbuf_r+0x6e>
 8009bc8:	89a3      	ldrh	r3, [r4, #12]
 8009bca:	07db      	lsls	r3, r3, #31
 8009bcc:	d5e1      	bpl.n	8009b92 <__swbuf_r+0x2e>
 8009bce:	2e0a      	cmp	r6, #10
 8009bd0:	d1df      	bne.n	8009b92 <__swbuf_r+0x2e>
 8009bd2:	4621      	mov	r1, r4
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	f7ff fdb3 	bl	8009740 <_fflush_r>
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	d0d9      	beq.n	8009b92 <__swbuf_r+0x2e>
 8009bde:	e7d6      	b.n	8009b8e <__swbuf_r+0x2a>

08009be0 <__swsetup_r>:
 8009be0:	b538      	push	{r3, r4, r5, lr}
 8009be2:	4b29      	ldr	r3, [pc, #164]	@ (8009c88 <__swsetup_r+0xa8>)
 8009be4:	4605      	mov	r5, r0
 8009be6:	6818      	ldr	r0, [r3, #0]
 8009be8:	460c      	mov	r4, r1
 8009bea:	b118      	cbz	r0, 8009bf4 <__swsetup_r+0x14>
 8009bec:	6a03      	ldr	r3, [r0, #32]
 8009bee:	b90b      	cbnz	r3, 8009bf4 <__swsetup_r+0x14>
 8009bf0:	f7fd fb0e 	bl	8007210 <__sinit>
 8009bf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bf8:	0719      	lsls	r1, r3, #28
 8009bfa:	d422      	bmi.n	8009c42 <__swsetup_r+0x62>
 8009bfc:	06da      	lsls	r2, r3, #27
 8009bfe:	d407      	bmi.n	8009c10 <__swsetup_r+0x30>
 8009c00:	2209      	movs	r2, #9
 8009c02:	602a      	str	r2, [r5, #0]
 8009c04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c08:	f04f 30ff 	mov.w	r0, #4294967295
 8009c0c:	81a3      	strh	r3, [r4, #12]
 8009c0e:	e033      	b.n	8009c78 <__swsetup_r+0x98>
 8009c10:	0758      	lsls	r0, r3, #29
 8009c12:	d512      	bpl.n	8009c3a <__swsetup_r+0x5a>
 8009c14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c16:	b141      	cbz	r1, 8009c2a <__swsetup_r+0x4a>
 8009c18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c1c:	4299      	cmp	r1, r3
 8009c1e:	d002      	beq.n	8009c26 <__swsetup_r+0x46>
 8009c20:	4628      	mov	r0, r5
 8009c22:	f7fe fab9 	bl	8008198 <_free_r>
 8009c26:	2300      	movs	r3, #0
 8009c28:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c2a:	89a3      	ldrh	r3, [r4, #12]
 8009c2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009c30:	81a3      	strh	r3, [r4, #12]
 8009c32:	2300      	movs	r3, #0
 8009c34:	6063      	str	r3, [r4, #4]
 8009c36:	6923      	ldr	r3, [r4, #16]
 8009c38:	6023      	str	r3, [r4, #0]
 8009c3a:	89a3      	ldrh	r3, [r4, #12]
 8009c3c:	f043 0308 	orr.w	r3, r3, #8
 8009c40:	81a3      	strh	r3, [r4, #12]
 8009c42:	6923      	ldr	r3, [r4, #16]
 8009c44:	b94b      	cbnz	r3, 8009c5a <__swsetup_r+0x7a>
 8009c46:	89a3      	ldrh	r3, [r4, #12]
 8009c48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009c4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c50:	d003      	beq.n	8009c5a <__swsetup_r+0x7a>
 8009c52:	4621      	mov	r1, r4
 8009c54:	4628      	mov	r0, r5
 8009c56:	f000 f882 	bl	8009d5e <__smakebuf_r>
 8009c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c5e:	f013 0201 	ands.w	r2, r3, #1
 8009c62:	d00a      	beq.n	8009c7a <__swsetup_r+0x9a>
 8009c64:	2200      	movs	r2, #0
 8009c66:	60a2      	str	r2, [r4, #8]
 8009c68:	6962      	ldr	r2, [r4, #20]
 8009c6a:	4252      	negs	r2, r2
 8009c6c:	61a2      	str	r2, [r4, #24]
 8009c6e:	6922      	ldr	r2, [r4, #16]
 8009c70:	b942      	cbnz	r2, 8009c84 <__swsetup_r+0xa4>
 8009c72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009c76:	d1c5      	bne.n	8009c04 <__swsetup_r+0x24>
 8009c78:	bd38      	pop	{r3, r4, r5, pc}
 8009c7a:	0799      	lsls	r1, r3, #30
 8009c7c:	bf58      	it	pl
 8009c7e:	6962      	ldrpl	r2, [r4, #20]
 8009c80:	60a2      	str	r2, [r4, #8]
 8009c82:	e7f4      	b.n	8009c6e <__swsetup_r+0x8e>
 8009c84:	2000      	movs	r0, #0
 8009c86:	e7f7      	b.n	8009c78 <__swsetup_r+0x98>
 8009c88:	20000198 	.word	0x20000198

08009c8c <_raise_r>:
 8009c8c:	291f      	cmp	r1, #31
 8009c8e:	b538      	push	{r3, r4, r5, lr}
 8009c90:	4605      	mov	r5, r0
 8009c92:	460c      	mov	r4, r1
 8009c94:	d904      	bls.n	8009ca0 <_raise_r+0x14>
 8009c96:	2316      	movs	r3, #22
 8009c98:	6003      	str	r3, [r0, #0]
 8009c9a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c9e:	bd38      	pop	{r3, r4, r5, pc}
 8009ca0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009ca2:	b112      	cbz	r2, 8009caa <_raise_r+0x1e>
 8009ca4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ca8:	b94b      	cbnz	r3, 8009cbe <_raise_r+0x32>
 8009caa:	4628      	mov	r0, r5
 8009cac:	f000 f830 	bl	8009d10 <_getpid_r>
 8009cb0:	4622      	mov	r2, r4
 8009cb2:	4601      	mov	r1, r0
 8009cb4:	4628      	mov	r0, r5
 8009cb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cba:	f000 b817 	b.w	8009cec <_kill_r>
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d00a      	beq.n	8009cd8 <_raise_r+0x4c>
 8009cc2:	1c59      	adds	r1, r3, #1
 8009cc4:	d103      	bne.n	8009cce <_raise_r+0x42>
 8009cc6:	2316      	movs	r3, #22
 8009cc8:	6003      	str	r3, [r0, #0]
 8009cca:	2001      	movs	r0, #1
 8009ccc:	e7e7      	b.n	8009c9e <_raise_r+0x12>
 8009cce:	2100      	movs	r1, #0
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009cd6:	4798      	blx	r3
 8009cd8:	2000      	movs	r0, #0
 8009cda:	e7e0      	b.n	8009c9e <_raise_r+0x12>

08009cdc <raise>:
 8009cdc:	4b02      	ldr	r3, [pc, #8]	@ (8009ce8 <raise+0xc>)
 8009cde:	4601      	mov	r1, r0
 8009ce0:	6818      	ldr	r0, [r3, #0]
 8009ce2:	f7ff bfd3 	b.w	8009c8c <_raise_r>
 8009ce6:	bf00      	nop
 8009ce8:	20000198 	.word	0x20000198

08009cec <_kill_r>:
 8009cec:	b538      	push	{r3, r4, r5, lr}
 8009cee:	2300      	movs	r3, #0
 8009cf0:	4d06      	ldr	r5, [pc, #24]	@ (8009d0c <_kill_r+0x20>)
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	4608      	mov	r0, r1
 8009cf6:	4611      	mov	r1, r2
 8009cf8:	602b      	str	r3, [r5, #0]
 8009cfa:	f7f7 fbea 	bl	80014d2 <_kill>
 8009cfe:	1c43      	adds	r3, r0, #1
 8009d00:	d102      	bne.n	8009d08 <_kill_r+0x1c>
 8009d02:	682b      	ldr	r3, [r5, #0]
 8009d04:	b103      	cbz	r3, 8009d08 <_kill_r+0x1c>
 8009d06:	6023      	str	r3, [r4, #0]
 8009d08:	bd38      	pop	{r3, r4, r5, pc}
 8009d0a:	bf00      	nop
 8009d0c:	20000b7c 	.word	0x20000b7c

08009d10 <_getpid_r>:
 8009d10:	f7f7 bbd8 	b.w	80014c4 <_getpid>

08009d14 <__swhatbuf_r>:
 8009d14:	b570      	push	{r4, r5, r6, lr}
 8009d16:	460c      	mov	r4, r1
 8009d18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d1c:	4615      	mov	r5, r2
 8009d1e:	2900      	cmp	r1, #0
 8009d20:	461e      	mov	r6, r3
 8009d22:	b096      	sub	sp, #88	@ 0x58
 8009d24:	da0c      	bge.n	8009d40 <__swhatbuf_r+0x2c>
 8009d26:	89a3      	ldrh	r3, [r4, #12]
 8009d28:	2100      	movs	r1, #0
 8009d2a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009d2e:	bf14      	ite	ne
 8009d30:	2340      	movne	r3, #64	@ 0x40
 8009d32:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009d36:	2000      	movs	r0, #0
 8009d38:	6031      	str	r1, [r6, #0]
 8009d3a:	602b      	str	r3, [r5, #0]
 8009d3c:	b016      	add	sp, #88	@ 0x58
 8009d3e:	bd70      	pop	{r4, r5, r6, pc}
 8009d40:	466a      	mov	r2, sp
 8009d42:	f000 f849 	bl	8009dd8 <_fstat_r>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	dbed      	blt.n	8009d26 <__swhatbuf_r+0x12>
 8009d4a:	9901      	ldr	r1, [sp, #4]
 8009d4c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009d50:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009d54:	4259      	negs	r1, r3
 8009d56:	4159      	adcs	r1, r3
 8009d58:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d5c:	e7eb      	b.n	8009d36 <__swhatbuf_r+0x22>

08009d5e <__smakebuf_r>:
 8009d5e:	898b      	ldrh	r3, [r1, #12]
 8009d60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d62:	079d      	lsls	r5, r3, #30
 8009d64:	4606      	mov	r6, r0
 8009d66:	460c      	mov	r4, r1
 8009d68:	d507      	bpl.n	8009d7a <__smakebuf_r+0x1c>
 8009d6a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009d6e:	6023      	str	r3, [r4, #0]
 8009d70:	6123      	str	r3, [r4, #16]
 8009d72:	2301      	movs	r3, #1
 8009d74:	6163      	str	r3, [r4, #20]
 8009d76:	b003      	add	sp, #12
 8009d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d7a:	466a      	mov	r2, sp
 8009d7c:	ab01      	add	r3, sp, #4
 8009d7e:	f7ff ffc9 	bl	8009d14 <__swhatbuf_r>
 8009d82:	9f00      	ldr	r7, [sp, #0]
 8009d84:	4605      	mov	r5, r0
 8009d86:	4639      	mov	r1, r7
 8009d88:	4630      	mov	r0, r6
 8009d8a:	f7fe fdb1 	bl	80088f0 <_malloc_r>
 8009d8e:	b948      	cbnz	r0, 8009da4 <__smakebuf_r+0x46>
 8009d90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d94:	059a      	lsls	r2, r3, #22
 8009d96:	d4ee      	bmi.n	8009d76 <__smakebuf_r+0x18>
 8009d98:	f023 0303 	bic.w	r3, r3, #3
 8009d9c:	f043 0302 	orr.w	r3, r3, #2
 8009da0:	81a3      	strh	r3, [r4, #12]
 8009da2:	e7e2      	b.n	8009d6a <__smakebuf_r+0xc>
 8009da4:	89a3      	ldrh	r3, [r4, #12]
 8009da6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009dae:	81a3      	strh	r3, [r4, #12]
 8009db0:	9b01      	ldr	r3, [sp, #4]
 8009db2:	6020      	str	r0, [r4, #0]
 8009db4:	b15b      	cbz	r3, 8009dce <__smakebuf_r+0x70>
 8009db6:	4630      	mov	r0, r6
 8009db8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009dbc:	f000 f81e 	bl	8009dfc <_isatty_r>
 8009dc0:	b128      	cbz	r0, 8009dce <__smakebuf_r+0x70>
 8009dc2:	89a3      	ldrh	r3, [r4, #12]
 8009dc4:	f023 0303 	bic.w	r3, r3, #3
 8009dc8:	f043 0301 	orr.w	r3, r3, #1
 8009dcc:	81a3      	strh	r3, [r4, #12]
 8009dce:	89a3      	ldrh	r3, [r4, #12]
 8009dd0:	431d      	orrs	r5, r3
 8009dd2:	81a5      	strh	r5, [r4, #12]
 8009dd4:	e7cf      	b.n	8009d76 <__smakebuf_r+0x18>
	...

08009dd8 <_fstat_r>:
 8009dd8:	b538      	push	{r3, r4, r5, lr}
 8009dda:	2300      	movs	r3, #0
 8009ddc:	4d06      	ldr	r5, [pc, #24]	@ (8009df8 <_fstat_r+0x20>)
 8009dde:	4604      	mov	r4, r0
 8009de0:	4608      	mov	r0, r1
 8009de2:	4611      	mov	r1, r2
 8009de4:	602b      	str	r3, [r5, #0]
 8009de6:	f7f7 fbd3 	bl	8001590 <_fstat>
 8009dea:	1c43      	adds	r3, r0, #1
 8009dec:	d102      	bne.n	8009df4 <_fstat_r+0x1c>
 8009dee:	682b      	ldr	r3, [r5, #0]
 8009df0:	b103      	cbz	r3, 8009df4 <_fstat_r+0x1c>
 8009df2:	6023      	str	r3, [r4, #0]
 8009df4:	bd38      	pop	{r3, r4, r5, pc}
 8009df6:	bf00      	nop
 8009df8:	20000b7c 	.word	0x20000b7c

08009dfc <_isatty_r>:
 8009dfc:	b538      	push	{r3, r4, r5, lr}
 8009dfe:	2300      	movs	r3, #0
 8009e00:	4d05      	ldr	r5, [pc, #20]	@ (8009e18 <_isatty_r+0x1c>)
 8009e02:	4604      	mov	r4, r0
 8009e04:	4608      	mov	r0, r1
 8009e06:	602b      	str	r3, [r5, #0]
 8009e08:	f7f7 fbd1 	bl	80015ae <_isatty>
 8009e0c:	1c43      	adds	r3, r0, #1
 8009e0e:	d102      	bne.n	8009e16 <_isatty_r+0x1a>
 8009e10:	682b      	ldr	r3, [r5, #0]
 8009e12:	b103      	cbz	r3, 8009e16 <_isatty_r+0x1a>
 8009e14:	6023      	str	r3, [r4, #0]
 8009e16:	bd38      	pop	{r3, r4, r5, pc}
 8009e18:	20000b7c 	.word	0x20000b7c

08009e1c <_init>:
 8009e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1e:	bf00      	nop
 8009e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e22:	bc08      	pop	{r3}
 8009e24:	469e      	mov	lr, r3
 8009e26:	4770      	bx	lr

08009e28 <_fini>:
 8009e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e2a:	bf00      	nop
 8009e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e2e:	bc08      	pop	{r3}
 8009e30:	469e      	mov	lr, r3
 8009e32:	4770      	bx	lr
