
beacon_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5cc  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007b0  0800a6e0  0800a6e0  0000b6e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae90  0800ae90  0000c1ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae90  0800ae90  0000be90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae98  0800ae98  0000c1ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae98  0800ae98  0000be98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ae9c  0800ae9c  0000be9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001ec  20000000  0800aea0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000998  200001ec  0800b08c  0000c1ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b84  0800b08c  0000cb84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae7b  00000000  00000000  0000c215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002be7  00000000  00000000  00017090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000af0  00000000  00000000  00019c78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000081e  00000000  00000000  0001a768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a948  00000000  00000000  0001af86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ab5  00000000  00000000  000358ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085afb  00000000  00000000  00049383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cee7e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed8  00000000  00000000  000ceec4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000d2d9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a6c4 	.word	0x0800a6c4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	0800a6c4 	.word	0x0800a6c4

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_d2f>:
 8000adc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ae4:	bf24      	itt	cs
 8000ae6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aee:	d90d      	bls.n	8000b0c <__aeabi_d2f+0x30>
 8000af0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000af4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000afc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b10:	d121      	bne.n	8000b56 <__aeabi_d2f+0x7a>
 8000b12:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b16:	bfbc      	itt	lt
 8000b18:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b1c:	4770      	bxlt	lr
 8000b1e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b26:	f1c2 0218 	rsb	r2, r2, #24
 8000b2a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b32:	fa20 f002 	lsr.w	r0, r0, r2
 8000b36:	bf18      	it	ne
 8000b38:	f040 0001 	orrne.w	r0, r0, #1
 8000b3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b48:	ea40 000c 	orr.w	r0, r0, ip
 8000b4c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b54:	e7cc      	b.n	8000af0 <__aeabi_d2f+0x14>
 8000b56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b5a:	d107      	bne.n	8000b6c <__aeabi_d2f+0x90>
 8000b5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b60:	bf1e      	ittt	ne
 8000b62:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b66:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b6a:	4770      	bxne	lr
 8000b6c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b70:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b74:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_frsub>:
 8000b7c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b80:	e002      	b.n	8000b88 <__addsf3>
 8000b82:	bf00      	nop

08000b84 <__aeabi_fsub>:
 8000b84:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b88 <__addsf3>:
 8000b88:	0042      	lsls	r2, r0, #1
 8000b8a:	bf1f      	itttt	ne
 8000b8c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b90:	ea92 0f03 	teqne	r2, r3
 8000b94:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b98:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b9c:	d06a      	beq.n	8000c74 <__addsf3+0xec>
 8000b9e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ba2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ba6:	bfc1      	itttt	gt
 8000ba8:	18d2      	addgt	r2, r2, r3
 8000baa:	4041      	eorgt	r1, r0
 8000bac:	4048      	eorgt	r0, r1
 8000bae:	4041      	eorgt	r1, r0
 8000bb0:	bfb8      	it	lt
 8000bb2:	425b      	neglt	r3, r3
 8000bb4:	2b19      	cmp	r3, #25
 8000bb6:	bf88      	it	hi
 8000bb8:	4770      	bxhi	lr
 8000bba:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bc2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bc6:	bf18      	it	ne
 8000bc8:	4240      	negne	r0, r0
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bd2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bd6:	bf18      	it	ne
 8000bd8:	4249      	negne	r1, r1
 8000bda:	ea92 0f03 	teq	r2, r3
 8000bde:	d03f      	beq.n	8000c60 <__addsf3+0xd8>
 8000be0:	f1a2 0201 	sub.w	r2, r2, #1
 8000be4:	fa41 fc03 	asr.w	ip, r1, r3
 8000be8:	eb10 000c 	adds.w	r0, r0, ip
 8000bec:	f1c3 0320 	rsb	r3, r3, #32
 8000bf0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bf4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bf8:	d502      	bpl.n	8000c00 <__addsf3+0x78>
 8000bfa:	4249      	negs	r1, r1
 8000bfc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c00:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c04:	d313      	bcc.n	8000c2e <__addsf3+0xa6>
 8000c06:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c0a:	d306      	bcc.n	8000c1a <__addsf3+0x92>
 8000c0c:	0840      	lsrs	r0, r0, #1
 8000c0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c12:	f102 0201 	add.w	r2, r2, #1
 8000c16:	2afe      	cmp	r2, #254	@ 0xfe
 8000c18:	d251      	bcs.n	8000cbe <__addsf3+0x136>
 8000c1a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c22:	bf08      	it	eq
 8000c24:	f020 0001 	biceq.w	r0, r0, #1
 8000c28:	ea40 0003 	orr.w	r0, r0, r3
 8000c2c:	4770      	bx	lr
 8000c2e:	0049      	lsls	r1, r1, #1
 8000c30:	eb40 0000 	adc.w	r0, r0, r0
 8000c34:	3a01      	subs	r2, #1
 8000c36:	bf28      	it	cs
 8000c38:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c3c:	d2ed      	bcs.n	8000c1a <__addsf3+0x92>
 8000c3e:	fab0 fc80 	clz	ip, r0
 8000c42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c46:	ebb2 020c 	subs.w	r2, r2, ip
 8000c4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c4e:	bfaa      	itet	ge
 8000c50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c54:	4252      	neglt	r2, r2
 8000c56:	4318      	orrge	r0, r3
 8000c58:	bfbc      	itt	lt
 8000c5a:	40d0      	lsrlt	r0, r2
 8000c5c:	4318      	orrlt	r0, r3
 8000c5e:	4770      	bx	lr
 8000c60:	f092 0f00 	teq	r2, #0
 8000c64:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c68:	bf06      	itte	eq
 8000c6a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c6e:	3201      	addeq	r2, #1
 8000c70:	3b01      	subne	r3, #1
 8000c72:	e7b5      	b.n	8000be0 <__addsf3+0x58>
 8000c74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	bf18      	it	ne
 8000c7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c82:	d021      	beq.n	8000cc8 <__addsf3+0x140>
 8000c84:	ea92 0f03 	teq	r2, r3
 8000c88:	d004      	beq.n	8000c94 <__addsf3+0x10c>
 8000c8a:	f092 0f00 	teq	r2, #0
 8000c8e:	bf08      	it	eq
 8000c90:	4608      	moveq	r0, r1
 8000c92:	4770      	bx	lr
 8000c94:	ea90 0f01 	teq	r0, r1
 8000c98:	bf1c      	itt	ne
 8000c9a:	2000      	movne	r0, #0
 8000c9c:	4770      	bxne	lr
 8000c9e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ca2:	d104      	bne.n	8000cae <__addsf3+0x126>
 8000ca4:	0040      	lsls	r0, r0, #1
 8000ca6:	bf28      	it	cs
 8000ca8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000cac:	4770      	bx	lr
 8000cae:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cb2:	bf3c      	itt	cc
 8000cb4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cb8:	4770      	bxcc	lr
 8000cba:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cbe:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cc2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc6:	4770      	bx	lr
 8000cc8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ccc:	bf16      	itet	ne
 8000cce:	4608      	movne	r0, r1
 8000cd0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cd4:	4601      	movne	r1, r0
 8000cd6:	0242      	lsls	r2, r0, #9
 8000cd8:	bf06      	itte	eq
 8000cda:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cde:	ea90 0f01 	teqeq	r0, r1
 8000ce2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_ui2f>:
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e004      	b.n	8000cf8 <__aeabi_i2f+0x8>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_i2f>:
 8000cf0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cf4:	bf48      	it	mi
 8000cf6:	4240      	negmi	r0, r0
 8000cf8:	ea5f 0c00 	movs.w	ip, r0
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d04:	4601      	mov	r1, r0
 8000d06:	f04f 0000 	mov.w	r0, #0
 8000d0a:	e01c      	b.n	8000d46 <__aeabi_l2f+0x2a>

08000d0c <__aeabi_ul2f>:
 8000d0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f04f 0300 	mov.w	r3, #0
 8000d18:	e00a      	b.n	8000d30 <__aeabi_l2f+0x14>
 8000d1a:	bf00      	nop

08000d1c <__aeabi_l2f>:
 8000d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d28:	d502      	bpl.n	8000d30 <__aeabi_l2f+0x14>
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	ea5f 0c01 	movs.w	ip, r1
 8000d34:	bf02      	ittt	eq
 8000d36:	4684      	moveq	ip, r0
 8000d38:	4601      	moveq	r1, r0
 8000d3a:	2000      	moveq	r0, #0
 8000d3c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d40:	bf08      	it	eq
 8000d42:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d46:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d4a:	fabc f28c 	clz	r2, ip
 8000d4e:	3a08      	subs	r2, #8
 8000d50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d54:	db10      	blt.n	8000d78 <__aeabi_l2f+0x5c>
 8000d56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5a:	4463      	add	r3, ip
 8000d5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d60:	f1c2 0220 	rsb	r2, r2, #32
 8000d64:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d68:	fa20 f202 	lsr.w	r2, r0, r2
 8000d6c:	eb43 0002 	adc.w	r0, r3, r2
 8000d70:	bf08      	it	eq
 8000d72:	f020 0001 	biceq.w	r0, r0, #1
 8000d76:	4770      	bx	lr
 8000d78:	f102 0220 	add.w	r2, r2, #32
 8000d7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d80:	f1c2 0220 	rsb	r2, r2, #32
 8000d84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d88:	fa21 f202 	lsr.w	r2, r1, r2
 8000d8c:	eb43 0002 	adc.w	r0, r3, r2
 8000d90:	bf08      	it	eq
 8000d92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_fmul>:
 8000d98:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000da0:	bf1e      	ittt	ne
 8000da2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000da6:	ea92 0f0c 	teqne	r2, ip
 8000daa:	ea93 0f0c 	teqne	r3, ip
 8000dae:	d06f      	beq.n	8000e90 <__aeabi_fmul+0xf8>
 8000db0:	441a      	add	r2, r3
 8000db2:	ea80 0c01 	eor.w	ip, r0, r1
 8000db6:	0240      	lsls	r0, r0, #9
 8000db8:	bf18      	it	ne
 8000dba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dbe:	d01e      	beq.n	8000dfe <__aeabi_fmul+0x66>
 8000dc0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000dc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000dcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000dd0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dd4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dd8:	bf3e      	ittt	cc
 8000dda:	0049      	lslcc	r1, r1, #1
 8000ddc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000de0:	005b      	lslcc	r3, r3, #1
 8000de2:	ea40 0001 	orr.w	r0, r0, r1
 8000de6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dea:	2afd      	cmp	r2, #253	@ 0xfd
 8000dec:	d81d      	bhi.n	8000e2a <__aeabi_fmul+0x92>
 8000dee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000df2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000df6:	bf08      	it	eq
 8000df8:	f020 0001 	biceq.w	r0, r0, #1
 8000dfc:	4770      	bx	lr
 8000dfe:	f090 0f00 	teq	r0, #0
 8000e02:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000e06:	bf08      	it	eq
 8000e08:	0249      	lsleq	r1, r1, #9
 8000e0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e12:	3a7f      	subs	r2, #127	@ 0x7f
 8000e14:	bfc2      	ittt	gt
 8000e16:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e1e:	4770      	bxgt	lr
 8000e20:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e24:	f04f 0300 	mov.w	r3, #0
 8000e28:	3a01      	subs	r2, #1
 8000e2a:	dc5d      	bgt.n	8000ee8 <__aeabi_fmul+0x150>
 8000e2c:	f112 0f19 	cmn.w	r2, #25
 8000e30:	bfdc      	itt	le
 8000e32:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e36:	4770      	bxle	lr
 8000e38:	f1c2 0200 	rsb	r2, r2, #0
 8000e3c:	0041      	lsls	r1, r0, #1
 8000e3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000e42:	f1c2 0220 	rsb	r2, r2, #32
 8000e46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e4e:	f140 0000 	adc.w	r0, r0, #0
 8000e52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e56:	bf08      	it	eq
 8000e58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e5c:	4770      	bx	lr
 8000e5e:	f092 0f00 	teq	r2, #0
 8000e62:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e66:	bf02      	ittt	eq
 8000e68:	0040      	lsleq	r0, r0, #1
 8000e6a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e6e:	3a01      	subeq	r2, #1
 8000e70:	d0f9      	beq.n	8000e66 <__aeabi_fmul+0xce>
 8000e72:	ea40 000c 	orr.w	r0, r0, ip
 8000e76:	f093 0f00 	teq	r3, #0
 8000e7a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e7e:	bf02      	ittt	eq
 8000e80:	0049      	lsleq	r1, r1, #1
 8000e82:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e86:	3b01      	subeq	r3, #1
 8000e88:	d0f9      	beq.n	8000e7e <__aeabi_fmul+0xe6>
 8000e8a:	ea41 010c 	orr.w	r1, r1, ip
 8000e8e:	e78f      	b.n	8000db0 <__aeabi_fmul+0x18>
 8000e90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e94:	ea92 0f0c 	teq	r2, ip
 8000e98:	bf18      	it	ne
 8000e9a:	ea93 0f0c 	teqne	r3, ip
 8000e9e:	d00a      	beq.n	8000eb6 <__aeabi_fmul+0x11e>
 8000ea0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ea4:	bf18      	it	ne
 8000ea6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000eaa:	d1d8      	bne.n	8000e5e <__aeabi_fmul+0xc6>
 8000eac:	ea80 0001 	eor.w	r0, r0, r1
 8000eb0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eb4:	4770      	bx	lr
 8000eb6:	f090 0f00 	teq	r0, #0
 8000eba:	bf17      	itett	ne
 8000ebc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ec0:	4608      	moveq	r0, r1
 8000ec2:	f091 0f00 	teqne	r1, #0
 8000ec6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eca:	d014      	beq.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ecc:	ea92 0f0c 	teq	r2, ip
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_fmul+0x13e>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d10f      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ed6:	ea93 0f0c 	teq	r3, ip
 8000eda:	d103      	bne.n	8000ee4 <__aeabi_fmul+0x14c>
 8000edc:	024b      	lsls	r3, r1, #9
 8000ede:	bf18      	it	ne
 8000ee0:	4608      	movne	r0, r1
 8000ee2:	d108      	bne.n	8000ef6 <__aeabi_fmul+0x15e>
 8000ee4:	ea80 0001 	eor.w	r0, r0, r1
 8000ee8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ef0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ef4:	4770      	bx	lr
 8000ef6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000efa:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000efe:	4770      	bx	lr

08000f00 <__aeabi_fdiv>:
 8000f00:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000f04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f08:	bf1e      	ittt	ne
 8000f0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f0e:	ea92 0f0c 	teqne	r2, ip
 8000f12:	ea93 0f0c 	teqne	r3, ip
 8000f16:	d069      	beq.n	8000fec <__aeabi_fdiv+0xec>
 8000f18:	eba2 0203 	sub.w	r2, r2, r3
 8000f1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000f20:	0249      	lsls	r1, r1, #9
 8000f22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f26:	d037      	beq.n	8000f98 <__aeabi_fdiv+0x98>
 8000f28:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f34:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f38:	428b      	cmp	r3, r1
 8000f3a:	bf38      	it	cc
 8000f3c:	005b      	lslcc	r3, r3, #1
 8000f3e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f42:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f46:	428b      	cmp	r3, r1
 8000f48:	bf24      	itt	cs
 8000f4a:	1a5b      	subcs	r3, r3, r1
 8000f4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f62:	bf24      	itt	cs
 8000f64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f7a:	011b      	lsls	r3, r3, #4
 8000f7c:	bf18      	it	ne
 8000f7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f82:	d1e0      	bne.n	8000f46 <__aeabi_fdiv+0x46>
 8000f84:	2afd      	cmp	r2, #253	@ 0xfd
 8000f86:	f63f af50 	bhi.w	8000e2a <__aeabi_fmul+0x92>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f90:	bf08      	it	eq
 8000f92:	f020 0001 	biceq.w	r0, r0, #1
 8000f96:	4770      	bx	lr
 8000f98:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fa0:	327f      	adds	r2, #127	@ 0x7f
 8000fa2:	bfc2      	ittt	gt
 8000fa4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000fa8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fac:	4770      	bxgt	lr
 8000fae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	3a01      	subs	r2, #1
 8000fb8:	e737      	b.n	8000e2a <__aeabi_fmul+0x92>
 8000fba:	f092 0f00 	teq	r2, #0
 8000fbe:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fc2:	bf02      	ittt	eq
 8000fc4:	0040      	lsleq	r0, r0, #1
 8000fc6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fca:	3a01      	subeq	r2, #1
 8000fcc:	d0f9      	beq.n	8000fc2 <__aeabi_fdiv+0xc2>
 8000fce:	ea40 000c 	orr.w	r0, r0, ip
 8000fd2:	f093 0f00 	teq	r3, #0
 8000fd6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fda:	bf02      	ittt	eq
 8000fdc:	0049      	lsleq	r1, r1, #1
 8000fde:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fe2:	3b01      	subeq	r3, #1
 8000fe4:	d0f9      	beq.n	8000fda <__aeabi_fdiv+0xda>
 8000fe6:	ea41 010c 	orr.w	r1, r1, ip
 8000fea:	e795      	b.n	8000f18 <__aeabi_fdiv+0x18>
 8000fec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ff0:	ea92 0f0c 	teq	r2, ip
 8000ff4:	d108      	bne.n	8001008 <__aeabi_fdiv+0x108>
 8000ff6:	0242      	lsls	r2, r0, #9
 8000ff8:	f47f af7d 	bne.w	8000ef6 <__aeabi_fmul+0x15e>
 8000ffc:	ea93 0f0c 	teq	r3, ip
 8001000:	f47f af70 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 8001004:	4608      	mov	r0, r1
 8001006:	e776      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001008:	ea93 0f0c 	teq	r3, ip
 800100c:	d104      	bne.n	8001018 <__aeabi_fdiv+0x118>
 800100e:	024b      	lsls	r3, r1, #9
 8001010:	f43f af4c 	beq.w	8000eac <__aeabi_fmul+0x114>
 8001014:	4608      	mov	r0, r1
 8001016:	e76e      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001018:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800101c:	bf18      	it	ne
 800101e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8001022:	d1ca      	bne.n	8000fba <__aeabi_fdiv+0xba>
 8001024:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001028:	f47f af5c 	bne.w	8000ee4 <__aeabi_fmul+0x14c>
 800102c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8001030:	f47f af3c 	bne.w	8000eac <__aeabi_fmul+0x114>
 8001034:	e75f      	b.n	8000ef6 <__aeabi_fmul+0x15e>
 8001036:	bf00      	nop

08001038 <__gesf2>:
 8001038:	f04f 3cff 	mov.w	ip, #4294967295
 800103c:	e006      	b.n	800104c <__cmpsf2+0x4>
 800103e:	bf00      	nop

08001040 <__lesf2>:
 8001040:	f04f 0c01 	mov.w	ip, #1
 8001044:	e002      	b.n	800104c <__cmpsf2+0x4>
 8001046:	bf00      	nop

08001048 <__cmpsf2>:
 8001048:	f04f 0c01 	mov.w	ip, #1
 800104c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001050:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001054:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001058:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800105c:	bf18      	it	ne
 800105e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001062:	d011      	beq.n	8001088 <__cmpsf2+0x40>
 8001064:	b001      	add	sp, #4
 8001066:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800106a:	bf18      	it	ne
 800106c:	ea90 0f01 	teqne	r0, r1
 8001070:	bf58      	it	pl
 8001072:	ebb2 0003 	subspl.w	r0, r2, r3
 8001076:	bf88      	it	hi
 8001078:	17c8      	asrhi	r0, r1, #31
 800107a:	bf38      	it	cc
 800107c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001080:	bf18      	it	ne
 8001082:	f040 0001 	orrne.w	r0, r0, #1
 8001086:	4770      	bx	lr
 8001088:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800108c:	d102      	bne.n	8001094 <__cmpsf2+0x4c>
 800108e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001092:	d105      	bne.n	80010a0 <__cmpsf2+0x58>
 8001094:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001098:	d1e4      	bne.n	8001064 <__cmpsf2+0x1c>
 800109a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800109e:	d0e1      	beq.n	8001064 <__cmpsf2+0x1c>
 80010a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop

080010a8 <__aeabi_cfrcmple>:
 80010a8:	4684      	mov	ip, r0
 80010aa:	4608      	mov	r0, r1
 80010ac:	4661      	mov	r1, ip
 80010ae:	e7ff      	b.n	80010b0 <__aeabi_cfcmpeq>

080010b0 <__aeabi_cfcmpeq>:
 80010b0:	b50f      	push	{r0, r1, r2, r3, lr}
 80010b2:	f7ff ffc9 	bl	8001048 <__cmpsf2>
 80010b6:	2800      	cmp	r0, #0
 80010b8:	bf48      	it	mi
 80010ba:	f110 0f00 	cmnmi.w	r0, #0
 80010be:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010c0 <__aeabi_fcmpeq>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff fff4 	bl	80010b0 <__aeabi_cfcmpeq>
 80010c8:	bf0c      	ite	eq
 80010ca:	2001      	moveq	r0, #1
 80010cc:	2000      	movne	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmplt>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffea 	bl	80010b0 <__aeabi_cfcmpeq>
 80010dc:	bf34      	ite	cc
 80010de:	2001      	movcc	r0, #1
 80010e0:	2000      	movcs	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmple>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffe0 	bl	80010b0 <__aeabi_cfcmpeq>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpge>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffd2 	bl	80010a8 <__aeabi_cfrcmple>
 8001104:	bf94      	ite	ls
 8001106:	2001      	movls	r0, #1
 8001108:	2000      	movhi	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpgt>:
 8001110:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001114:	f7ff ffc8 	bl	80010a8 <__aeabi_cfrcmple>
 8001118:	bf34      	ite	cc
 800111a:	2001      	movcc	r0, #1
 800111c:	2000      	movcs	r0, #0
 800111e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001122:	bf00      	nop

08001124 <__aeabi_fcmpun>:
 8001124:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001128:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800112c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001130:	d102      	bne.n	8001138 <__aeabi_fcmpun+0x14>
 8001132:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001136:	d108      	bne.n	800114a <__aeabi_fcmpun+0x26>
 8001138:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800113c:	d102      	bne.n	8001144 <__aeabi_fcmpun+0x20>
 800113e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001142:	d102      	bne.n	800114a <__aeabi_fcmpun+0x26>
 8001144:	f04f 0000 	mov.w	r0, #0
 8001148:	4770      	bx	lr
 800114a:	f04f 0001 	mov.w	r0, #1
 800114e:	4770      	bx	lr

08001150 <__aeabi_d2lz>:
 8001150:	b538      	push	{r3, r4, r5, lr}
 8001152:	2200      	movs	r2, #0
 8001154:	2300      	movs	r3, #0
 8001156:	4604      	mov	r4, r0
 8001158:	460d      	mov	r5, r1
 800115a:	f7ff fc39 	bl	80009d0 <__aeabi_dcmplt>
 800115e:	b928      	cbnz	r0, 800116c <__aeabi_d2lz+0x1c>
 8001160:	4620      	mov	r0, r4
 8001162:	4629      	mov	r1, r5
 8001164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001168:	f000 b80a 	b.w	8001180 <__aeabi_d2ulz>
 800116c:	4620      	mov	r0, r4
 800116e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8001172:	f000 f805 	bl	8001180 <__aeabi_d2ulz>
 8001176:	4240      	negs	r0, r0
 8001178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800117c:	bd38      	pop	{r3, r4, r5, pc}
 800117e:	bf00      	nop

08001180 <__aeabi_d2ulz>:
 8001180:	b5d0      	push	{r4, r6, r7, lr}
 8001182:	2200      	movs	r2, #0
 8001184:	4b0b      	ldr	r3, [pc, #44]	@ (80011b4 <__aeabi_d2ulz+0x34>)
 8001186:	4606      	mov	r6, r0
 8001188:	460f      	mov	r7, r1
 800118a:	f7ff f9af 	bl	80004ec <__aeabi_dmul>
 800118e:	f7ff fc85 	bl	8000a9c <__aeabi_d2uiz>
 8001192:	4604      	mov	r4, r0
 8001194:	f7ff f930 	bl	80003f8 <__aeabi_ui2d>
 8001198:	2200      	movs	r2, #0
 800119a:	4b07      	ldr	r3, [pc, #28]	@ (80011b8 <__aeabi_d2ulz+0x38>)
 800119c:	f7ff f9a6 	bl	80004ec <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4630      	mov	r0, r6
 80011a6:	4639      	mov	r1, r7
 80011a8:	f7fe ffe8 	bl	800017c <__aeabi_dsub>
 80011ac:	f7ff fc76 	bl	8000a9c <__aeabi_d2uiz>
 80011b0:	4621      	mov	r1, r4
 80011b2:	bdd0      	pop	{r4, r6, r7, pc}
 80011b4:	3df00000 	.word	0x3df00000
 80011b8:	41f00000 	.word	0x41f00000

080011bc <apInit>:

void StopMode(void);


void apInit(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  cliOpen(_DEF_UART2, 57600);
 80011c0:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 80011c4:	2001      	movs	r0, #1
 80011c6:	f000 fd75 	bl	8001cb4 <cliOpen>

  ledOn(0);
 80011ca:	2000      	movs	r0, #0
 80011cc:	f002 f8c4 	bl	8003358 <ledOn>
  uartPrintf(_DEF_UART2, "Firmware Begin...\n");
 80011d0:	4902      	ldr	r1, [pc, #8]	@ (80011dc <apInit+0x20>)
 80011d2:	2001      	movs	r0, #1
 80011d4:	f002 fb4c 	bl	8003870 <uartPrintf>
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	0800a6e0 	.word	0x0800a6e0

080011e0 <apMain>:

void apMain(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 80011e6:	f000 f86f 	bl	80012c8 <millis>
 80011ea:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if(millis() - pre_time >= 100)
 80011ec:	f000 f86c 	bl	80012c8 <millis>
 80011f0:	4602      	mov	r2, r0
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b63      	cmp	r3, #99	@ 0x63
 80011f8:	d907      	bls.n	800120a <apMain+0x2a>
    {
      pre_time = millis();
 80011fa:	f000 f865 	bl	80012c8 <millis>
 80011fe:	6078      	str	r0, [r7, #4]

      changeBeaconStarted(true);
 8001200:	2001      	movs	r0, #1
 8001202:	f000 fb09 	bl	8001818 <changeBeaconStarted>

      handleBeaconStart();
 8001206:	f000 fae3 	bl	80017d0 <handleBeaconStart>
//      uartPrintf(_DEF_UART2, "\r\nCRC Error!\r\n");
//    }
//
//    HAL_Delay(1000);

    cliMain();
 800120a:	f000 fe0b 	bl	8001e24 <cliMain>
    if(millis() - pre_time >= 100)
 800120e:	e7ed      	b.n	80011ec <apMain+0xc>

08001210 <bspInit>:
#include "bsp.h"

void SystemClock_Config(void);

void bspInit(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
  HAL_Init();
 8001216:	f002 fcb7 	bl	8003b88 <HAL_Init>
  SystemClock_Config();
 800121a:	f000 f85c 	bl	80012d6 <SystemClock_Config>

  __HAL_RCC_GPIOD_CLK_ENABLE();
 800121e:	4b14      	ldr	r3, [pc, #80]	@ (8001270 <bspInit+0x60>)
 8001220:	699b      	ldr	r3, [r3, #24]
 8001222:	4a13      	ldr	r2, [pc, #76]	@ (8001270 <bspInit+0x60>)
 8001224:	f043 0320 	orr.w	r3, r3, #32
 8001228:	6193      	str	r3, [r2, #24]
 800122a:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <bspInit+0x60>)
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	f003 0320 	and.w	r3, r3, #32
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	4b0e      	ldr	r3, [pc, #56]	@ (8001270 <bspInit+0x60>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	4a0d      	ldr	r2, [pc, #52]	@ (8001270 <bspInit+0x60>)
 800123c:	f043 0308 	orr.w	r3, r3, #8
 8001240:	6193      	str	r3, [r2, #24]
 8001242:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <bspInit+0x60>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <bspInit+0x60>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	4a07      	ldr	r2, [pc, #28]	@ (8001270 <bspInit+0x60>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	6193      	str	r3, [r2, #24]
 800125a:	4b05      	ldr	r3, [pc, #20]	@ (8001270 <bspInit+0x60>)
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	607b      	str	r3, [r7, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000

08001274 <delay>:

void delay(uint32_t ms)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f002 fce5 	bl	8003c4c <HAL_Delay>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <us_delay>:

void us_delay(__IO uint32_t nCount)
{
 800128a:	b480      	push	{r7}
 800128c:	b085      	sub	sp, #20
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
    if (nCount > 1) {
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d90a      	bls.n	80012ae <us_delay+0x24>
        uint32_t count = nCount * 8 - 6; // 딜레이 시간 계산
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	3b06      	subs	r3, #6
 800129e:	60fb      	str	r3, [r7, #12]
        while (count--); // 딜레이를 위해 루프를 돔
 80012a0:	bf00      	nop
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	1e5a      	subs	r2, r3, #1
 80012a6:	60fa      	str	r2, [r7, #12]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1fa      	bne.n	80012a2 <us_delay+0x18>
    } else {
        uint32_t count = 2; // 최소 딜레이 시간을 설정
        while (count--); // 딜레이를 위해 루프를 돔
    }
}
 80012ac:	e007      	b.n	80012be <us_delay+0x34>
        uint32_t count = 2; // 최소 딜레이 시간을 설정
 80012ae:	2302      	movs	r3, #2
 80012b0:	60bb      	str	r3, [r7, #8]
        while (count--); // 딜레이를 위해 루프를 돔
 80012b2:	bf00      	nop
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	1e5a      	subs	r2, r3, #1
 80012b8:	60ba      	str	r2, [r7, #8]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1fa      	bne.n	80012b4 <us_delay+0x2a>
}
 80012be:	bf00      	nop
 80012c0:	3714      	adds	r7, #20
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <millis>:

uint32_t millis(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80012cc:	f002 fcb4 	bl	8003c38 <HAL_GetTick>
 80012d0:	4603      	mov	r3, r0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <SystemClock_Config>:

void SystemClock_Config(void)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b090      	sub	sp, #64	@ 0x40
 80012da:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012dc:	f107 0318 	add.w	r3, r7, #24
 80012e0:	2228      	movs	r2, #40	@ 0x28
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f006 fc6d 	bl	8007bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012f8:	2301      	movs	r3, #1
 80012fa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001300:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001306:	2301      	movs	r3, #1
 8001308:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130a:	2302      	movs	r3, #2
 800130c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800130e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001312:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001314:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001318:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131a:	f107 0318 	add.w	r3, r7, #24
 800131e:	4618      	mov	r0, r3
 8001320:	f003 fba0 	bl	8004a64 <HAL_RCC_OscConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800132a:	f000 f819 	bl	8001360 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132e:	230f      	movs	r3, #15
 8001330:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001332:	2302      	movs	r3, #2
 8001334:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800133a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800133e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2102      	movs	r1, #2
 8001348:	4618      	mov	r0, r3
 800134a:	f003 fe0d 	bl	8004f68 <HAL_RCC_ClockConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001354:	f000 f804 	bl	8001360 <Error_Handler>
  }
}
 8001358:	bf00      	nop
 800135a:	3740      	adds	r7, #64	@ 0x40
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001364:	b672      	cpsid	i
}
 8001366:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <Error_Handler+0x8>

0800136c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001372:	4b19      	ldr	r3, [pc, #100]	@ (80013d8 <HAL_MspInit+0x6c>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	4a18      	ldr	r2, [pc, #96]	@ (80013d8 <HAL_MspInit+0x6c>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6193      	str	r3, [r2, #24]
 800137e:	4b16      	ldr	r3, [pc, #88]	@ (80013d8 <HAL_MspInit+0x6c>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800138a:	4b13      	ldr	r3, [pc, #76]	@ (80013d8 <HAL_MspInit+0x6c>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	4a12      	ldr	r2, [pc, #72]	@ (80013d8 <HAL_MspInit+0x6c>)
 8001390:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001394:	61d3      	str	r3, [r2, #28]
 8001396:	4b10      	ldr	r3, [pc, #64]	@ (80013d8 <HAL_MspInit+0x6c>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	2005      	movs	r0, #5
 80013a8:	f002 fd6f 	bl	8003e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80013ac:	2005      	movs	r0, #5
 80013ae:	f002 fd88 	bl	8003ec2 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80013b2:	4b0a      	ldr	r3, [pc, #40]	@ (80013dc <HAL_MspInit+0x70>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	4a04      	ldr	r2, [pc, #16]	@ (80013dc <HAL_MspInit+0x70>)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40010000 	.word	0x40010000

080013e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013e4:	bf00      	nop
 80013e6:	e7fd      	b.n	80013e4 <NMI_Handler+0x4>

080013e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ec:	bf00      	nop
 80013ee:	e7fd      	b.n	80013ec <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	bf00      	nop
 80013f6:	e7fd      	b.n	80013f4 <MemManage_Handler+0x4>

080013f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fc:	bf00      	nop
 80013fe:	e7fd      	b.n	80013fc <BusFault_Handler+0x4>

08001400 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001404:	bf00      	nop
 8001406:	e7fd      	b.n	8001404 <UsageFault_Handler+0x4>

08001408 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001430:	f002 fbf0 	bl	8003c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //swtimerISR();
  /* USER CODE END SysTick_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001448:	2002      	movs	r0, #2
 800144a:	f003 fae9 	bl	8004a20 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001458:	4802      	ldr	r0, [pc, #8]	@ (8001464 <DMA1_Channel5_IRQHandler+0x10>)
 800145a:	f002 ff25 	bl	80042a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800145e:	bf00      	nop
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	200009ac 	.word	0x200009ac

08001468 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800146c:	4802      	ldr	r0, [pc, #8]	@ (8001478 <DMA1_Channel6_IRQHandler+0x10>)
 800146e:	f002 ff1b 	bl	80042a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200009f0 	.word	0x200009f0

0800147c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001480:	4802      	ldr	r0, [pc, #8]	@ (800148c <USART1_IRQHandler+0x10>)
 8001482:	f004 f829 	bl	80054d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	2000091c 	.word	0x2000091c

08001490 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001494:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <USART2_IRQHandler+0x10>)
 8001496:	f004 f81f 	bl	80054d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000964 	.word	0x20000964

080014a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return 1;
 80014a8:	2301      	movs	r3, #1
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bc80      	pop	{r7}
 80014b0:	4770      	bx	lr

080014b2 <_kill>:

int _kill(int pid, int sig)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014bc:	f006 fc12 	bl	8007ce4 <__errno>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2216      	movs	r2, #22
 80014c4:	601a      	str	r2, [r3, #0]
  return -1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <_exit>:

void _exit (int status)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014da:	f04f 31ff 	mov.w	r1, #4294967295
 80014de:	6878      	ldr	r0, [r7, #4]
 80014e0:	f7ff ffe7 	bl	80014b2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <_exit+0x12>

080014e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	e00a      	b.n	8001510 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014fa:	f3af 8000 	nop.w
 80014fe:	4601      	mov	r1, r0
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	60ba      	str	r2, [r7, #8]
 8001506:	b2ca      	uxtb	r2, r1
 8001508:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3301      	adds	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	697a      	ldr	r2, [r7, #20]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	429a      	cmp	r2, r3
 8001516:	dbf0      	blt.n	80014fa <_read+0x12>
  }

  return len;
 8001518:	687b      	ldr	r3, [r7, #4]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af00      	add	r7, sp, #0
 8001528:	60f8      	str	r0, [r7, #12]
 800152a:	60b9      	str	r1, [r7, #8]
 800152c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800152e:	2300      	movs	r3, #0
 8001530:	617b      	str	r3, [r7, #20]
 8001532:	e009      	b.n	8001548 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	60ba      	str	r2, [r7, #8]
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4618      	mov	r0, r3
 800153e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	3301      	adds	r3, #1
 8001546:	617b      	str	r3, [r7, #20]
 8001548:	697a      	ldr	r2, [r7, #20]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	429a      	cmp	r2, r3
 800154e:	dbf1      	blt.n	8001534 <_write+0x12>
  }
  return len;
 8001550:	687b      	ldr	r3, [r7, #4]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <_close>:

int _close(int file)
{
 800155a:	b480      	push	{r7}
 800155c:	b083      	sub	sp, #12
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001562:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001580:	605a      	str	r2, [r3, #4]
  return 0;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr

0800158e <_isatty>:

int _isatty(int file)
{
 800158e:	b480      	push	{r7}
 8001590:	b083      	sub	sp, #12
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001596:	2301      	movs	r3, #1
}
 8001598:	4618      	mov	r0, r3
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr

080015a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b085      	sub	sp, #20
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	60f8      	str	r0, [r7, #12]
 80015aa:	60b9      	str	r1, [r7, #8]
 80015ac:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bc80      	pop	{r7}
 80015b8:	4770      	bx	lr
	...

080015bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b086      	sub	sp, #24
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c4:	4a14      	ldr	r2, [pc, #80]	@ (8001618 <_sbrk+0x5c>)
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <_sbrk+0x60>)
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d0:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <_sbrk+0x64>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d102      	bne.n	80015de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d8:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <_sbrk+0x64>)
 80015da:	4a12      	ldr	r2, [pc, #72]	@ (8001624 <_sbrk+0x68>)
 80015dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <_sbrk+0x64>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d207      	bcs.n	80015fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015ec:	f006 fb7a 	bl	8007ce4 <__errno>
 80015f0:	4603      	mov	r3, r0
 80015f2:	220c      	movs	r2, #12
 80015f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f6:	f04f 33ff 	mov.w	r3, #4294967295
 80015fa:	e009      	b.n	8001610 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015fc:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <_sbrk+0x64>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001602:	4b07      	ldr	r3, [pc, #28]	@ (8001620 <_sbrk+0x64>)
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	4a05      	ldr	r2, [pc, #20]	@ (8001620 <_sbrk+0x64>)
 800160c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160e:	68fb      	ldr	r3, [r7, #12]
}
 8001610:	4618      	mov	r0, r3
 8001612:	3718      	adds	r7, #24
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20005000 	.word	0x20005000
 800161c:	00000400 	.word	0x00000400
 8001620:	20000208 	.word	0x20000208
 8001624:	20000b88 	.word	0x20000b88

08001628 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr

08001634 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001634:	f7ff fff8 	bl	8001628 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001638:	480b      	ldr	r0, [pc, #44]	@ (8001668 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800163a:	490c      	ldr	r1, [pc, #48]	@ (800166c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800163c:	4a0c      	ldr	r2, [pc, #48]	@ (8001670 <LoopFillZerobss+0x16>)
  movs r3, #0
 800163e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001640:	e002      	b.n	8001648 <LoopCopyDataInit>

08001642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001646:	3304      	adds	r3, #4

08001648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800164c:	d3f9      	bcc.n	8001642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164e:	4a09      	ldr	r2, [pc, #36]	@ (8001674 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001650:	4c09      	ldr	r4, [pc, #36]	@ (8001678 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001654:	e001      	b.n	800165a <LoopFillZerobss>

08001656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001658:	3204      	adds	r2, #4

0800165a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800165c:	d3fb      	bcc.n	8001656 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800165e:	f006 fb47 	bl	8007cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001662:	f004 fe3f 	bl	80062e4 <main>
  bx lr
 8001666:	4770      	bx	lr
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001670:	0800aea0 	.word	0x0800aea0
  ldr r2, =_sbss
 8001674:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001678:	20000b84 	.word	0x20000b84

0800167c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC1_2_IRQHandler>

0800167e <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800167e:	b480      	push	{r7}
 8001680:	b087      	sub	sp, #28
 8001682:	af00      	add	r7, sp, #0
 8001684:	60f8      	str	r0, [r7, #12]
 8001686:	60b9      	str	r1, [r7, #8]
 8001688:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800168a:	2301      	movs	r3, #1
 800168c:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2200      	movs	r2, #0
 8001698:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	68ba      	ldr	r2, [r7, #8]
 80016a4:	60da      	str	r2, [r3, #12]

  return ret;
 80016a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	371c      	adds	r7, #28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bc80      	pop	{r7}
 80016b0:	4770      	bx	lr

080016b2 <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 80016b2:	b480      	push	{r7}
 80016b4:	b087      	sub	sp, #28
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
  bool ret = true;
 80016be:	2301      	movs	r3, #1
 80016c0:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	613b      	str	r3, [r7, #16]
 80016c6:	e026      	b.n	8001716 <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d009      	beq.n	80016e4 <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	68da      	ldr	r2, [r3, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	441a      	add	r2, r3
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	440b      	add	r3, r1
 80016e0:	7812      	ldrb	r2, [r2, #0]
 80016e2:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d00c      	beq.n	800170a <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	3301      	adds	r3, #1
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	6892      	ldr	r2, [r2, #8]
 80016fa:	fbb3 f1f2 	udiv	r1, r3, r2
 80016fe:	fb01 f202 	mul.w	r2, r1, r2
 8001702:	1a9a      	subs	r2, r3, r2
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	e002      	b.n	8001710 <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 800170a:	2300      	movs	r3, #0
 800170c:	75fb      	strb	r3, [r7, #23]
      break;
 800170e:	e006      	b.n	800171e <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	3301      	adds	r3, #1
 8001714:	613b      	str	r3, [r7, #16]
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	429a      	cmp	r2, r3
 800171c:	d8d4      	bhi.n	80016c8 <qbufferRead+0x16>
    }
  }

  return ret;
 800171e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001720:	4618      	mov	r0, r3
 8001722:	371c      	adds	r7, #28
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr

0800172a <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800172a:	b480      	push	{r7}
 800172c:	b085      	sub	sp, #20
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  uint32_t ret;

  ret = (p_node->in - p_node->out) % p_node->len;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6892      	ldr	r2, [r2, #8]
 8001740:	fbb3 f1f2 	udiv	r1, r3, r2
 8001744:	fb01 f202 	mul.w	r2, r1, r2
 8001748:	1a9b      	subs	r3, r3, r2
 800174a:	60fb      	str	r3, [r7, #12]

  return ret;
 800174c:	68fb      	ldr	r3, [r7, #12]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <beaconInit>:
 * @return 초기화 성공 여부를 반환하는 변수
 *         - true: 초기화 성공
 *         - false: 초기화 실패
 */
bool beaconInit()
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
  bool ret = true;  // 반환 값 변수, 초기값은 성공(true)
 800175e:	2301      	movs	r3, #1
 8001760:	71fb      	strb	r3, [r7, #7]

  // 비콘의 위치 및 기본 설정 초기화
  beacon_tbl.floor = 0;                 // 층 초기화
 8001762:	4b18      	ldr	r3, [pc, #96]	@ (80017c4 <beaconInit+0x6c>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
  beacon_tbl.x = 0;                     // x 좌표 초기화
 8001768:	4b16      	ldr	r3, [pc, #88]	@ (80017c4 <beaconInit+0x6c>)
 800176a:	2200      	movs	r2, #0
 800176c:	705a      	strb	r2, [r3, #1]
  beacon_tbl.y = 0;                     // y 좌표 초기화
 800176e:	4b15      	ldr	r3, [pc, #84]	@ (80017c4 <beaconInit+0x6c>)
 8001770:	2200      	movs	r2, #0
 8001772:	709a      	strb	r2, [r3, #2]
  beacon_tbl.z = 0;                     // z 좌표 초기화
 8001774:	4b13      	ldr	r3, [pc, #76]	@ (80017c4 <beaconInit+0x6c>)
 8001776:	2200      	movs	r2, #0
 8001778:	70da      	strb	r2, [r3, #3]
  beacon_tbl.ch = _DEF_UART3;           // 통신 채널 초기화
 800177a:	4b12      	ldr	r3, [pc, #72]	@ (80017c4 <beaconInit+0x6c>)
 800177c:	2202      	movs	r2, #2
 800177e:	721a      	strb	r2, [r3, #8]
  beacon_tbl.baud = 9600;               // 통신 속도 초기화
 8001780:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <beaconInit+0x6c>)
 8001782:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001786:	60da      	str	r2, [r3, #12]
  beacon_tbl.beacon_started = false;    // 비콘 시작 여부 초기화
 8001788:	4b0e      	ldr	r3, [pc, #56]	@ (80017c4 <beaconInit+0x6c>)
 800178a:	2200      	movs	r2, #0
 800178c:	741a      	strb	r2, [r3, #16]
  beacon_tbl.ch_open = false;           // 통신 채널 개방 여부 초기화
 800178e:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <beaconInit+0x6c>)
 8001790:	2200      	movs	r2, #0
 8001792:	745a      	strb	r2, [r3, #17]
  beacon_tbl.beacon_id = 0;             // 비콘 ID 초기화
 8001794:	4b0b      	ldr	r3, [pc, #44]	@ (80017c4 <beaconInit+0x6c>)
 8001796:	2200      	movs	r2, #0
 8001798:	605a      	str	r2, [r3, #4]

#ifdef _USE_HW_UART
  // UART 사용 시 해당 채널을 열고 결과를 ch_open에 저장
  beacon_tbl.ch_open = uartOpen(beacon_tbl.ch, beacon_tbl.baud);
 800179a:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <beaconInit+0x6c>)
 800179c:	7a1b      	ldrb	r3, [r3, #8]
 800179e:	4a09      	ldr	r2, [pc, #36]	@ (80017c4 <beaconInit+0x6c>)
 80017a0:	68d2      	ldr	r2, [r2, #12]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f001 fe9d 	bl	80034e4 <uartOpen>
 80017aa:	4603      	mov	r3, r0
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b05      	ldr	r3, [pc, #20]	@ (80017c4 <beaconInit+0x6c>)
 80017b0:	745a      	strb	r2, [r3, #17]
#endif

#ifdef _USE_HW_CLI
  // CLI 사용 시 beacon 명령어 추가
  cliAdd("beacon", cliBeacon);
 80017b2:	4905      	ldr	r1, [pc, #20]	@ (80017c8 <beaconInit+0x70>)
 80017b4:	4805      	ldr	r0, [pc, #20]	@ (80017cc <beaconInit+0x74>)
 80017b6:	f001 f853 	bl	8002860 <cliAdd>
#endif

  return ret;  // 초기화 성공 여부 반환
 80017ba:	79fb      	ldrb	r3, [r7, #7]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	2000020c 	.word	0x2000020c
 80017c8:	08001845 	.word	0x08001845
 80017cc:	0800a6f4 	.word	0x0800a6f4

080017d0 <handleBeaconStart>:
 *
 * 비콘이 시작되었을 때, 해당 비콘의 정보를 UART를 통해 출력합니다.
 *
 */
void handleBeaconStart(void)
{
 80017d0:	b5b0      	push	{r4, r5, r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af04      	add	r7, sp, #16
  if(beacon_tbl.beacon_started)  // 비콘이 시작되었는지 확인
 80017d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <handleBeaconStart+0x40>)
 80017d8:	7c1b      	ldrb	r3, [r3, #16]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d015      	beq.n	800180a <handleBeaconStart+0x3a>
  {
    // UART를 통해 비콘 정보를 출력합니다.
    uartPrintf(beacon_tbl.ch, "%d %d %d %d %d\n", beacon_tbl.beacon_id,
 80017de:	4b0c      	ldr	r3, [pc, #48]	@ (8001810 <handleBeaconStart+0x40>)
 80017e0:	7a18      	ldrb	r0, [r3, #8]
 80017e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001810 <handleBeaconStart+0x40>)
 80017e4:	685a      	ldr	r2, [r3, #4]
                                                  beacon_tbl.floor,
 80017e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001810 <handleBeaconStart+0x40>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
    uartPrintf(beacon_tbl.ch, "%d %d %d %d %d\n", beacon_tbl.beacon_id,
 80017ea:	461d      	mov	r5, r3
                                                  beacon_tbl.x,
 80017ec:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <handleBeaconStart+0x40>)
 80017ee:	785b      	ldrb	r3, [r3, #1]
    uartPrintf(beacon_tbl.ch, "%d %d %d %d %d\n", beacon_tbl.beacon_id,
 80017f0:	4619      	mov	r1, r3
                                                  beacon_tbl.y,
 80017f2:	4b07      	ldr	r3, [pc, #28]	@ (8001810 <handleBeaconStart+0x40>)
 80017f4:	789b      	ldrb	r3, [r3, #2]
    uartPrintf(beacon_tbl.ch, "%d %d %d %d %d\n", beacon_tbl.beacon_id,
 80017f6:	461c      	mov	r4, r3
                                                  beacon_tbl.z
 80017f8:	4b05      	ldr	r3, [pc, #20]	@ (8001810 <handleBeaconStart+0x40>)
 80017fa:	78db      	ldrb	r3, [r3, #3]
    uartPrintf(beacon_tbl.ch, "%d %d %d %d %d\n", beacon_tbl.beacon_id,
 80017fc:	9302      	str	r3, [sp, #8]
 80017fe:	9401      	str	r4, [sp, #4]
 8001800:	9100      	str	r1, [sp, #0]
 8001802:	462b      	mov	r3, r5
 8001804:	4903      	ldr	r1, [pc, #12]	@ (8001814 <handleBeaconStart+0x44>)
 8001806:	f002 f833 	bl	8003870 <uartPrintf>
                                                  );
  }
}
 800180a:	bf00      	nop
 800180c:	46bd      	mov	sp, r7
 800180e:	bdb0      	pop	{r4, r5, r7, pc}
 8001810:	2000020c 	.word	0x2000020c
 8001814:	0800a6fc 	.word	0x0800a6fc

08001818 <changeBeaconStarted>:
 * @param value 변경할 시작 여부 값을 나타내는 변수
 *              - true: 시작
 *              - false: 중지
 */
void changeBeaconStarted(bool value)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
  if(value == true)
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <changeBeaconStarted+0x18>
    beacon_tbl.beacon_started = true;   // 주어진 값이 true일 경우 시작 상태로 설정
 8001828:	4b05      	ldr	r3, [pc, #20]	@ (8001840 <changeBeaconStarted+0x28>)
 800182a:	2201      	movs	r2, #1
 800182c:	741a      	strb	r2, [r3, #16]
  else
    beacon_tbl.beacon_started = false;  // 그렇지 않으면 중지 상태로 설정
}
 800182e:	e002      	b.n	8001836 <changeBeaconStarted+0x1e>
    beacon_tbl.beacon_started = false;  // 그렇지 않으면 중지 상태로 설정
 8001830:	4b03      	ldr	r3, [pc, #12]	@ (8001840 <changeBeaconStarted+0x28>)
 8001832:	2200      	movs	r2, #0
 8001834:	741a      	strb	r2, [r3, #16]
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr
 8001840:	2000020c 	.word	0x2000020c

08001844 <cliBeacon>:
 * @brief CLI에서 입력된 명령어를 처리하는 함수
 *
 * @param args CLI 명령어와 인수를 포함하는 구조체
 */
void cliBeacon(cli_args_t *args)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08a      	sub	sp, #40	@ 0x28
 8001848:	af02      	add	r7, sp, #8
 800184a:	6078      	str	r0, [r7, #4]
  bool ret = false;  // 명령어 처리 결과 변수, 기본적으로 실패로 설정
 800184c:	2300      	movs	r3, #0
 800184e:	77fb      	strb	r3, [r7, #31]

  // "info" 명령어를 받았을 때 비콘 정보 출력
  if(args->argc == 1 && args->isStr(0, "info") == true)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d124      	bne.n	80018a2 <cliBeacon+0x5e>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	4950      	ldr	r1, [pc, #320]	@ (80019a0 <cliBeacon+0x15c>)
 800185e:	2000      	movs	r0, #0
 8001860:	4798      	blx	r3
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d01c      	beq.n	80018a2 <cliBeacon+0x5e>
  {
    uint32_t beacon_id = beacon_tbl.beacon_id;  // 비콘 ID 정보
 8001868:	4b4e      	ldr	r3, [pc, #312]	@ (80019a4 <cliBeacon+0x160>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	61bb      	str	r3, [r7, #24]
    uint8_t beacon_floor = beacon_tbl.floor;    // 비콘 층 정보
 800186e:	4b4d      	ldr	r3, [pc, #308]	@ (80019a4 <cliBeacon+0x160>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	75fb      	strb	r3, [r7, #23]
    uint8_t beacon_x = beacon_tbl.x;            // 비콘 x 좌표 정보
 8001874:	4b4b      	ldr	r3, [pc, #300]	@ (80019a4 <cliBeacon+0x160>)
 8001876:	785b      	ldrb	r3, [r3, #1]
 8001878:	75bb      	strb	r3, [r7, #22]
    uint8_t beacon_y = beacon_tbl.y;            // 비콘 y 좌표 정보
 800187a:	4b4a      	ldr	r3, [pc, #296]	@ (80019a4 <cliBeacon+0x160>)
 800187c:	789b      	ldrb	r3, [r3, #2]
 800187e:	757b      	strb	r3, [r7, #21]
    uint8_t beacon_z = beacon_tbl.z;            // 비콘 z 좌표 정보
 8001880:	4b48      	ldr	r3, [pc, #288]	@ (80019a4 <cliBeacon+0x160>)
 8001882:	78db      	ldrb	r3, [r3, #3]
 8001884:	753b      	strb	r3, [r7, #20]

    // 비콘 정보 출력
    cliPrintf("ID: %d, Floor: %d, [x, y, z]: [%d, %d, %d]\n", beacon_id,
 8001886:	7df9      	ldrb	r1, [r7, #23]
 8001888:	7db8      	ldrb	r0, [r7, #22]
 800188a:	7d7b      	ldrb	r3, [r7, #21]
 800188c:	7d3a      	ldrb	r2, [r7, #20]
 800188e:	9201      	str	r2, [sp, #4]
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	4603      	mov	r3, r0
 8001894:	460a      	mov	r2, r1
 8001896:	69b9      	ldr	r1, [r7, #24]
 8001898:	4843      	ldr	r0, [pc, #268]	@ (80019a8 <cliBeacon+0x164>)
 800189a:	f000 fed7 	bl	800264c <cliPrintf>
                                                              beacon_x,
                                                              beacon_y,
                                                              beacon_z
                                                              );

    ret = true;  // 처리 성공
 800189e:	2301      	movs	r3, #1
 80018a0:	77fb      	strb	r3, [r7, #31]
  }

  // "start" 명령어를 받았을 때 비콘 시작
  if(args->argc == 1 && args->isStr(0, "start") == true)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	881b      	ldrh	r3, [r3, #0]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d117      	bne.n	80018da <cliBeacon+0x96>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
 80018ae:	493f      	ldr	r1, [pc, #252]	@ (80019ac <cliBeacon+0x168>)
 80018b0:	2000      	movs	r0, #0
 80018b2:	4798      	blx	r3
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00f      	beq.n	80018da <cliBeacon+0x96>
  {
    if(beacon_tbl.ch_open == true)  // 통신 채널이 열려 있는지 확인
 80018ba:	4b3a      	ldr	r3, [pc, #232]	@ (80019a4 <cliBeacon+0x160>)
 80018bc:	7c5b      	ldrb	r3, [r3, #17]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d006      	beq.n	80018d0 <cliBeacon+0x8c>
    {
      cliPrintf("Open Success\n");  // 통신 채널이 열렸으면 성공 메시지 출력
 80018c2:	483b      	ldr	r0, [pc, #236]	@ (80019b0 <cliBeacon+0x16c>)
 80018c4:	f000 fec2 	bl	800264c <cliPrintf>

      changeBeaconStarted(true);    // 비콘 시작 상태 변경
 80018c8:	2001      	movs	r0, #1
 80018ca:	f7ff ffa5 	bl	8001818 <changeBeaconStarted>
 80018ce:	e002      	b.n	80018d6 <cliBeacon+0x92>
    }
    else
    {
      cliPrintf("Open Fail\n");     // 통신 채널이 닫혔으면 실패 메시지 출력
 80018d0:	4838      	ldr	r0, [pc, #224]	@ (80019b4 <cliBeacon+0x170>)
 80018d2:	f000 febb 	bl	800264c <cliPrintf>
    }

    ret = true;  // 처리 성공
 80018d6:	2301      	movs	r3, #1
 80018d8:	77fb      	strb	r3, [r7, #31]
  }

  // "end" 명령어를 받았을 때 비콘 종료
  if(args->argc == 1 && args->isStr(0, "end") == true)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	881b      	ldrh	r3, [r3, #0]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d10c      	bne.n	80018fc <cliBeacon+0xb8>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	4934      	ldr	r1, [pc, #208]	@ (80019b8 <cliBeacon+0x174>)
 80018e8:	2000      	movs	r0, #0
 80018ea:	4798      	blx	r3
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d004      	beq.n	80018fc <cliBeacon+0xb8>
  {
    changeBeaconStarted(false);  // 비콘 종료 상태 변경
 80018f2:	2000      	movs	r0, #0
 80018f4:	f7ff ff90 	bl	8001818 <changeBeaconStarted>

    ret = true;  // 처리 성공
 80018f8:	2301      	movs	r3, #1
 80018fa:	77fb      	strb	r3, [r7, #31]
  }

  // "set" 명령어를 받았을 때 비콘의 ID, 층 및 좌표 설정
  if(args->argc == 6 && args->isStr(0, "set") == true)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	881b      	ldrh	r3, [r3, #0]
 8001900:	2b06      	cmp	r3, #6
 8001902:	d136      	bne.n	8001972 <cliBeacon+0x12e>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	695b      	ldr	r3, [r3, #20]
 8001908:	492c      	ldr	r1, [pc, #176]	@ (80019bc <cliBeacon+0x178>)
 800190a:	2000      	movs	r0, #0
 800190c:	4798      	blx	r3
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d02e      	beq.n	8001972 <cliBeacon+0x12e>
  {
    uint32_t beacon_id = (uint32_t)args->getData(1);  // 매개변수로 받은 비콘 ID 정보
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2001      	movs	r0, #1
 800191a:	4798      	blx	r3
 800191c:	4603      	mov	r3, r0
 800191e:	613b      	str	r3, [r7, #16]
    uint8_t beacon_floor = (uint8_t)args->getData(2); // 매개변수로 받은 비콘 층 정보
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	2002      	movs	r0, #2
 8001926:	4798      	blx	r3
 8001928:	4603      	mov	r3, r0
 800192a:	73fb      	strb	r3, [r7, #15]
    uint8_t beacon_x = (uint8_t)args->getData(3);     // 매개변수로 받은 비콘 x 좌표 정보
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	2003      	movs	r0, #3
 8001932:	4798      	blx	r3
 8001934:	4603      	mov	r3, r0
 8001936:	73bb      	strb	r3, [r7, #14]
    uint8_t beacon_y = (uint8_t)args->getData(4);     // 매개변수로 받은 비콘 y 좌표 정보
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2004      	movs	r0, #4
 800193e:	4798      	blx	r3
 8001940:	4603      	mov	r3, r0
 8001942:	737b      	strb	r3, [r7, #13]
    uint8_t beacon_z = (uint8_t)args->getData(5);     // 매개변수로 받은 비콘 z 좌표 정보
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	2005      	movs	r0, #5
 800194a:	4798      	blx	r3
 800194c:	4603      	mov	r3, r0
 800194e:	733b      	strb	r3, [r7, #12]

    // 비콘의 ID, 층 및 좌표 설정
    beacon_tbl.beacon_id = beacon_id;
 8001950:	4a14      	ldr	r2, [pc, #80]	@ (80019a4 <cliBeacon+0x160>)
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	6053      	str	r3, [r2, #4]
    beacon_tbl.floor = beacon_floor;
 8001956:	4a13      	ldr	r2, [pc, #76]	@ (80019a4 <cliBeacon+0x160>)
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	7013      	strb	r3, [r2, #0]
    beacon_tbl.x = beacon_x;
 800195c:	4a11      	ldr	r2, [pc, #68]	@ (80019a4 <cliBeacon+0x160>)
 800195e:	7bbb      	ldrb	r3, [r7, #14]
 8001960:	7053      	strb	r3, [r2, #1]
    beacon_tbl.y = beacon_y;
 8001962:	4a10      	ldr	r2, [pc, #64]	@ (80019a4 <cliBeacon+0x160>)
 8001964:	7b7b      	ldrb	r3, [r7, #13]
 8001966:	7093      	strb	r3, [r2, #2]
    beacon_tbl.z = beacon_z;
 8001968:	4a0e      	ldr	r2, [pc, #56]	@ (80019a4 <cliBeacon+0x160>)
 800196a:	7b3b      	ldrb	r3, [r7, #12]
 800196c:	70d3      	strb	r3, [r2, #3]

    ret = true;  // 처리 성공
 800196e:	2301      	movs	r3, #1
 8001970:	77fb      	strb	r3, [r7, #31]
  }

  // 처리되지 않은 명령어가 있을 경우 사용법 출력
  if(ret != true)
 8001972:	7ffb      	ldrb	r3, [r7, #31]
 8001974:	f083 0301 	eor.w	r3, r3, #1
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00b      	beq.n	8001996 <cliBeacon+0x152>
  {
    cliPrintf("beacon info\n");             // 비콘 정보 출력 명령어 사용법
 800197e:	4810      	ldr	r0, [pc, #64]	@ (80019c0 <cliBeacon+0x17c>)
 8001980:	f000 fe64 	bl	800264c <cliPrintf>
    cliPrintf("beacon set id, floor, x, y, z\n");  // 비콘 설정 명령어 사용법
 8001984:	480f      	ldr	r0, [pc, #60]	@ (80019c4 <cliBeacon+0x180>)
 8001986:	f000 fe61 	bl	800264c <cliPrintf>
    cliPrintf("beacon start\n");            // 비콘 시작 명령어 사용법
 800198a:	480f      	ldr	r0, [pc, #60]	@ (80019c8 <cliBeacon+0x184>)
 800198c:	f000 fe5e 	bl	800264c <cliPrintf>
    cliPrintf("beacon end\n");              // 비콘 종료 명령어 사용법
 8001990:	480e      	ldr	r0, [pc, #56]	@ (80019cc <cliBeacon+0x188>)
 8001992:	f000 fe5b 	bl	800264c <cliPrintf>
  }
}
 8001996:	bf00      	nop
 8001998:	3720      	adds	r7, #32
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	0800a70c 	.word	0x0800a70c
 80019a4:	2000020c 	.word	0x2000020c
 80019a8:	0800a714 	.word	0x0800a714
 80019ac:	0800a740 	.word	0x0800a740
 80019b0:	0800a748 	.word	0x0800a748
 80019b4:	0800a758 	.word	0x0800a758
 80019b8:	0800a764 	.word	0x0800a764
 80019bc:	0800a768 	.word	0x0800a768
 80019c0:	0800a76c 	.word	0x0800a76c
 80019c4:	0800a77c 	.word	0x0800a77c
 80019c8:	0800a79c 	.word	0x0800a79c
 80019cc:	0800a7ac 	.word	0x0800a7ac

080019d0 <buttonInit>:
static void cliButton(cli_args_t *args);
#endif


bool buttonInit(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
  bool ret = true;
 80019d6:	2301      	movs	r3, #1
 80019d8:	76fb      	strb	r3, [r7, #27]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019da:	f107 0308 	add.w	r3, r7, #8
 80019de:	2200      	movs	r2, #0
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	605a      	str	r2, [r3, #4]
 80019e4:	609a      	str	r2, [r3, #8]
 80019e6:	60da      	str	r2, [r3, #12]


  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e8:	4b1c      	ldr	r3, [pc, #112]	@ (8001a5c <buttonInit+0x8c>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	4a1b      	ldr	r2, [pc, #108]	@ (8001a5c <buttonInit+0x8c>)
 80019ee:	f043 0304 	orr.w	r3, r3, #4
 80019f2:	6193      	str	r3, [r2, #24]
 80019f4:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <buttonInit+0x8c>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]


  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a00:	2300      	movs	r3, #0
 8001a02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a04:	2301      	movs	r3, #1
 8001a06:	613b      	str	r3, [r7, #16]

  for (int i=0; i<BUTTON_MAX_CH; i++)
 8001a08:	2300      	movs	r3, #0
 8001a0a:	61fb      	str	r3, [r7, #28]
 8001a0c:	e01a      	b.n	8001a44 <buttonInit+0x74>
  {
    GPIO_InitStruct.Pin = button_tbl[i].pin;
 8001a0e:	4914      	ldr	r1, [pc, #80]	@ (8001a60 <buttonInit+0x90>)
 8001a10:	69fa      	ldr	r2, [r7, #28]
 8001a12:	4613      	mov	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	4413      	add	r3, r2
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	440b      	add	r3, r1
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(button_tbl[i].port, &GPIO_InitStruct);
 8001a22:	490f      	ldr	r1, [pc, #60]	@ (8001a60 <buttonInit+0x90>)
 8001a24:	69fa      	ldr	r2, [r7, #28]
 8001a26:	4613      	mov	r3, r2
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	440b      	add	r3, r1
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f107 0208 	add.w	r2, r7, #8
 8001a36:	4611      	mov	r1, r2
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f002 fd69 	bl	8004510 <HAL_GPIO_Init>
  for (int i=0; i<BUTTON_MAX_CH; i++)
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3301      	adds	r3, #1
 8001a42:	61fb      	str	r3, [r7, #28]
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	dde1      	ble.n	8001a0e <buttonInit+0x3e>
  }

#ifdef _USE_HW_CLI
  cliAdd("button", cliButton);
 8001a4a:	4906      	ldr	r1, [pc, #24]	@ (8001a64 <buttonInit+0x94>)
 8001a4c:	4806      	ldr	r0, [pc, #24]	@ (8001a68 <buttonInit+0x98>)
 8001a4e:	f000 ff07 	bl	8002860 <cliAdd>
#endif

  return ret;
 8001a52:	7efb      	ldrb	r3, [r7, #27]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3720      	adds	r7, #32
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	20000004 	.word	0x20000004
 8001a64:	08001b5d 	.word	0x08001b5d
 8001a68:	0800a7b8 	.word	0x0800a7b8

08001a6c <buttonGetPressed>:

bool buttonGetPressed(uint8_t ch)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001a76:	2300      	movs	r3, #0
 8001a78:	73fb      	strb	r3, [r7, #15]

  if (ch >= BUTTON_MAX_CH)
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <buttonGetPressed+0x18>
  {
    return false;
 8001a80:	2300      	movs	r3, #0
 8001a82:	e024      	b.n	8001ace <buttonGetPressed+0x62>
  }

  if (HAL_GPIO_ReadPin(button_tbl[ch].port, button_tbl[ch].pin) == button_tbl[ch].on_state)
 8001a84:	79fa      	ldrb	r2, [r7, #7]
 8001a86:	4914      	ldr	r1, [pc, #80]	@ (8001ad8 <buttonGetPressed+0x6c>)
 8001a88:	4613      	mov	r3, r2
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4413      	add	r3, r2
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	440b      	add	r3, r1
 8001a92:	6818      	ldr	r0, [r3, #0]
 8001a94:	79fa      	ldrb	r2, [r7, #7]
 8001a96:	4910      	ldr	r1, [pc, #64]	@ (8001ad8 <buttonGetPressed+0x6c>)
 8001a98:	4613      	mov	r3, r2
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	4413      	add	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f002 ff71 	bl	8004990 <HAL_GPIO_ReadPin>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	79fa      	ldrb	r2, [r7, #7]
 8001ab4:	4908      	ldr	r1, [pc, #32]	@ (8001ad8 <buttonGetPressed+0x6c>)
 8001ab6:	4613      	mov	r3, r2
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	4413      	add	r3, r2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	440b      	add	r3, r1
 8001ac0:	3308      	adds	r3, #8
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	4298      	cmp	r0, r3
 8001ac6:	d101      	bne.n	8001acc <buttonGetPressed+0x60>
  {
    ret = true;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	20000004 	.word	0x20000004

08001adc <buttonToggle>:

bool buttonToggle(uint8_t ch)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]
  // 해당 채널에 연결된 버튼의 상태를 읽어옵니다.
  bool pin_state = buttonGetPressed(ch);
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ffbf 	bl	8001a6c <buttonGetPressed>
 8001aee:	4603      	mov	r3, r0
 8001af0:	73fb      	strb	r3, [r7, #15]

  // 버튼이 눌려있는 경우
  if(pin_state == 0)
 8001af2:	7bfb      	ldrb	r3, [r7, #15]
 8001af4:	f083 0301 	eor.w	r3, r3, #1
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d00c      	beq.n	8001b18 <buttonToggle+0x3c>
  {
    // 이전에 버튼이 눌려진 적이 없는 경우
    if(toggleFlag[ch] == false)
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	4a14      	ldr	r2, [pc, #80]	@ (8001b54 <buttonToggle+0x78>)
 8001b02:	5cd3      	ldrb	r3, [r2, r3]
 8001b04:	f083 0301 	eor.w	r3, r3, #1
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d01b      	beq.n	8001b46 <buttonToggle+0x6a>
    {
      // 토글 플래그를 true로 설정합니다.
      toggleFlag[ch] = true;
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	4a10      	ldr	r2, [pc, #64]	@ (8001b54 <buttonToggle+0x78>)
 8001b12:	2101      	movs	r1, #1
 8001b14:	54d1      	strb	r1, [r2, r3]
 8001b16:	e016      	b.n	8001b46 <buttonToggle+0x6a>
  }
  // 버튼이 떨어져 있는 경우
  else
  {
    // 이전에 버튼이 눌려진 적이 있는 경우
    if(toggleFlag[ch] == true)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b54 <buttonToggle+0x78>)
 8001b1c:	5cd3      	ldrb	r3, [r2, r3]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d011      	beq.n	8001b46 <buttonToggle+0x6a>
    {
      // 이전에 토글된 상태가 true인 경우
      if(toggleStatus[ch] == true)
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	4a0c      	ldr	r2, [pc, #48]	@ (8001b58 <buttonToggle+0x7c>)
 8001b26:	5cd3      	ldrb	r3, [r2, r3]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d004      	beq.n	8001b36 <buttonToggle+0x5a>
      {
        // 토글 상태를 false로 변경합니다.
        toggleStatus[ch] = false;
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b58 <buttonToggle+0x7c>)
 8001b30:	2100      	movs	r1, #0
 8001b32:	54d1      	strb	r1, [r2, r3]
 8001b34:	e003      	b.n	8001b3e <buttonToggle+0x62>
      }
      // 이전에 토글된 상태가 false인 경우
      else
      {
        // 토글 상태를 true로 변경합니다.
        toggleStatus[ch] = true;
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	4a07      	ldr	r2, [pc, #28]	@ (8001b58 <buttonToggle+0x7c>)
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	54d1      	strb	r1, [r2, r3]
      }
      // 토글 플래그를 다시 true로 설정합니다.
      toggleFlag[ch] = true;
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	4a04      	ldr	r2, [pc, #16]	@ (8001b54 <buttonToggle+0x78>)
 8001b42:	2101      	movs	r1, #1
 8001b44:	54d1      	strb	r1, [r2, r3]
    }
  }

  // 해당 채널의 현재 토글 상태를 반환합니다.
  return toggleStatus[ch];
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	4a03      	ldr	r2, [pc, #12]	@ (8001b58 <buttonToggle+0x7c>)
 8001b4a:	5cd3      	ldrb	r3, [r2, r3]
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3710      	adds	r7, #16
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000220 	.word	0x20000220
 8001b58:	20000224 	.word	0x20000224

08001b5c <cliButton>:


#ifdef _USE_HW_CLI

void cliButton(cli_args_t *args)
{
 8001b5c:	b590      	push	{r4, r7, lr}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001b64:	2300      	movs	r3, #0
 8001b66:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "show"))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d130      	bne.n	8001bd2 <cliButton+0x76>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	695b      	ldr	r3, [r3, #20]
 8001b74:	491d      	ldr	r1, [pc, #116]	@ (8001bec <cliButton+0x90>)
 8001b76:	2000      	movs	r0, #0
 8001b78:	4798      	blx	r3
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d028      	beq.n	8001bd2 <cliButton+0x76>
  {
    while(cliKeepLoop())
 8001b80:	e020      	b.n	8001bc4 <cliButton+0x68>
    {
      for (int i=0; i<BUTTON_MAX_CH; i++)
 8001b82:	2300      	movs	r3, #0
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	e014      	b.n	8001bb2 <cliButton+0x56>
      {
        cliPrintf("%d %d", buttonGetPressed(i), buttonToggle(i));
 8001b88:	68bb      	ldr	r3, [r7, #8]
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff6d 	bl	8001a6c <buttonGetPressed>
 8001b92:	4603      	mov	r3, r0
 8001b94:	461c      	mov	r4, r3
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff ff9e 	bl	8001adc <buttonToggle>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	4621      	mov	r1, r4
 8001ba6:	4812      	ldr	r0, [pc, #72]	@ (8001bf0 <cliButton+0x94>)
 8001ba8:	f000 fd50 	bl	800264c <cliPrintf>
      for (int i=0; i<BUTTON_MAX_CH; i++)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	3301      	adds	r3, #1
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	dde7      	ble.n	8001b88 <cliButton+0x2c>
      }
      cliPrintf("\n");
 8001bb8:	480e      	ldr	r0, [pc, #56]	@ (8001bf4 <cliButton+0x98>)
 8001bba:	f000 fd47 	bl	800264c <cliPrintf>

      delay(100);
 8001bbe:	2064      	movs	r0, #100	@ 0x64
 8001bc0:	f7ff fb58 	bl	8001274 <delay>
    while(cliKeepLoop())
 8001bc4:	f000 fe36 	bl	8002834 <cliKeepLoop>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1d9      	bne.n	8001b82 <cliButton+0x26>
    }

    ret = true;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	73fb      	strb	r3, [r7, #15]
  }


  if (ret != true)
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	f083 0301 	eor.w	r3, r3, #1
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <cliButton+0x88>
  {
    cliPrintf("button show\n");
 8001bde:	4806      	ldr	r0, [pc, #24]	@ (8001bf8 <cliButton+0x9c>)
 8001be0:	f000 fd34 	bl	800264c <cliPrintf>
  }
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd90      	pop	{r4, r7, pc}
 8001bec:	0800a7c0 	.word	0x0800a7c0
 8001bf0:	0800a7c8 	.word	0x0800a7c8
 8001bf4:	0800a7d0 	.word	0x0800a7d0
 8001bf8:	0800a7d4 	.word	0x0800a7d4

08001bfc <cdcInit>:

static bool is_init = false;


bool cdcInit(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
  bool ret = true;
 8001c02:	2301      	movs	r3, #1
 8001c04:	71fb      	strb	r3, [r7, #7]


  is_init = true;
 8001c06:	4b04      	ldr	r3, [pc, #16]	@ (8001c18 <cdcInit+0x1c>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	701a      	strb	r2, [r3, #0]

  return ret;
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	20000225 	.word	0x20000225

08001c1c <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8001c20:	4b1b      	ldr	r3, [pc, #108]	@ (8001c90 <cliInit+0x74>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8001c26:	4b1a      	ldr	r3, [pc, #104]	@ (8001c90 <cliInit+0x74>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8001c2c:	4b18      	ldr	r3, [pc, #96]	@ (8001c90 <cliInit+0x74>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8001c32:	4b17      	ldr	r3, [pc, #92]	@ (8001c90 <cliInit+0x74>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  cli_node.hist_line_last  = 0;
 8001c3a:	4b15      	ldr	r3, [pc, #84]	@ (8001c90 <cliInit+0x74>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  cli_node.hist_line_count = 0;
 8001c42:	4b13      	ldr	r3, [pc, #76]	@ (8001c90 <cliInit+0x74>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  cli_node.hist_line_new   = false;
 8001c4a:	4b11      	ldr	r3, [pc, #68]	@ (8001c90 <cliInit+0x74>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 8001c52:	4b0f      	ldr	r3, [pc, #60]	@ (8001c90 <cliInit+0x74>)
 8001c54:	4a0f      	ldr	r2, [pc, #60]	@ (8001c94 <cliInit+0x78>)
 8001c56:	f8c3 24b8 	str.w	r2, [r3, #1208]	@ 0x4b8
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c90 <cliInit+0x74>)
 8001c5c:	4a0e      	ldr	r2, [pc, #56]	@ (8001c98 <cliInit+0x7c>)
 8001c5e:	f8c3 24bc 	str.w	r2, [r3, #1212]	@ 0x4bc
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8001c62:	4b0b      	ldr	r3, [pc, #44]	@ (8001c90 <cliInit+0x74>)
 8001c64:	4a0d      	ldr	r2, [pc, #52]	@ (8001c9c <cliInit+0x80>)
 8001c66:	f8c3 24c0 	str.w	r2, [r3, #1216]	@ 0x4c0
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8001c6a:	4b09      	ldr	r3, [pc, #36]	@ (8001c90 <cliInit+0x74>)
 8001c6c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ca0 <cliInit+0x84>)
 8001c6e:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4

  cliLineClean(&cli_node);
 8001c72:	4807      	ldr	r0, [pc, #28]	@ (8001c90 <cliInit+0x74>)
 8001c74:	f000 fb5a 	bl	800232c <cliLineClean>


  cliAdd("help", cliShowList);
 8001c78:	490a      	ldr	r1, [pc, #40]	@ (8001ca4 <cliInit+0x88>)
 8001c7a:	480b      	ldr	r0, [pc, #44]	@ (8001ca8 <cliInit+0x8c>)
 8001c7c:	f000 fdf0 	bl	8002860 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8001c80:	490a      	ldr	r1, [pc, #40]	@ (8001cac <cliInit+0x90>)
 8001c82:	480b      	ldr	r0, [pc, #44]	@ (8001cb0 <cliInit+0x94>)
 8001c84:	f000 fdec 	bl	8002860 <cliAdd>

  return true;
 8001c88:	2301      	movs	r3, #1
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000228 	.word	0x20000228
 8001c94:	080026fd 	.word	0x080026fd
 8001c98:	0800274d 	.word	0x0800274d
 8001c9c:	0800279d 	.word	0x0800279d
 8001ca0:	080027e1 	.word	0x080027e1
 8001ca4:	080028f1 	.word	0x080028f1
 8001ca8:	0800a7e4 	.word	0x0800a7e4
 8001cac:	08002961 	.word	0x08002961
 8001cb0:	0800a7ec 	.word	0x0800a7ec

08001cb4 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 8001cc0:	4a0a      	ldr	r2, [pc, #40]	@ (8001cec <cliOpen+0x38>)
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 8001cc6:	4a09      	ldr	r2, [pc, #36]	@ (8001cec <cliOpen+0x38>)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	6839      	ldr	r1, [r7, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f001 fc07 	bl	80034e4 <uartOpen>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b04      	ldr	r3, [pc, #16]	@ (8001cec <cliOpen+0x38>)
 8001cdc:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 8001cde:	4b03      	ldr	r3, [pc, #12]	@ (8001cec <cliOpen+0x38>)
 8001ce0:	7a1b      	ldrb	r3, [r3, #8]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000228 	.word	0x20000228

08001cf0 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 8001cf8:	4b34      	ldr	r3, [pc, #208]	@ (8001dcc <cliShowLog+0xdc>)
 8001cfa:	7a5b      	ldrb	r3, [r3, #9]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d061      	beq.n	8001dc4 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7a98      	ldrb	r0, [r3, #10]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 336b 	ldrb.w	r3, [r3, #875]	@ 0x36b
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4930      	ldr	r1, [pc, #192]	@ (8001dd0 <cliShowLog+0xe0>)
 8001d0e:	f001 fdaf 	bl	8003870 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7a98      	ldrb	r0, [r3, #10]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f893 336c 	ldrb.w	r3, [r3, #876]	@ 0x36c
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	492d      	ldr	r1, [pc, #180]	@ (8001dd4 <cliShowLog+0xe4>)
 8001d20:	f001 fda6 	bl	8003870 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	7a98      	ldrb	r0, [r3, #10]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 336a 	ldrb.w	r3, [r3, #874]	@ 0x36a
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4929      	ldr	r1, [pc, #164]	@ (8001dd8 <cliShowLog+0xe8>)
 8001d32:	f001 fd9d 	bl	8003870 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	7a98      	ldrb	r0, [r3, #10]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f203 332a 	addw	r3, r3, #810	@ 0x32a
 8001d40:	461a      	mov	r2, r3
 8001d42:	4926      	ldr	r1, [pc, #152]	@ (8001ddc <cliShowLog+0xec>)
 8001d44:	f001 fd94 	bl	8003870 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	7a98      	ldrb	r0, [r3, #10]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001d52:	461a      	mov	r2, r3
 8001d54:	4922      	ldr	r1, [pc, #136]	@ (8001de0 <cliShowLog+0xf0>)
 8001d56:	f001 fd8b 	bl	8003870 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	7a98      	ldrb	r0, [r3, #10]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001d64:	461a      	mov	r2, r3
 8001d66:	491f      	ldr	r1, [pc, #124]	@ (8001de4 <cliShowLog+0xf4>)
 8001d68:	f001 fd82 	bl	8003870 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	7a98      	ldrb	r0, [r3, #10]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001d76:	461a      	mov	r2, r3
 8001d78:	491b      	ldr	r1, [pc, #108]	@ (8001de8 <cliShowLog+0xf8>)
 8001d7a:	f001 fd79 	bl	8003870 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	e012      	b.n	8001daa <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	7a98      	ldrb	r0, [r3, #10]
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	015b      	lsls	r3, r3, #5
 8001d8e:	4413      	add	r3, r2
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	4913      	ldr	r1, [pc, #76]	@ (8001dec <cliShowLog+0xfc>)
 8001da0:	f001 fd66 	bl	8003870 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3301      	adds	r3, #1
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001db0:	461a      	mov	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4293      	cmp	r3, r2
 8001db6:	dbe5      	blt.n	8001d84 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	7a9b      	ldrb	r3, [r3, #10]
 8001dbc:	490c      	ldr	r1, [pc, #48]	@ (8001df0 <cliShowLog+0x100>)
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f001 fd56 	bl	8003870 <uartPrintf>
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000228 	.word	0x20000228
 8001dd0:	0800a7f0 	.word	0x0800a7f0
 8001dd4:	0800a800 	.word	0x0800a800
 8001dd8:	0800a810 	.word	0x0800a810
 8001ddc:	0800a820 	.word	0x0800a820
 8001de0:	0800a830 	.word	0x0800a830
 8001de4:	0800a840 	.word	0x0800a840
 8001de8:	0800a850 	.word	0x0800a850
 8001dec:	0800a860 	.word	0x0800a860
 8001df0:	0800a870 	.word	0x0800a870

08001df4 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	4906      	ldr	r1, [pc, #24]	@ (8001e1c <cliShowPrompt+0x28>)
 8001e02:	4618      	mov	r0, r3
 8001e04:	f001 fd34 	bl	8003870 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4904      	ldr	r1, [pc, #16]	@ (8001e20 <cliShowPrompt+0x2c>)
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f001 fd2e 	bl	8003870 <uartPrintf>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	0800a874 	.word	0x0800a874
 8001e20:	0800a878 	.word	0x0800a878

08001e24 <cliMain>:

bool cliMain(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8001e28:	4b0e      	ldr	r3, [pc, #56]	@ (8001e64 <cliMain+0x40>)
 8001e2a:	7a1b      	ldrb	r3, [r3, #8]
 8001e2c:	f083 0301 	eor.w	r3, r3, #1
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <cliMain+0x16>
  {
    return false;
 8001e36:	2300      	movs	r3, #0
 8001e38:	e012      	b.n	8001e60 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <cliMain+0x40>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f001 fc62 	bl	8003708 <uartAvailable>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d009      	beq.n	8001e5e <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8001e4a:	4b06      	ldr	r3, [pc, #24]	@ (8001e64 <cliMain+0x40>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f001 fca6 	bl	80037a0 <uartRead>
 8001e54:	4603      	mov	r3, r0
 8001e56:	4619      	mov	r1, r3
 8001e58:	4802      	ldr	r0, [pc, #8]	@ (8001e64 <cliMain+0x40>)
 8001e5a:	f000 f805 	bl	8001e68 <cliUpdate>
  }

  return true;
 8001e5e:	2301      	movs	r3, #1
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20000228 	.word	0x20000228

08001e68 <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08c      	sub	sp, #48	@ 0x30
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	460b      	mov	r3, r1
 8001e72:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f203 332a 	addw	r3, r3, #810	@ 0x32a
 8001e80:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	7c1b      	ldrb	r3, [r3, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f040 816d 	bne.w	8002166 <cliUpdate+0x2fe>
  {
    switch(rx_data)
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e90:	d02a      	beq.n	8001ee8 <cliUpdate+0x80>
 8001e92:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e94:	f300 80da 	bgt.w	800204c <cliUpdate+0x1e4>
 8001e98:	2b1b      	cmp	r3, #27
 8001e9a:	d021      	beq.n	8001ee0 <cliUpdate+0x78>
 8001e9c:	2b1b      	cmp	r3, #27
 8001e9e:	f300 80d5 	bgt.w	800204c <cliUpdate+0x1e4>
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d062      	beq.n	8001f6c <cliUpdate+0x104>
 8001ea6:	2b0d      	cmp	r3, #13
 8001ea8:	f040 80d0 	bne.w	800204c <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d005      	beq.n	8001ec2 <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f000 fa52 	bl	8002360 <cliLineAdd>
          cliRunCmd(p_cli);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 fb23 	bl	8002508 <cliRunCmd>
        }

        line->count = 0;
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        line->cursor = 0;
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        line->buf[0] = 0;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff8b 	bl	8001df4 <cliShowPrompt>
        break;
 8001ede:	e142      	b.n	8002166 <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	741a      	strb	r2, [r3, #16]
        break;
 8001ee6:	e13e      	b.n	8002166 <cliUpdate+0x2fe>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	f080 8131 	bcs.w	800215c <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f06:	1ad3      	subs	r3, r2, r3
 8001f08:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f0e:	e013      	b.n	8001f38 <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f16:	461a      	mov	r2, r3
 8001f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f1a:	441a      	add	r2, r3
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f22:	4619      	mov	r1, r3
 8001f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f26:	440b      	add	r3, r1
 8001f28:	3b01      	subs	r3, #1
 8001f2a:	69f9      	ldr	r1, [r7, #28]
 8001f2c:	5c89      	ldrb	r1, [r1, r2]
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8001f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f34:	3301      	adds	r3, #1
 8001f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f38:	7efb      	ldrb	r3, [r7, #27]
 8001f3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	dbe7      	blt.n	8001f10 <cliUpdate+0xa8>
          }

          line->count--;
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f46:	3b01      	subs	r3, #1
 8001f48:	b2da      	uxtb	r2, r3
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          line->buf[line->count] = 0;
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f56:	461a      	mov	r2, r3
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	498d      	ldr	r1, [pc, #564]	@ (8002198 <cliUpdate+0x330>)
 8001f64:	4618      	mov	r0, r3
 8001f66:	f001 fc83 	bl	8003870 <uartPrintf>
        }
        break;
 8001f6a:	e0f7      	b.n	800215c <cliUpdate+0x2f4>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d055      	beq.n	8002022 <cliUpdate+0x1ba>
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d050      	beq.n	8002022 <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d10e      	bne.n	8001fae <cliUpdate+0x146>
          {
            line->count--;
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f96:	3b01      	subs	r3, #1
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	2100      	movs	r1, #0
 8001fac:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d231      	bcs.n	8002022 <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fd2:	e013      	b.n	8001ffc <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fda:	461a      	mov	r2, r3
 8001fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fde:	441a      	add	r2, r3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fea:	440b      	add	r3, r1
 8001fec:	3b01      	subs	r3, #1
 8001fee:	69f9      	ldr	r1, [r7, #28]
 8001ff0:	5c89      	ldrb	r1, [r1, r2]
 8001ff2:	69fa      	ldr	r2, [r7, #28]
 8001ff4:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ffc:	7ebb      	ldrb	r3, [r7, #26]
 8001ffe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002000:	429a      	cmp	r2, r3
 8002002:	dbe7      	blt.n	8001fd4 <cliUpdate+0x16c>
            }

            line->count--;
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800200a:	3b01      	subs	r3, #1
 800200c:	b2da      	uxtb	r2, r3
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800201a:	461a      	mov	r2, r3
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	2100      	movs	r1, #0
 8002020:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 8099 	beq.w	8002160 <cliUpdate+0x2f8>
        {
          line->cursor--;
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002034:	3b01      	subs	r3, #1
 8002036:	b2da      	uxtb	r2, r3
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	4956      	ldr	r1, [pc, #344]	@ (800219c <cliUpdate+0x334>)
 8002044:	4618      	mov	r0, r3
 8002046:	f001 fc13 	bl	8003870 <uartPrintf>
        }
        break;
 800204a:	e089      	b.n	8002160 <cliUpdate+0x2f8>


      default:
        if ((line->count + 1) < line->buf_len)
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002052:	3301      	adds	r3, #1
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 800205a:	4293      	cmp	r3, r2
 800205c:	f280 8082 	bge.w	8002164 <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800206c:	429a      	cmp	r2, r3
 800206e:	d124      	bne.n	80020ba <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	1cf9      	adds	r1, r7, #3
 8002076:	2201      	movs	r2, #1
 8002078:	4618      	mov	r0, r3
 800207a:	f001 fbbb 	bl	80037f4 <uartWrite>

            line->buf[line->cursor] = rx_data;
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002084:	461a      	mov	r2, r3
 8002086:	78f9      	ldrb	r1, [r7, #3]
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	5499      	strb	r1, [r3, r2]
            line->count++;
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002092:	3301      	adds	r3, #1
 8002094:	b2da      	uxtb	r2, r3
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020a2:	3301      	adds	r3, #1
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80020b2:	461a      	mov	r2, r3
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	2100      	movs	r1, #0
 80020b8:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d24c      	bcs.n	8002164 <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 80020da:	2300      	movs	r3, #0
 80020dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80020de:	e013      	b.n	8002108 <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80020e6:	461a      	mov	r2, r3
 80020e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	1e5a      	subs	r2, r3, #1
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80020f4:	4619      	mov	r1, r3
 80020f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f8:	1acb      	subs	r3, r1, r3
 80020fa:	69f9      	ldr	r1, [r7, #28]
 80020fc:	5c89      	ldrb	r1, [r1, r2]
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8002102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002104:	3301      	adds	r3, #1
 8002106:	627b      	str	r3, [r7, #36]	@ 0x24
 8002108:	7e7b      	ldrb	r3, [r7, #25]
 800210a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800210c:	429a      	cmp	r2, r3
 800210e:	dbe7      	blt.n	80020e0 <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 8002110:	69fb      	ldr	r3, [r7, #28]
 8002112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002116:	461a      	mov	r2, r3
 8002118:	78f9      	ldrb	r1, [r7, #3]
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	5499      	strb	r1, [r3, r2]
            line->count++;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002124:	3301      	adds	r3, #1
 8002126:	b2da      	uxtb	r2, r3
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002134:	3301      	adds	r3, #1
 8002136:	b2da      	uxtb	r2, r3
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002144:	461a      	mov	r2, r3
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	2100      	movs	r1, #0
 800214a:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	4913      	ldr	r1, [pc, #76]	@ (80021a0 <cliUpdate+0x338>)
 8002154:	4618      	mov	r0, r3
 8002156:	f001 fb8b 	bl	8003870 <uartPrintf>
          }
        }
        break;
 800215a:	e003      	b.n	8002164 <cliUpdate+0x2fc>
        break;
 800215c:	bf00      	nop
 800215e:	e002      	b.n	8002166 <cliUpdate+0x2fe>
        break;
 8002160:	bf00      	nop
 8002162:	e000      	b.n	8002166 <cliUpdate+0x2fe>
        break;
 8002164:	bf00      	nop
    }
  }

  switch(p_cli->state)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	7c1b      	ldrb	r3, [r3, #16]
 800216a:	3b01      	subs	r3, #1
 800216c:	2b03      	cmp	r3, #3
 800216e:	f200 80d0 	bhi.w	8002312 <cliUpdate+0x4aa>
 8002172:	a201      	add	r2, pc, #4	@ (adr r2, 8002178 <cliUpdate+0x310>)
 8002174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002178:	08002189 	.word	0x08002189
 800217c:	08002191 	.word	0x08002191
 8002180:	080021a5 	.word	0x080021a5
 8002184:	08002309 	.word	0x08002309
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2202      	movs	r2, #2
 800218c:	741a      	strb	r2, [r3, #16]
      break;
 800218e:	e0c0      	b.n	8002312 <cliUpdate+0x4aa>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2203      	movs	r2, #3
 8002194:	741a      	strb	r2, [r3, #16]
      break;
 8002196:	e0bc      	b.n	8002312 <cliUpdate+0x4aa>
 8002198:	0800a880 	.word	0x0800a880
 800219c:	0800a888 	.word	0x0800a888
 80021a0:	0800a890 	.word	0x0800a890

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	2b44      	cmp	r3, #68	@ 0x44
 80021ae:	d11a      	bne.n	80021e6 <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d015      	beq.n	80021e6 <cliUpdate+0x37e>
        {
          line->cursor--;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          tx_buf[0] = 0x1B;
 80021ca:	231b      	movs	r3, #27
 80021cc:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 80021ce:	235b      	movs	r3, #91	@ 0x5b
 80021d0:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 80021d2:	78fb      	ldrb	r3, [r7, #3]
 80021d4:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	f107 010c 	add.w	r1, r7, #12
 80021de:	2203      	movs	r2, #3
 80021e0:	4618      	mov	r0, r3
 80021e2:	f001 fb07 	bl	80037f4 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 80021e6:	78fb      	ldrb	r3, [r7, #3]
 80021e8:	2b43      	cmp	r3, #67	@ 0x43
 80021ea:	d11d      	bne.n	8002228 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d215      	bcs.n	8002228 <cliUpdate+0x3c0>
        {
          line->cursor++;
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002202:	3301      	adds	r3, #1
 8002204:	b2da      	uxtb	r2, r3
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          tx_buf[0] = 0x1B;
 800220c:	231b      	movs	r3, #27
 800220e:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8002210:	235b      	movs	r3, #91	@ 0x5b
 8002212:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8002214:	78fb      	ldrb	r3, [r7, #3]
 8002216:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	f107 010c 	add.w	r1, r7, #12
 8002220:	2203      	movs	r2, #3
 8002222:	4618      	mov	r0, r3
 8002224:	f001 fae6 	bl	80037f4 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 8002228:	78fb      	ldrb	r3, [r7, #3]
 800222a:	2b41      	cmp	r3, #65	@ 0x41
 800222c:	d10c      	bne.n	8002248 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 800222e:	2101      	movs	r1, #1
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f000 f8df 	bl	80023f4 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	781a      	ldrb	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f203 332a 	addw	r3, r3, #810	@ 0x32a
 8002240:	4619      	mov	r1, r3
 8002242:	4610      	mov	r0, r2
 8002244:	f001 fb14 	bl	8003870 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8002248:	78fb      	ldrb	r3, [r7, #3]
 800224a:	2b42      	cmp	r3, #66	@ 0x42
 800224c:	d10c      	bne.n	8002268 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 800224e:	2100      	movs	r1, #0
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f000 f8cf 	bl	80023f4 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	781a      	ldrb	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f203 332a 	addw	r3, r3, #810	@ 0x32a
 8002260:	4619      	mov	r1, r3
 8002262:	4610      	mov	r0, r2
 8002264:	f001 fb04 	bl	8003870 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	2b31      	cmp	r3, #49	@ 0x31
 800226c:	d10f      	bne.n	800228e <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	7818      	ldrb	r0, [r3, #0]
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002278:	461a      	mov	r2, r3
 800227a:	492a      	ldr	r1, [pc, #168]	@ (8002324 <cliUpdate+0x4bc>)
 800227c:	f001 faf8 	bl	8003870 <uartPrintf>
        line->cursor = 0;
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	2200      	movs	r2, #0
 8002284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        p_cli->state = CLI_RX_SP4;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2204      	movs	r2, #4
 800228c:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 800228e:	78fb      	ldrb	r3, [r7, #3]
 8002290:	2b34      	cmp	r3, #52	@ 0x34
 8002292:	d13d      	bne.n	8002310 <cliUpdate+0x4a8>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d20f      	bcs.n	80022c4 <cliUpdate+0x45c>
        {
          mov_len = line->count - line->cursor;
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022aa:	461a      	mov	r2, r3
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	8afa      	ldrh	r2, [r7, #22]
 80022bc:	491a      	ldr	r1, [pc, #104]	@ (8002328 <cliUpdate+0x4c0>)
 80022be:	4618      	mov	r0, r3
 80022c0:	f001 fad6 	bl	8003870 <uartPrintf>
        }
        if (line->cursor > line->count)
 80022c4:	69fb      	ldr	r3, [r7, #28]
 80022c6:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d90f      	bls.n	80022f4 <cliUpdate+0x48c>
        {
          mov_len = line->cursor - line->count;
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022da:	461a      	mov	r2, r3
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	8afa      	ldrh	r2, [r7, #22]
 80022ec:	490d      	ldr	r1, [pc, #52]	@ (8002324 <cliUpdate+0x4bc>)
 80022ee:	4618      	mov	r0, r3
 80022f0:	f001 fabe 	bl	8003870 <uartPrintf>
        }
        line->cursor = line->count;
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        p_cli->state = CLI_RX_SP4;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2204      	movs	r2, #4
 8002304:	741a      	strb	r2, [r3, #16]
      }
      break;
 8002306:	e003      	b.n	8002310 <cliUpdate+0x4a8>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	741a      	strb	r2, [r3, #16]
      break;
 800230e:	e000      	b.n	8002312 <cliUpdate+0x4aa>
      break;
 8002310:	bf00      	nop
  }



  cliShowLog(p_cli);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff fcec 	bl	8001cf0 <cliShowLog>

  return ret;
 8002318:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 800231c:	4618      	mov	r0, r3
 800231e:	3730      	adds	r7, #48	@ 0x30
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	0800a89c 	.word	0x0800a89c
 8002328:	0800a8a4 	.word	0x0800a8a4

0800232c <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 236c 	strb.w	r2, [r3, #876]	@ 0x36c
  p_cli->line.cursor  = 0;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 236b 	strb.w	r2, [r3, #875]	@ 0x36b
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	223f      	movs	r2, #63	@ 0x3f
 8002348:	f883 236a 	strb.w	r2, [r3, #874]	@ 0x36a
  p_cli->line.buf[0]  = 0;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 232a 	strb.w	r2, [r3, #810]	@ 0x32a
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	bc80      	pop	{r7}
 800235c:	4770      	bx	lr
	...

08002360 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 800236e:	461a      	mov	r2, r3
 8002370:	6879      	ldr	r1, [r7, #4]
 8002372:	4613      	mov	r3, r2
 8002374:	015b      	lsls	r3, r3, #5
 8002376:	4413      	add	r3, r2
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	4413      	add	r3, r2
 800237c:	440b      	add	r3, r1
 800237e:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4610      	mov	r0, r2
 8002386:	f203 332a 	addw	r3, r3, #810	@ 0x32a
 800238a:	2243      	movs	r2, #67	@ 0x43
 800238c:	4619      	mov	r1, r3
 800238e:	f005 fcec 	bl	8007d6a <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8002398:	2b05      	cmp	r3, #5
 800239a:	d807      	bhi.n	80023ac <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 80023a2:	3301      	adds	r3, #1
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80023b2:	b25a      	sxtb	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	4b0b      	ldr	r3, [pc, #44]	@ (80023f0 <cliLineAdd+0x90>)
 80023c4:	fb83 3102 	smull	r3, r1, r3, r2
 80023c8:	17d3      	asrs	r3, r2, #31
 80023ca:	1ac9      	subs	r1, r1, r3
 80023cc:	460b      	mov	r3, r1
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	440b      	add	r3, r1
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	1ad1      	subs	r1, r2, r3
 80023d6:	b2ca      	uxtb	r2, r1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  p_cli->hist_line_new  = true;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2201      	movs	r2, #1
 80023e2:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
}
 80023e6:	bf00      	nop
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	2aaaaaab 	.word	0x2aaaaaab

080023f4 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8002406:	2b00      	cmp	r3, #0
 8002408:	d076      	beq.n	80024f8 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f893 336b 	ldrb.w	r3, [r3, #875]	@ 0x36b
 8002410:	2b00      	cmp	r3, #0
 8002412:	d008      	beq.n	8002426 <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7818      	ldrb	r0, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 336b 	ldrb.w	r3, [r3, #875]	@ 0x36b
 800241e:	461a      	mov	r2, r3
 8002420:	4937      	ldr	r1, [pc, #220]	@ (8002500 <cliLineChange+0x10c>)
 8002422:	f001 fa25 	bl	8003870 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 336c 	ldrb.w	r3, [r3, #876]	@ 0x36c
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	7818      	ldrb	r0, [r3, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	f893 336c 	ldrb.w	r3, [r3, #876]	@ 0x36c
 800243a:	461a      	mov	r2, r3
 800243c:	4931      	ldr	r1, [pc, #196]	@ (8002504 <cliLineChange+0x110>)
 800243e:	f001 fa17 	bl	8003870 <uartPrintf>
  }


  if (key_up == true)
 8002442:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d125      	bne.n	8002496 <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 8002450:	2b00      	cmp	r3, #0
 8002452:	d006      	beq.n	8002462 <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 800245a:	b25a      	sxtb	r2, r3
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8002468:	461a      	mov	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8002470:	4413      	add	r3, r2
 8002472:	3b01      	subs	r3, #1
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 800247a:	fb93 f1f2 	sdiv	r1, r3, r2
 800247e:	fb01 f202 	mul.w	r2, r1, r2
 8002482:	1a9b      	subs	r3, r3, r2
 8002484:	b25a      	sxtb	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8002492:	73fb      	strb	r3, [r7, #15]
 8002494:	e013      	b.n	80024be <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 800249c:	3301      	adds	r3, #1
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 80024a4:	fb93 f1f2 	sdiv	r1, r3, r2
 80024a8:	fb01 f202 	mul.w	r2, r1, r2
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	b25a      	sxtb	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 80024bc:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 80024be:	7bfa      	ldrb	r2, [r7, #15]
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	4613      	mov	r3, r2
 80024c6:	015b      	lsls	r3, r3, #5
 80024c8:	4413      	add	r3, r2
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4413      	add	r3, r2
 80024ce:	4403      	add	r3, r0
 80024d0:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 80024d4:	f201 332a 	addw	r3, r1, #810	@ 0x32a
 80024d8:	4611      	mov	r1, r2
 80024da:	2243      	movs	r2, #67	@ 0x43
 80024dc:	4618      	mov	r0, r3
 80024de:	f005 fc44 	bl	8007d6a <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 236c 	ldrb.w	r2, [r3, #876]	@ 0x36c
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f883 236b 	strb.w	r2, [r3, #875]	@ 0x36b

  p_cli->hist_line_new = false;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
 80024f6:	e000      	b.n	80024fa <cliLineChange+0x106>
    return;
 80024f8:	bf00      	nop
}
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	0800a89c 	.word	0x0800a89c
 8002504:	0800a8ac 	.word	0x0800a8ac

08002508 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002510:	2300      	movs	r3, #0
 8002512:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f000 f851 	bl	80025bc <cliParseArgs>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d045      	beq.n	80025ac <cliRunCmd+0xa4>
  {
    cliPrintf("\r\n");
 8002520:	4825      	ldr	r0, [pc, #148]	@ (80025b8 <cliRunCmd+0xb0>)
 8002522:	f000 f893 	bl	800264c <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800252c:	4618      	mov	r0, r3
 800252e:	f000 f8b1 	bl	8002694 <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	e032      	b.n	800259e <cliRunCmd+0x96>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f8d3 0114 	ldr.w	r0, [r3, #276]	@ 0x114
 800253e:	68fa      	ldr	r2, [r7, #12]
 8002540:	4613      	mov	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	4413      	add	r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	f503 735c 	add.w	r3, r3, #880	@ 0x370
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	4413      	add	r3, r2
 8002550:	4619      	mov	r1, r3
 8002552:	f7fd fdfd 	bl	8000150 <strcmp>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d11d      	bne.n	8002598 <cliRunCmd+0x90>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f8a3 24b0 	strh.w	r2, [r3, #1200]	@ 0x4b0
        p_cli->cmd_args.argv = &p_cli->argv[1];
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	f503 728c 	add.w	r2, r3, #280	@ 0x118
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f8c3 24b4 	str.w	r2, [r3, #1204]	@ 0x4b4
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	f503 7360 	add.w	r3, r3, #896	@ 0x380
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	f502 6296 	add.w	r2, r2, #1200	@ 0x4b0
 8002592:	4610      	mov	r0, r2
 8002594:	4798      	blx	r3
        break;
 8002596:	e009      	b.n	80025ac <cliRunCmd+0xa4>
    for (int i=0; i<p_cli->cmd_count; i++)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	3301      	adds	r3, #1
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f8b3 336e 	ldrh.w	r3, [r3, #878]	@ 0x36e
 80025a4:	461a      	mov	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4293      	cmp	r3, r2
 80025aa:	dbc5      	blt.n	8002538 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 80025ac:	7afb      	ldrb	r3, [r7, #11]
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	0800a8b4 	.word	0x0800a8b4

080025bc <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b088      	sub	sp, #32
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80025c4:	2300      	movs	r3, #0
 80025c6:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  cmdline = (char *)p_cli->line.buf;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f203 332a 	addw	r3, r3, #810	@ 0x32a
 80025da:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 80025e2:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 80025e4:	8afb      	ldrh	r3, [r7, #22]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	4413      	add	r3, r2
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 80025f0:	4b15      	ldr	r3, [pc, #84]	@ (8002648 <cliParseArgs+0x8c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f107 0208 	add.w	r2, r7, #8
 80025f8:	4619      	mov	r1, r3
 80025fa:	6938      	ldr	r0, [r7, #16]
 80025fc:	f005 fb24 	bl	8007c48 <strtok_r>
 8002600:	61b8      	str	r0, [r7, #24]
 8002602:	e010      	b.n	8002626 <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 8002604:	8afb      	ldrh	r3, [r7, #22]
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	82fa      	strh	r2, [r7, #22]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	4413      	add	r3, r2
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8002614:	4b0c      	ldr	r3, [pc, #48]	@ (8002648 <cliParseArgs+0x8c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f107 0208 	add.w	r2, r7, #8
 800261c:	4619      	mov	r1, r3
 800261e:	2000      	movs	r0, #0
 8002620:	f005 fb12 	bl	8007c48 <strtok_r>
 8002624:	61b8      	str	r0, [r7, #24]
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1eb      	bne.n	8002604 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	8afa      	ldrh	r2, [r7, #22]
 8002630:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  if (argc > 0)
 8002634:	8afb      	ldrh	r3, [r7, #22]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <cliParseArgs+0x82>
  {
    ret = true;
 800263a:	2301      	movs	r3, #1
 800263c:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 800263e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3720      	adds	r7, #32
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000010 	.word	0x20000010

0800264c <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 800264c:	b40f      	push	{r0, r1, r2, r3}
 800264e:	b580      	push	{r7, lr}
 8002650:	b084      	sub	sp, #16
 8002652:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8002654:	f107 031c 	add.w	r3, r7, #28
 8002658:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 800265a:	4b0d      	ldr	r3, [pc, #52]	@ (8002690 <cliPrintf+0x44>)
 800265c:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	f103 0011 	add.w	r0, r3, #17
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800266c:	f005 fa9c 	bl	8007ba8 <vsniprintf>
 8002670:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	7818      	ldrb	r0, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	3311      	adds	r3, #17
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	4619      	mov	r1, r3
 800267e:	f001 f8b9 	bl	80037f4 <uartWrite>
}
 8002682:	bf00      	nop
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800268c:	b004      	add	sp, #16
 800268e:	4770      	bx	lr
 8002690:	20000228 	.word	0x20000228

08002694 <cliToUpper>:

void cliToUpper(char *str)
{
 8002694:	b480      	push	{r7}
 8002696:	b085      	sub	sp, #20
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800269c:	2300      	movs	r3, #0
 800269e:	81fb      	strh	r3, [r7, #14]
 80026a0:	e018      	b.n	80026d4 <cliToUpper+0x40>
  {
    str_ch = str[i];
 80026a2:	89fb      	ldrh	r3, [r7, #14]
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	4413      	add	r3, r2
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 80026ac:	7b7b      	ldrb	r3, [r7, #13]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d014      	beq.n	80026dc <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 80026b2:	7b7b      	ldrb	r3, [r7, #13]
 80026b4:	2b60      	cmp	r3, #96	@ 0x60
 80026b6:	d905      	bls.n	80026c4 <cliToUpper+0x30>
 80026b8:	7b7b      	ldrb	r3, [r7, #13]
 80026ba:	2b7a      	cmp	r3, #122	@ 0x7a
 80026bc:	d802      	bhi.n	80026c4 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 80026be:	7b7b      	ldrb	r3, [r7, #13]
 80026c0:	3b20      	subs	r3, #32
 80026c2:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 80026c4:	89fb      	ldrh	r3, [r7, #14]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	7b7a      	ldrb	r2, [r7, #13]
 80026cc:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80026ce:	89fb      	ldrh	r3, [r7, #14]
 80026d0:	3301      	adds	r3, #1
 80026d2:	81fb      	strh	r3, [r7, #14]
 80026d4:	89fb      	ldrh	r3, [r7, #14]
 80026d6:	2b0f      	cmp	r3, #15
 80026d8:	d9e3      	bls.n	80026a2 <cliToUpper+0xe>
 80026da:	e000      	b.n	80026de <cliToUpper+0x4a>
      break;
 80026dc:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 80026de:	89fb      	ldrh	r3, [r7, #14]
 80026e0:	2b10      	cmp	r3, #16
 80026e2:	d105      	bne.n	80026f0 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 80026e4:	89fb      	ldrh	r3, [r7, #14]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	4413      	add	r3, r2
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]
  }
}
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr
	...

080026fc <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800270a:	4b0f      	ldr	r3, [pc, #60]	@ (8002748 <cliArgsGetData+0x4c>)
 800270c:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	b29a      	uxth	r2, r3
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	@ 0x4b0
 8002718:	429a      	cmp	r2, r3
 800271a:	d301      	bcc.n	8002720 <cliArgsGetData+0x24>
  {
    return 0;
 800271c:	2300      	movs	r3, #0
 800271e:	e00e      	b.n	800273e <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	f8d3 24b4 	ldr.w	r2, [r3, #1204]	@ 0x4b4
 8002726:	79fb      	ldrb	r3, [r7, #7]
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2200      	movs	r2, #0
 8002730:	2100      	movs	r1, #0
 8002732:	4618      	mov	r0, r3
 8002734:	f004 fca2 	bl	800707c <strtoul>
 8002738:	4603      	mov	r3, r0
 800273a:	60fb      	str	r3, [r7, #12]

  return ret;
 800273c:	68fb      	ldr	r3, [r7, #12]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20000228 	.word	0x20000228

0800274c <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800275c:	4b0e      	ldr	r3, [pc, #56]	@ (8002798 <cliArgsGetFloat+0x4c>)
 800275e:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	b29a      	uxth	r2, r3
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	@ 0x4b0
 800276a:	429a      	cmp	r2, r3
 800276c:	d302      	bcc.n	8002774 <cliArgsGetFloat+0x28>
  {
    return 0;
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	e00c      	b.n	800278e <cliArgsGetFloat+0x42>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	f8d3 24b4 	ldr.w	r2, [r3, #1204]	@ 0x4b4
 800277a:	79fb      	ldrb	r3, [r7, #7]
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	4413      	add	r3, r2
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	2100      	movs	r1, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f004 fbb3 	bl	8006ef0 <strtof>
 800278a:	60f8      	str	r0, [r7, #12]

  return ret;
 800278c:	68fb      	ldr	r3, [r7, #12]
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000228 	.word	0x20000228

0800279c <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	4603      	mov	r3, r0
 80027a4:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80027aa:	4b0c      	ldr	r3, [pc, #48]	@ (80027dc <cliArgsGetStr+0x40>)
 80027ac:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	@ 0x4b0
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d301      	bcc.n	80027c0 <cliArgsGetStr+0x24>
  {
    return 0;
 80027bc:	2300      	movs	r3, #0
 80027be:	e008      	b.n	80027d2 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	f8d3 24b4 	ldr.w	r2, [r3, #1204]	@ 0x4b4
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4413      	add	r3, r2
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	60fb      	str	r3, [r7, #12]

  return ret;
 80027d0:	68fb      	ldr	r3, [r7, #12]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3714      	adds	r7, #20
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr
 80027dc:	20000228 	.word	0x20000228

080027e0 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	6039      	str	r1, [r7, #0]
 80027ea:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80027ec:	2300      	movs	r3, #0
 80027ee:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 80027f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002830 <cliArgsIsStr+0x50>)
 80027f2:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	@ 0x4b0
 80027fe:	429a      	cmp	r2, r3
 8002800:	d301      	bcc.n	8002806 <cliArgsIsStr+0x26>
  {
    return 0;
 8002802:	2300      	movs	r3, #0
 8002804:	e010      	b.n	8002828 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	f8d3 24b4 	ldr.w	r2, [r3, #1204]	@ 0x4b4
 800280c:	79fb      	ldrb	r3, [r7, #7]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4619      	mov	r1, r3
 8002816:	6838      	ldr	r0, [r7, #0]
 8002818:	f7fd fc9a 	bl	8000150 <strcmp>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <cliArgsIsStr+0x46>
  {
    ret = true;
 8002822:	2301      	movs	r3, #1
 8002824:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8002826:	7bfb      	ldrb	r3, [r7, #15]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20000228 	.word	0x20000228

08002834 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 800283a:	4b08      	ldr	r3, [pc, #32]	@ (800285c <cliKeepLoop+0x28>)
 800283c:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f000 ff60 	bl	8003708 <uartAvailable>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d101      	bne.n	8002852 <cliKeepLoop+0x1e>
  {
    return true;
 800284e:	2301      	movs	r3, #1
 8002850:	e000      	b.n	8002854 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 8002852:	2300      	movs	r3, #0
  }
}
 8002854:	4618      	mov	r0, r3
 8002856:	3708      	adds	r7, #8
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	20000228 	.word	0x20000228

08002860 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  bool ret = true;
 800286a:	2301      	movs	r3, #1
 800286c:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 800286e:	4b1f      	ldr	r3, [pc, #124]	@ (80028ec <cliAdd+0x8c>)
 8002870:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	f8b3 336e 	ldrh.w	r3, [r3, #878]	@ 0x36e
 8002878:	2b0f      	cmp	r3, #15
 800287a:	d901      	bls.n	8002880 <cliAdd+0x20>
  {
    return false;
 800287c:	2300      	movs	r3, #0
 800287e:	e030      	b.n	80028e2 <cliAdd+0x82>
  }

  index = p_cli->cmd_count;
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	f8b3 336e 	ldrh.w	r3, [r3, #878]	@ 0x36e
 8002886:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8002888:	89fa      	ldrh	r2, [r7, #14]
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	f503 735c 	add.w	r3, r3, #880	@ 0x370
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4413      	add	r3, r2
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	4618      	mov	r0, r3
 800289e:	f005 fa4e 	bl	8007d3e <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 80028a2:	89fa      	ldrh	r2, [r7, #14]
 80028a4:	6939      	ldr	r1, [r7, #16]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	f503 7360 	add.w	r3, r3, #896	@ 0x380
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 80028b8:	89fa      	ldrh	r2, [r7, #14]
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	f503 735c 	add.w	r3, r3, #880	@ 0x370
 80028c6:	693a      	ldr	r2, [r7, #16]
 80028c8:	4413      	add	r3, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff fee2 	bl	8002694 <cliToUpper>

  p_cli->cmd_count++;
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	f8b3 336e 	ldrh.w	r3, [r3, #878]	@ 0x36e
 80028d6:	3301      	adds	r3, #1
 80028d8:	b29a      	uxth	r2, r3
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	f8a3 236e 	strh.w	r2, [r3, #878]	@ 0x36e

  return ret;
 80028e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000228 	.word	0x20000228

080028f0 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 80028f8:	4b15      	ldr	r3, [pc, #84]	@ (8002950 <cliShowList+0x60>)
 80028fa:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 80028fc:	4815      	ldr	r0, [pc, #84]	@ (8002954 <cliShowList+0x64>)
 80028fe:	f7ff fea5 	bl	800264c <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8002902:	4815      	ldr	r0, [pc, #84]	@ (8002958 <cliShowList+0x68>)
 8002904:	f7ff fea2 	bl	800264c <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8002908:	2300      	movs	r3, #0
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	e011      	b.n	8002932 <cliShowList+0x42>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4613      	mov	r3, r2
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	4413      	add	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	f503 735c 	add.w	r3, r3, #880	@ 0x370
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	4413      	add	r3, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fe93 	bl	800264c <cliPrintf>
    cliPrintf("\r\n");
 8002926:	480b      	ldr	r0, [pc, #44]	@ (8002954 <cliShowList+0x64>)
 8002928:	f7ff fe90 	bl	800264c <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	3301      	adds	r3, #1
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	f8b3 336e 	ldrh.w	r3, [r3, #878]	@ 0x36e
 8002938:	461a      	mov	r2, r3
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	4293      	cmp	r3, r2
 800293e:	dbe6      	blt.n	800290e <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 8002940:	4806      	ldr	r0, [pc, #24]	@ (800295c <cliShowList+0x6c>)
 8002942:	f7ff fe83 	bl	800264c <cliPrintf>
}
 8002946:	bf00      	nop
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	20000228 	.word	0x20000228
 8002954:	0800a8b4 	.word	0x0800a8b4
 8002958:	0800a8b8 	.word	0x0800a8b8
 800295c:	0800a8d8 	.word	0x0800a8d8

08002960 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b08c      	sub	sp, #48	@ 0x30
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8002968:	2310      	movs	r3, #16
 800296a:	62bb      	str	r3, [r7, #40]	@ 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	881b      	ldrh	r3, [r3, #0]
 8002970:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	881b      	ldrh	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d103      	bne.n	8002988 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8002980:	4840      	ldr	r0, [pc, #256]	@ (8002a84 <cliMemoryDump+0x124>)
 8002982:	f7ff fe63 	bl	800264c <cliPrintf>
 8002986:	e07a      	b.n	8002a7e <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2b01      	cmp	r3, #1
 800298c:	dd09      	ble.n	80029a2 <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	3304      	adds	r3, #4
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2200      	movs	r2, #0
 8002996:	2100      	movs	r1, #0
 8002998:	4618      	mov	r0, r3
 800299a:	f004 fb6f 	bl	800707c <strtoul>
 800299e:	4603      	mov	r3, r0
 80029a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2200      	movs	r2, #0
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f004 fb66 	bl	800707c <strtoul>
 80029b0:	4603      	mov	r3, r0
 80029b2:	627b      	str	r3, [r7, #36]	@ 0x24
  ascptr = (unsigned int *)addr;
 80029b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b6:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 80029b8:	4833      	ldr	r0, [pc, #204]	@ (8002a88 <cliMemoryDump+0x128>)
 80029ba:	f7ff fe47 	bl	800264c <cliPrintf>
  for (idx = 0; idx<size; idx++)
 80029be:	2300      	movs	r3, #0
 80029c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029c2:	e058      	b.n	8002a76 <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 80029c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c6:	f003 0303 	and.w	r3, r3, #3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d104      	bne.n	80029d8 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 80029ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d0:	4619      	mov	r1, r3
 80029d2:	482e      	ldr	r0, [pc, #184]	@ (8002a8c <cliMemoryDump+0x12c>)
 80029d4:	f7ff fe3a 	bl	800264c <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4619      	mov	r1, r3
 80029de:	482c      	ldr	r0, [pc, #176]	@ (8002a90 <cliMemoryDump+0x130>)
 80029e0:	f7ff fe34 	bl	800264c <cliPrintf>

    if ((idx%4) == 3)
 80029e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029e6:	425a      	negs	r2, r3
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	f002 0203 	and.w	r2, r2, #3
 80029f0:	bf58      	it	pl
 80029f2:	4253      	negpl	r3, r2
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d138      	bne.n	8002a6a <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 80029f8:	4826      	ldr	r0, [pc, #152]	@ (8002a94 <cliMemoryDump+0x134>)
 80029fa:	f7ff fe27 	bl	800264c <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 80029fe:	2300      	movs	r3, #0
 8002a00:	623b      	str	r3, [r7, #32]
 8002a02:	e02c      	b.n	8002a5e <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
 8002a0e:	e01d      	b.n	8002a4c <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8002a10:	f107 020c 	add.w	r2, r7, #12
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	4413      	add	r3, r2
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b1f      	cmp	r3, #31
 8002a1c:	d910      	bls.n	8002a40 <cliMemoryDump+0xe0>
 8002a1e:	f107 020c 	add.w	r2, r7, #12
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	4413      	add	r3, r2
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b7e      	cmp	r3, #126	@ 0x7e
 8002a2a:	d809      	bhi.n	8002a40 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8002a2c:	f107 020c 	add.w	r2, r7, #12
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	4413      	add	r3, r2
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	4619      	mov	r1, r3
 8002a38:	4817      	ldr	r0, [pc, #92]	@ (8002a98 <cliMemoryDump+0x138>)
 8002a3a:	f7ff fe07 	bl	800264c <cliPrintf>
 8002a3e:	e002      	b.n	8002a46 <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8002a40:	4816      	ldr	r0, [pc, #88]	@ (8002a9c <cliMemoryDump+0x13c>)
 8002a42:	f7ff fe03 	bl	800264c <cliPrintf>
        for (i=0;i<4;i++)
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	3301      	adds	r3, #1
 8002a4a:	61fb      	str	r3, [r7, #28]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	ddde      	ble.n	8002a10 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	3304      	adds	r3, #4
 8002a56:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8002a58:	6a3b      	ldr	r3, [r7, #32]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	623b      	str	r3, [r7, #32]
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	ddcf      	ble.n	8002a04 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8002a64:	480e      	ldr	r0, [pc, #56]	@ (8002aa0 <cliMemoryDump+0x140>)
 8002a66:	f7ff fdf1 	bl	800264c <cliPrintf>
    }
    addr++;
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (idx = 0; idx<size; idx++)
 8002a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a72:	3301      	adds	r3, #1
 8002a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	dba2      	blt.n	80029c4 <cliMemoryDump+0x64>
  }
}
 8002a7e:	3730      	adds	r7, #48	@ 0x30
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	0800a8f8 	.word	0x0800a8f8
 8002a88:	0800a90c 	.word	0x0800a90c
 8002a8c:	0800a914 	.word	0x0800a914
 8002a90:	0800a920 	.word	0x0800a920
 8002a94:	0800a928 	.word	0x0800a928
 8002a98:	0800a92c 	.word	0x0800a92c
 8002a9c:	0800a930 	.word	0x0800a930
 8002aa0:	0800a934 	.word	0x0800a934

08002aa4 <dht22Init>:

//*** Functions prototypes ***//

//OneWire Initialise
bool dht22Init(GPIO_TypeDef* DataPort, uint16_t DataPin)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	807b      	strh	r3, [r7, #2]
  bool ret = true;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	73bb      	strb	r3, [r7, #14]

  oneWire_PORT = DataPort;
 8002ab4:	4a11      	ldr	r2, [pc, #68]	@ (8002afc <dht22Init+0x58>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6013      	str	r3, [r2, #0]
  oneWire_PIN = DataPin;
 8002aba:	4a11      	ldr	r2, [pc, #68]	@ (8002b00 <dht22Init+0x5c>)
 8002abc:	887b      	ldrh	r3, [r7, #2]
 8002abe:	8013      	strh	r3, [r2, #0]

  for(uint8_t i=0; i<16; i++)
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	73fb      	strb	r3, [r7, #15]
 8002ac4:	e00e      	b.n	8002ae4 <dht22Init+0x40>
  {
    if(DataPin & (1 << i))
 8002ac6:	887a      	ldrh	r2, [r7, #2]
 8002ac8:	7bfb      	ldrb	r3, [r7, #15]
 8002aca:	fa42 f303 	asr.w	r3, r2, r3
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <dht22Init+0x3a>
    {
      oneWirePin_Idx = i;
 8002ad6:	4a0b      	ldr	r2, [pc, #44]	@ (8002b04 <dht22Init+0x60>)
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	7013      	strb	r3, [r2, #0]
      break;
 8002adc:	e005      	b.n	8002aea <dht22Init+0x46>
  for(uint8_t i=0; i<16; i++)
 8002ade:	7bfb      	ldrb	r3, [r7, #15]
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	73fb      	strb	r3, [r7, #15]
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	2b0f      	cmp	r3, #15
 8002ae8:	d9ed      	bls.n	8002ac6 <dht22Init+0x22>
    }
  }

#ifdef _USE_HW_CLI
  cliAdd("dht22", cliDHT22);
 8002aea:	4907      	ldr	r1, [pc, #28]	@ (8002b08 <dht22Init+0x64>)
 8002aec:	4807      	ldr	r0, [pc, #28]	@ (8002b0c <dht22Init+0x68>)
 8002aee:	f7ff feb7 	bl	8002860 <cliAdd>
#endif

  return ret;
 8002af2:	7bbb      	ldrb	r3, [r7, #14]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	200006f0 	.word	0x200006f0
 8002b00:	200006f4 	.word	0x200006f4
 8002b04:	200006f6 	.word	0x200006f6
 8002b08:	08002dd5 	.word	0x08002dd5
 8002b0c:	0800a944 	.word	0x0800a944

08002b10 <ONE_WIRE_PinMode>:

//Change pin mode
void ONE_WIRE_PinMode(OnePinMode_Typedef mode)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;
  GPIO_InitStruct.Pin = oneWire_PIN;
 8002b1a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b58 <ONE_WIRE_PinMode+0x48>)
 8002b1c:	881b      	ldrh	r3, [r3, #0]
 8002b1e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	2302      	movs	r3, #2
 8002b22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	613b      	str	r3, [r7, #16]

  if(mode == ONE_OUTPUT)
 8002b28:	79fb      	ldrb	r3, [r7, #7]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d102      	bne.n	8002b34 <ONE_WIRE_PinMode+0x24>
  {
//    oneWire_PORT->MODER &= ~(3UL << 2*oneWirePin_Idx);  //Reset State
//    oneWire_PORT->MODER |= (0x01 << 2*oneWirePin_Idx); //Output Mode
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	e004      	b.n	8002b3e <ONE_WIRE_PinMode+0x2e>
  }
  else if(mode == ONE_INPUT)
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <ONE_WIRE_PinMode+0x2e>
  {
//    oneWire_PORT->MODER &= ~(3UL << 2*oneWirePin_Idx);  //Input Mode
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
  }

  HAL_GPIO_Init(oneWire_PORT, &GPIO_InitStruct);
 8002b3e:	4b07      	ldr	r3, [pc, #28]	@ (8002b5c <ONE_WIRE_PinMode+0x4c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f107 0208 	add.w	r2, r7, #8
 8002b46:	4611      	mov	r1, r2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f001 fce1 	bl	8004510 <HAL_GPIO_Init>
}
 8002b4e:	bf00      	nop
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	200006f4 	.word	0x200006f4
 8002b5c:	200006f0 	.word	0x200006f0

08002b60 <ONE_WIRE_Pin_Write>:

//One Wire pin HIGH/LOW Write
void ONE_WIRE_Pin_Write(bool state)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	71fb      	strb	r3, [r7, #7]
  if(state) HAL_GPIO_WritePin(oneWire_PORT, oneWire_PIN, GPIO_PIN_SET);
 8002b6a:	79fb      	ldrb	r3, [r7, #7]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d008      	beq.n	8002b82 <ONE_WIRE_Pin_Write+0x22>
 8002b70:	4b0a      	ldr	r3, [pc, #40]	@ (8002b9c <ONE_WIRE_Pin_Write+0x3c>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a0a      	ldr	r2, [pc, #40]	@ (8002ba0 <ONE_WIRE_Pin_Write+0x40>)
 8002b76:	8811      	ldrh	r1, [r2, #0]
 8002b78:	2201      	movs	r2, #1
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f001 ff1f 	bl	80049be <HAL_GPIO_WritePin>
  else HAL_GPIO_WritePin(oneWire_PORT, oneWire_PIN, GPIO_PIN_RESET);
}
 8002b80:	e007      	b.n	8002b92 <ONE_WIRE_Pin_Write+0x32>
  else HAL_GPIO_WritePin(oneWire_PORT, oneWire_PIN, GPIO_PIN_RESET);
 8002b82:	4b06      	ldr	r3, [pc, #24]	@ (8002b9c <ONE_WIRE_Pin_Write+0x3c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a06      	ldr	r2, [pc, #24]	@ (8002ba0 <ONE_WIRE_Pin_Write+0x40>)
 8002b88:	8811      	ldrh	r1, [r2, #0]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f001 ff16 	bl	80049be <HAL_GPIO_WritePin>
}
 8002b92:	bf00      	nop
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	200006f0 	.word	0x200006f0
 8002ba0:	200006f4 	.word	0x200006f4

08002ba4 <ONE_WIRE_Pin_Read>:

bool ONE_WIRE_Pin_Read(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  return (1&HAL_GPIO_ReadPin(oneWire_PORT, oneWire_PIN));
 8002ba8:	4b08      	ldr	r3, [pc, #32]	@ (8002bcc <ONE_WIRE_Pin_Read+0x28>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a08      	ldr	r2, [pc, #32]	@ (8002bd0 <ONE_WIRE_Pin_Read+0x2c>)
 8002bae:	8812      	ldrh	r2, [r2, #0]
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f001 feec 	bl	8004990 <HAL_GPIO_ReadPin>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	bf14      	ite	ne
 8002bc2:	2301      	movne	r3, #1
 8002bc4:	2300      	moveq	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	200006f0 	.word	0x200006f0
 8002bd0:	200006f4 	.word	0x200006f4

08002bd4 <DHT22_StartAcquisition>:

//DHT Begin function
void DHT22_StartAcquisition(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  //Change data pin mode to OUTPUT
  ONE_WIRE_PinMode(ONE_OUTPUT);
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f7ff ff99 	bl	8002b10 <ONE_WIRE_PinMode>
  //Put pin LOW
  ONE_WIRE_Pin_Write(0);
 8002bde:	2000      	movs	r0, #0
 8002be0:	f7ff ffbe 	bl	8002b60 <ONE_WIRE_Pin_Write>
  //500uSec delay
  us_delay(500);
 8002be4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002be8:	f7fe fb4f 	bl	800128a <us_delay>
  //Bring pin HIGH
  ONE_WIRE_Pin_Write(1);
 8002bec:	2001      	movs	r0, #1
 8002bee:	f7ff ffb7 	bl	8002b60 <ONE_WIRE_Pin_Write>
  //30 uSec delay
  us_delay(30);
 8002bf2:	201e      	movs	r0, #30
 8002bf4:	f7fe fb49 	bl	800128a <us_delay>
  //Set pin as input
  ONE_WIRE_PinMode(ONE_INPUT);
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	f7ff ff89 	bl	8002b10 <ONE_WIRE_PinMode>
}
 8002bfe:	bf00      	nop
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <DHT22_ReadRaw>:

//Read 5 bytes
void DHT22_ReadRaw(uint8_t *data)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b084      	sub	sp, #16
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  uint32_t rawBits = 0UL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
  uint8_t checksumBits=0;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	72fb      	strb	r3, [r7, #11]

  us_delay(40);
 8002c12:	2028      	movs	r0, #40	@ 0x28
 8002c14:	f7fe fb39 	bl	800128a <us_delay>
  while(!ONE_WIRE_Pin_Read());
 8002c18:	bf00      	nop
 8002c1a:	f7ff ffc3 	bl	8002ba4 <ONE_WIRE_Pin_Read>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f083 0301 	eor.w	r3, r3, #1
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f7      	bne.n	8002c1a <DHT22_ReadRaw+0x18>
  while(ONE_WIRE_Pin_Read());
 8002c2a:	bf00      	nop
 8002c2c:	f7ff ffba 	bl	8002ba4 <ONE_WIRE_Pin_Read>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1fa      	bne.n	8002c2c <DHT22_ReadRaw+0x2a>
  for(int8_t i=31; i>=0; i--)
 8002c36:	231f      	movs	r3, #31
 8002c38:	72bb      	strb	r3, [r7, #10]
 8002c3a:	e024      	b.n	8002c86 <DHT22_ReadRaw+0x84>
  {
    while(!ONE_WIRE_Pin_Read());
 8002c3c:	bf00      	nop
 8002c3e:	f7ff ffb1 	bl	8002ba4 <ONE_WIRE_Pin_Read>
 8002c42:	4603      	mov	r3, r0
 8002c44:	f083 0301 	eor.w	r3, r3, #1
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f7      	bne.n	8002c3e <DHT22_ReadRaw+0x3c>
    us_delay(40);
 8002c4e:	2028      	movs	r0, #40	@ 0x28
 8002c50:	f7fe fb1b 	bl	800128a <us_delay>
    if(ONE_WIRE_Pin_Read())
 8002c54:	f7ff ffa6 	bl	8002ba4 <ONE_WIRE_Pin_Read>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d007      	beq.n	8002c6e <DHT22_ReadRaw+0x6c>
    {
      rawBits |= (1UL << i);
 8002c5e:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002c62:	2201      	movs	r2, #1
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]
    }
    while(ONE_WIRE_Pin_Read());
 8002c6e:	bf00      	nop
 8002c70:	f7ff ff98 	bl	8002ba4 <ONE_WIRE_Pin_Read>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1fa      	bne.n	8002c70 <DHT22_ReadRaw+0x6e>
  for(int8_t i=31; i>=0; i--)
 8002c7a:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	72bb      	strb	r3, [r7, #10]
 8002c86:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	dad6      	bge.n	8002c3c <DHT22_ReadRaw+0x3a>
  }

  for(int8_t i=7; i>=0; i--)
 8002c8e:	2307      	movs	r3, #7
 8002c90:	727b      	strb	r3, [r7, #9]
 8002c92:	e025      	b.n	8002ce0 <DHT22_ReadRaw+0xde>
  {
    while(!ONE_WIRE_Pin_Read());
 8002c94:	bf00      	nop
 8002c96:	f7ff ff85 	bl	8002ba4 <ONE_WIRE_Pin_Read>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f083 0301 	eor.w	r3, r3, #1
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1f7      	bne.n	8002c96 <DHT22_ReadRaw+0x94>
    us_delay(40);
 8002ca6:	2028      	movs	r0, #40	@ 0x28
 8002ca8:	f7fe faef 	bl	800128a <us_delay>
    if(ONE_WIRE_Pin_Read())
 8002cac:	f7ff ff7a 	bl	8002ba4 <ONE_WIRE_Pin_Read>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <DHT22_ReadRaw+0xc6>
    {
      checksumBits |= (1UL << i);
 8002cb6:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	7afb      	ldrb	r3, [r7, #11]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	72fb      	strb	r3, [r7, #11]
    }
    while(ONE_WIRE_Pin_Read());
 8002cc8:	bf00      	nop
 8002cca:	f7ff ff6b 	bl	8002ba4 <ONE_WIRE_Pin_Read>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1fa      	bne.n	8002cca <DHT22_ReadRaw+0xc8>
  for(int8_t i=7; i>=0; i--)
 8002cd4:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b2db      	uxtb	r3, r3
 8002cde:	727b      	strb	r3, [r7, #9]
 8002ce0:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	dad5      	bge.n	8002c94 <DHT22_ReadRaw+0x92>
  }

  //Copy raw data to array of bytes
  data[0] = (rawBits>>24)&0xFF;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	0e1b      	lsrs	r3, r3, #24
 8002cec:	b2da      	uxtb	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	701a      	strb	r2, [r3, #0]
  data[1] = (rawBits>>16)&0xFF;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	0c1a      	lsrs	r2, r3, #16
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	b2d2      	uxtb	r2, r2
 8002cfc:	701a      	strb	r2, [r3, #0]
  data[2] = (rawBits>>8)&0xFF;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	0a1a      	lsrs	r2, r3, #8
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3302      	adds	r3, #2
 8002d06:	b2d2      	uxtb	r2, r2
 8002d08:	701a      	strb	r2, [r3, #0]
  data[3] = (rawBits>>0)&0xFF;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	3303      	adds	r3, #3
 8002d0e:	68fa      	ldr	r2, [r7, #12]
 8002d10:	b2d2      	uxtb	r2, r2
 8002d12:	701a      	strb	r2, [r3, #0]
  data[4] = (checksumBits)&0xFF;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	3304      	adds	r3, #4
 8002d18:	7afa      	ldrb	r2, [r7, #11]
 8002d1a:	701a      	strb	r2, [r3, #0]
}
 8002d1c:	bf00      	nop
 8002d1e:	3710      	adds	r7, #16
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <DHT22_GetTemp_Humidity>:

//Get Temperature and Humidity data
bool DHT22_GetTemp_Humidity(float *Temp, float *Humidity)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint8_t dataArray[6], myChecksum;
  uint16_t Temp16, Humid16;
  //Implement Start data Aqcuisition routine
  DHT22_StartAcquisition();
 8002d2e:	f7ff ff51 	bl	8002bd4 <DHT22_StartAcquisition>
  //Aqcuire raw data
  DHT22_ReadRaw(dataArray);
 8002d32:	f107 030c 	add.w	r3, r7, #12
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff ff63 	bl	8002c02 <DHT22_ReadRaw>
  //calculate checksum
  myChecksum = 0;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	75fb      	strb	r3, [r7, #23]
  for(uint8_t k=0; k<4; k++)
 8002d40:	2300      	movs	r3, #0
 8002d42:	75bb      	strb	r3, [r7, #22]
 8002d44:	e00a      	b.n	8002d5c <DHT22_GetTemp_Humidity+0x38>
  {
    myChecksum += dataArray[k];
 8002d46:	7dbb      	ldrb	r3, [r7, #22]
 8002d48:	3318      	adds	r3, #24
 8002d4a:	443b      	add	r3, r7
 8002d4c:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8002d50:	7dfb      	ldrb	r3, [r7, #23]
 8002d52:	4413      	add	r3, r2
 8002d54:	75fb      	strb	r3, [r7, #23]
  for(uint8_t k=0; k<4; k++)
 8002d56:	7dbb      	ldrb	r3, [r7, #22]
 8002d58:	3301      	adds	r3, #1
 8002d5a:	75bb      	strb	r3, [r7, #22]
 8002d5c:	7dbb      	ldrb	r3, [r7, #22]
 8002d5e:	2b03      	cmp	r3, #3
 8002d60:	d9f1      	bls.n	8002d46 <DHT22_GetTemp_Humidity+0x22>
  }
  if(myChecksum == dataArray[4])
 8002d62:	7c3b      	ldrb	r3, [r7, #16]
 8002d64:	7dfa      	ldrb	r2, [r7, #23]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d12b      	bne.n	8002dc2 <DHT22_GetTemp_Humidity+0x9e>
  {
    Temp16 = (dataArray[2] <<8) | dataArray[3];
 8002d6a:	7bbb      	ldrb	r3, [r7, #14]
 8002d6c:	021b      	lsls	r3, r3, #8
 8002d6e:	b21a      	sxth	r2, r3
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	b21b      	sxth	r3, r3
 8002d74:	4313      	orrs	r3, r2
 8002d76:	b21b      	sxth	r3, r3
 8002d78:	82bb      	strh	r3, [r7, #20]
    Humid16 = (dataArray[0] <<8) | dataArray[1];
 8002d7a:	7b3b      	ldrb	r3, [r7, #12]
 8002d7c:	021b      	lsls	r3, r3, #8
 8002d7e:	b21a      	sxth	r2, r3
 8002d80:	7b7b      	ldrb	r3, [r7, #13]
 8002d82:	b21b      	sxth	r3, r3
 8002d84:	4313      	orrs	r3, r2
 8002d86:	b21b      	sxth	r3, r3
 8002d88:	827b      	strh	r3, [r7, #18]

    *Temp = Temp16/100.0f;
 8002d8a:	8abb      	ldrh	r3, [r7, #20]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fd ffaf 	bl	8000cf0 <__aeabi_i2f>
 8002d92:	4603      	mov	r3, r0
 8002d94:	490d      	ldr	r1, [pc, #52]	@ (8002dcc <DHT22_GetTemp_Humidity+0xa8>)
 8002d96:	4618      	mov	r0, r3
 8002d98:	f7fe f8b2 	bl	8000f00 <__aeabi_fdiv>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	461a      	mov	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	601a      	str	r2, [r3, #0]
    *Humidity = Humid16/1000.0f;
 8002da4:	8a7b      	ldrh	r3, [r7, #18]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fd ffa2 	bl	8000cf0 <__aeabi_i2f>
 8002dac:	4603      	mov	r3, r0
 8002dae:	4908      	ldr	r1, [pc, #32]	@ (8002dd0 <DHT22_GetTemp_Humidity+0xac>)
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fe f8a5 	bl	8000f00 <__aeabi_fdiv>
 8002db6:	4603      	mov	r3, r0
 8002db8:	461a      	mov	r2, r3
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	601a      	str	r2, [r3, #0]

    return 1;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <DHT22_GetTemp_Humidity+0xa0>
  }
  return 0;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3718      	adds	r7, #24
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	42c80000 	.word	0x42c80000
 8002dd0:	447a0000 	.word	0x447a0000

08002dd4 <cliDHT22>:


#ifdef _USE_HW_CLI

void cliDHT22(cli_args_t *args)
{
 8002dd4:	b5b0      	push	{r4, r5, r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af02      	add	r7, sp, #8
 8002dda:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	75fb      	strb	r3, [r7, #23]

  if(args->argc == 1 && args->isStr(0, "get") == true)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d134      	bne.n	8002e52 <cliDHT22+0x7e>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	491f      	ldr	r1, [pc, #124]	@ (8002e6c <cliDHT22+0x98>)
 8002dee:	2000      	movs	r0, #0
 8002df0:	4798      	blx	r3
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d02c      	beq.n	8002e52 <cliDHT22+0x7e>
  {
    float temp, humidity = 0;
 8002df8:	f04f 0300 	mov.w	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]

    while(cliKeepLoop())
 8002dfe:	e021      	b.n	8002e44 <cliDHT22+0x70>
    {
      if(DHT22_GetTemp_Humidity(&temp, &humidity))
 8002e00:	f107 020c 	add.w	r2, r7, #12
 8002e04:	f107 0310 	add.w	r3, r7, #16
 8002e08:	4611      	mov	r1, r2
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ff8a 	bl	8002d24 <DHT22_GetTemp_Humidity>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d016      	beq.n	8002e44 <cliDHT22+0x70>
      {
        cliPrintf("Temp: %.1f""\xE2\x84\x83"", Humidity: %.1f%%\n", temp, humidity);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fd fb0f 	bl	800043c <__aeabi_f2d>
 8002e1e:	4604      	mov	r4, r0
 8002e20:	460d      	mov	r5, r1
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fd fb09 	bl	800043c <__aeabi_f2d>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	e9cd 2300 	strd	r2, r3, [sp]
 8002e32:	4622      	mov	r2, r4
 8002e34:	462b      	mov	r3, r5
 8002e36:	480e      	ldr	r0, [pc, #56]	@ (8002e70 <cliDHT22+0x9c>)
 8002e38:	f7ff fc08 	bl	800264c <cliPrintf>
        delay(1000);
 8002e3c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002e40:	f7fe fa18 	bl	8001274 <delay>
    while(cliKeepLoop())
 8002e44:	f7ff fcf6 	bl	8002834 <cliKeepLoop>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d1d8      	bne.n	8002e00 <cliDHT22+0x2c>
      }
    }

    ret = true;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	75fb      	strb	r3, [r7, #23]
  }

  if(ret != true)
 8002e52:	7dfb      	ldrb	r3, [r7, #23]
 8002e54:	f083 0301 	eor.w	r3, r3, #1
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d002      	beq.n	8002e64 <cliDHT22+0x90>
  {
    cliPrintf("dht22 get\n");
 8002e5e:	4805      	ldr	r0, [pc, #20]	@ (8002e74 <cliDHT22+0xa0>)
 8002e60:	f7ff fbf4 	bl	800264c <cliPrintf>
  }
}
 8002e64:	bf00      	nop
 8002e66:	3718      	adds	r7, #24
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e6c:	0800a94c 	.word	0x0800a94c
 8002e70:	0800a950 	.word	0x0800a950
 8002e74:	0800a974 	.word	0x0800a974

08002e78 <gpioInit>:
static void cliGpio(cli_args_t *args);
#endif


bool gpioInit(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
  bool ret = true;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	72fb      	strb	r3, [r7, #11]

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e82:	4b23      	ldr	r3, [pc, #140]	@ (8002f10 <gpioInit+0x98>)
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	4a22      	ldr	r2, [pc, #136]	@ (8002f10 <gpioInit+0x98>)
 8002e88:	f043 0304 	orr.w	r3, r3, #4
 8002e8c:	6193      	str	r3, [r2, #24]
 8002e8e:	4b20      	ldr	r3, [pc, #128]	@ (8002f10 <gpioInit+0x98>)
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f003 0304 	and.w	r3, r3, #4
 8002e96:	607b      	str	r3, [r7, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002f10 <gpioInit+0x98>)
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002f10 <gpioInit+0x98>)
 8002ea0:	f043 0308 	orr.w	r3, r3, #8
 8002ea4:	6193      	str	r3, [r2, #24]
 8002ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8002f10 <gpioInit+0x98>)
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	603b      	str	r3, [r7, #0]
 8002eb0:	683b      	ldr	r3, [r7, #0]

  for (int i=0; i<GPIO_MAX_CH; i++)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
 8002eb6:	e017      	b.n	8002ee8 <gpioInit+0x70>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	b2d8      	uxtb	r0, r3
 8002ebc:	4915      	ldr	r1, [pc, #84]	@ (8002f14 <gpioInit+0x9c>)
 8002ebe:	68fa      	ldr	r2, [r7, #12]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	3308      	adds	r3, #8
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	4619      	mov	r1, r3
 8002ed0:	f000 f826 	bl	8002f20 <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_value);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2201      	movs	r2, #1
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 f8b3 	bl	8003048 <gpioPinWrite>
  for (int i=0; i<GPIO_MAX_CH; i++)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	dde4      	ble.n	8002eb8 <gpioInit+0x40>
  }

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	2007      	movs	r0, #7
 8002ef4:	f000 ffc9 	bl	8003e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002ef8:	2007      	movs	r0, #7
 8002efa:	f000 ffe2 	bl	8003ec2 <HAL_NVIC_EnableIRQ>

#ifdef _USE_HW_CLI
  cliAdd("gpio", cliGpio);
 8002efe:	4906      	ldr	r1, [pc, #24]	@ (8002f18 <gpioInit+0xa0>)
 8002f00:	4806      	ldr	r0, [pc, #24]	@ (8002f1c <gpioInit+0xa4>)
 8002f02:	f7ff fcad 	bl	8002860 <cliAdd>
#endif

  return ret;
 8002f06:	7afb      	ldrb	r3, [r7, #11]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40021000 	.word	0x40021000
 8002f14:	0800aa50 	.word	0x0800aa50
 8002f18:	0800315d 	.word	0x0800315d
 8002f1c:	0800a980 	.word	0x0800a980

08002f20 <gpioPinMode>:

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b088      	sub	sp, #32
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	460a      	mov	r2, r1
 8002f2a:	71fb      	strb	r3, [r7, #7]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 8002f30:	2301      	movs	r3, #1
 8002f32:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f34:	f107 030c 	add.w	r3, r7, #12
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]


  if (ch >= GPIO_MAX_CH)
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <gpioPinMode+0x2c>
  {
    return false;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e072      	b.n	8003032 <gpioPinMode+0x112>
  }

  switch(mode)
 8002f4c:	79bb      	ldrb	r3, [r7, #6]
 8002f4e:	2b0b      	cmp	r3, #11
 8002f50:	d856      	bhi.n	8003000 <gpioPinMode+0xe0>
 8002f52:	a201      	add	r2, pc, #4	@ (adr r2, 8002f58 <gpioPinMode+0x38>)
 8002f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f58:	08002f89 	.word	0x08002f89
 8002f5c:	08002f93 	.word	0x08002f93
 8002f60:	08002f9d 	.word	0x08002f9d
 8002f64:	08002fa7 	.word	0x08002fa7
 8002f68:	08002fb1 	.word	0x08002fb1
 8002f6c:	08002fbb 	.word	0x08002fbb
 8002f70:	08002fc5 	.word	0x08002fc5
 8002f74:	08002fcf 	.word	0x08002fcf
 8002f78:	08002fd9 	.word	0x08002fd9
 8002f7c:	08002fe3 	.word	0x08002fe3
 8002f80:	08002fed 	.word	0x08002fed
 8002f84:	08002ff7 	.word	0x08002ff7
  {
    case _DEF_INPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	617b      	str	r3, [r7, #20]
      break;
 8002f90:	e036      	b.n	8003000 <gpioPinMode+0xe0>

    case _DEF_INPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f92:	2300      	movs	r3, #0
 8002f94:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f96:	2301      	movs	r3, #1
 8002f98:	617b      	str	r3, [r7, #20]
      break;
 8002f9a:	e031      	b.n	8003000 <gpioPinMode+0xe0>

    case _DEF_INPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	617b      	str	r3, [r7, #20]
      break;
 8002fa4:	e02c      	b.n	8003000 <gpioPinMode+0xe0>

    case _DEF_OUTPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
      break;
 8002fae:	e027      	b.n	8003000 <gpioPinMode+0xe0>

    case _DEF_OUTPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	617b      	str	r3, [r7, #20]
      break;
 8002fb8:	e022      	b.n	8003000 <gpioPinMode+0xe0>

    case _DEF_OUTPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	617b      	str	r3, [r7, #20]
      break;
 8002fc2:	e01d      	b.n	8003000 <gpioPinMode+0xe0>

    case _DEF_IT_RISING:
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800303c <gpioPinMode+0x11c>)
 8002fc6:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	617b      	str	r3, [r7, #20]
      break;
 8002fcc:	e018      	b.n	8003000 <gpioPinMode+0xe0>

    case _DEF_IT_RISING_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fce:	4b1b      	ldr	r3, [pc, #108]	@ (800303c <gpioPinMode+0x11c>)
 8002fd0:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	617b      	str	r3, [r7, #20]
      break;
 8002fd6:	e013      	b.n	8003000 <gpioPinMode+0xe0>

    case _DEF_IT_RISING_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002fd8:	4b18      	ldr	r3, [pc, #96]	@ (800303c <gpioPinMode+0x11c>)
 8002fda:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	617b      	str	r3, [r7, #20]
      break;
 8002fe0:	e00e      	b.n	8003000 <gpioPinMode+0xe0>

    case _DEF_IT_FALLING:
      GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fe2:	4b17      	ldr	r3, [pc, #92]	@ (8003040 <gpioPinMode+0x120>)
 8002fe4:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
      break;
 8002fea:	e009      	b.n	8003000 <gpioPinMode+0xe0>

    case _DEF_IT_FALLING_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002fec:	4b14      	ldr	r3, [pc, #80]	@ (8003040 <gpioPinMode+0x120>)
 8002fee:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	617b      	str	r3, [r7, #20]
      break;
 8002ff4:	e004      	b.n	8003000 <gpioPinMode+0xe0>

    case _DEF_IT_FALLING_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ff6:	4b12      	ldr	r3, [pc, #72]	@ (8003040 <gpioPinMode+0x120>)
 8002ff8:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	617b      	str	r3, [r7, #20]
      break;
 8002ffe:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 8003000:	79fa      	ldrb	r2, [r7, #7]
 8003002:	4910      	ldr	r1, [pc, #64]	@ (8003044 <gpioPinMode+0x124>)
 8003004:	4613      	mov	r3, r2
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	3304      	adds	r3, #4
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 8003014:	79fa      	ldrb	r2, [r7, #7]
 8003016:	490b      	ldr	r1, [pc, #44]	@ (8003044 <gpioPinMode+0x124>)
 8003018:	4613      	mov	r3, r2
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4413      	add	r3, r2
 800301e:	009b      	lsls	r3, r3, #2
 8003020:	440b      	add	r3, r1
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f107 020c 	add.w	r2, r7, #12
 8003028:	4611      	mov	r1, r2
 800302a:	4618      	mov	r0, r3
 800302c:	f001 fa70 	bl	8004510 <HAL_GPIO_Init>

  return ret;
 8003030:	7ffb      	ldrb	r3, [r7, #31]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3720      	adds	r7, #32
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	10110000 	.word	0x10110000
 8003040:	10210000 	.word	0x10210000
 8003044:	0800aa50 	.word	0x0800aa50

08003048 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	4603      	mov	r3, r0
 8003050:	460a      	mov	r2, r1
 8003052:	71fb      	strb	r3, [r7, #7]
 8003054:	4613      	mov	r3, r2
 8003056:	71bb      	strb	r3, [r7, #6]
  if (ch >= GPIO_MAX_CH)
 8003058:	79fb      	ldrb	r3, [r7, #7]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d140      	bne.n	80030e0 <gpioPinWrite+0x98>
  {
    return;
  }

  if (value)
 800305e:	79bb      	ldrb	r3, [r7, #6]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d01e      	beq.n	80030a2 <gpioPinWrite+0x5a>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8003064:	79fa      	ldrb	r2, [r7, #7]
 8003066:	4920      	ldr	r1, [pc, #128]	@ (80030e8 <gpioPinWrite+0xa0>)
 8003068:	4613      	mov	r3, r2
 800306a:	005b      	lsls	r3, r3, #1
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	440b      	add	r3, r1
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	79fa      	ldrb	r2, [r7, #7]
 8003076:	491c      	ldr	r1, [pc, #112]	@ (80030e8 <gpioPinWrite+0xa0>)
 8003078:	4613      	mov	r3, r2
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	4413      	add	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	3304      	adds	r3, #4
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	b299      	uxth	r1, r3
 8003088:	79fa      	ldrb	r2, [r7, #7]
 800308a:	4c17      	ldr	r4, [pc, #92]	@ (80030e8 <gpioPinWrite+0xa0>)
 800308c:	4613      	mov	r3, r2
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	4413      	add	r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	4423      	add	r3, r4
 8003096:	3309      	adds	r3, #9
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	461a      	mov	r2, r3
 800309c:	f001 fc8f 	bl	80049be <HAL_GPIO_WritePin>
 80030a0:	e01f      	b.n	80030e2 <gpioPinWrite+0x9a>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 80030a2:	79fa      	ldrb	r2, [r7, #7]
 80030a4:	4910      	ldr	r1, [pc, #64]	@ (80030e8 <gpioPinWrite+0xa0>)
 80030a6:	4613      	mov	r3, r2
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	4413      	add	r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	6818      	ldr	r0, [r3, #0]
 80030b2:	79fa      	ldrb	r2, [r7, #7]
 80030b4:	490c      	ldr	r1, [pc, #48]	@ (80030e8 <gpioPinWrite+0xa0>)
 80030b6:	4613      	mov	r3, r2
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	3304      	adds	r3, #4
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	b299      	uxth	r1, r3
 80030c6:	79fa      	ldrb	r2, [r7, #7]
 80030c8:	4c07      	ldr	r4, [pc, #28]	@ (80030e8 <gpioPinWrite+0xa0>)
 80030ca:	4613      	mov	r3, r2
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4423      	add	r3, r4
 80030d4:	330a      	adds	r3, #10
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	f001 fc70 	bl	80049be <HAL_GPIO_WritePin>
 80030de:	e000      	b.n	80030e2 <gpioPinWrite+0x9a>
    return;
 80030e0:	bf00      	nop
  }
}
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd90      	pop	{r4, r7, pc}
 80030e8:	0800aa50 	.word	0x0800aa50

080030ec <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80030f6:	2300      	movs	r3, #0
 80030f8:	73fb      	strb	r3, [r7, #15]

  if (ch >= GPIO_MAX_CH)
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d001      	beq.n	8003104 <gpioPinRead+0x18>
  {
    return false;
 8003100:	2300      	movs	r3, #0
 8003102:	e024      	b.n	800314e <gpioPinRead+0x62>
  }

  if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8003104:	79fa      	ldrb	r2, [r7, #7]
 8003106:	4914      	ldr	r1, [pc, #80]	@ (8003158 <gpioPinRead+0x6c>)
 8003108:	4613      	mov	r3, r2
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	6818      	ldr	r0, [r3, #0]
 8003114:	79fa      	ldrb	r2, [r7, #7]
 8003116:	4910      	ldr	r1, [pc, #64]	@ (8003158 <gpioPinRead+0x6c>)
 8003118:	4613      	mov	r3, r2
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4413      	add	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	3304      	adds	r3, #4
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	b29b      	uxth	r3, r3
 8003128:	4619      	mov	r1, r3
 800312a:	f001 fc31 	bl	8004990 <HAL_GPIO_ReadPin>
 800312e:	4603      	mov	r3, r0
 8003130:	4618      	mov	r0, r3
 8003132:	79fa      	ldrb	r2, [r7, #7]
 8003134:	4908      	ldr	r1, [pc, #32]	@ (8003158 <gpioPinRead+0x6c>)
 8003136:	4613      	mov	r3, r2
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	4413      	add	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	3309      	adds	r3, #9
 8003142:	781b      	ldrb	r3, [r3, #0]
 8003144:	4298      	cmp	r0, r3
 8003146:	d101      	bne.n	800314c <gpioPinRead+0x60>
  {
    ret = true;
 8003148:	2301      	movs	r3, #1
 800314a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800314c:	7bfb      	ldrb	r3, [r7, #15]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3710      	adds	r7, #16
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	0800aa50 	.word	0x0800aa50

0800315c <cliGpio>:
}


#ifdef _USE_HW_CLI
void cliGpio(cli_args_t *args)
{
 800315c:	b590      	push	{r4, r7, lr}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003164:	2300      	movs	r3, #0
 8003166:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "show") == true)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	881b      	ldrh	r3, [r3, #0]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d128      	bne.n	80031c2 <cliGpio+0x66>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	4947      	ldr	r1, [pc, #284]	@ (8003294 <cliGpio+0x138>)
 8003176:	2000      	movs	r0, #0
 8003178:	4798      	blx	r3
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d020      	beq.n	80031c2 <cliGpio+0x66>
  {
    while(cliKeepLoop())
 8003180:	e018      	b.n	80031b4 <cliGpio+0x58>
    {
      for (int i=0; i<GPIO_MAX_CH; i++)
 8003182:	2300      	movs	r3, #0
 8003184:	613b      	str	r3, [r7, #16]
 8003186:	e00c      	b.n	80031a2 <cliGpio+0x46>
      {
        cliPrintf("%d", gpioPinRead(i));
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	b2db      	uxtb	r3, r3
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff ffad 	bl	80030ec <gpioPinRead>
 8003192:	4603      	mov	r3, r0
 8003194:	4619      	mov	r1, r3
 8003196:	4840      	ldr	r0, [pc, #256]	@ (8003298 <cliGpio+0x13c>)
 8003198:	f7ff fa58 	bl	800264c <cliPrintf>
      for (int i=0; i<GPIO_MAX_CH; i++)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	3301      	adds	r3, #1
 80031a0:	613b      	str	r3, [r7, #16]
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	ddef      	ble.n	8003188 <cliGpio+0x2c>
      }
      cliPrintf("\n");
 80031a8:	483c      	ldr	r0, [pc, #240]	@ (800329c <cliGpio+0x140>)
 80031aa:	f7ff fa4f 	bl	800264c <cliPrintf>
      delay(100);
 80031ae:	2064      	movs	r0, #100	@ 0x64
 80031b0:	f7fe f860 	bl	8001274 <delay>
    while(cliKeepLoop())
 80031b4:	f7ff fb3e 	bl	8002834 <cliKeepLoop>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1e1      	bne.n	8003182 <cliGpio+0x26>
    }
    ret = true;
 80031be:	2301      	movs	r3, #1
 80031c0:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	881b      	ldrh	r3, [r3, #0]
 80031c6:	2b02      	cmp	r3, #2
 80031c8:	d123      	bne.n	8003212 <cliGpio+0xb6>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	4934      	ldr	r1, [pc, #208]	@ (80032a0 <cliGpio+0x144>)
 80031d0:	2000      	movs	r0, #0
 80031d2:	4798      	blx	r3
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d01b      	beq.n	8003212 <cliGpio+0xb6>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	2001      	movs	r0, #1
 80031e0:	4798      	blx	r3
 80031e2:	4603      	mov	r3, r0
 80031e4:	73fb      	strb	r3, [r7, #15]

    while(cliKeepLoop())
 80031e6:	e00d      	b.n	8003204 <cliGpio+0xa8>
    {
      cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 80031e8:	7bfc      	ldrb	r4, [r7, #15]
 80031ea:	7bfb      	ldrb	r3, [r7, #15]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff ff7d 	bl	80030ec <gpioPinRead>
 80031f2:	4603      	mov	r3, r0
 80031f4:	461a      	mov	r2, r3
 80031f6:	4621      	mov	r1, r4
 80031f8:	482a      	ldr	r0, [pc, #168]	@ (80032a4 <cliGpio+0x148>)
 80031fa:	f7ff fa27 	bl	800264c <cliPrintf>
      delay(100);
 80031fe:	2064      	movs	r0, #100	@ 0x64
 8003200:	f7fe f838 	bl	8001274 <delay>
    while(cliKeepLoop())
 8003204:	f7ff fb16 	bl	8002834 <cliKeepLoop>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1ec      	bne.n	80031e8 <cliGpio+0x8c>
    }

    ret = true;
 800320e:	2301      	movs	r3, #1
 8003210:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	2b03      	cmp	r3, #3
 8003218:	d126      	bne.n	8003268 <cliGpio+0x10c>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	695b      	ldr	r3, [r3, #20]
 800321e:	4922      	ldr	r1, [pc, #136]	@ (80032a8 <cliGpio+0x14c>)
 8003220:	2000      	movs	r0, #0
 8003222:	4798      	blx	r3
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d01e      	beq.n	8003268 <cliGpio+0x10c>
  {
    uint8_t ch;
    uint8_t data;

    ch   = (uint8_t)args->getData(1);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2001      	movs	r0, #1
 8003230:	4798      	blx	r3
 8003232:	4603      	mov	r3, r0
 8003234:	73bb      	strb	r3, [r7, #14]
    data = (uint8_t)args->getData(2);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2002      	movs	r0, #2
 800323c:	4798      	blx	r3
 800323e:	4603      	mov	r3, r0
 8003240:	737b      	strb	r3, [r7, #13]

    gpioPinWrite(ch, data);
 8003242:	7b7b      	ldrb	r3, [r7, #13]
 8003244:	2b00      	cmp	r3, #0
 8003246:	bf14      	ite	ne
 8003248:	2301      	movne	r3, #1
 800324a:	2300      	moveq	r3, #0
 800324c:	b2da      	uxtb	r2, r3
 800324e:	7bbb      	ldrb	r3, [r7, #14]
 8003250:	4611      	mov	r1, r2
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff fef8 	bl	8003048 <gpioPinWrite>

    cliPrintf("gpio write %d : %d\n", ch, data);
 8003258:	7bbb      	ldrb	r3, [r7, #14]
 800325a:	7b7a      	ldrb	r2, [r7, #13]
 800325c:	4619      	mov	r1, r3
 800325e:	4813      	ldr	r0, [pc, #76]	@ (80032ac <cliGpio+0x150>)
 8003260:	f7ff f9f4 	bl	800264c <cliPrintf>
    ret = true;
 8003264:	2301      	movs	r3, #1
 8003266:	75fb      	strb	r3, [r7, #23]
  }

  if (ret != true)
 8003268:	7dfb      	ldrb	r3, [r7, #23]
 800326a:	f083 0301 	eor.w	r3, r3, #1
 800326e:	b2db      	uxtb	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <cliGpio+0x12e>
  {
    cliPrintf("gpio show\n");
 8003274:	480e      	ldr	r0, [pc, #56]	@ (80032b0 <cliGpio+0x154>)
 8003276:	f7ff f9e9 	bl	800264c <cliPrintf>
    cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 800327a:	2100      	movs	r1, #0
 800327c:	480d      	ldr	r0, [pc, #52]	@ (80032b4 <cliGpio+0x158>)
 800327e:	f7ff f9e5 	bl	800264c <cliPrintf>
    cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 8003282:	2100      	movs	r1, #0
 8003284:	480c      	ldr	r0, [pc, #48]	@ (80032b8 <cliGpio+0x15c>)
 8003286:	f7ff f9e1 	bl	800264c <cliPrintf>
  }
}
 800328a:	bf00      	nop
 800328c:	371c      	adds	r7, #28
 800328e:	46bd      	mov	sp, r7
 8003290:	bd90      	pop	{r4, r7, pc}
 8003292:	bf00      	nop
 8003294:	0800a988 	.word	0x0800a988
 8003298:	0800a990 	.word	0x0800a990
 800329c:	0800a994 	.word	0x0800a994
 80032a0:	0800a998 	.word	0x0800a998
 80032a4:	0800a9a0 	.word	0x0800a9a0
 80032a8:	0800a9b4 	.word	0x0800a9b4
 80032ac:	0800a9bc 	.word	0x0800a9bc
 80032b0:	0800a9d0 	.word	0x0800a9d0
 80032b4:	0800a9dc 	.word	0x0800a9dc
 80032b8:	0800a9f0 	.word	0x0800a9f0

080032bc <ledInit>:
static void cliLed(cli_args_t *args);
#endif


bool ledInit(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af00      	add	r7, sp, #0
  bool ret = true;
 80032c2:	2301      	movs	r3, #1
 80032c4:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c6:	f107 0308 	add.w	r3, r7, #8
 80032ca:	2200      	movs	r2, #0
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	605a      	str	r2, [r3, #4]
 80032d0:	609a      	str	r2, [r3, #8]
 80032d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80032d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003348 <ledInit+0x8c>)
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003348 <ledInit+0x8c>)
 80032da:	f043 0310 	orr.w	r3, r3, #16
 80032de:	6193      	str	r3, [r2, #24]
 80032e0:	4b19      	ldr	r3, [pc, #100]	@ (8003348 <ledInit+0x8c>)
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	f003 0310 	and.w	r3, r3, #16
 80032e8:	607b      	str	r3, [r7, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032ec:	2301      	movs	r3, #1
 80032ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032f4:	2302      	movs	r3, #2
 80032f6:	617b      	str	r3, [r7, #20]

  for (int i=0; i<LED_MAX_CH; i++)
 80032f8:	2300      	movs	r3, #0
 80032fa:	61fb      	str	r3, [r7, #28]
 80032fc:	e017      	b.n	800332e <ledInit+0x72>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 80032fe:	4a13      	ldr	r2, [pc, #76]	@ (800334c <ledInit+0x90>)
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	00db      	lsls	r3, r3, #3
 8003304:	4413      	add	r3, r2
 8003306:	889b      	ldrh	r3, [r3, #4]
 8003308:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 800330a:	4a10      	ldr	r2, [pc, #64]	@ (800334c <ledInit+0x90>)
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003312:	f107 0208 	add.w	r2, r7, #8
 8003316:	4611      	mov	r1, r2
 8003318:	4618      	mov	r0, r3
 800331a:	f001 f8f9 	bl	8004510 <HAL_GPIO_Init>

    ledOff(i);
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	b2db      	uxtb	r3, r3
 8003322:	4618      	mov	r0, r3
 8003324:	f000 f838 	bl	8003398 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	3301      	adds	r3, #1
 800332c:	61fb      	str	r3, [r7, #28]
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	2b00      	cmp	r3, #0
 8003332:	dde4      	ble.n	80032fe <ledInit+0x42>
  }

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 8003334:	4906      	ldr	r1, [pc, #24]	@ (8003350 <ledInit+0x94>)
 8003336:	4807      	ldr	r0, [pc, #28]	@ (8003354 <ledInit+0x98>)
 8003338:	f7ff fa92 	bl	8002860 <cliAdd>
#endif

  return ret;
 800333c:	7efb      	ldrb	r3, [r7, #27]
}
 800333e:	4618      	mov	r0, r3
 8003340:	3720      	adds	r7, #32
 8003342:	46bd      	mov	sp, r7
 8003344:	bd80      	pop	{r7, pc}
 8003346:	bf00      	nop
 8003348:	40021000 	.word	0x40021000
 800334c:	20000014 	.word	0x20000014
 8003350:	08003411 	.word	0x08003411
 8003354:	0800aa0c 	.word	0x0800aa0c

08003358 <ledOn>:

void ledOn(uint8_t ch)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	4603      	mov	r3, r0
 8003360:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d111      	bne.n	800338c <ledOn+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
 8003368:	79fb      	ldrb	r3, [r7, #7]
 800336a:	4a0a      	ldr	r2, [pc, #40]	@ (8003394 <ledOn+0x3c>)
 800336c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003370:	79fb      	ldrb	r3, [r7, #7]
 8003372:	4a08      	ldr	r2, [pc, #32]	@ (8003394 <ledOn+0x3c>)
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4413      	add	r3, r2
 8003378:	8899      	ldrh	r1, [r3, #4]
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	4a05      	ldr	r2, [pc, #20]	@ (8003394 <ledOn+0x3c>)
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4413      	add	r3, r2
 8003382:	799b      	ldrb	r3, [r3, #6]
 8003384:	461a      	mov	r2, r3
 8003386:	f001 fb1a 	bl	80049be <HAL_GPIO_WritePin>
 800338a:	e000      	b.n	800338e <ledOn+0x36>
  if (ch >= LED_MAX_CH) return;
 800338c:	bf00      	nop
}
 800338e:	3708      	adds	r7, #8
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	20000014 	.word	0x20000014

08003398 <ledOff>:

void ledOff(uint8_t ch)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	4603      	mov	r3, r0
 80033a0:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d111      	bne.n	80033cc <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 80033a8:	79fb      	ldrb	r3, [r7, #7]
 80033aa:	4a0a      	ldr	r2, [pc, #40]	@ (80033d4 <ledOff+0x3c>)
 80033ac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	4a08      	ldr	r2, [pc, #32]	@ (80033d4 <ledOff+0x3c>)
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	4413      	add	r3, r2
 80033b8:	8899      	ldrh	r1, [r3, #4]
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	4a05      	ldr	r2, [pc, #20]	@ (80033d4 <ledOff+0x3c>)
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	4413      	add	r3, r2
 80033c2:	79db      	ldrb	r3, [r3, #7]
 80033c4:	461a      	mov	r2, r3
 80033c6:	f001 fafa 	bl	80049be <HAL_GPIO_WritePin>
 80033ca:	e000      	b.n	80033ce <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 80033cc:	bf00      	nop
}
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}
 80033d4:	20000014 	.word	0x20000014

080033d8 <ledToggle>:

void ledToggle(uint8_t ch)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	4603      	mov	r3, r0
 80033e0:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 80033e2:	79fb      	ldrb	r3, [r7, #7]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10d      	bne.n	8003404 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80033e8:	79fb      	ldrb	r3, [r7, #7]
 80033ea:	4a08      	ldr	r2, [pc, #32]	@ (800340c <ledToggle+0x34>)
 80033ec:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80033f0:	79fb      	ldrb	r3, [r7, #7]
 80033f2:	4906      	ldr	r1, [pc, #24]	@ (800340c <ledToggle+0x34>)
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	440b      	add	r3, r1
 80033f8:	889b      	ldrh	r3, [r3, #4]
 80033fa:	4619      	mov	r1, r3
 80033fc:	4610      	mov	r0, r2
 80033fe:	f001 faf6 	bl	80049ee <HAL_GPIO_TogglePin>
 8003402:	e000      	b.n	8003406 <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 8003404:	bf00      	nop
}
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	20000014 	.word	0x20000014

08003410 <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003418:	2300      	movs	r3, #0
 800341a:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	2b03      	cmp	r3, #3
 8003422:	d133      	bne.n	800348c <cliLed+0x7c>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	491f      	ldr	r1, [pc, #124]	@ (80034a8 <cliLed+0x98>)
 800342a:	2000      	movs	r0, #0
 800342c:	4798      	blx	r3
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d02b      	beq.n	800348c <cliLed+0x7c>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = (uint8_t)args->getData(1);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2001      	movs	r0, #1
 800343a:	4798      	blx	r3
 800343c:	4603      	mov	r3, r0
 800343e:	75bb      	strb	r3, [r7, #22]
    toggle_time = (uint32_t)args->getData(2);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2002      	movs	r0, #2
 8003446:	4798      	blx	r3
 8003448:	4603      	mov	r3, r0
 800344a:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 800344c:	7dbb      	ldrb	r3, [r7, #22]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <cliLed+0x48>
    {
      led_ch--;
 8003452:	7dbb      	ldrb	r3, [r7, #22]
 8003454:	3b01      	subs	r3, #1
 8003456:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 8003458:	f7fd ff36 	bl	80012c8 <millis>
 800345c:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 800345e:	e00e      	b.n	800347e <cliLed+0x6e>
    {
      if (millis()-pre_time >= toggle_time)
 8003460:	f7fd ff32 	bl	80012c8 <millis>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	429a      	cmp	r2, r3
 800346e:	d806      	bhi.n	800347e <cliLed+0x6e>
      {
        pre_time = millis();
 8003470:	f7fd ff2a 	bl	80012c8 <millis>
 8003474:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 8003476:	7dbb      	ldrb	r3, [r7, #22]
 8003478:	4618      	mov	r0, r3
 800347a:	f7ff ffad 	bl	80033d8 <ledToggle>
    while(cliKeepLoop())
 800347e:	f7ff f9d9 	bl	8002834 <cliKeepLoop>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1eb      	bne.n	8003460 <cliLed+0x50>
      }
    }

    ret = true;
 8003488:	2301      	movs	r3, #1
 800348a:	75fb      	strb	r3, [r7, #23]
  }


  if (ret != true)
 800348c:	7dfb      	ldrb	r3, [r7, #23]
 800348e:	f083 0301 	eor.w	r3, r3, #1
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d003      	beq.n	80034a0 <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8003498:	2101      	movs	r1, #1
 800349a:	4804      	ldr	r0, [pc, #16]	@ (80034ac <cliLed+0x9c>)
 800349c:	f7ff f8d6 	bl	800264c <cliPrintf>
  }
}
 80034a0:	bf00      	nop
 80034a2:	3718      	adds	r7, #24
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	0800aa10 	.word	0x0800aa10
 80034ac:	0800aa18 	.word	0x0800aa18

080034b0 <uartInit>:
DMA_HandleTypeDef hdma_usart2_rx;
#endif


bool uartInit(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 80034b6:	2300      	movs	r3, #0
 80034b8:	607b      	str	r3, [r7, #4]
 80034ba:	e007      	b.n	80034cc <uartInit+0x1c>
  {
    is_open[i] = false;
 80034bc:	4a08      	ldr	r2, [pc, #32]	@ (80034e0 <uartInit+0x30>)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4413      	add	r3, r2
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	3301      	adds	r3, #1
 80034ca:	607b      	str	r3, [r7, #4]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	ddf4      	ble.n	80034bc <uartInit+0xc>
  }

  return true;
 80034d2:	2301      	movs	r3, #1
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	200006f8 	.word	0x200006f8

080034e4 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b086      	sub	sp, #24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	4603      	mov	r3, r0
 80034ec:	6039      	str	r1, [r7, #0]
 80034ee:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80034f0:	2300      	movs	r3, #0
 80034f2:	75fb      	strb	r3, [r7, #23]

  switch(ch)
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d07c      	beq.n	80035f4 <uartOpen+0x110>
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	f300 80e8 	bgt.w	80036d0 <uartOpen+0x1ec>
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <uartOpen+0x26>
 8003504:	2b01      	cmp	r3, #1
 8003506:	d007      	beq.n	8003518 <uartOpen+0x34>
 8003508:	e0e2      	b.n	80036d0 <uartOpen+0x1ec>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 800350a:	79fb      	ldrb	r3, [r7, #7]
 800350c:	4a73      	ldr	r2, [pc, #460]	@ (80036dc <uartOpen+0x1f8>)
 800350e:	2101      	movs	r1, #1
 8003510:	54d1      	strb	r1, [r2, r3]
      ret = true;
 8003512:	2301      	movs	r3, #1
 8003514:	75fb      	strb	r3, [r7, #23]
      break;
 8003516:	e0db      	b.n	80036d0 <uartOpen+0x1ec>

    case _DEF_UART2:
      #ifdef _USE_UART2
      huart1.Instance         = USART1;
 8003518:	4b71      	ldr	r3, [pc, #452]	@ (80036e0 <uartOpen+0x1fc>)
 800351a:	4a72      	ldr	r2, [pc, #456]	@ (80036e4 <uartOpen+0x200>)
 800351c:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate    = baud;
 800351e:	4a70      	ldr	r2, [pc, #448]	@ (80036e0 <uartOpen+0x1fc>)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength  = UART_WORDLENGTH_8B;
 8003524:	4b6e      	ldr	r3, [pc, #440]	@ (80036e0 <uartOpen+0x1fc>)
 8003526:	2200      	movs	r2, #0
 8003528:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits    = UART_STOPBITS_1;
 800352a:	4b6d      	ldr	r3, [pc, #436]	@ (80036e0 <uartOpen+0x1fc>)
 800352c:	2200      	movs	r2, #0
 800352e:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity      = UART_PARITY_NONE;
 8003530:	4b6b      	ldr	r3, [pc, #428]	@ (80036e0 <uartOpen+0x1fc>)
 8003532:	2200      	movs	r2, #0
 8003534:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode        = UART_MODE_TX_RX;
 8003536:	4b6a      	ldr	r3, [pc, #424]	@ (80036e0 <uartOpen+0x1fc>)
 8003538:	220c      	movs	r2, #12
 800353a:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 800353c:	4b68      	ldr	r3, [pc, #416]	@ (80036e0 <uartOpen+0x1fc>)
 800353e:	2200      	movs	r2, #0
 8003540:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 8003542:	4b67      	ldr	r3, [pc, #412]	@ (80036e0 <uartOpen+0x1fc>)
 8003544:	2200      	movs	r2, #0
 8003546:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8003548:	4865      	ldr	r0, [pc, #404]	@ (80036e0 <uartOpen+0x1fc>)
 800354a:	f001 feeb 	bl	8005324 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 800354e:	79fb      	ldrb	r3, [r7, #7]
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	4a65      	ldr	r2, [pc, #404]	@ (80036e8 <uartOpen+0x204>)
 8003554:	4413      	add	r3, r2
 8003556:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800355a:	4964      	ldr	r1, [pc, #400]	@ (80036ec <uartOpen+0x208>)
 800355c:	4618      	mov	r0, r3
 800355e:	f7fe f88e 	bl	800167e <qbufferCreate>

      __HAL_RCC_DMA1_CLK_ENABLE();
 8003562:	4b63      	ldr	r3, [pc, #396]	@ (80036f0 <uartOpen+0x20c>)
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	4a62      	ldr	r2, [pc, #392]	@ (80036f0 <uartOpen+0x20c>)
 8003568:	f043 0301 	orr.w	r3, r3, #1
 800356c:	6153      	str	r3, [r2, #20]
 800356e:	4b60      	ldr	r3, [pc, #384]	@ (80036f0 <uartOpen+0x20c>)
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	613b      	str	r3, [r7, #16]
 8003578:	693b      	ldr	r3, [r7, #16]
      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800357a:	2200      	movs	r2, #0
 800357c:	2100      	movs	r1, #0
 800357e:	200f      	movs	r0, #15
 8003580:	f000 fc83 	bl	8003e8a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8003584:	200f      	movs	r0, #15
 8003586:	f000 fc9c 	bl	8003ec2 <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 800358a:	4855      	ldr	r0, [pc, #340]	@ (80036e0 <uartOpen+0x1fc>)
 800358c:	f001 fe7a 	bl	8005284 <HAL_UART_Init>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <uartOpen+0xb8>
      {
        ret = false;
 8003596:	2300      	movs	r3, #0
 8003598:	75fb      	strb	r3, [r7, #23]

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
      #endif
      break;
 800359a:	e099      	b.n	80036d0 <uartOpen+0x1ec>
        ret = true;
 800359c:	2301      	movs	r3, #1
 800359e:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	4a4e      	ldr	r2, [pc, #312]	@ (80036dc <uartOpen+0x1f8>)
 80035a4:	2101      	movs	r1, #1
 80035a6:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 80035a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80035ac:	494f      	ldr	r1, [pc, #316]	@ (80036ec <uartOpen+0x208>)
 80035ae:	484c      	ldr	r0, [pc, #304]	@ (80036e0 <uartOpen+0x1fc>)
 80035b0:	f001 ff6d 	bl	800548e <HAL_UART_Receive_DMA>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <uartOpen+0xda>
          ret = false;
 80035ba:	2300      	movs	r3, #0
 80035bc:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 80035be:	79fb      	ldrb	r3, [r7, #7]
 80035c0:	4a49      	ldr	r2, [pc, #292]	@ (80036e8 <uartOpen+0x204>)
 80035c2:	011b      	lsls	r3, r3, #4
 80035c4:	4413      	add	r3, r2
 80035c6:	3308      	adds	r3, #8
 80035c8:	6819      	ldr	r1, [r3, #0]
 80035ca:	4b4a      	ldr	r3, [pc, #296]	@ (80036f4 <uartOpen+0x210>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	79fb      	ldrb	r3, [r7, #7]
 80035d2:	1a8a      	subs	r2, r1, r2
 80035d4:	4944      	ldr	r1, [pc, #272]	@ (80036e8 <uartOpen+0x204>)
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	440b      	add	r3, r1
 80035da:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 80035dc:	79fa      	ldrb	r2, [r7, #7]
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	4941      	ldr	r1, [pc, #260]	@ (80036e8 <uartOpen+0x204>)
 80035e2:	0112      	lsls	r2, r2, #4
 80035e4:	440a      	add	r2, r1
 80035e6:	6812      	ldr	r2, [r2, #0]
 80035e8:	493f      	ldr	r1, [pc, #252]	@ (80036e8 <uartOpen+0x204>)
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	440b      	add	r3, r1
 80035ee:	3304      	adds	r3, #4
 80035f0:	601a      	str	r2, [r3, #0]
      break;
 80035f2:	e06d      	b.n	80036d0 <uartOpen+0x1ec>

    case _DEF_UART3:
      #ifdef _USE_UART3
      huart2.Instance = USART2;
 80035f4:	4b40      	ldr	r3, [pc, #256]	@ (80036f8 <uartOpen+0x214>)
 80035f6:	4a41      	ldr	r2, [pc, #260]	@ (80036fc <uartOpen+0x218>)
 80035f8:	601a      	str	r2, [r3, #0]
      huart2.Init.BaudRate = baud;
 80035fa:	4a3f      	ldr	r2, [pc, #252]	@ (80036f8 <uartOpen+0x214>)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	6053      	str	r3, [r2, #4]
      huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003600:	4b3d      	ldr	r3, [pc, #244]	@ (80036f8 <uartOpen+0x214>)
 8003602:	2200      	movs	r2, #0
 8003604:	609a      	str	r2, [r3, #8]
      huart2.Init.StopBits = UART_STOPBITS_1;
 8003606:	4b3c      	ldr	r3, [pc, #240]	@ (80036f8 <uartOpen+0x214>)
 8003608:	2200      	movs	r2, #0
 800360a:	60da      	str	r2, [r3, #12]
      huart2.Init.Parity = UART_PARITY_NONE;
 800360c:	4b3a      	ldr	r3, [pc, #232]	@ (80036f8 <uartOpen+0x214>)
 800360e:	2200      	movs	r2, #0
 8003610:	611a      	str	r2, [r3, #16]
      huart2.Init.Mode = UART_MODE_TX_RX;
 8003612:	4b39      	ldr	r3, [pc, #228]	@ (80036f8 <uartOpen+0x214>)
 8003614:	220c      	movs	r2, #12
 8003616:	615a      	str	r2, [r3, #20]
      huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003618:	4b37      	ldr	r3, [pc, #220]	@ (80036f8 <uartOpen+0x214>)
 800361a:	2200      	movs	r2, #0
 800361c:	619a      	str	r2, [r3, #24]
      huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800361e:	4b36      	ldr	r3, [pc, #216]	@ (80036f8 <uartOpen+0x214>)
 8003620:	2200      	movs	r2, #0
 8003622:	61da      	str	r2, [r3, #28]
      HAL_UART_DeInit(&huart2);
 8003624:	4834      	ldr	r0, [pc, #208]	@ (80036f8 <uartOpen+0x214>)
 8003626:	f001 fe7d 	bl	8005324 <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf2[0], 256);
 800362a:	79fb      	ldrb	r3, [r7, #7]
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	4a2e      	ldr	r2, [pc, #184]	@ (80036e8 <uartOpen+0x204>)
 8003630:	4413      	add	r3, r2
 8003632:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003636:	4932      	ldr	r1, [pc, #200]	@ (8003700 <uartOpen+0x21c>)
 8003638:	4618      	mov	r0, r3
 800363a:	f7fe f820 	bl	800167e <qbufferCreate>

      __HAL_RCC_DMA1_CLK_ENABLE();
 800363e:	4b2c      	ldr	r3, [pc, #176]	@ (80036f0 <uartOpen+0x20c>)
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	4a2b      	ldr	r2, [pc, #172]	@ (80036f0 <uartOpen+0x20c>)
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	6153      	str	r3, [r2, #20]
 800364a:	4b29      	ldr	r3, [pc, #164]	@ (80036f0 <uartOpen+0x20c>)
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	60fb      	str	r3, [r7, #12]
 8003654:	68fb      	ldr	r3, [r7, #12]
      HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8003656:	2200      	movs	r2, #0
 8003658:	2100      	movs	r1, #0
 800365a:	2010      	movs	r0, #16
 800365c:	f000 fc15 	bl	8003e8a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8003660:	2010      	movs	r0, #16
 8003662:	f000 fc2e 	bl	8003ec2 <HAL_NVIC_EnableIRQ>

      if (HAL_UART_Init(&huart2) != HAL_OK)
 8003666:	4824      	ldr	r0, [pc, #144]	@ (80036f8 <uartOpen+0x214>)
 8003668:	f001 fe0c 	bl	8005284 <HAL_UART_Init>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <uartOpen+0x194>
      {
        ret = false;
 8003672:	2300      	movs	r3, #0
 8003674:	75fb      	strb	r3, [r7, #23]

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
      #endif
      break;
 8003676:	e02a      	b.n	80036ce <uartOpen+0x1ea>
        ret = true;
 8003678:	2301      	movs	r3, #1
 800367a:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	4a17      	ldr	r2, [pc, #92]	@ (80036dc <uartOpen+0x1f8>)
 8003680:	2101      	movs	r1, #1
 8003682:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart2, (uint8_t *)&rx_buf2[0], 256) != HAL_OK)
 8003684:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003688:	491d      	ldr	r1, [pc, #116]	@ (8003700 <uartOpen+0x21c>)
 800368a:	481b      	ldr	r0, [pc, #108]	@ (80036f8 <uartOpen+0x214>)
 800368c:	f001 feff 	bl	800548e <HAL_UART_Receive_DMA>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <uartOpen+0x1b6>
          ret = false;
 8003696:	2300      	movs	r3, #0
 8003698:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR;
 800369a:	79fb      	ldrb	r3, [r7, #7]
 800369c:	4a12      	ldr	r2, [pc, #72]	@ (80036e8 <uartOpen+0x204>)
 800369e:	011b      	lsls	r3, r3, #4
 80036a0:	4413      	add	r3, r2
 80036a2:	3308      	adds	r3, #8
 80036a4:	6819      	ldr	r1, [r3, #0]
 80036a6:	4b17      	ldr	r3, [pc, #92]	@ (8003704 <uartOpen+0x220>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	79fb      	ldrb	r3, [r7, #7]
 80036ae:	1a8a      	subs	r2, r1, r2
 80036b0:	490d      	ldr	r1, [pc, #52]	@ (80036e8 <uartOpen+0x204>)
 80036b2:	011b      	lsls	r3, r3, #4
 80036b4:	440b      	add	r3, r1
 80036b6:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 80036b8:	79fa      	ldrb	r2, [r7, #7]
 80036ba:	79fb      	ldrb	r3, [r7, #7]
 80036bc:	490a      	ldr	r1, [pc, #40]	@ (80036e8 <uartOpen+0x204>)
 80036be:	0112      	lsls	r2, r2, #4
 80036c0:	440a      	add	r2, r1
 80036c2:	6812      	ldr	r2, [r2, #0]
 80036c4:	4908      	ldr	r1, [pc, #32]	@ (80036e8 <uartOpen+0x204>)
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	440b      	add	r3, r1
 80036ca:	3304      	adds	r3, #4
 80036cc:	601a      	str	r2, [r3, #0]
      break;
 80036ce:	bf00      	nop
  }

  return ret;
 80036d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	200006f8 	.word	0x200006f8
 80036e0:	2000091c 	.word	0x2000091c
 80036e4:	40013800 	.word	0x40013800
 80036e8:	200006fc 	.word	0x200006fc
 80036ec:	2000071c 	.word	0x2000071c
 80036f0:	40021000 	.word	0x40021000
 80036f4:	200009ac 	.word	0x200009ac
 80036f8:	20000964 	.word	0x20000964
 80036fc:	40004400 	.word	0x40004400
 8003700:	2000081c 	.word	0x2000081c
 8003704:	200009f0 	.word	0x200009f0

08003708 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8003716:	79fb      	ldrb	r3, [r7, #7]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d01d      	beq.n	8003758 <uartAvailable+0x50>
 800371c:	2b02      	cmp	r3, #2
 800371e:	dc34      	bgt.n	800378a <uartAvailable+0x82>
 8003720:	2b00      	cmp	r3, #0
 8003722:	d031      	beq.n	8003788 <uartAvailable+0x80>
 8003724:	2b01      	cmp	r3, #1
 8003726:	d130      	bne.n	800378a <uartAvailable+0x82>
      //ret = cdcAvailable();
      break;

    case _DEF_UART2:
      #ifdef _USE_UART2
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR);
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	4a1a      	ldr	r2, [pc, #104]	@ (8003794 <uartAvailable+0x8c>)
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	4413      	add	r3, r2
 8003730:	3308      	adds	r3, #8
 8003732:	6819      	ldr	r1, [r3, #0]
 8003734:	4b18      	ldr	r3, [pc, #96]	@ (8003798 <uartAvailable+0x90>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	685a      	ldr	r2, [r3, #4]
 800373a:	79fb      	ldrb	r3, [r7, #7]
 800373c:	1a8a      	subs	r2, r1, r2
 800373e:	4915      	ldr	r1, [pc, #84]	@ (8003794 <uartAvailable+0x8c>)
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	440b      	add	r3, r1
 8003744:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	011b      	lsls	r3, r3, #4
 800374a:	4a12      	ldr	r2, [pc, #72]	@ (8003794 <uartAvailable+0x8c>)
 800374c:	4413      	add	r3, r2
 800374e:	4618      	mov	r0, r3
 8003750:	f7fd ffeb 	bl	800172a <qbufferAvailable>
 8003754:	60f8      	str	r0, [r7, #12]
      #endif
      break;
 8003756:	e018      	b.n	800378a <uartAvailable+0x82>

    case _DEF_UART3:
      #ifdef _USE_UART3
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR);
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	4a0e      	ldr	r2, [pc, #56]	@ (8003794 <uartAvailable+0x8c>)
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	4413      	add	r3, r2
 8003760:	3308      	adds	r3, #8
 8003762:	6819      	ldr	r1, [r3, #0]
 8003764:	4b0d      	ldr	r3, [pc, #52]	@ (800379c <uartAvailable+0x94>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	79fb      	ldrb	r3, [r7, #7]
 800376c:	1a8a      	subs	r2, r1, r2
 800376e:	4909      	ldr	r1, [pc, #36]	@ (8003794 <uartAvailable+0x8c>)
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	440b      	add	r3, r1
 8003774:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	4a06      	ldr	r2, [pc, #24]	@ (8003794 <uartAvailable+0x8c>)
 800377c:	4413      	add	r3, r2
 800377e:	4618      	mov	r0, r3
 8003780:	f7fd ffd3 	bl	800172a <qbufferAvailable>
 8003784:	60f8      	str	r0, [r7, #12]
      #endif
      break;
 8003786:	e000      	b.n	800378a <uartAvailable+0x82>
      break;
 8003788:	bf00      	nop
  }

  return ret;
 800378a:	68fb      	ldr	r3, [r7, #12]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	200006fc 	.word	0x200006fc
 8003798:	200009ac 	.word	0x200009ac
 800379c:	200009f0 	.word	0x200009f0

080037a0 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	4603      	mov	r3, r0
 80037a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 80037aa:	2300      	movs	r3, #0
 80037ac:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d00d      	beq.n	80037d0 <uartRead+0x30>
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	dc14      	bgt.n	80037e2 <uartRead+0x42>
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d011      	beq.n	80037e0 <uartRead+0x40>
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d110      	bne.n	80037e2 <uartRead+0x42>
      //ret = cdcRead();
      break;

    case _DEF_UART2:
      #ifdef _USE_UART2
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 80037c0:	f107 030f 	add.w	r3, r7, #15
 80037c4:	2201      	movs	r2, #1
 80037c6:	4619      	mov	r1, r3
 80037c8:	4808      	ldr	r0, [pc, #32]	@ (80037ec <uartRead+0x4c>)
 80037ca:	f7fd ff72 	bl	80016b2 <qbufferRead>
      #endif
      break;
 80037ce:	e008      	b.n	80037e2 <uartRead+0x42>

    case _DEF_UART3:
      #ifdef _USE_UART3
      qbufferRead(&qbuffer[_DEF_UART3], &ret, 1);
 80037d0:	f107 030f 	add.w	r3, r7, #15
 80037d4:	2201      	movs	r2, #1
 80037d6:	4619      	mov	r1, r3
 80037d8:	4805      	ldr	r0, [pc, #20]	@ (80037f0 <uartRead+0x50>)
 80037da:	f7fd ff6a 	bl	80016b2 <qbufferRead>
      #endif
      break;
 80037de:	e000      	b.n	80037e2 <uartRead+0x42>
      break;
 80037e0:	bf00      	nop
  }

  return ret;
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	2000070c 	.word	0x2000070c
 80037f0:	2000071c 	.word	0x2000071c

080037f4 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  switch(ch)
 8003806:	7bfb      	ldrb	r3, [r7, #15]
 8003808:	2b02      	cmp	r3, #2
 800380a:	d014      	beq.n	8003836 <uartWrite+0x42>
 800380c:	2b02      	cmp	r3, #2
 800380e:	dc26      	bgt.n	800385e <uartWrite+0x6a>
 8003810:	2b00      	cmp	r3, #0
 8003812:	d01f      	beq.n	8003854 <uartWrite+0x60>
 8003814:	2b01      	cmp	r3, #1
 8003816:	d122      	bne.n	800385e <uartWrite+0x6a>
      //ret = cdcWrite(p_data, length);
      break;

    case _DEF_UART2:
      #ifdef _USE_UART2
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	b29a      	uxth	r2, r3
 800381c:	2364      	movs	r3, #100	@ 0x64
 800381e:	68b9      	ldr	r1, [r7, #8]
 8003820:	4811      	ldr	r0, [pc, #68]	@ (8003868 <uartWrite+0x74>)
 8003822:	f001 fdb1 	bl	8005388 <HAL_UART_Transmit>
 8003826:	4603      	mov	r3, r0
 8003828:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 800382a:	7cfb      	ldrb	r3, [r7, #19]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d113      	bne.n	8003858 <uartWrite+0x64>
      {
        ret = length;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	617b      	str	r3, [r7, #20]
      }
      #endif
      break;
 8003834:	e010      	b.n	8003858 <uartWrite+0x64>

    case _DEF_UART3:
      #ifdef _USE_UART3
      status = HAL_UART_Transmit(&huart2, p_data, length, 100);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	b29a      	uxth	r2, r3
 800383a:	2364      	movs	r3, #100	@ 0x64
 800383c:	68b9      	ldr	r1, [r7, #8]
 800383e:	480b      	ldr	r0, [pc, #44]	@ (800386c <uartWrite+0x78>)
 8003840:	f001 fda2 	bl	8005388 <HAL_UART_Transmit>
 8003844:	4603      	mov	r3, r0
 8003846:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8003848:	7cfb      	ldrb	r3, [r7, #19]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d106      	bne.n	800385c <uartWrite+0x68>
      {
        ret = length;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	617b      	str	r3, [r7, #20]
      }
      #endif
      break;
 8003852:	e003      	b.n	800385c <uartWrite+0x68>
      break;
 8003854:	bf00      	nop
 8003856:	e002      	b.n	800385e <uartWrite+0x6a>
      break;
 8003858:	bf00      	nop
 800385a:	e000      	b.n	800385e <uartWrite+0x6a>
      break;
 800385c:	bf00      	nop
  }

  return ret;
 800385e:	697b      	ldr	r3, [r7, #20]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3718      	adds	r7, #24
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}
 8003868:	2000091c 	.word	0x2000091c
 800386c:	20000964 	.word	0x20000964

08003870 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8003870:	b40e      	push	{r1, r2, r3}
 8003872:	b580      	push	{r7, lr}
 8003874:	b0c7      	sub	sp, #284	@ 0x11c
 8003876:	af00      	add	r7, sp, #0
 8003878:	4602      	mov	r2, r0
 800387a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800387e:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 8003882:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8003884:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8003888:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800388c:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003890:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8003892:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8003896:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800389a:	f107 0010 	add.w	r0, r7, #16
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80038a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80038a8:	f004 f97e 	bl	8007ba8 <vsniprintf>
 80038ac:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 80038b0:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80038b4:	f107 0110 	add.w	r1, r7, #16
 80038b8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80038bc:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7ff ff96 	bl	80037f4 <uartWrite>
 80038c8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

  va_end(args);


  return ret;
 80038cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80038d6:	46bd      	mov	sp, r7
 80038d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80038dc:	b003      	add	sp, #12
 80038de:	4770      	bx	lr

080038e0 <HAL_UART_ErrorCallback>:
}


#ifdef _USE_UART2
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 80038e8:	bf00      	nop
 80038ea:	370c      	adds	r7, #12
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr

080038f2 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);

    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	bc80      	pop	{r7}
 8003902:	4770      	bx	lr

08003904 <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b08a      	sub	sp, #40	@ 0x28
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800390c:	f107 0318 	add.w	r3, r7, #24
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
 8003914:	605a      	str	r2, [r3, #4]
 8003916:	609a      	str	r2, [r3, #8]
 8003918:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a65      	ldr	r2, [pc, #404]	@ (8003ab4 <HAL_UART_MspInit+0x1b0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d160      	bne.n	80039e6 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003924:	4b64      	ldr	r3, [pc, #400]	@ (8003ab8 <HAL_UART_MspInit+0x1b4>)
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	4a63      	ldr	r2, [pc, #396]	@ (8003ab8 <HAL_UART_MspInit+0x1b4>)
 800392a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800392e:	6193      	str	r3, [r2, #24]
 8003930:	4b61      	ldr	r3, [pc, #388]	@ (8003ab8 <HAL_UART_MspInit+0x1b4>)
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003938:	617b      	str	r3, [r7, #20]
 800393a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800393c:	4b5e      	ldr	r3, [pc, #376]	@ (8003ab8 <HAL_UART_MspInit+0x1b4>)
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	4a5d      	ldr	r2, [pc, #372]	@ (8003ab8 <HAL_UART_MspInit+0x1b4>)
 8003942:	f043 0304 	orr.w	r3, r3, #4
 8003946:	6193      	str	r3, [r2, #24]
 8003948:	4b5b      	ldr	r3, [pc, #364]	@ (8003ab8 <HAL_UART_MspInit+0x1b4>)
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	f003 0304 	and.w	r3, r3, #4
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003954:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800395a:	2302      	movs	r3, #2
 800395c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800395e:	2303      	movs	r3, #3
 8003960:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003962:	f107 0318 	add.w	r3, r7, #24
 8003966:	4619      	mov	r1, r3
 8003968:	4854      	ldr	r0, [pc, #336]	@ (8003abc <HAL_UART_MspInit+0x1b8>)
 800396a:	f000 fdd1 	bl	8004510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800396e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003974:	2300      	movs	r3, #0
 8003976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003978:	2300      	movs	r3, #0
 800397a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800397c:	f107 0318 	add.w	r3, r7, #24
 8003980:	4619      	mov	r1, r3
 8003982:	484e      	ldr	r0, [pc, #312]	@ (8003abc <HAL_UART_MspInit+0x1b8>)
 8003984:	f000 fdc4 	bl	8004510 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8003988:	4b4d      	ldr	r3, [pc, #308]	@ (8003ac0 <HAL_UART_MspInit+0x1bc>)
 800398a:	4a4e      	ldr	r2, [pc, #312]	@ (8003ac4 <HAL_UART_MspInit+0x1c0>)
 800398c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800398e:	4b4c      	ldr	r3, [pc, #304]	@ (8003ac0 <HAL_UART_MspInit+0x1bc>)
 8003990:	2200      	movs	r2, #0
 8003992:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003994:	4b4a      	ldr	r3, [pc, #296]	@ (8003ac0 <HAL_UART_MspInit+0x1bc>)
 8003996:	2200      	movs	r2, #0
 8003998:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800399a:	4b49      	ldr	r3, [pc, #292]	@ (8003ac0 <HAL_UART_MspInit+0x1bc>)
 800399c:	2280      	movs	r2, #128	@ 0x80
 800399e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80039a0:	4b47      	ldr	r3, [pc, #284]	@ (8003ac0 <HAL_UART_MspInit+0x1bc>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80039a6:	4b46      	ldr	r3, [pc, #280]	@ (8003ac0 <HAL_UART_MspInit+0x1bc>)
 80039a8:	2200      	movs	r2, #0
 80039aa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80039ac:	4b44      	ldr	r3, [pc, #272]	@ (8003ac0 <HAL_UART_MspInit+0x1bc>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80039b2:	4b43      	ldr	r3, [pc, #268]	@ (8003ac0 <HAL_UART_MspInit+0x1bc>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80039b8:	4841      	ldr	r0, [pc, #260]	@ (8003ac0 <HAL_UART_MspInit+0x1bc>)
 80039ba:	f000 faab 	bl	8003f14 <HAL_DMA_Init>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80039c4:	f7fd fccc 	bl	8001360 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	4a3d      	ldr	r2, [pc, #244]	@ (8003ac0 <HAL_UART_MspInit+0x1bc>)
 80039cc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80039ce:	4a3c      	ldr	r2, [pc, #240]	@ (8003ac0 <HAL_UART_MspInit+0x1bc>)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80039d4:	2200      	movs	r2, #0
 80039d6:	2100      	movs	r1, #0
 80039d8:	2025      	movs	r0, #37	@ 0x25
 80039da:	f000 fa56 	bl	8003e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80039de:	2025      	movs	r0, #37	@ 0x25
 80039e0:	f000 fa6f 	bl	8003ec2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80039e4:	e062      	b.n	8003aac <HAL_UART_MspInit+0x1a8>
  else if(uartHandle->Instance==USART2)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a37      	ldr	r2, [pc, #220]	@ (8003ac8 <HAL_UART_MspInit+0x1c4>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d15d      	bne.n	8003aac <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80039f0:	4b31      	ldr	r3, [pc, #196]	@ (8003ab8 <HAL_UART_MspInit+0x1b4>)
 80039f2:	69db      	ldr	r3, [r3, #28]
 80039f4:	4a30      	ldr	r2, [pc, #192]	@ (8003ab8 <HAL_UART_MspInit+0x1b4>)
 80039f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039fa:	61d3      	str	r3, [r2, #28]
 80039fc:	4b2e      	ldr	r3, [pc, #184]	@ (8003ab8 <HAL_UART_MspInit+0x1b4>)
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a08:	4b2b      	ldr	r3, [pc, #172]	@ (8003ab8 <HAL_UART_MspInit+0x1b4>)
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ab8 <HAL_UART_MspInit+0x1b4>)
 8003a0e:	f043 0304 	orr.w	r3, r3, #4
 8003a12:	6193      	str	r3, [r2, #24]
 8003a14:	4b28      	ldr	r3, [pc, #160]	@ (8003ab8 <HAL_UART_MspInit+0x1b4>)
 8003a16:	699b      	ldr	r3, [r3, #24]
 8003a18:	f003 0304 	and.w	r3, r3, #4
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a20:	2304      	movs	r3, #4
 8003a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a24:	2302      	movs	r3, #2
 8003a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a2c:	f107 0318 	add.w	r3, r7, #24
 8003a30:	4619      	mov	r1, r3
 8003a32:	4822      	ldr	r0, [pc, #136]	@ (8003abc <HAL_UART_MspInit+0x1b8>)
 8003a34:	f000 fd6c 	bl	8004510 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a38:	2308      	movs	r3, #8
 8003a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a40:	2300      	movs	r3, #0
 8003a42:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a44:	f107 0318 	add.w	r3, r7, #24
 8003a48:	4619      	mov	r1, r3
 8003a4a:	481c      	ldr	r0, [pc, #112]	@ (8003abc <HAL_UART_MspInit+0x1b8>)
 8003a4c:	f000 fd60 	bl	8004510 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8003a50:	4b1e      	ldr	r3, [pc, #120]	@ (8003acc <HAL_UART_MspInit+0x1c8>)
 8003a52:	4a1f      	ldr	r2, [pc, #124]	@ (8003ad0 <HAL_UART_MspInit+0x1cc>)
 8003a54:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003a56:	4b1d      	ldr	r3, [pc, #116]	@ (8003acc <HAL_UART_MspInit+0x1c8>)
 8003a58:	2200      	movs	r2, #0
 8003a5a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003acc <HAL_UART_MspInit+0x1c8>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003a62:	4b1a      	ldr	r3, [pc, #104]	@ (8003acc <HAL_UART_MspInit+0x1c8>)
 8003a64:	2280      	movs	r2, #128	@ 0x80
 8003a66:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003a68:	4b18      	ldr	r3, [pc, #96]	@ (8003acc <HAL_UART_MspInit+0x1c8>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003a6e:	4b17      	ldr	r3, [pc, #92]	@ (8003acc <HAL_UART_MspInit+0x1c8>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003a74:	4b15      	ldr	r3, [pc, #84]	@ (8003acc <HAL_UART_MspInit+0x1c8>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003a7a:	4b14      	ldr	r3, [pc, #80]	@ (8003acc <HAL_UART_MspInit+0x1c8>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003a80:	4812      	ldr	r0, [pc, #72]	@ (8003acc <HAL_UART_MspInit+0x1c8>)
 8003a82:	f000 fa47 	bl	8003f14 <HAL_DMA_Init>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8003a8c:	f7fd fc68 	bl	8001360 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a0e      	ldr	r2, [pc, #56]	@ (8003acc <HAL_UART_MspInit+0x1c8>)
 8003a94:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003a96:	4a0d      	ldr	r2, [pc, #52]	@ (8003acc <HAL_UART_MspInit+0x1c8>)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	2026      	movs	r0, #38	@ 0x26
 8003aa2:	f000 f9f2 	bl	8003e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003aa6:	2026      	movs	r0, #38	@ 0x26
 8003aa8:	f000 fa0b 	bl	8003ec2 <HAL_NVIC_EnableIRQ>
}
 8003aac:	bf00      	nop
 8003aae:	3728      	adds	r7, #40	@ 0x28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40013800 	.word	0x40013800
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	40010800 	.word	0x40010800
 8003ac0:	200009ac 	.word	0x200009ac
 8003ac4:	40020058 	.word	0x40020058
 8003ac8:	40004400 	.word	0x40004400
 8003acc:	200009f0 	.word	0x200009f0
 8003ad0:	4002006c 	.word	0x4002006c

08003ad4 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a18      	ldr	r2, [pc, #96]	@ (8003b44 <HAL_UART_MspDeInit+0x70>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d113      	bne.n	8003b0e <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8003ae6:	4b18      	ldr	r3, [pc, #96]	@ (8003b48 <HAL_UART_MspDeInit+0x74>)
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	4a17      	ldr	r2, [pc, #92]	@ (8003b48 <HAL_UART_MspDeInit+0x74>)
 8003aec:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003af0:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8003af2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003af6:	4815      	ldr	r0, [pc, #84]	@ (8003b4c <HAL_UART_MspDeInit+0x78>)
 8003af8:	f000 fe8e 	bl	8004818 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 fa61 	bl	8003fc8 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8003b06:	2025      	movs	r0, #37	@ 0x25
 8003b08:	f000 f9e9 	bl	8003ede <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8003b0c:	e016      	b.n	8003b3c <HAL_UART_MspDeInit+0x68>
  else if(uartHandle->Instance==USART2)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a0f      	ldr	r2, [pc, #60]	@ (8003b50 <HAL_UART_MspDeInit+0x7c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d111      	bne.n	8003b3c <HAL_UART_MspDeInit+0x68>
    __HAL_RCC_USART2_CLK_DISABLE();
 8003b18:	4b0b      	ldr	r3, [pc, #44]	@ (8003b48 <HAL_UART_MspDeInit+0x74>)
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8003b48 <HAL_UART_MspDeInit+0x74>)
 8003b1e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003b22:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8003b24:	210c      	movs	r1, #12
 8003b26:	4809      	ldr	r0, [pc, #36]	@ (8003b4c <HAL_UART_MspDeInit+0x78>)
 8003b28:	f000 fe76 	bl	8004818 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 fa49 	bl	8003fc8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003b36:	2026      	movs	r0, #38	@ 0x26
 8003b38:	f000 f9d1 	bl	8003ede <HAL_NVIC_DisableIRQ>
}
 8003b3c:	bf00      	nop
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40013800 	.word	0x40013800
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40010800 	.word	0x40010800
 8003b50:	40004400 	.word	0x40004400

08003b54 <hwInit>:


#include "hw.h"

void hwInit(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
//  iwdgInit();
//  iwdgBegin(1250); // 500.8ms

  bspInit();
 8003b58:	f7fd fb5a 	bl	8001210 <bspInit>
  cliInit();
 8003b5c:	f7fe f85e 	bl	8001c1c <cliInit>
  ledInit();
 8003b60:	f7ff fbac 	bl	80032bc <ledInit>
  cdcInit();
 8003b64:	f7fe f84a 	bl	8001bfc <cdcInit>
  uartInit();
 8003b68:	f7ff fca2 	bl	80034b0 <uartInit>
  gpioInit();
 8003b6c:	f7ff f984 	bl	8002e78 <gpioInit>
  beaconInit();
 8003b70:	f7fd fdf2 	bl	8001758 <beaconInit>
  buttonInit();
 8003b74:	f7fd ff2c 	bl	80019d0 <buttonInit>
  dht22Init(GPIOB, GPIO_PIN_0);
 8003b78:	2101      	movs	r1, #1
 8003b7a:	4802      	ldr	r0, [pc, #8]	@ (8003b84 <hwInit+0x30>)
 8003b7c:	f7fe ff92 	bl	8002aa4 <dht22Init>
}
 8003b80:	bf00      	nop
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40010c00 	.word	0x40010c00

08003b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b8c:	4b08      	ldr	r3, [pc, #32]	@ (8003bb0 <HAL_Init+0x28>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a07      	ldr	r2, [pc, #28]	@ (8003bb0 <HAL_Init+0x28>)
 8003b92:	f043 0310 	orr.w	r3, r3, #16
 8003b96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b98:	2003      	movs	r0, #3
 8003b9a:	f000 f96b 	bl	8003e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b9e:	200f      	movs	r0, #15
 8003ba0:	f000 f808 	bl	8003bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ba4:	f7fd fbe2 	bl	800136c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	40022000 	.word	0x40022000

08003bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bbc:	4b12      	ldr	r3, [pc, #72]	@ (8003c08 <HAL_InitTick+0x54>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	4b12      	ldr	r3, [pc, #72]	@ (8003c0c <HAL_InitTick+0x58>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 f991 	bl	8003efa <HAL_SYSTICK_Config>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d001      	beq.n	8003be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e00e      	b.n	8003c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b0f      	cmp	r3, #15
 8003be6:	d80a      	bhi.n	8003bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003be8:	2200      	movs	r2, #0
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	f04f 30ff 	mov.w	r0, #4294967295
 8003bf0:	f000 f94b 	bl	8003e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003bf4:	4a06      	ldr	r2, [pc, #24]	@ (8003c10 <HAL_InitTick+0x5c>)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	e000      	b.n	8003c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	20000000 	.word	0x20000000
 8003c0c:	20000020 	.word	0x20000020
 8003c10:	2000001c 	.word	0x2000001c

08003c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c14:	b480      	push	{r7}
 8003c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c18:	4b05      	ldr	r3, [pc, #20]	@ (8003c30 <HAL_IncTick+0x1c>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4b05      	ldr	r3, [pc, #20]	@ (8003c34 <HAL_IncTick+0x20>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4413      	add	r3, r2
 8003c24:	4a03      	ldr	r2, [pc, #12]	@ (8003c34 <HAL_IncTick+0x20>)
 8003c26:	6013      	str	r3, [r2, #0]
}
 8003c28:	bf00      	nop
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bc80      	pop	{r7}
 8003c2e:	4770      	bx	lr
 8003c30:	20000020 	.word	0x20000020
 8003c34:	20000a34 	.word	0x20000a34

08003c38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8003c3c:	4b02      	ldr	r3, [pc, #8]	@ (8003c48 <HAL_GetTick+0x10>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr
 8003c48:	20000a34 	.word	0x20000a34

08003c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c54:	f7ff fff0 	bl	8003c38 <HAL_GetTick>
 8003c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c64:	d005      	beq.n	8003c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c66:	4b0a      	ldr	r3, [pc, #40]	@ (8003c90 <HAL_Delay+0x44>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	461a      	mov	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003c72:	bf00      	nop
 8003c74:	f7ff ffe0 	bl	8003c38 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d8f7      	bhi.n	8003c74 <HAL_Delay+0x28>
  {
  }
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000020 	.word	0x20000020

08003c94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ca4:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003caa:	68ba      	ldr	r2, [r7, #8]
 8003cac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cc6:	4a04      	ldr	r2, [pc, #16]	@ (8003cd8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	60d3      	str	r3, [r2, #12]
}
 8003ccc:	bf00      	nop
 8003cce:	3714      	adds	r7, #20
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ce0:	4b04      	ldr	r3, [pc, #16]	@ (8003cf4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	0a1b      	lsrs	r3, r3, #8
 8003ce6:	f003 0307 	and.w	r3, r3, #7
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	e000ed00 	.word	0xe000ed00

08003cf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	db0b      	blt.n	8003d22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d0a:	79fb      	ldrb	r3, [r7, #7]
 8003d0c:	f003 021f 	and.w	r2, r3, #31
 8003d10:	4906      	ldr	r1, [pc, #24]	@ (8003d2c <__NVIC_EnableIRQ+0x34>)
 8003d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	2001      	movs	r0, #1
 8003d1a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr
 8003d2c:	e000e100 	.word	0xe000e100

08003d30 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	db12      	blt.n	8003d68 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d42:	79fb      	ldrb	r3, [r7, #7]
 8003d44:	f003 021f 	and.w	r2, r3, #31
 8003d48:	490a      	ldr	r1, [pc, #40]	@ (8003d74 <__NVIC_DisableIRQ+0x44>)
 8003d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	2001      	movs	r0, #1
 8003d52:	fa00 f202 	lsl.w	r2, r0, r2
 8003d56:	3320      	adds	r3, #32
 8003d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003d5c:	f3bf 8f4f 	dsb	sy
}
 8003d60:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d62:	f3bf 8f6f 	isb	sy
}
 8003d66:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003d68:	bf00      	nop
 8003d6a:	370c      	adds	r7, #12
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bc80      	pop	{r7}
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	e000e100 	.word	0xe000e100

08003d78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	4603      	mov	r3, r0
 8003d80:	6039      	str	r1, [r7, #0]
 8003d82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	db0a      	blt.n	8003da2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	490c      	ldr	r1, [pc, #48]	@ (8003dc4 <__NVIC_SetPriority+0x4c>)
 8003d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d96:	0112      	lsls	r2, r2, #4
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003da0:	e00a      	b.n	8003db8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	b2da      	uxtb	r2, r3
 8003da6:	4908      	ldr	r1, [pc, #32]	@ (8003dc8 <__NVIC_SetPriority+0x50>)
 8003da8:	79fb      	ldrb	r3, [r7, #7]
 8003daa:	f003 030f 	and.w	r3, r3, #15
 8003dae:	3b04      	subs	r3, #4
 8003db0:	0112      	lsls	r2, r2, #4
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	440b      	add	r3, r1
 8003db6:	761a      	strb	r2, [r3, #24]
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bc80      	pop	{r7}
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	e000e100 	.word	0xe000e100
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b089      	sub	sp, #36	@ 0x24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	f1c3 0307 	rsb	r3, r3, #7
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	bf28      	it	cs
 8003dea:	2304      	movcs	r3, #4
 8003dec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	3304      	adds	r3, #4
 8003df2:	2b06      	cmp	r3, #6
 8003df4:	d902      	bls.n	8003dfc <NVIC_EncodePriority+0x30>
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	3b03      	subs	r3, #3
 8003dfa:	e000      	b.n	8003dfe <NVIC_EncodePriority+0x32>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e00:	f04f 32ff 	mov.w	r2, #4294967295
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0a:	43da      	mvns	r2, r3
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	401a      	ands	r2, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e14:	f04f 31ff 	mov.w	r1, #4294967295
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e1e:	43d9      	mvns	r1, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e24:	4313      	orrs	r3, r2
         );
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3724      	adds	r7, #36	@ 0x24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bc80      	pop	{r7}
 8003e2e:	4770      	bx	lr

08003e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e40:	d301      	bcc.n	8003e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e42:	2301      	movs	r3, #1
 8003e44:	e00f      	b.n	8003e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e46:	4a0a      	ldr	r2, [pc, #40]	@ (8003e70 <SysTick_Config+0x40>)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e4e:	210f      	movs	r1, #15
 8003e50:	f04f 30ff 	mov.w	r0, #4294967295
 8003e54:	f7ff ff90 	bl	8003d78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e58:	4b05      	ldr	r3, [pc, #20]	@ (8003e70 <SysTick_Config+0x40>)
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e5e:	4b04      	ldr	r3, [pc, #16]	@ (8003e70 <SysTick_Config+0x40>)
 8003e60:	2207      	movs	r2, #7
 8003e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	e000e010 	.word	0xe000e010

08003e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f7ff ff09 	bl	8003c94 <__NVIC_SetPriorityGrouping>
}
 8003e82:	bf00      	nop
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b086      	sub	sp, #24
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	4603      	mov	r3, r0
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	607a      	str	r2, [r7, #4]
 8003e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e9c:	f7ff ff1e 	bl	8003cdc <__NVIC_GetPriorityGrouping>
 8003ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	68b9      	ldr	r1, [r7, #8]
 8003ea6:	6978      	ldr	r0, [r7, #20]
 8003ea8:	f7ff ff90 	bl	8003dcc <NVIC_EncodePriority>
 8003eac:	4602      	mov	r2, r0
 8003eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ff5f 	bl	8003d78 <__NVIC_SetPriority>
}
 8003eba:	bf00      	nop
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b082      	sub	sp, #8
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	4603      	mov	r3, r0
 8003eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7ff ff11 	bl	8003cf8 <__NVIC_EnableIRQ>
}
 8003ed6:	bf00      	nop
 8003ed8:	3708      	adds	r7, #8
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b082      	sub	sp, #8
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003ee8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff ff1f 	bl	8003d30 <__NVIC_DisableIRQ>
}
 8003ef2:	bf00      	nop
 8003ef4:	3708      	adds	r7, #8
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b082      	sub	sp, #8
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f7ff ff94 	bl	8003e30 <SysTick_Config>
 8003f08:	4603      	mov	r3, r0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3708      	adds	r7, #8
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d101      	bne.n	8003f2a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e043      	b.n	8003fb2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	4b22      	ldr	r3, [pc, #136]	@ (8003fbc <HAL_DMA_Init+0xa8>)
 8003f32:	4413      	add	r3, r2
 8003f34:	4a22      	ldr	r2, [pc, #136]	@ (8003fc0 <HAL_DMA_Init+0xac>)
 8003f36:	fba2 2303 	umull	r2, r3, r2, r3
 8003f3a:	091b      	lsrs	r3, r3, #4
 8003f3c:	009a      	lsls	r2, r3, #2
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a1f      	ldr	r2, [pc, #124]	@ (8003fc4 <HAL_DMA_Init+0xb0>)
 8003f46:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003f5e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8003f62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68fa      	ldr	r2, [r7, #12]
 8003f98:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr
 8003fbc:	bffdfff8 	.word	0xbffdfff8
 8003fc0:	cccccccd 	.word	0xcccccccd
 8003fc4:	40020000 	.word	0x40020000

08003fc8 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e046      	b.n	8004068 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 0201 	bic.w	r2, r2, #1
 8003fe8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2200      	movs	r2, #0
 8004000:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2200      	movs	r2, #0
 8004008:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	461a      	mov	r2, r3
 8004010:	4b18      	ldr	r3, [pc, #96]	@ (8004074 <HAL_DMA_DeInit+0xac>)
 8004012:	4413      	add	r3, r2
 8004014:	4a18      	ldr	r2, [pc, #96]	@ (8004078 <HAL_DMA_DeInit+0xb0>)
 8004016:	fba2 2303 	umull	r2, r3, r2, r3
 800401a:	091b      	lsrs	r3, r3, #4
 800401c:	009a      	lsls	r2, r3, #2
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a15      	ldr	r2, [pc, #84]	@ (800407c <HAL_DMA_DeInit+0xb4>)
 8004026:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004030:	2101      	movs	r1, #1
 8004032:	fa01 f202 	lsl.w	r2, r1, r2
 8004036:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	370c      	adds	r7, #12
 800406c:	46bd      	mov	sp, r7
 800406e:	bc80      	pop	{r7}
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	bffdfff8 	.word	0xbffdfff8
 8004078:	cccccccd 	.word	0xcccccccd
 800407c:	40020000 	.word	0x40020000

08004080 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800408e:	2300      	movs	r3, #0
 8004090:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d101      	bne.n	80040a0 <HAL_DMA_Start_IT+0x20>
 800409c:	2302      	movs	r3, #2
 800409e:	e04b      	b.n	8004138 <HAL_DMA_Start_IT+0xb8>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2201      	movs	r2, #1
 80040a4:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d13a      	bne.n	800412a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2202      	movs	r2, #2
 80040b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0201 	bic.w	r2, r2, #1
 80040d0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	68b9      	ldr	r1, [r7, #8]
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f9eb 	bl	80044b4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d008      	beq.n	80040f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 020e 	orr.w	r2, r2, #14
 80040f4:	601a      	str	r2, [r3, #0]
 80040f6:	e00f      	b.n	8004118 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 0204 	bic.w	r2, r2, #4
 8004106:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 020a 	orr.w	r2, r2, #10
 8004116:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f042 0201 	orr.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]
 8004128:	e005      	b.n	8004136 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8004132:	2302      	movs	r3, #2
 8004134:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8004136:	7dfb      	ldrb	r3, [r7, #23]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3718      	adds	r7, #24
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8004152:	b2db      	uxtb	r3, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d008      	beq.n	800416a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2204      	movs	r2, #4
 800415c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e020      	b.n	80041ac <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 020e 	bic.w	r2, r2, #14
 8004178:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0201 	bic.w	r2, r2, #1
 8004188:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004192:	2101      	movs	r1, #1
 8004194:	fa01 f202 	lsl.w	r2, r1, r2
 8004198:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2201      	movs	r2, #1
 800419e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80041aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3714      	adds	r7, #20
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bc80      	pop	{r7}
 80041b4:	4770      	bx	lr
	...

080041b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b084      	sub	sp, #16
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041c0:	2300      	movs	r3, #0
 80041c2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d005      	beq.n	80041dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2204      	movs	r2, #4
 80041d4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	73fb      	strb	r3, [r7, #15]
 80041da:	e051      	b.n	8004280 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 020e 	bic.w	r2, r2, #14
 80041ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0201 	bic.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a22      	ldr	r2, [pc, #136]	@ (800428c <HAL_DMA_Abort_IT+0xd4>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d029      	beq.n	800425a <HAL_DMA_Abort_IT+0xa2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a21      	ldr	r2, [pc, #132]	@ (8004290 <HAL_DMA_Abort_IT+0xd8>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d022      	beq.n	8004256 <HAL_DMA_Abort_IT+0x9e>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a1f      	ldr	r2, [pc, #124]	@ (8004294 <HAL_DMA_Abort_IT+0xdc>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d01a      	beq.n	8004250 <HAL_DMA_Abort_IT+0x98>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1e      	ldr	r2, [pc, #120]	@ (8004298 <HAL_DMA_Abort_IT+0xe0>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d012      	beq.n	800424a <HAL_DMA_Abort_IT+0x92>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a1c      	ldr	r2, [pc, #112]	@ (800429c <HAL_DMA_Abort_IT+0xe4>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00a      	beq.n	8004244 <HAL_DMA_Abort_IT+0x8c>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a1b      	ldr	r2, [pc, #108]	@ (80042a0 <HAL_DMA_Abort_IT+0xe8>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d102      	bne.n	800423e <HAL_DMA_Abort_IT+0x86>
 8004238:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800423c:	e00e      	b.n	800425c <HAL_DMA_Abort_IT+0xa4>
 800423e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004242:	e00b      	b.n	800425c <HAL_DMA_Abort_IT+0xa4>
 8004244:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004248:	e008      	b.n	800425c <HAL_DMA_Abort_IT+0xa4>
 800424a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800424e:	e005      	b.n	800425c <HAL_DMA_Abort_IT+0xa4>
 8004250:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004254:	e002      	b.n	800425c <HAL_DMA_Abort_IT+0xa4>
 8004256:	2310      	movs	r3, #16
 8004258:	e000      	b.n	800425c <HAL_DMA_Abort_IT+0xa4>
 800425a:	2301      	movs	r3, #1
 800425c:	4a11      	ldr	r2, [pc, #68]	@ (80042a4 <HAL_DMA_Abort_IT+0xec>)
 800425e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	4798      	blx	r3
    } 
  }
  return status;
 8004280:	7bfb      	ldrb	r3, [r7, #15]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3710      	adds	r7, #16
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40020008 	.word	0x40020008
 8004290:	4002001c 	.word	0x4002001c
 8004294:	40020030 	.word	0x40020030
 8004298:	40020044 	.word	0x40020044
 800429c:	40020058 	.word	0x40020058
 80042a0:	4002006c 	.word	0x4002006c
 80042a4:	40020000 	.word	0x40020000

080042a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c4:	2204      	movs	r2, #4
 80042c6:	409a      	lsls	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d04f      	beq.n	8004370 <HAL_DMA_IRQHandler+0xc8>
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d04a      	beq.n	8004370 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d107      	bne.n	80042f8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0204 	bic.w	r2, r2, #4
 80042f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a66      	ldr	r2, [pc, #408]	@ (8004498 <HAL_DMA_IRQHandler+0x1f0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d029      	beq.n	8004356 <HAL_DMA_IRQHandler+0xae>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a65      	ldr	r2, [pc, #404]	@ (800449c <HAL_DMA_IRQHandler+0x1f4>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d022      	beq.n	8004352 <HAL_DMA_IRQHandler+0xaa>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a63      	ldr	r2, [pc, #396]	@ (80044a0 <HAL_DMA_IRQHandler+0x1f8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d01a      	beq.n	800434c <HAL_DMA_IRQHandler+0xa4>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a62      	ldr	r2, [pc, #392]	@ (80044a4 <HAL_DMA_IRQHandler+0x1fc>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d012      	beq.n	8004346 <HAL_DMA_IRQHandler+0x9e>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a60      	ldr	r2, [pc, #384]	@ (80044a8 <HAL_DMA_IRQHandler+0x200>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00a      	beq.n	8004340 <HAL_DMA_IRQHandler+0x98>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a5f      	ldr	r2, [pc, #380]	@ (80044ac <HAL_DMA_IRQHandler+0x204>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d102      	bne.n	800433a <HAL_DMA_IRQHandler+0x92>
 8004334:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004338:	e00e      	b.n	8004358 <HAL_DMA_IRQHandler+0xb0>
 800433a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800433e:	e00b      	b.n	8004358 <HAL_DMA_IRQHandler+0xb0>
 8004340:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004344:	e008      	b.n	8004358 <HAL_DMA_IRQHandler+0xb0>
 8004346:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800434a:	e005      	b.n	8004358 <HAL_DMA_IRQHandler+0xb0>
 800434c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004350:	e002      	b.n	8004358 <HAL_DMA_IRQHandler+0xb0>
 8004352:	2340      	movs	r3, #64	@ 0x40
 8004354:	e000      	b.n	8004358 <HAL_DMA_IRQHandler+0xb0>
 8004356:	2304      	movs	r3, #4
 8004358:	4a55      	ldr	r2, [pc, #340]	@ (80044b0 <HAL_DMA_IRQHandler+0x208>)
 800435a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8094 	beq.w	800448e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800436e:	e08e      	b.n	800448e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004374:	2202      	movs	r2, #2
 8004376:	409a      	lsls	r2, r3
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4013      	ands	r3, r2
 800437c:	2b00      	cmp	r3, #0
 800437e:	d056      	beq.n	800442e <HAL_DMA_IRQHandler+0x186>
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d051      	beq.n	800442e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0320 	and.w	r3, r3, #32
 8004394:	2b00      	cmp	r3, #0
 8004396:	d10b      	bne.n	80043b0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f022 020a 	bic.w	r2, r2, #10
 80043a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a38      	ldr	r2, [pc, #224]	@ (8004498 <HAL_DMA_IRQHandler+0x1f0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d029      	beq.n	800440e <HAL_DMA_IRQHandler+0x166>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a37      	ldr	r2, [pc, #220]	@ (800449c <HAL_DMA_IRQHandler+0x1f4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d022      	beq.n	800440a <HAL_DMA_IRQHandler+0x162>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a35      	ldr	r2, [pc, #212]	@ (80044a0 <HAL_DMA_IRQHandler+0x1f8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d01a      	beq.n	8004404 <HAL_DMA_IRQHandler+0x15c>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a34      	ldr	r2, [pc, #208]	@ (80044a4 <HAL_DMA_IRQHandler+0x1fc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d012      	beq.n	80043fe <HAL_DMA_IRQHandler+0x156>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a32      	ldr	r2, [pc, #200]	@ (80044a8 <HAL_DMA_IRQHandler+0x200>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00a      	beq.n	80043f8 <HAL_DMA_IRQHandler+0x150>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a31      	ldr	r2, [pc, #196]	@ (80044ac <HAL_DMA_IRQHandler+0x204>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d102      	bne.n	80043f2 <HAL_DMA_IRQHandler+0x14a>
 80043ec:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80043f0:	e00e      	b.n	8004410 <HAL_DMA_IRQHandler+0x168>
 80043f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043f6:	e00b      	b.n	8004410 <HAL_DMA_IRQHandler+0x168>
 80043f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80043fc:	e008      	b.n	8004410 <HAL_DMA_IRQHandler+0x168>
 80043fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004402:	e005      	b.n	8004410 <HAL_DMA_IRQHandler+0x168>
 8004404:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004408:	e002      	b.n	8004410 <HAL_DMA_IRQHandler+0x168>
 800440a:	2320      	movs	r3, #32
 800440c:	e000      	b.n	8004410 <HAL_DMA_IRQHandler+0x168>
 800440e:	2302      	movs	r3, #2
 8004410:	4a27      	ldr	r2, [pc, #156]	@ (80044b0 <HAL_DMA_IRQHandler+0x208>)
 8004412:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004420:	2b00      	cmp	r3, #0
 8004422:	d034      	beq.n	800448e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800442c:	e02f      	b.n	800448e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004432:	2208      	movs	r2, #8
 8004434:	409a      	lsls	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	4013      	ands	r3, r2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d028      	beq.n	8004490 <HAL_DMA_IRQHandler+0x1e8>
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	f003 0308 	and.w	r3, r3, #8
 8004444:	2b00      	cmp	r3, #0
 8004446:	d023      	beq.n	8004490 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f022 020e 	bic.w	r2, r2, #14
 8004456:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004460:	2101      	movs	r1, #1
 8004462:	fa01 f202 	lsl.w	r2, r1, r2
 8004466:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004482:	2b00      	cmp	r3, #0
 8004484:	d004      	beq.n	8004490 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	4798      	blx	r3
    }
  }
  return;
 800448e:	bf00      	nop
 8004490:	bf00      	nop
}
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40020008 	.word	0x40020008
 800449c:	4002001c 	.word	0x4002001c
 80044a0:	40020030 	.word	0x40020030
 80044a4:	40020044 	.word	0x40020044
 80044a8:	40020058 	.word	0x40020058
 80044ac:	4002006c 	.word	0x4002006c
 80044b0:	40020000 	.word	0x40020000

080044b4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
 80044c0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ca:	2101      	movs	r1, #1
 80044cc:	fa01 f202 	lsl.w	r2, r1, r2
 80044d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b10      	cmp	r3, #16
 80044e0:	d108      	bne.n	80044f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80044f2:	e007      	b.n	8004504 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	60da      	str	r2, [r3, #12]
}
 8004504:	bf00      	nop
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr
	...

08004510 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004510:	b480      	push	{r7}
 8004512:	b08b      	sub	sp, #44	@ 0x2c
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800451a:	2300      	movs	r3, #0
 800451c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800451e:	2300      	movs	r3, #0
 8004520:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004522:	e169      	b.n	80047f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004524:	2201      	movs	r2, #1
 8004526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	69fa      	ldr	r2, [r7, #28]
 8004534:	4013      	ands	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	429a      	cmp	r2, r3
 800453e:	f040 8158 	bne.w	80047f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	4a9a      	ldr	r2, [pc, #616]	@ (80047b0 <HAL_GPIO_Init+0x2a0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d05e      	beq.n	800460a <HAL_GPIO_Init+0xfa>
 800454c:	4a98      	ldr	r2, [pc, #608]	@ (80047b0 <HAL_GPIO_Init+0x2a0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d875      	bhi.n	800463e <HAL_GPIO_Init+0x12e>
 8004552:	4a98      	ldr	r2, [pc, #608]	@ (80047b4 <HAL_GPIO_Init+0x2a4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d058      	beq.n	800460a <HAL_GPIO_Init+0xfa>
 8004558:	4a96      	ldr	r2, [pc, #600]	@ (80047b4 <HAL_GPIO_Init+0x2a4>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d86f      	bhi.n	800463e <HAL_GPIO_Init+0x12e>
 800455e:	4a96      	ldr	r2, [pc, #600]	@ (80047b8 <HAL_GPIO_Init+0x2a8>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d052      	beq.n	800460a <HAL_GPIO_Init+0xfa>
 8004564:	4a94      	ldr	r2, [pc, #592]	@ (80047b8 <HAL_GPIO_Init+0x2a8>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d869      	bhi.n	800463e <HAL_GPIO_Init+0x12e>
 800456a:	4a94      	ldr	r2, [pc, #592]	@ (80047bc <HAL_GPIO_Init+0x2ac>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d04c      	beq.n	800460a <HAL_GPIO_Init+0xfa>
 8004570:	4a92      	ldr	r2, [pc, #584]	@ (80047bc <HAL_GPIO_Init+0x2ac>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d863      	bhi.n	800463e <HAL_GPIO_Init+0x12e>
 8004576:	4a92      	ldr	r2, [pc, #584]	@ (80047c0 <HAL_GPIO_Init+0x2b0>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d046      	beq.n	800460a <HAL_GPIO_Init+0xfa>
 800457c:	4a90      	ldr	r2, [pc, #576]	@ (80047c0 <HAL_GPIO_Init+0x2b0>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d85d      	bhi.n	800463e <HAL_GPIO_Init+0x12e>
 8004582:	2b12      	cmp	r3, #18
 8004584:	d82a      	bhi.n	80045dc <HAL_GPIO_Init+0xcc>
 8004586:	2b12      	cmp	r3, #18
 8004588:	d859      	bhi.n	800463e <HAL_GPIO_Init+0x12e>
 800458a:	a201      	add	r2, pc, #4	@ (adr r2, 8004590 <HAL_GPIO_Init+0x80>)
 800458c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004590:	0800460b 	.word	0x0800460b
 8004594:	080045e5 	.word	0x080045e5
 8004598:	080045f7 	.word	0x080045f7
 800459c:	08004639 	.word	0x08004639
 80045a0:	0800463f 	.word	0x0800463f
 80045a4:	0800463f 	.word	0x0800463f
 80045a8:	0800463f 	.word	0x0800463f
 80045ac:	0800463f 	.word	0x0800463f
 80045b0:	0800463f 	.word	0x0800463f
 80045b4:	0800463f 	.word	0x0800463f
 80045b8:	0800463f 	.word	0x0800463f
 80045bc:	0800463f 	.word	0x0800463f
 80045c0:	0800463f 	.word	0x0800463f
 80045c4:	0800463f 	.word	0x0800463f
 80045c8:	0800463f 	.word	0x0800463f
 80045cc:	0800463f 	.word	0x0800463f
 80045d0:	0800463f 	.word	0x0800463f
 80045d4:	080045ed 	.word	0x080045ed
 80045d8:	08004601 	.word	0x08004601
 80045dc:	4a79      	ldr	r2, [pc, #484]	@ (80047c4 <HAL_GPIO_Init+0x2b4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d013      	beq.n	800460a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80045e2:	e02c      	b.n	800463e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	623b      	str	r3, [r7, #32]
          break;
 80045ea:	e029      	b.n	8004640 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	3304      	adds	r3, #4
 80045f2:	623b      	str	r3, [r7, #32]
          break;
 80045f4:	e024      	b.n	8004640 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	3308      	adds	r3, #8
 80045fc:	623b      	str	r3, [r7, #32]
          break;
 80045fe:	e01f      	b.n	8004640 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	330c      	adds	r3, #12
 8004606:	623b      	str	r3, [r7, #32]
          break;
 8004608:	e01a      	b.n	8004640 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d102      	bne.n	8004618 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004612:	2304      	movs	r3, #4
 8004614:	623b      	str	r3, [r7, #32]
          break;
 8004616:	e013      	b.n	8004640 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d105      	bne.n	800462c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004620:	2308      	movs	r3, #8
 8004622:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69fa      	ldr	r2, [r7, #28]
 8004628:	611a      	str	r2, [r3, #16]
          break;
 800462a:	e009      	b.n	8004640 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800462c:	2308      	movs	r3, #8
 800462e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	69fa      	ldr	r2, [r7, #28]
 8004634:	615a      	str	r2, [r3, #20]
          break;
 8004636:	e003      	b.n	8004640 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004638:	2300      	movs	r3, #0
 800463a:	623b      	str	r3, [r7, #32]
          break;
 800463c:	e000      	b.n	8004640 <HAL_GPIO_Init+0x130>
          break;
 800463e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	2bff      	cmp	r3, #255	@ 0xff
 8004644:	d801      	bhi.n	800464a <HAL_GPIO_Init+0x13a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	e001      	b.n	800464e <HAL_GPIO_Init+0x13e>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3304      	adds	r3, #4
 800464e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	2bff      	cmp	r3, #255	@ 0xff
 8004654:	d802      	bhi.n	800465c <HAL_GPIO_Init+0x14c>
 8004656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	e002      	b.n	8004662 <HAL_GPIO_Init+0x152>
 800465c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465e:	3b08      	subs	r3, #8
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	210f      	movs	r1, #15
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	fa01 f303 	lsl.w	r3, r1, r3
 8004670:	43db      	mvns	r3, r3
 8004672:	401a      	ands	r2, r3
 8004674:	6a39      	ldr	r1, [r7, #32]
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	fa01 f303 	lsl.w	r3, r1, r3
 800467c:	431a      	orrs	r2, r3
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 80b1 	beq.w	80047f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004690:	4b4d      	ldr	r3, [pc, #308]	@ (80047c8 <HAL_GPIO_Init+0x2b8>)
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	4a4c      	ldr	r2, [pc, #304]	@ (80047c8 <HAL_GPIO_Init+0x2b8>)
 8004696:	f043 0301 	orr.w	r3, r3, #1
 800469a:	6193      	str	r3, [r2, #24]
 800469c:	4b4a      	ldr	r3, [pc, #296]	@ (80047c8 <HAL_GPIO_Init+0x2b8>)
 800469e:	699b      	ldr	r3, [r3, #24]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	60bb      	str	r3, [r7, #8]
 80046a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80046a8:	4a48      	ldr	r2, [pc, #288]	@ (80047cc <HAL_GPIO_Init+0x2bc>)
 80046aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ac:	089b      	lsrs	r3, r3, #2
 80046ae:	3302      	adds	r3, #2
 80046b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80046b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b8:	f003 0303 	and.w	r3, r3, #3
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	220f      	movs	r2, #15
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	43db      	mvns	r3, r3
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4013      	ands	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a40      	ldr	r2, [pc, #256]	@ (80047d0 <HAL_GPIO_Init+0x2c0>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d013      	beq.n	80046fc <HAL_GPIO_Init+0x1ec>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a3f      	ldr	r2, [pc, #252]	@ (80047d4 <HAL_GPIO_Init+0x2c4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d00d      	beq.n	80046f8 <HAL_GPIO_Init+0x1e8>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a3e      	ldr	r2, [pc, #248]	@ (80047d8 <HAL_GPIO_Init+0x2c8>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d007      	beq.n	80046f4 <HAL_GPIO_Init+0x1e4>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a3d      	ldr	r2, [pc, #244]	@ (80047dc <HAL_GPIO_Init+0x2cc>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d101      	bne.n	80046f0 <HAL_GPIO_Init+0x1e0>
 80046ec:	2303      	movs	r3, #3
 80046ee:	e006      	b.n	80046fe <HAL_GPIO_Init+0x1ee>
 80046f0:	2304      	movs	r3, #4
 80046f2:	e004      	b.n	80046fe <HAL_GPIO_Init+0x1ee>
 80046f4:	2302      	movs	r3, #2
 80046f6:	e002      	b.n	80046fe <HAL_GPIO_Init+0x1ee>
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <HAL_GPIO_Init+0x1ee>
 80046fc:	2300      	movs	r3, #0
 80046fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004700:	f002 0203 	and.w	r2, r2, #3
 8004704:	0092      	lsls	r2, r2, #2
 8004706:	4093      	lsls	r3, r2
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4313      	orrs	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800470e:	492f      	ldr	r1, [pc, #188]	@ (80047cc <HAL_GPIO_Init+0x2bc>)
 8004710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004712:	089b      	lsrs	r3, r3, #2
 8004714:	3302      	adds	r3, #2
 8004716:	68fa      	ldr	r2, [r7, #12]
 8004718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d006      	beq.n	8004736 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004728:	4b2d      	ldr	r3, [pc, #180]	@ (80047e0 <HAL_GPIO_Init+0x2d0>)
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	492c      	ldr	r1, [pc, #176]	@ (80047e0 <HAL_GPIO_Init+0x2d0>)
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	4313      	orrs	r3, r2
 8004732:	608b      	str	r3, [r1, #8]
 8004734:	e006      	b.n	8004744 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004736:	4b2a      	ldr	r3, [pc, #168]	@ (80047e0 <HAL_GPIO_Init+0x2d0>)
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	43db      	mvns	r3, r3
 800473e:	4928      	ldr	r1, [pc, #160]	@ (80047e0 <HAL_GPIO_Init+0x2d0>)
 8004740:	4013      	ands	r3, r2
 8004742:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d006      	beq.n	800475e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004750:	4b23      	ldr	r3, [pc, #140]	@ (80047e0 <HAL_GPIO_Init+0x2d0>)
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	4922      	ldr	r1, [pc, #136]	@ (80047e0 <HAL_GPIO_Init+0x2d0>)
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	4313      	orrs	r3, r2
 800475a:	60cb      	str	r3, [r1, #12]
 800475c:	e006      	b.n	800476c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800475e:	4b20      	ldr	r3, [pc, #128]	@ (80047e0 <HAL_GPIO_Init+0x2d0>)
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	43db      	mvns	r3, r3
 8004766:	491e      	ldr	r1, [pc, #120]	@ (80047e0 <HAL_GPIO_Init+0x2d0>)
 8004768:	4013      	ands	r3, r2
 800476a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d006      	beq.n	8004786 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004778:	4b19      	ldr	r3, [pc, #100]	@ (80047e0 <HAL_GPIO_Init+0x2d0>)
 800477a:	685a      	ldr	r2, [r3, #4]
 800477c:	4918      	ldr	r1, [pc, #96]	@ (80047e0 <HAL_GPIO_Init+0x2d0>)
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	4313      	orrs	r3, r2
 8004782:	604b      	str	r3, [r1, #4]
 8004784:	e006      	b.n	8004794 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004786:	4b16      	ldr	r3, [pc, #88]	@ (80047e0 <HAL_GPIO_Init+0x2d0>)
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	43db      	mvns	r3, r3
 800478e:	4914      	ldr	r1, [pc, #80]	@ (80047e0 <HAL_GPIO_Init+0x2d0>)
 8004790:	4013      	ands	r3, r2
 8004792:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d021      	beq.n	80047e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80047a0:	4b0f      	ldr	r3, [pc, #60]	@ (80047e0 <HAL_GPIO_Init+0x2d0>)
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	490e      	ldr	r1, [pc, #56]	@ (80047e0 <HAL_GPIO_Init+0x2d0>)
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	600b      	str	r3, [r1, #0]
 80047ac:	e021      	b.n	80047f2 <HAL_GPIO_Init+0x2e2>
 80047ae:	bf00      	nop
 80047b0:	10320000 	.word	0x10320000
 80047b4:	10310000 	.word	0x10310000
 80047b8:	10220000 	.word	0x10220000
 80047bc:	10210000 	.word	0x10210000
 80047c0:	10120000 	.word	0x10120000
 80047c4:	10110000 	.word	0x10110000
 80047c8:	40021000 	.word	0x40021000
 80047cc:	40010000 	.word	0x40010000
 80047d0:	40010800 	.word	0x40010800
 80047d4:	40010c00 	.word	0x40010c00
 80047d8:	40011000 	.word	0x40011000
 80047dc:	40011400 	.word	0x40011400
 80047e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80047e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004814 <HAL_GPIO_Init+0x304>)
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	43db      	mvns	r3, r3
 80047ec:	4909      	ldr	r1, [pc, #36]	@ (8004814 <HAL_GPIO_Init+0x304>)
 80047ee:	4013      	ands	r3, r2
 80047f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f4:	3301      	adds	r3, #1
 80047f6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	f47f ae8e 	bne.w	8004524 <HAL_GPIO_Init+0x14>
  }
}
 8004808:	bf00      	nop
 800480a:	bf00      	nop
 800480c:	372c      	adds	r7, #44	@ 0x2c
 800480e:	46bd      	mov	sp, r7
 8004810:	bc80      	pop	{r7}
 8004812:	4770      	bx	lr
 8004814:	40010400 	.word	0x40010400

08004818 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004818:	b480      	push	{r7}
 800481a:	b089      	sub	sp, #36	@ 0x24
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004822:	2300      	movs	r3, #0
 8004824:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8004826:	e09a      	b.n	800495e <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004828:	2201      	movs	r2, #1
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	fa02 f303 	lsl.w	r3, r2, r3
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	4013      	ands	r3, r2
 8004834:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 808d 	beq.w	8004958 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800483e:	4a4e      	ldr	r2, [pc, #312]	@ (8004978 <HAL_GPIO_DeInit+0x160>)
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	089b      	lsrs	r3, r3, #2
 8004844:	3302      	adds	r3, #2
 8004846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800484a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	220f      	movs	r2, #15
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	4013      	ands	r3, r2
 800485e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	4a46      	ldr	r2, [pc, #280]	@ (800497c <HAL_GPIO_DeInit+0x164>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d013      	beq.n	8004890 <HAL_GPIO_DeInit+0x78>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	4a45      	ldr	r2, [pc, #276]	@ (8004980 <HAL_GPIO_DeInit+0x168>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d00d      	beq.n	800488c <HAL_GPIO_DeInit+0x74>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a44      	ldr	r2, [pc, #272]	@ (8004984 <HAL_GPIO_DeInit+0x16c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d007      	beq.n	8004888 <HAL_GPIO_DeInit+0x70>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	4a43      	ldr	r2, [pc, #268]	@ (8004988 <HAL_GPIO_DeInit+0x170>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d101      	bne.n	8004884 <HAL_GPIO_DeInit+0x6c>
 8004880:	2303      	movs	r3, #3
 8004882:	e006      	b.n	8004892 <HAL_GPIO_DeInit+0x7a>
 8004884:	2304      	movs	r3, #4
 8004886:	e004      	b.n	8004892 <HAL_GPIO_DeInit+0x7a>
 8004888:	2302      	movs	r3, #2
 800488a:	e002      	b.n	8004892 <HAL_GPIO_DeInit+0x7a>
 800488c:	2301      	movs	r3, #1
 800488e:	e000      	b.n	8004892 <HAL_GPIO_DeInit+0x7a>
 8004890:	2300      	movs	r3, #0
 8004892:	69fa      	ldr	r2, [r7, #28]
 8004894:	f002 0203 	and.w	r2, r2, #3
 8004898:	0092      	lsls	r2, r2, #2
 800489a:	4093      	lsls	r3, r2
 800489c:	697a      	ldr	r2, [r7, #20]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d132      	bne.n	8004908 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80048a2:	4b3a      	ldr	r3, [pc, #232]	@ (800498c <HAL_GPIO_DeInit+0x174>)
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	43db      	mvns	r3, r3
 80048aa:	4938      	ldr	r1, [pc, #224]	@ (800498c <HAL_GPIO_DeInit+0x174>)
 80048ac:	4013      	ands	r3, r2
 80048ae:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80048b0:	4b36      	ldr	r3, [pc, #216]	@ (800498c <HAL_GPIO_DeInit+0x174>)
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	43db      	mvns	r3, r3
 80048b8:	4934      	ldr	r1, [pc, #208]	@ (800498c <HAL_GPIO_DeInit+0x174>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80048be:	4b33      	ldr	r3, [pc, #204]	@ (800498c <HAL_GPIO_DeInit+0x174>)
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	43db      	mvns	r3, r3
 80048c6:	4931      	ldr	r1, [pc, #196]	@ (800498c <HAL_GPIO_DeInit+0x174>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80048cc:	4b2f      	ldr	r3, [pc, #188]	@ (800498c <HAL_GPIO_DeInit+0x174>)
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	43db      	mvns	r3, r3
 80048d4:	492d      	ldr	r1, [pc, #180]	@ (800498c <HAL_GPIO_DeInit+0x174>)
 80048d6:	4013      	ands	r3, r2
 80048d8:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	f003 0303 	and.w	r3, r3, #3
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	220f      	movs	r2, #15
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 80048ea:	4a23      	ldr	r2, [pc, #140]	@ (8004978 <HAL_GPIO_DeInit+0x160>)
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	089b      	lsrs	r3, r3, #2
 80048f0:	3302      	adds	r3, #2
 80048f2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	43da      	mvns	r2, r3
 80048fa:	481f      	ldr	r0, [pc, #124]	@ (8004978 <HAL_GPIO_DeInit+0x160>)
 80048fc:	69fb      	ldr	r3, [r7, #28]
 80048fe:	089b      	lsrs	r3, r3, #2
 8004900:	400a      	ands	r2, r1
 8004902:	3302      	adds	r3, #2
 8004904:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	2bff      	cmp	r3, #255	@ 0xff
 800490c:	d801      	bhi.n	8004912 <HAL_GPIO_DeInit+0xfa>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	e001      	b.n	8004916 <HAL_GPIO_DeInit+0xfe>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	3304      	adds	r3, #4
 8004916:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004918:	69bb      	ldr	r3, [r7, #24]
 800491a:	2bff      	cmp	r3, #255	@ 0xff
 800491c:	d802      	bhi.n	8004924 <HAL_GPIO_DeInit+0x10c>
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	e002      	b.n	800492a <HAL_GPIO_DeInit+0x112>
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	3b08      	subs	r3, #8
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	210f      	movs	r1, #15
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	fa01 f303 	lsl.w	r3, r1, r3
 8004938:	43db      	mvns	r3, r3
 800493a:	401a      	ands	r2, r3
 800493c:	2104      	movs	r1, #4
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	fa01 f303 	lsl.w	r3, r1, r3
 8004944:	431a      	orrs	r2, r3
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	43db      	mvns	r3, r3
 8004952:	401a      	ands	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	3301      	adds	r3, #1
 800495c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	fa22 f303 	lsr.w	r3, r2, r3
 8004966:	2b00      	cmp	r3, #0
 8004968:	f47f af5e 	bne.w	8004828 <HAL_GPIO_DeInit+0x10>
  }
}
 800496c:	bf00      	nop
 800496e:	bf00      	nop
 8004970:	3724      	adds	r7, #36	@ 0x24
 8004972:	46bd      	mov	sp, r7
 8004974:	bc80      	pop	{r7}
 8004976:	4770      	bx	lr
 8004978:	40010000 	.word	0x40010000
 800497c:	40010800 	.word	0x40010800
 8004980:	40010c00 	.word	0x40010c00
 8004984:	40011000 	.word	0x40011000
 8004988:	40011400 	.word	0x40011400
 800498c:	40010400 	.word	0x40010400

08004990 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	460b      	mov	r3, r1
 800499a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689a      	ldr	r2, [r3, #8]
 80049a0:	887b      	ldrh	r3, [r7, #2]
 80049a2:	4013      	ands	r3, r2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049a8:	2301      	movs	r3, #1
 80049aa:	73fb      	strb	r3, [r7, #15]
 80049ac:	e001      	b.n	80049b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049ae:	2300      	movs	r3, #0
 80049b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3714      	adds	r7, #20
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bc80      	pop	{r7}
 80049bc:	4770      	bx	lr

080049be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049be:	b480      	push	{r7}
 80049c0:	b083      	sub	sp, #12
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	460b      	mov	r3, r1
 80049c8:	807b      	strh	r3, [r7, #2]
 80049ca:	4613      	mov	r3, r2
 80049cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80049ce:	787b      	ldrb	r3, [r7, #1]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d003      	beq.n	80049dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049d4:	887a      	ldrh	r2, [r7, #2]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80049da:	e003      	b.n	80049e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80049dc:	887b      	ldrh	r3, [r7, #2]
 80049de:	041a      	lsls	r2, r3, #16
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	611a      	str	r2, [r3, #16]
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bc80      	pop	{r7}
 80049ec:	4770      	bx	lr

080049ee <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b085      	sub	sp, #20
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	460b      	mov	r3, r1
 80049f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a00:	887a      	ldrh	r2, [r7, #2]
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	4013      	ands	r3, r2
 8004a06:	041a      	lsls	r2, r3, #16
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	43d9      	mvns	r1, r3
 8004a0c:	887b      	ldrh	r3, [r7, #2]
 8004a0e:	400b      	ands	r3, r1
 8004a10:	431a      	orrs	r2, r3
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	611a      	str	r2, [r3, #16]
}
 8004a16:	bf00      	nop
 8004a18:	3714      	adds	r7, #20
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	bc80      	pop	{r7}
 8004a1e:	4770      	bx	lr

08004a20 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	4603      	mov	r3, r0
 8004a28:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004a2a:	4b08      	ldr	r3, [pc, #32]	@ (8004a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a2c:	695a      	ldr	r2, [r3, #20]
 8004a2e:	88fb      	ldrh	r3, [r7, #6]
 8004a30:	4013      	ands	r3, r2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d006      	beq.n	8004a44 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a36:	4a05      	ldr	r2, [pc, #20]	@ (8004a4c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a38:	88fb      	ldrh	r3, [r7, #6]
 8004a3a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a3c:	88fb      	ldrh	r3, [r7, #6]
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 f806 	bl	8004a50 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a44:	bf00      	nop
 8004a46:	3708      	adds	r7, #8
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40010400 	.word	0x40010400

08004a50 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	4603      	mov	r3, r0
 8004a58:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004a5a:	bf00      	nop
 8004a5c:	370c      	adds	r7, #12
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bc80      	pop	{r7}
 8004a62:	4770      	bx	lr

08004a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b086      	sub	sp, #24
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e272      	b.n	8004f5c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	f000 8087 	beq.w	8004b92 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a84:	4b92      	ldr	r3, [pc, #584]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	f003 030c 	and.w	r3, r3, #12
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	d00c      	beq.n	8004aaa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a90:	4b8f      	ldr	r3, [pc, #572]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f003 030c 	and.w	r3, r3, #12
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d112      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x5e>
 8004a9c:	4b8c      	ldr	r3, [pc, #560]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aa8:	d10b      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aaa:	4b89      	ldr	r3, [pc, #548]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d06c      	beq.n	8004b90 <HAL_RCC_OscConfig+0x12c>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d168      	bne.n	8004b90 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	e24c      	b.n	8004f5c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aca:	d106      	bne.n	8004ada <HAL_RCC_OscConfig+0x76>
 8004acc:	4b80      	ldr	r3, [pc, #512]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a7f      	ldr	r2, [pc, #508]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004ad2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	e02e      	b.n	8004b38 <HAL_RCC_OscConfig+0xd4>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10c      	bne.n	8004afc <HAL_RCC_OscConfig+0x98>
 8004ae2:	4b7b      	ldr	r3, [pc, #492]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a7a      	ldr	r2, [pc, #488]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004ae8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aec:	6013      	str	r3, [r2, #0]
 8004aee:	4b78      	ldr	r3, [pc, #480]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a77      	ldr	r2, [pc, #476]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004af4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004af8:	6013      	str	r3, [r2, #0]
 8004afa:	e01d      	b.n	8004b38 <HAL_RCC_OscConfig+0xd4>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004b04:	d10c      	bne.n	8004b20 <HAL_RCC_OscConfig+0xbc>
 8004b06:	4b72      	ldr	r3, [pc, #456]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a71      	ldr	r2, [pc, #452]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004b0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	4b6f      	ldr	r3, [pc, #444]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a6e      	ldr	r2, [pc, #440]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004b18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b1c:	6013      	str	r3, [r2, #0]
 8004b1e:	e00b      	b.n	8004b38 <HAL_RCC_OscConfig+0xd4>
 8004b20:	4b6b      	ldr	r3, [pc, #428]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4a6a      	ldr	r2, [pc, #424]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004b26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b2a:	6013      	str	r3, [r2, #0]
 8004b2c:	4b68      	ldr	r3, [pc, #416]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a67      	ldr	r2, [pc, #412]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004b32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b36:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d013      	beq.n	8004b68 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b40:	f7ff f87a 	bl	8003c38 <HAL_GetTick>
 8004b44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b46:	e008      	b.n	8004b5a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b48:	f7ff f876 	bl	8003c38 <HAL_GetTick>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	2b64      	cmp	r3, #100	@ 0x64
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e200      	b.n	8004f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b5a:	4b5d      	ldr	r3, [pc, #372]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d0f0      	beq.n	8004b48 <HAL_RCC_OscConfig+0xe4>
 8004b66:	e014      	b.n	8004b92 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b68:	f7ff f866 	bl	8003c38 <HAL_GetTick>
 8004b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b6e:	e008      	b.n	8004b82 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b70:	f7ff f862 	bl	8003c38 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b64      	cmp	r3, #100	@ 0x64
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e1ec      	b.n	8004f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b82:	4b53      	ldr	r3, [pc, #332]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1f0      	bne.n	8004b70 <HAL_RCC_OscConfig+0x10c>
 8004b8e:	e000      	b.n	8004b92 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d063      	beq.n	8004c66 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b9e:	4b4c      	ldr	r3, [pc, #304]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	f003 030c 	and.w	r3, r3, #12
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00b      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004baa:	4b49      	ldr	r3, [pc, #292]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f003 030c 	and.w	r3, r3, #12
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	d11c      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x18c>
 8004bb6:	4b46      	ldr	r3, [pc, #280]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d116      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bc2:	4b43      	ldr	r3, [pc, #268]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d005      	beq.n	8004bda <HAL_RCC_OscConfig+0x176>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d001      	beq.n	8004bda <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e1c0      	b.n	8004f5c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bda:	4b3d      	ldr	r3, [pc, #244]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	00db      	lsls	r3, r3, #3
 8004be8:	4939      	ldr	r1, [pc, #228]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004bea:	4313      	orrs	r3, r2
 8004bec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bee:	e03a      	b.n	8004c66 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d020      	beq.n	8004c3a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bf8:	4b36      	ldr	r3, [pc, #216]	@ (8004cd4 <HAL_RCC_OscConfig+0x270>)
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfe:	f7ff f81b 	bl	8003c38 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c04:	e008      	b.n	8004c18 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c06:	f7ff f817 	bl	8003c38 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b02      	cmp	r3, #2
 8004c12:	d901      	bls.n	8004c18 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e1a1      	b.n	8004f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c18:	4b2d      	ldr	r3, [pc, #180]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0302 	and.w	r3, r3, #2
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f0      	beq.n	8004c06 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c24:	4b2a      	ldr	r3, [pc, #168]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	4927      	ldr	r1, [pc, #156]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	600b      	str	r3, [r1, #0]
 8004c38:	e015      	b.n	8004c66 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c3a:	4b26      	ldr	r3, [pc, #152]	@ (8004cd4 <HAL_RCC_OscConfig+0x270>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c40:	f7fe fffa 	bl	8003c38 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c48:	f7fe fff6 	bl	8003c38 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e180      	b.n	8004f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f0      	bne.n	8004c48 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d03a      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d019      	beq.n	8004cae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c7a:	4b17      	ldr	r3, [pc, #92]	@ (8004cd8 <HAL_RCC_OscConfig+0x274>)
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c80:	f7fe ffda 	bl	8003c38 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c88:	f7fe ffd6 	bl	8003c38 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e160      	b.n	8004f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c9a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cd0 <HAL_RCC_OscConfig+0x26c>)
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9e:	f003 0302 	and.w	r3, r3, #2
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0f0      	beq.n	8004c88 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ca6:	2001      	movs	r0, #1
 8004ca8:	f000 face 	bl	8005248 <RCC_Delay>
 8004cac:	e01c      	b.n	8004ce8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cae:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd8 <HAL_RCC_OscConfig+0x274>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cb4:	f7fe ffc0 	bl	8003c38 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cba:	e00f      	b.n	8004cdc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cbc:	f7fe ffbc 	bl	8003c38 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d908      	bls.n	8004cdc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e146      	b.n	8004f5c <HAL_RCC_OscConfig+0x4f8>
 8004cce:	bf00      	nop
 8004cd0:	40021000 	.word	0x40021000
 8004cd4:	42420000 	.word	0x42420000
 8004cd8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cdc:	4b92      	ldr	r3, [pc, #584]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1e9      	bne.n	8004cbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 80a6 	beq.w	8004e42 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cfa:	4b8b      	ldr	r3, [pc, #556]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004cfc:	69db      	ldr	r3, [r3, #28]
 8004cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10d      	bne.n	8004d22 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d06:	4b88      	ldr	r3, [pc, #544]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004d08:	69db      	ldr	r3, [r3, #28]
 8004d0a:	4a87      	ldr	r2, [pc, #540]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d10:	61d3      	str	r3, [r2, #28]
 8004d12:	4b85      	ldr	r3, [pc, #532]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d1a:	60bb      	str	r3, [r7, #8]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d22:	4b82      	ldr	r3, [pc, #520]	@ (8004f2c <HAL_RCC_OscConfig+0x4c8>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d118      	bne.n	8004d60 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d2e:	4b7f      	ldr	r3, [pc, #508]	@ (8004f2c <HAL_RCC_OscConfig+0x4c8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a7e      	ldr	r2, [pc, #504]	@ (8004f2c <HAL_RCC_OscConfig+0x4c8>)
 8004d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d3a:	f7fe ff7d 	bl	8003c38 <HAL_GetTick>
 8004d3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d40:	e008      	b.n	8004d54 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d42:	f7fe ff79 	bl	8003c38 <HAL_GetTick>
 8004d46:	4602      	mov	r2, r0
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	2b64      	cmp	r3, #100	@ 0x64
 8004d4e:	d901      	bls.n	8004d54 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e103      	b.n	8004f5c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d54:	4b75      	ldr	r3, [pc, #468]	@ (8004f2c <HAL_RCC_OscConfig+0x4c8>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d0f0      	beq.n	8004d42 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d106      	bne.n	8004d76 <HAL_RCC_OscConfig+0x312>
 8004d68:	4b6f      	ldr	r3, [pc, #444]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004d6a:	6a1b      	ldr	r3, [r3, #32]
 8004d6c:	4a6e      	ldr	r2, [pc, #440]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004d6e:	f043 0301 	orr.w	r3, r3, #1
 8004d72:	6213      	str	r3, [r2, #32]
 8004d74:	e02d      	b.n	8004dd2 <HAL_RCC_OscConfig+0x36e>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10c      	bne.n	8004d98 <HAL_RCC_OscConfig+0x334>
 8004d7e:	4b6a      	ldr	r3, [pc, #424]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004d80:	6a1b      	ldr	r3, [r3, #32]
 8004d82:	4a69      	ldr	r2, [pc, #420]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004d84:	f023 0301 	bic.w	r3, r3, #1
 8004d88:	6213      	str	r3, [r2, #32]
 8004d8a:	4b67      	ldr	r3, [pc, #412]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	4a66      	ldr	r2, [pc, #408]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004d90:	f023 0304 	bic.w	r3, r3, #4
 8004d94:	6213      	str	r3, [r2, #32]
 8004d96:	e01c      	b.n	8004dd2 <HAL_RCC_OscConfig+0x36e>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	2b05      	cmp	r3, #5
 8004d9e:	d10c      	bne.n	8004dba <HAL_RCC_OscConfig+0x356>
 8004da0:	4b61      	ldr	r3, [pc, #388]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	4a60      	ldr	r2, [pc, #384]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004da6:	f043 0304 	orr.w	r3, r3, #4
 8004daa:	6213      	str	r3, [r2, #32]
 8004dac:	4b5e      	ldr	r3, [pc, #376]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	4a5d      	ldr	r2, [pc, #372]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004db2:	f043 0301 	orr.w	r3, r3, #1
 8004db6:	6213      	str	r3, [r2, #32]
 8004db8:	e00b      	b.n	8004dd2 <HAL_RCC_OscConfig+0x36e>
 8004dba:	4b5b      	ldr	r3, [pc, #364]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	4a5a      	ldr	r2, [pc, #360]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004dc0:	f023 0301 	bic.w	r3, r3, #1
 8004dc4:	6213      	str	r3, [r2, #32]
 8004dc6:	4b58      	ldr	r3, [pc, #352]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	4a57      	ldr	r2, [pc, #348]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004dcc:	f023 0304 	bic.w	r3, r3, #4
 8004dd0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d015      	beq.n	8004e06 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dda:	f7fe ff2d 	bl	8003c38 <HAL_GetTick>
 8004dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de0:	e00a      	b.n	8004df8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004de2:	f7fe ff29 	bl	8003c38 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d901      	bls.n	8004df8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e0b1      	b.n	8004f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df8:	4b4b      	ldr	r3, [pc, #300]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004dfa:	6a1b      	ldr	r3, [r3, #32]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d0ee      	beq.n	8004de2 <HAL_RCC_OscConfig+0x37e>
 8004e04:	e014      	b.n	8004e30 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e06:	f7fe ff17 	bl	8003c38 <HAL_GetTick>
 8004e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e0c:	e00a      	b.n	8004e24 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e0e:	f7fe ff13 	bl	8003c38 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d901      	bls.n	8004e24 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e20:	2303      	movs	r3, #3
 8004e22:	e09b      	b.n	8004f5c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e24:	4b40      	ldr	r3, [pc, #256]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1ee      	bne.n	8004e0e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e30:	7dfb      	ldrb	r3, [r7, #23]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d105      	bne.n	8004e42 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e36:	4b3c      	ldr	r3, [pc, #240]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004e38:	69db      	ldr	r3, [r3, #28]
 8004e3a:	4a3b      	ldr	r2, [pc, #236]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004e3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e40:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 8087 	beq.w	8004f5a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e4c:	4b36      	ldr	r3, [pc, #216]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	f003 030c 	and.w	r3, r3, #12
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d061      	beq.n	8004f1c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d146      	bne.n	8004eee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e60:	4b33      	ldr	r3, [pc, #204]	@ (8004f30 <HAL_RCC_OscConfig+0x4cc>)
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e66:	f7fe fee7 	bl	8003c38 <HAL_GetTick>
 8004e6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e6c:	e008      	b.n	8004e80 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e6e:	f7fe fee3 	bl	8003c38 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	2b02      	cmp	r3, #2
 8004e7a:	d901      	bls.n	8004e80 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004e7c:	2303      	movs	r3, #3
 8004e7e:	e06d      	b.n	8004f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004e80:	4b29      	ldr	r3, [pc, #164]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d1f0      	bne.n	8004e6e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e94:	d108      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004e96:	4b24      	ldr	r3, [pc, #144]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	4921      	ldr	r1, [pc, #132]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a19      	ldr	r1, [r3, #32]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb8:	430b      	orrs	r3, r1
 8004eba:	491b      	ldr	r1, [pc, #108]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f30 <HAL_RCC_OscConfig+0x4cc>)
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec6:	f7fe feb7 	bl	8003c38 <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ece:	f7fe feb3 	bl	8003c38 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e03d      	b.n	8004f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ee0:	4b11      	ldr	r3, [pc, #68]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d0f0      	beq.n	8004ece <HAL_RCC_OscConfig+0x46a>
 8004eec:	e035      	b.n	8004f5a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eee:	4b10      	ldr	r3, [pc, #64]	@ (8004f30 <HAL_RCC_OscConfig+0x4cc>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ef4:	f7fe fea0 	bl	8003c38 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004efa:	e008      	b.n	8004f0e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004efc:	f7fe fe9c 	bl	8003c38 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d901      	bls.n	8004f0e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e026      	b.n	8004f5c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f0e:	4b06      	ldr	r3, [pc, #24]	@ (8004f28 <HAL_RCC_OscConfig+0x4c4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1f0      	bne.n	8004efc <HAL_RCC_OscConfig+0x498>
 8004f1a:	e01e      	b.n	8004f5a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d107      	bne.n	8004f34 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e019      	b.n	8004f5c <HAL_RCC_OscConfig+0x4f8>
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	40007000 	.word	0x40007000
 8004f30:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f34:	4b0b      	ldr	r3, [pc, #44]	@ (8004f64 <HAL_RCC_OscConfig+0x500>)
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d106      	bne.n	8004f56 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d001      	beq.n	8004f5a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e000      	b.n	8004f5c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40021000 	.word	0x40021000

08004f68 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e0d0      	b.n	800511e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f7c:	4b6a      	ldr	r3, [pc, #424]	@ (8005128 <HAL_RCC_ClockConfig+0x1c0>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d910      	bls.n	8004fac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f8a:	4b67      	ldr	r3, [pc, #412]	@ (8005128 <HAL_RCC_ClockConfig+0x1c0>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f023 0207 	bic.w	r2, r3, #7
 8004f92:	4965      	ldr	r1, [pc, #404]	@ (8005128 <HAL_RCC_ClockConfig+0x1c0>)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9a:	4b63      	ldr	r3, [pc, #396]	@ (8005128 <HAL_RCC_ClockConfig+0x1c0>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0307 	and.w	r3, r3, #7
 8004fa2:	683a      	ldr	r2, [r7, #0]
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d001      	beq.n	8004fac <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e0b8      	b.n	800511e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0302 	and.w	r3, r3, #2
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d020      	beq.n	8004ffa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0304 	and.w	r3, r3, #4
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d005      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fc4:	4b59      	ldr	r3, [pc, #356]	@ (800512c <HAL_RCC_ClockConfig+0x1c4>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	4a58      	ldr	r2, [pc, #352]	@ (800512c <HAL_RCC_ClockConfig+0x1c4>)
 8004fca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004fce:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0308 	and.w	r3, r3, #8
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d005      	beq.n	8004fe8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fdc:	4b53      	ldr	r3, [pc, #332]	@ (800512c <HAL_RCC_ClockConfig+0x1c4>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	4a52      	ldr	r2, [pc, #328]	@ (800512c <HAL_RCC_ClockConfig+0x1c4>)
 8004fe2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004fe6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fe8:	4b50      	ldr	r3, [pc, #320]	@ (800512c <HAL_RCC_ClockConfig+0x1c4>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	494d      	ldr	r1, [pc, #308]	@ (800512c <HAL_RCC_ClockConfig+0x1c4>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d040      	beq.n	8005088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d107      	bne.n	800501e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800500e:	4b47      	ldr	r3, [pc, #284]	@ (800512c <HAL_RCC_ClockConfig+0x1c4>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d115      	bne.n	8005046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e07f      	b.n	800511e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	2b02      	cmp	r3, #2
 8005024:	d107      	bne.n	8005036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005026:	4b41      	ldr	r3, [pc, #260]	@ (800512c <HAL_RCC_ClockConfig+0x1c4>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d109      	bne.n	8005046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e073      	b.n	800511e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005036:	4b3d      	ldr	r3, [pc, #244]	@ (800512c <HAL_RCC_ClockConfig+0x1c4>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e06b      	b.n	800511e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005046:	4b39      	ldr	r3, [pc, #228]	@ (800512c <HAL_RCC_ClockConfig+0x1c4>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f023 0203 	bic.w	r2, r3, #3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	4936      	ldr	r1, [pc, #216]	@ (800512c <HAL_RCC_ClockConfig+0x1c4>)
 8005054:	4313      	orrs	r3, r2
 8005056:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005058:	f7fe fdee 	bl	8003c38 <HAL_GetTick>
 800505c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800505e:	e00a      	b.n	8005076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005060:	f7fe fdea 	bl	8003c38 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800506e:	4293      	cmp	r3, r2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e053      	b.n	800511e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005076:	4b2d      	ldr	r3, [pc, #180]	@ (800512c <HAL_RCC_ClockConfig+0x1c4>)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f003 020c 	and.w	r2, r3, #12
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	429a      	cmp	r2, r3
 8005086:	d1eb      	bne.n	8005060 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005088:	4b27      	ldr	r3, [pc, #156]	@ (8005128 <HAL_RCC_ClockConfig+0x1c0>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d210      	bcs.n	80050b8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005096:	4b24      	ldr	r3, [pc, #144]	@ (8005128 <HAL_RCC_ClockConfig+0x1c0>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f023 0207 	bic.w	r2, r3, #7
 800509e:	4922      	ldr	r1, [pc, #136]	@ (8005128 <HAL_RCC_ClockConfig+0x1c0>)
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050a6:	4b20      	ldr	r3, [pc, #128]	@ (8005128 <HAL_RCC_ClockConfig+0x1c0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0307 	and.w	r3, r3, #7
 80050ae:	683a      	ldr	r2, [r7, #0]
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d001      	beq.n	80050b8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	e032      	b.n	800511e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d008      	beq.n	80050d6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050c4:	4b19      	ldr	r3, [pc, #100]	@ (800512c <HAL_RCC_ClockConfig+0x1c4>)
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	4916      	ldr	r1, [pc, #88]	@ (800512c <HAL_RCC_ClockConfig+0x1c4>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0308 	and.w	r3, r3, #8
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d009      	beq.n	80050f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80050e2:	4b12      	ldr	r3, [pc, #72]	@ (800512c <HAL_RCC_ClockConfig+0x1c4>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	490e      	ldr	r1, [pc, #56]	@ (800512c <HAL_RCC_ClockConfig+0x1c4>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050f6:	f000 f821 	bl	800513c <HAL_RCC_GetSysClockFreq>
 80050fa:	4602      	mov	r2, r0
 80050fc:	4b0b      	ldr	r3, [pc, #44]	@ (800512c <HAL_RCC_ClockConfig+0x1c4>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	091b      	lsrs	r3, r3, #4
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	490a      	ldr	r1, [pc, #40]	@ (8005130 <HAL_RCC_ClockConfig+0x1c8>)
 8005108:	5ccb      	ldrb	r3, [r1, r3]
 800510a:	fa22 f303 	lsr.w	r3, r2, r3
 800510e:	4a09      	ldr	r2, [pc, #36]	@ (8005134 <HAL_RCC_ClockConfig+0x1cc>)
 8005110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005112:	4b09      	ldr	r3, [pc, #36]	@ (8005138 <HAL_RCC_ClockConfig+0x1d0>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4618      	mov	r0, r3
 8005118:	f7fe fd4c 	bl	8003bb4 <HAL_InitTick>

  return HAL_OK;
 800511c:	2300      	movs	r3, #0
}
 800511e:	4618      	mov	r0, r3
 8005120:	3710      	adds	r7, #16
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	40022000 	.word	0x40022000
 800512c:	40021000 	.word	0x40021000
 8005130:	0800aa38 	.word	0x0800aa38
 8005134:	20000000 	.word	0x20000000
 8005138:	2000001c 	.word	0x2000001c

0800513c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005142:	2300      	movs	r3, #0
 8005144:	60fb      	str	r3, [r7, #12]
 8005146:	2300      	movs	r3, #0
 8005148:	60bb      	str	r3, [r7, #8]
 800514a:	2300      	movs	r3, #0
 800514c:	617b      	str	r3, [r7, #20]
 800514e:	2300      	movs	r3, #0
 8005150:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005152:	2300      	movs	r3, #0
 8005154:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005156:	4b1e      	ldr	r3, [pc, #120]	@ (80051d0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f003 030c 	and.w	r3, r3, #12
 8005162:	2b04      	cmp	r3, #4
 8005164:	d002      	beq.n	800516c <HAL_RCC_GetSysClockFreq+0x30>
 8005166:	2b08      	cmp	r3, #8
 8005168:	d003      	beq.n	8005172 <HAL_RCC_GetSysClockFreq+0x36>
 800516a:	e027      	b.n	80051bc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800516c:	4b19      	ldr	r3, [pc, #100]	@ (80051d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800516e:	613b      	str	r3, [r7, #16]
      break;
 8005170:	e027      	b.n	80051c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	0c9b      	lsrs	r3, r3, #18
 8005176:	f003 030f 	and.w	r3, r3, #15
 800517a:	4a17      	ldr	r2, [pc, #92]	@ (80051d8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800517c:	5cd3      	ldrb	r3, [r2, r3]
 800517e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d010      	beq.n	80051ac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800518a:	4b11      	ldr	r3, [pc, #68]	@ (80051d0 <HAL_RCC_GetSysClockFreq+0x94>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	0c5b      	lsrs	r3, r3, #17
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	4a11      	ldr	r2, [pc, #68]	@ (80051dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8005196:	5cd3      	ldrb	r3, [r2, r3]
 8005198:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a0d      	ldr	r2, [pc, #52]	@ (80051d4 <HAL_RCC_GetSysClockFreq+0x98>)
 800519e:	fb03 f202 	mul.w	r2, r3, r2
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051a8:	617b      	str	r3, [r7, #20]
 80051aa:	e004      	b.n	80051b6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a0c      	ldr	r2, [pc, #48]	@ (80051e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80051b0:	fb02 f303 	mul.w	r3, r2, r3
 80051b4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	613b      	str	r3, [r7, #16]
      break;
 80051ba:	e002      	b.n	80051c2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80051bc:	4b05      	ldr	r3, [pc, #20]	@ (80051d4 <HAL_RCC_GetSysClockFreq+0x98>)
 80051be:	613b      	str	r3, [r7, #16]
      break;
 80051c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051c2:	693b      	ldr	r3, [r7, #16]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	371c      	adds	r7, #28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bc80      	pop	{r7}
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	40021000 	.word	0x40021000
 80051d4:	007a1200 	.word	0x007a1200
 80051d8:	0800aa5c 	.word	0x0800aa5c
 80051dc:	0800aa6c 	.word	0x0800aa6c
 80051e0:	003d0900 	.word	0x003d0900

080051e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051e4:	b480      	push	{r7}
 80051e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051e8:	4b02      	ldr	r3, [pc, #8]	@ (80051f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80051ea:	681b      	ldr	r3, [r3, #0]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bc80      	pop	{r7}
 80051f2:	4770      	bx	lr
 80051f4:	20000000 	.word	0x20000000

080051f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051fc:	f7ff fff2 	bl	80051e4 <HAL_RCC_GetHCLKFreq>
 8005200:	4602      	mov	r2, r0
 8005202:	4b05      	ldr	r3, [pc, #20]	@ (8005218 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	0a1b      	lsrs	r3, r3, #8
 8005208:	f003 0307 	and.w	r3, r3, #7
 800520c:	4903      	ldr	r1, [pc, #12]	@ (800521c <HAL_RCC_GetPCLK1Freq+0x24>)
 800520e:	5ccb      	ldrb	r3, [r1, r3]
 8005210:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005214:	4618      	mov	r0, r3
 8005216:	bd80      	pop	{r7, pc}
 8005218:	40021000 	.word	0x40021000
 800521c:	0800aa48 	.word	0x0800aa48

08005220 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005224:	f7ff ffde 	bl	80051e4 <HAL_RCC_GetHCLKFreq>
 8005228:	4602      	mov	r2, r0
 800522a:	4b05      	ldr	r3, [pc, #20]	@ (8005240 <HAL_RCC_GetPCLK2Freq+0x20>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	0adb      	lsrs	r3, r3, #11
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	4903      	ldr	r1, [pc, #12]	@ (8005244 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005236:	5ccb      	ldrb	r3, [r1, r3]
 8005238:	fa22 f303 	lsr.w	r3, r2, r3
}
 800523c:	4618      	mov	r0, r3
 800523e:	bd80      	pop	{r7, pc}
 8005240:	40021000 	.word	0x40021000
 8005244:	0800aa48 	.word	0x0800aa48

08005248 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005250:	4b0a      	ldr	r3, [pc, #40]	@ (800527c <RCC_Delay+0x34>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a0a      	ldr	r2, [pc, #40]	@ (8005280 <RCC_Delay+0x38>)
 8005256:	fba2 2303 	umull	r2, r3, r2, r3
 800525a:	0a5b      	lsrs	r3, r3, #9
 800525c:	687a      	ldr	r2, [r7, #4]
 800525e:	fb02 f303 	mul.w	r3, r2, r3
 8005262:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005264:	bf00      	nop
  }
  while (Delay --);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	1e5a      	subs	r2, r3, #1
 800526a:	60fa      	str	r2, [r7, #12]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1f9      	bne.n	8005264 <RCC_Delay+0x1c>
}
 8005270:	bf00      	nop
 8005272:	bf00      	nop
 8005274:	3714      	adds	r7, #20
 8005276:	46bd      	mov	sp, r7
 8005278:	bc80      	pop	{r7}
 800527a:	4770      	bx	lr
 800527c:	20000000 	.word	0x20000000
 8005280:	10624dd3 	.word	0x10624dd3

08005284 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e042      	b.n	800531c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fe fb2a 	bl	8003904 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2224      	movs	r2, #36	@ 0x24
 80052b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68da      	ldr	r2, [r3, #12]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80052c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 ff7d 	bl	80061c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695a      	ldr	r2, [r3, #20]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68da      	ldr	r2, [r3, #12]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e024      	b.n	8005380 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2224      	movs	r2, #36	@ 0x24
 800533a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68da      	ldr	r2, [r3, #12]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800534c:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f7fe fbc0 	bl	8003ad4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800537e:	2300      	movs	r3, #0
}
 8005380:	4618      	mov	r0, r3
 8005382:	3708      	adds	r7, #8
 8005384:	46bd      	mov	sp, r7
 8005386:	bd80      	pop	{r7, pc}

08005388 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08a      	sub	sp, #40	@ 0x28
 800538c:	af02      	add	r7, sp, #8
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	603b      	str	r3, [r7, #0]
 8005394:	4613      	mov	r3, r2
 8005396:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005398:	2300      	movs	r3, #0
 800539a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b20      	cmp	r3, #32
 80053a6:	d16d      	bne.n	8005484 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <HAL_UART_Transmit+0x2c>
 80053ae:	88fb      	ldrh	r3, [r7, #6]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e066      	b.n	8005486 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2221      	movs	r2, #33	@ 0x21
 80053c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053c6:	f7fe fc37 	bl	8003c38 <HAL_GetTick>
 80053ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	88fa      	ldrh	r2, [r7, #6]
 80053d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	88fa      	ldrh	r2, [r7, #6]
 80053d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053e0:	d108      	bne.n	80053f4 <HAL_UART_Transmit+0x6c>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d104      	bne.n	80053f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80053ea:	2300      	movs	r3, #0
 80053ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	61bb      	str	r3, [r7, #24]
 80053f2:	e003      	b.n	80053fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053f8:	2300      	movs	r3, #0
 80053fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053fc:	e02a      	b.n	8005454 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	2200      	movs	r2, #0
 8005406:	2180      	movs	r1, #128	@ 0x80
 8005408:	68f8      	ldr	r0, [r7, #12]
 800540a:	f000 fc12 	bl	8005c32 <UART_WaitOnFlagUntilTimeout>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e036      	b.n	8005486 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10b      	bne.n	8005436 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	881b      	ldrh	r3, [r3, #0]
 8005422:	461a      	mov	r2, r3
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800542c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	3302      	adds	r3, #2
 8005432:	61bb      	str	r3, [r7, #24]
 8005434:	e007      	b.n	8005446 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	781a      	ldrb	r2, [r3, #0]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005440:	69fb      	ldr	r3, [r7, #28]
 8005442:	3301      	adds	r3, #1
 8005444:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800544a:	b29b      	uxth	r3, r3
 800544c:	3b01      	subs	r3, #1
 800544e:	b29a      	uxth	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005458:	b29b      	uxth	r3, r3
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1cf      	bne.n	80053fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	9300      	str	r3, [sp, #0]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2200      	movs	r2, #0
 8005466:	2140      	movs	r1, #64	@ 0x40
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f000 fbe2 	bl	8005c32 <UART_WaitOnFlagUntilTimeout>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d001      	beq.n	8005478 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e006      	b.n	8005486 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005480:	2300      	movs	r3, #0
 8005482:	e000      	b.n	8005486 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005484:	2302      	movs	r3, #2
  }
}
 8005486:	4618      	mov	r0, r3
 8005488:	3720      	adds	r7, #32
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	60f8      	str	r0, [r7, #12]
 8005496:	60b9      	str	r1, [r7, #8]
 8005498:	4613      	mov	r3, r2
 800549a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b20      	cmp	r3, #32
 80054a6:	d112      	bne.n	80054ce <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d002      	beq.n	80054b4 <HAL_UART_Receive_DMA+0x26>
 80054ae:	88fb      	ldrh	r3, [r7, #6]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e00b      	b.n	80054d0 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	2200      	movs	r2, #0
 80054bc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80054be:	88fb      	ldrh	r3, [r7, #6]
 80054c0:	461a      	mov	r2, r3
 80054c2:	68b9      	ldr	r1, [r7, #8]
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 fc23 	bl	8005d10 <UART_Start_Receive_DMA>
 80054ca:	4603      	mov	r3, r0
 80054cc:	e000      	b.n	80054d0 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80054ce:	2302      	movs	r3, #2
  }
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b0ba      	sub	sp, #232	@ 0xe8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80054fe:	2300      	movs	r3, #0
 8005500:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005504:	2300      	movs	r3, #0
 8005506:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800550a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005516:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10f      	bne.n	800553e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800551e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005522:	f003 0320 	and.w	r3, r3, #32
 8005526:	2b00      	cmp	r3, #0
 8005528:	d009      	beq.n	800553e <HAL_UART_IRQHandler+0x66>
 800552a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b00      	cmp	r3, #0
 8005534:	d003      	beq.n	800553e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fd88 	bl	800604c <UART_Receive_IT>
      return;
 800553c:	e25b      	b.n	80059f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800553e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005542:	2b00      	cmp	r3, #0
 8005544:	f000 80de 	beq.w	8005704 <HAL_UART_IRQHandler+0x22c>
 8005548:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	d106      	bne.n	8005562 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005558:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 80d1 	beq.w	8005704 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00b      	beq.n	8005586 <HAL_UART_IRQHandler+0xae>
 800556e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005572:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005576:	2b00      	cmp	r3, #0
 8005578:	d005      	beq.n	8005586 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800557e:	f043 0201 	orr.w	r2, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800558a:	f003 0304 	and.w	r3, r3, #4
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00b      	beq.n	80055aa <HAL_UART_IRQHandler+0xd2>
 8005592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005596:	f003 0301 	and.w	r3, r3, #1
 800559a:	2b00      	cmp	r3, #0
 800559c:	d005      	beq.n	80055aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055a2:	f043 0202 	orr.w	r2, r3, #2
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ae:	f003 0302 	and.w	r3, r3, #2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00b      	beq.n	80055ce <HAL_UART_IRQHandler+0xf6>
 80055b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d005      	beq.n	80055ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055c6:	f043 0204 	orr.w	r2, r3, #4
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80055ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d011      	beq.n	80055fe <HAL_UART_IRQHandler+0x126>
 80055da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055de:	f003 0320 	and.w	r3, r3, #32
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d105      	bne.n	80055f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80055e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d005      	beq.n	80055fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f6:	f043 0208 	orr.w	r2, r3, #8
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005602:	2b00      	cmp	r3, #0
 8005604:	f000 81f2 	beq.w	80059ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800560c:	f003 0320 	and.w	r3, r3, #32
 8005610:	2b00      	cmp	r3, #0
 8005612:	d008      	beq.n	8005626 <HAL_UART_IRQHandler+0x14e>
 8005614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005618:	f003 0320 	and.w	r3, r3, #32
 800561c:	2b00      	cmp	r3, #0
 800561e:	d002      	beq.n	8005626 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 fd13 	bl	800604c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	bf14      	ite	ne
 8005634:	2301      	movne	r3, #1
 8005636:	2300      	moveq	r3, #0
 8005638:	b2db      	uxtb	r3, r3
 800563a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005642:	f003 0308 	and.w	r3, r3, #8
 8005646:	2b00      	cmp	r3, #0
 8005648:	d103      	bne.n	8005652 <HAL_UART_IRQHandler+0x17a>
 800564a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800564e:	2b00      	cmp	r3, #0
 8005650:	d04f      	beq.n	80056f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 fc1d 	bl	8005e92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005662:	2b00      	cmp	r3, #0
 8005664:	d041      	beq.n	80056ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	3314      	adds	r3, #20
 800566c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005670:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005674:	e853 3f00 	ldrex	r3, [r3]
 8005678:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800567c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005680:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005684:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3314      	adds	r3, #20
 800568e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005692:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005696:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800569e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80056a2:	e841 2300 	strex	r3, r2, [r1]
 80056a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80056aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1d9      	bne.n	8005666 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d013      	beq.n	80056e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056be:	4a7e      	ldr	r2, [pc, #504]	@ (80058b8 <HAL_UART_IRQHandler+0x3e0>)
 80056c0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fe fd76 	bl	80041b8 <HAL_DMA_Abort_IT>
 80056cc:	4603      	mov	r3, r0
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d016      	beq.n	8005700 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80056dc:	4610      	mov	r0, r2
 80056de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e0:	e00e      	b.n	8005700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f7fe f8fc 	bl	80038e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e8:	e00a      	b.n	8005700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7fe f8f8 	bl	80038e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f0:	e006      	b.n	8005700 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fe f8f4 	bl	80038e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80056fe:	e175      	b.n	80059ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005700:	bf00      	nop
    return;
 8005702:	e173      	b.n	80059ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005708:	2b01      	cmp	r3, #1
 800570a:	f040 814f 	bne.w	80059ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800570e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005712:	f003 0310 	and.w	r3, r3, #16
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 8148 	beq.w	80059ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800571c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005720:	f003 0310 	and.w	r3, r3, #16
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 8141 	beq.w	80059ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800572a:	2300      	movs	r3, #0
 800572c:	60bb      	str	r3, [r7, #8]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	60bb      	str	r3, [r7, #8]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	60bb      	str	r3, [r7, #8]
 800573e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 80b6 	beq.w	80058bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800575c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005760:	2b00      	cmp	r3, #0
 8005762:	f000 8145 	beq.w	80059f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800576a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800576e:	429a      	cmp	r2, r3
 8005770:	f080 813e 	bcs.w	80059f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800577a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	2b20      	cmp	r3, #32
 8005784:	f000 8088 	beq.w	8005898 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	330c      	adds	r3, #12
 800578e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005792:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005796:	e853 3f00 	ldrex	r3, [r3]
 800579a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800579e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057a6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	330c      	adds	r3, #12
 80057b0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80057b4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057b8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057bc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80057c0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80057c4:	e841 2300 	strex	r3, r2, [r1]
 80057c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80057cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1d9      	bne.n	8005788 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3314      	adds	r3, #20
 80057da:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057dc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057de:	e853 3f00 	ldrex	r3, [r3]
 80057e2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80057e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057e6:	f023 0301 	bic.w	r3, r3, #1
 80057ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3314      	adds	r3, #20
 80057f4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80057f8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80057fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fe:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005800:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005804:	e841 2300 	strex	r3, r2, [r1]
 8005808:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800580a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800580c:	2b00      	cmp	r3, #0
 800580e:	d1e1      	bne.n	80057d4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3314      	adds	r3, #20
 8005816:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005818:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800581a:	e853 3f00 	ldrex	r3, [r3]
 800581e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005820:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005822:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005826:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	3314      	adds	r3, #20
 8005830:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005834:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005836:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800583a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800583c:	e841 2300 	strex	r3, r2, [r1]
 8005840:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005842:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e3      	bne.n	8005810 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	330c      	adds	r3, #12
 800585c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800585e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005860:	e853 3f00 	ldrex	r3, [r3]
 8005864:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005866:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005868:	f023 0310 	bic.w	r3, r3, #16
 800586c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	330c      	adds	r3, #12
 8005876:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800587a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800587c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800587e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005880:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005882:	e841 2300 	strex	r3, r2, [r1]
 8005886:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005888:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1e3      	bne.n	8005856 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005892:	4618      	mov	r0, r3
 8005894:	f7fe fc54 	bl	8004140 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	1ad3      	subs	r3, r2, r3
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	4619      	mov	r1, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 f8b6 	bl	8005a20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058b4:	e09c      	b.n	80059f0 <HAL_UART_IRQHandler+0x518>
 80058b6:	bf00      	nop
 80058b8:	08005f57 	.word	0x08005f57
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f000 808e 	beq.w	80059f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80058d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 8089 	beq.w	80059f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	330c      	adds	r3, #12
 80058e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ec:	e853 3f00 	ldrex	r3, [r3]
 80058f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80058f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	330c      	adds	r3, #12
 8005902:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005906:	647a      	str	r2, [r7, #68]	@ 0x44
 8005908:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800590c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800590e:	e841 2300 	strex	r3, r2, [r1]
 8005912:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1e3      	bne.n	80058e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	3314      	adds	r3, #20
 8005920:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005924:	e853 3f00 	ldrex	r3, [r3]
 8005928:	623b      	str	r3, [r7, #32]
   return(result);
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	f023 0301 	bic.w	r3, r3, #1
 8005930:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	3314      	adds	r3, #20
 800593a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800593e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005940:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005942:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005944:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005946:	e841 2300 	strex	r3, r2, [r1]
 800594a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800594c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1e3      	bne.n	800591a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2220      	movs	r2, #32
 8005956:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	330c      	adds	r3, #12
 8005966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0310 	bic.w	r3, r3, #16
 8005976:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	330c      	adds	r3, #12
 8005980:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005984:	61fa      	str	r2, [r7, #28]
 8005986:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005988:	69b9      	ldr	r1, [r7, #24]
 800598a:	69fa      	ldr	r2, [r7, #28]
 800598c:	e841 2300 	strex	r3, r2, [r1]
 8005990:	617b      	str	r3, [r7, #20]
   return(result);
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1e3      	bne.n	8005960 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800599e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059a2:	4619      	mov	r1, r3
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f83b 	bl	8005a20 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059aa:	e023      	b.n	80059f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d009      	beq.n	80059cc <HAL_UART_IRQHandler+0x4f4>
 80059b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d003      	beq.n	80059cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fada 	bl	8005f7e <UART_Transmit_IT>
    return;
 80059ca:	e014      	b.n	80059f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00e      	beq.n	80059f6 <HAL_UART_IRQHandler+0x51e>
 80059d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d008      	beq.n	80059f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fb19 	bl	800601c <UART_EndTransmit_IT>
    return;
 80059ea:	e004      	b.n	80059f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80059ec:	bf00      	nop
 80059ee:	e002      	b.n	80059f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80059f0:	bf00      	nop
 80059f2:	e000      	b.n	80059f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80059f4:	bf00      	nop
  }
}
 80059f6:	37e8      	adds	r7, #232	@ 0xe8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bc80      	pop	{r7}
 8005a0c:	4770      	bx	lr

08005a0e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b083      	sub	sp, #12
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005a16:	bf00      	nop
 8005a18:	370c      	adds	r7, #12
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bc80      	pop	{r7}
 8005a1e:	4770      	bx	lr

08005a20 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	460b      	mov	r3, r1
 8005a2a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bc80      	pop	{r7}
 8005a34:	4770      	bx	lr

08005a36 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005a36:	b580      	push	{r7, lr}
 8005a38:	b09c      	sub	sp, #112	@ 0x70
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a42:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0320 	and.w	r3, r3, #32
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d172      	bne.n	8005b38 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005a52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a54:	2200      	movs	r2, #0
 8005a56:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	330c      	adds	r3, #12
 8005a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a62:	e853 3f00 	ldrex	r3, [r3]
 8005a66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005a68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005a6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	330c      	adds	r3, #12
 8005a76:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005a78:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005a7a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a80:	e841 2300 	strex	r3, r2, [r1]
 8005a84:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1e5      	bne.n	8005a58 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	3314      	adds	r3, #20
 8005a92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a96:	e853 3f00 	ldrex	r3, [r3]
 8005a9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a9e:	f023 0301 	bic.w	r3, r3, #1
 8005aa2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005aa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3314      	adds	r3, #20
 8005aaa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005aac:	647a      	str	r2, [r7, #68]	@ 0x44
 8005aae:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ab2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ab4:	e841 2300 	strex	r3, r2, [r1]
 8005ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1e5      	bne.n	8005a8c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ac0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	3314      	adds	r3, #20
 8005ac6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aca:	e853 3f00 	ldrex	r3, [r3]
 8005ace:	623b      	str	r3, [r7, #32]
   return(result);
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ad6:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ad8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3314      	adds	r3, #20
 8005ade:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005ae0:	633a      	str	r2, [r7, #48]	@ 0x30
 8005ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ae8:	e841 2300 	strex	r3, r2, [r1]
 8005aec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d1e5      	bne.n	8005ac0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005af4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005af6:	2220      	movs	r2, #32
 8005af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005afc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005afe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d119      	bne.n	8005b38 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	330c      	adds	r3, #12
 8005b0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	e853 3f00 	ldrex	r3, [r3]
 8005b12:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0310 	bic.w	r3, r3, #16
 8005b1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	330c      	adds	r3, #12
 8005b22:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005b24:	61fa      	str	r2, [r7, #28]
 8005b26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b28:	69b9      	ldr	r1, [r7, #24]
 8005b2a:	69fa      	ldr	r2, [r7, #28]
 8005b2c:	e841 2300 	strex	r3, r2, [r1]
 8005b30:	617b      	str	r3, [r7, #20]
   return(result);
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1e5      	bne.n	8005b04 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d106      	bne.n	8005b54 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005b48:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005b4e:	f7ff ff67 	bl	8005a20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b52:	e002      	b.n	8005b5a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005b54:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005b56:	f7fd fecc 	bl	80038f2 <HAL_UART_RxCpltCallback>
}
 8005b5a:	bf00      	nop
 8005b5c:	3770      	adds	r7, #112	@ 0x70
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b084      	sub	sp, #16
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2201      	movs	r2, #1
 8005b74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d108      	bne.n	8005b90 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b82:	085b      	lsrs	r3, r3, #1
 8005b84:	b29b      	uxth	r3, r3
 8005b86:	4619      	mov	r1, r3
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f7ff ff49 	bl	8005a20 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b8e:	e002      	b.n	8005b96 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005b90:	68f8      	ldr	r0, [r7, #12]
 8005b92:	f7ff ff3c 	bl	8005a0e <HAL_UART_RxHalfCpltCallback>
}
 8005b96:	bf00      	nop
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b084      	sub	sp, #16
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	bf14      	ite	ne
 8005bbe:	2301      	movne	r3, #1
 8005bc0:	2300      	moveq	r3, #0
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	2b21      	cmp	r3, #33	@ 0x21
 8005bd0:	d108      	bne.n	8005be4 <UART_DMAError+0x46>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d005      	beq.n	8005be4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8005bde:	68b8      	ldr	r0, [r7, #8]
 8005be0:	f000 f930 	bl	8005e44 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	bf14      	ite	ne
 8005bf2:	2301      	movne	r3, #1
 8005bf4:	2300      	moveq	r3, #0
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	2b22      	cmp	r3, #34	@ 0x22
 8005c04:	d108      	bne.n	8005c18 <UART_DMAError+0x7a>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d005      	beq.n	8005c18 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8005c12:	68b8      	ldr	r0, [r7, #8]
 8005c14:	f000 f93d 	bl	8005e92 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c1c:	f043 0210 	orr.w	r2, r3, #16
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c24:	68b8      	ldr	r0, [r7, #8]
 8005c26:	f7fd fe5b 	bl	80038e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c2a:	bf00      	nop
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b090      	sub	sp, #64	@ 0x40
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	60f8      	str	r0, [r7, #12]
 8005c3a:	60b9      	str	r1, [r7, #8]
 8005c3c:	603b      	str	r3, [r7, #0]
 8005c3e:	4613      	mov	r3, r2
 8005c40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c42:	e050      	b.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4a:	d04c      	beq.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d007      	beq.n	8005c62 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c52:	f7fd fff1 	bl	8003c38 <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d241      	bcs.n	8005ce6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	330c      	adds	r3, #12
 8005c68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c6c:	e853 3f00 	ldrex	r3, [r3]
 8005c70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c74:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005c78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	330c      	adds	r3, #12
 8005c80:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005c82:	637a      	str	r2, [r7, #52]	@ 0x34
 8005c84:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c86:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c8a:	e841 2300 	strex	r3, r2, [r1]
 8005c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005c90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1e5      	bne.n	8005c62 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	3314      	adds	r3, #20
 8005c9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	e853 3f00 	ldrex	r3, [r3]
 8005ca4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	f023 0301 	bic.w	r3, r3, #1
 8005cac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	3314      	adds	r3, #20
 8005cb4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005cb6:	623a      	str	r2, [r7, #32]
 8005cb8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	69f9      	ldr	r1, [r7, #28]
 8005cbc:	6a3a      	ldr	r2, [r7, #32]
 8005cbe:	e841 2300 	strex	r3, r2, [r1]
 8005cc2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1e5      	bne.n	8005c96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e00f      	b.n	8005d06 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	bf0c      	ite	eq
 8005cf6:	2301      	moveq	r3, #1
 8005cf8:	2300      	movne	r3, #0
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d09f      	beq.n	8005c44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3740      	adds	r7, #64	@ 0x40
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
	...

08005d10 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b098      	sub	sp, #96	@ 0x60
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005d1e:	68ba      	ldr	r2, [r7, #8]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	88fa      	ldrh	r2, [r7, #6]
 8005d28:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2222      	movs	r2, #34	@ 0x22
 8005d34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d3c:	4a3e      	ldr	r2, [pc, #248]	@ (8005e38 <UART_Start_Receive_DMA+0x128>)
 8005d3e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d44:	4a3d      	ldr	r2, [pc, #244]	@ (8005e3c <UART_Start_Receive_DMA+0x12c>)
 8005d46:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d4c:	4a3c      	ldr	r2, [pc, #240]	@ (8005e40 <UART_Start_Receive_DMA+0x130>)
 8005d4e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d54:	2200      	movs	r2, #0
 8005d56:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005d58:	f107 0308 	add.w	r3, r7, #8
 8005d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3304      	adds	r3, #4
 8005d68:	4619      	mov	r1, r3
 8005d6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	88fb      	ldrh	r3, [r7, #6]
 8005d70:	f7fe f986 	bl	8004080 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005d74:	2300      	movs	r3, #0
 8005d76:	613b      	str	r3, [r7, #16]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	613b      	str	r3, [r7, #16]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	613b      	str	r3, [r7, #16]
 8005d88:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d019      	beq.n	8005dc6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	330c      	adds	r3, #12
 8005d98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d9c:	e853 3f00 	ldrex	r3, [r3]
 8005da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005da4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005da8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	330c      	adds	r3, #12
 8005db0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005db2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005db4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8005db8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005dba:	e841 2300 	strex	r3, r2, [r1]
 8005dbe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005dc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1e5      	bne.n	8005d92 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	3314      	adds	r3, #20
 8005dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dd0:	e853 3f00 	ldrex	r3, [r3]
 8005dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd8:	f043 0301 	orr.w	r3, r3, #1
 8005ddc:	657b      	str	r3, [r7, #84]	@ 0x54
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3314      	adds	r3, #20
 8005de4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005de6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005de8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005dec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005dee:	e841 2300 	strex	r3, r2, [r1]
 8005df2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1e5      	bne.n	8005dc6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	3314      	adds	r3, #20
 8005e00:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	e853 3f00 	ldrex	r3, [r3]
 8005e08:	617b      	str	r3, [r7, #20]
   return(result);
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e10:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3314      	adds	r3, #20
 8005e18:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005e1a:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	6a39      	ldr	r1, [r7, #32]
 8005e20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e22:	e841 2300 	strex	r3, r2, [r1]
 8005e26:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1e5      	bne.n	8005dfa <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3760      	adds	r7, #96	@ 0x60
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}
 8005e38:	08005a37 	.word	0x08005a37
 8005e3c:	08005b63 	.word	0x08005b63
 8005e40:	08005b9f 	.word	0x08005b9f

08005e44 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b089      	sub	sp, #36	@ 0x24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	330c      	adds	r3, #12
 8005e52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	e853 3f00 	ldrex	r3, [r3]
 8005e5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005e62:	61fb      	str	r3, [r7, #28]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	330c      	adds	r3, #12
 8005e6a:	69fa      	ldr	r2, [r7, #28]
 8005e6c:	61ba      	str	r2, [r7, #24]
 8005e6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	6979      	ldr	r1, [r7, #20]
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	613b      	str	r3, [r7, #16]
   return(result);
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e5      	bne.n	8005e4c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2220      	movs	r2, #32
 8005e84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8005e88:	bf00      	nop
 8005e8a:	3724      	adds	r7, #36	@ 0x24
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	bc80      	pop	{r7}
 8005e90:	4770      	bx	lr

08005e92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005e92:	b480      	push	{r7}
 8005e94:	b095      	sub	sp, #84	@ 0x54
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	330c      	adds	r3, #12
 8005ea0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ea4:	e853 3f00 	ldrex	r3, [r3]
 8005ea8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005eb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	330c      	adds	r3, #12
 8005eb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005eba:	643a      	str	r2, [r7, #64]	@ 0x40
 8005ebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005ec0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ec2:	e841 2300 	strex	r3, r2, [r1]
 8005ec6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1e5      	bne.n	8005e9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3314      	adds	r3, #20
 8005ed4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	e853 3f00 	ldrex	r3, [r3]
 8005edc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ede:	69fb      	ldr	r3, [r7, #28]
 8005ee0:	f023 0301 	bic.w	r3, r3, #1
 8005ee4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3314      	adds	r3, #20
 8005eec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005eee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ef4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ef6:	e841 2300 	strex	r3, r2, [r1]
 8005efa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d1e5      	bne.n	8005ece <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d119      	bne.n	8005f3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	330c      	adds	r3, #12
 8005f10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	e853 3f00 	ldrex	r3, [r3]
 8005f18:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	f023 0310 	bic.w	r3, r3, #16
 8005f20:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	330c      	adds	r3, #12
 8005f28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f2a:	61ba      	str	r2, [r7, #24]
 8005f2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2e:	6979      	ldr	r1, [r7, #20]
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	e841 2300 	strex	r3, r2, [r1]
 8005f36:	613b      	str	r3, [r7, #16]
   return(result);
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1e5      	bne.n	8005f0a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2220      	movs	r2, #32
 8005f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005f4c:	bf00      	nop
 8005f4e:	3754      	adds	r7, #84	@ 0x54
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bc80      	pop	{r7}
 8005f54:	4770      	bx	lr

08005f56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f56:	b580      	push	{r7, lr}
 8005f58:	b084      	sub	sp, #16
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f7fd fcb5 	bl	80038e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f76:	bf00      	nop
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005f7e:	b480      	push	{r7}
 8005f80:	b085      	sub	sp, #20
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	2b21      	cmp	r3, #33	@ 0x21
 8005f90:	d13e      	bne.n	8006010 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f9a:	d114      	bne.n	8005fc6 <UART_Transmit_IT+0x48>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d110      	bne.n	8005fc6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6a1b      	ldr	r3, [r3, #32]
 8005fa8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005fb8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6a1b      	ldr	r3, [r3, #32]
 8005fbe:	1c9a      	adds	r2, r3, #2
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	621a      	str	r2, [r3, #32]
 8005fc4:	e008      	b.n	8005fd8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	1c59      	adds	r1, r3, #1
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	6211      	str	r1, [r2, #32]
 8005fd0:	781a      	ldrb	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	3b01      	subs	r3, #1
 8005fe0:	b29b      	uxth	r3, r3
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	4619      	mov	r1, r3
 8005fe6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10f      	bne.n	800600c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68da      	ldr	r2, [r3, #12]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ffa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	68da      	ldr	r2, [r3, #12]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800600a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800600c:	2300      	movs	r3, #0
 800600e:	e000      	b.n	8006012 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006010:	2302      	movs	r3, #2
  }
}
 8006012:	4618      	mov	r0, r3
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	bc80      	pop	{r7}
 800601a:	4770      	bx	lr

0800601c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b082      	sub	sp, #8
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68da      	ldr	r2, [r3, #12]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006032:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2220      	movs	r2, #32
 8006038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f7ff fcdd 	bl	80059fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006042:	2300      	movs	r3, #0
}
 8006044:	4618      	mov	r0, r3
 8006046:	3708      	adds	r7, #8
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b08c      	sub	sp, #48	@ 0x30
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800605a:	b2db      	uxtb	r3, r3
 800605c:	2b22      	cmp	r3, #34	@ 0x22
 800605e:	f040 80ae 	bne.w	80061be <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800606a:	d117      	bne.n	800609c <UART_Receive_IT+0x50>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d113      	bne.n	800609c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006074:	2300      	movs	r3, #0
 8006076:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	b29b      	uxth	r3, r3
 8006086:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800608a:	b29a      	uxth	r2, r3
 800608c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006094:	1c9a      	adds	r2, r3, #2
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	629a      	str	r2, [r3, #40]	@ 0x28
 800609a:	e026      	b.n	80060ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80060a2:	2300      	movs	r3, #0
 80060a4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060ae:	d007      	beq.n	80060c0 <UART_Receive_IT+0x74>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d10a      	bne.n	80060ce <UART_Receive_IT+0x82>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d106      	bne.n	80060ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	b2da      	uxtb	r2, r3
 80060c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ca:	701a      	strb	r2, [r3, #0]
 80060cc:	e008      	b.n	80060e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685b      	ldr	r3, [r3, #4]
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060da:	b2da      	uxtb	r2, r3
 80060dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e4:	1c5a      	adds	r2, r3, #1
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	3b01      	subs	r3, #1
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	4619      	mov	r1, r3
 80060f8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d15d      	bne.n	80061ba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68da      	ldr	r2, [r3, #12]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0220 	bic.w	r2, r2, #32
 800610c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68da      	ldr	r2, [r3, #12]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800611c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	695a      	ldr	r2, [r3, #20]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f022 0201 	bic.w	r2, r2, #1
 800612c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2220      	movs	r2, #32
 8006132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006140:	2b01      	cmp	r3, #1
 8006142:	d135      	bne.n	80061b0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	330c      	adds	r3, #12
 8006150:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	e853 3f00 	ldrex	r3, [r3]
 8006158:	613b      	str	r3, [r7, #16]
   return(result);
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	f023 0310 	bic.w	r3, r3, #16
 8006160:	627b      	str	r3, [r7, #36]	@ 0x24
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	330c      	adds	r3, #12
 8006168:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800616a:	623a      	str	r2, [r7, #32]
 800616c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616e:	69f9      	ldr	r1, [r7, #28]
 8006170:	6a3a      	ldr	r2, [r7, #32]
 8006172:	e841 2300 	strex	r3, r2, [r1]
 8006176:	61bb      	str	r3, [r7, #24]
   return(result);
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d1e5      	bne.n	800614a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 0310 	and.w	r3, r3, #16
 8006188:	2b10      	cmp	r3, #16
 800618a:	d10a      	bne.n	80061a2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800618c:	2300      	movs	r3, #0
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	60fb      	str	r3, [r7, #12]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80061a6:	4619      	mov	r1, r3
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f7ff fc39 	bl	8005a20 <HAL_UARTEx_RxEventCallback>
 80061ae:	e002      	b.n	80061b6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7fd fb9e 	bl	80038f2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80061b6:	2300      	movs	r3, #0
 80061b8:	e002      	b.n	80061c0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	e000      	b.n	80061c0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80061be:	2302      	movs	r3, #2
  }
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3730      	adds	r7, #48	@ 0x30
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68da      	ldr	r2, [r3, #12]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	431a      	orrs	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	695b      	ldr	r3, [r3, #20]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68db      	ldr	r3, [r3, #12]
 80061fe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006202:	f023 030c 	bic.w	r3, r3, #12
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	6812      	ldr	r2, [r2, #0]
 800620a:	68b9      	ldr	r1, [r7, #8]
 800620c:	430b      	orrs	r3, r1
 800620e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a2c      	ldr	r2, [pc, #176]	@ (80062dc <UART_SetConfig+0x114>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d103      	bne.n	8006238 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006230:	f7fe fff6 	bl	8005220 <HAL_RCC_GetPCLK2Freq>
 8006234:	60f8      	str	r0, [r7, #12]
 8006236:	e002      	b.n	800623e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006238:	f7fe ffde 	bl	80051f8 <HAL_RCC_GetPCLK1Freq>
 800623c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	4613      	mov	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	009a      	lsls	r2, r3, #2
 8006248:	441a      	add	r2, r3
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	fbb2 f3f3 	udiv	r3, r2, r3
 8006254:	4a22      	ldr	r2, [pc, #136]	@ (80062e0 <UART_SetConfig+0x118>)
 8006256:	fba2 2303 	umull	r2, r3, r2, r3
 800625a:	095b      	lsrs	r3, r3, #5
 800625c:	0119      	lsls	r1, r3, #4
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	4613      	mov	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	009a      	lsls	r2, r3, #2
 8006268:	441a      	add	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	fbb2 f2f3 	udiv	r2, r2, r3
 8006274:	4b1a      	ldr	r3, [pc, #104]	@ (80062e0 <UART_SetConfig+0x118>)
 8006276:	fba3 0302 	umull	r0, r3, r3, r2
 800627a:	095b      	lsrs	r3, r3, #5
 800627c:	2064      	movs	r0, #100	@ 0x64
 800627e:	fb00 f303 	mul.w	r3, r0, r3
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	011b      	lsls	r3, r3, #4
 8006286:	3332      	adds	r3, #50	@ 0x32
 8006288:	4a15      	ldr	r2, [pc, #84]	@ (80062e0 <UART_SetConfig+0x118>)
 800628a:	fba2 2303 	umull	r2, r3, r2, r3
 800628e:	095b      	lsrs	r3, r3, #5
 8006290:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006294:	4419      	add	r1, r3
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	4613      	mov	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	4413      	add	r3, r2
 800629e:	009a      	lsls	r2, r3, #2
 80062a0:	441a      	add	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80062ac:	4b0c      	ldr	r3, [pc, #48]	@ (80062e0 <UART_SetConfig+0x118>)
 80062ae:	fba3 0302 	umull	r0, r3, r3, r2
 80062b2:	095b      	lsrs	r3, r3, #5
 80062b4:	2064      	movs	r0, #100	@ 0x64
 80062b6:	fb00 f303 	mul.w	r3, r0, r3
 80062ba:	1ad3      	subs	r3, r2, r3
 80062bc:	011b      	lsls	r3, r3, #4
 80062be:	3332      	adds	r3, #50	@ 0x32
 80062c0:	4a07      	ldr	r2, [pc, #28]	@ (80062e0 <UART_SetConfig+0x118>)
 80062c2:	fba2 2303 	umull	r2, r3, r2, r3
 80062c6:	095b      	lsrs	r3, r3, #5
 80062c8:	f003 020f 	and.w	r2, r3, #15
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	440a      	add	r2, r1
 80062d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80062d4:	bf00      	nop
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	40013800 	.word	0x40013800
 80062e0:	51eb851f 	.word	0x51eb851f

080062e4 <main>:


#include "main.h"

int main(void)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	af00      	add	r7, sp, #0
  hwInit();
 80062e8:	f7fd fc34 	bl	8003b54 <hwInit>
  apInit();
 80062ec:	f7fa ff66 	bl	80011bc <apInit>

  apMain();
 80062f0:	f7fa ff76 	bl	80011e0 <apMain>
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	bd80      	pop	{r7, pc}

080062fa <sulp>:
 80062fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062fe:	460f      	mov	r7, r1
 8006300:	4690      	mov	r8, r2
 8006302:	f003 fb59 	bl	80099b8 <__ulp>
 8006306:	4604      	mov	r4, r0
 8006308:	460d      	mov	r5, r1
 800630a:	f1b8 0f00 	cmp.w	r8, #0
 800630e:	d011      	beq.n	8006334 <sulp+0x3a>
 8006310:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006314:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006318:	2b00      	cmp	r3, #0
 800631a:	dd0b      	ble.n	8006334 <sulp+0x3a>
 800631c:	2400      	movs	r4, #0
 800631e:	051b      	lsls	r3, r3, #20
 8006320:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006324:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006328:	4622      	mov	r2, r4
 800632a:	462b      	mov	r3, r5
 800632c:	f7fa f8de 	bl	80004ec <__aeabi_dmul>
 8006330:	4604      	mov	r4, r0
 8006332:	460d      	mov	r5, r1
 8006334:	4620      	mov	r0, r4
 8006336:	4629      	mov	r1, r5
 8006338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800633c:	0000      	movs	r0, r0
	...

08006340 <_strtod_l>:
 8006340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006344:	b09f      	sub	sp, #124	@ 0x7c
 8006346:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006348:	2200      	movs	r2, #0
 800634a:	460c      	mov	r4, r1
 800634c:	921a      	str	r2, [sp, #104]	@ 0x68
 800634e:	f04f 0a00 	mov.w	sl, #0
 8006352:	f04f 0b00 	mov.w	fp, #0
 8006356:	460a      	mov	r2, r1
 8006358:	9005      	str	r0, [sp, #20]
 800635a:	9219      	str	r2, [sp, #100]	@ 0x64
 800635c:	7811      	ldrb	r1, [r2, #0]
 800635e:	292b      	cmp	r1, #43	@ 0x2b
 8006360:	d048      	beq.n	80063f4 <_strtod_l+0xb4>
 8006362:	d836      	bhi.n	80063d2 <_strtod_l+0x92>
 8006364:	290d      	cmp	r1, #13
 8006366:	d830      	bhi.n	80063ca <_strtod_l+0x8a>
 8006368:	2908      	cmp	r1, #8
 800636a:	d830      	bhi.n	80063ce <_strtod_l+0x8e>
 800636c:	2900      	cmp	r1, #0
 800636e:	d039      	beq.n	80063e4 <_strtod_l+0xa4>
 8006370:	2200      	movs	r2, #0
 8006372:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006374:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006376:	782a      	ldrb	r2, [r5, #0]
 8006378:	2a30      	cmp	r2, #48	@ 0x30
 800637a:	f040 80b1 	bne.w	80064e0 <_strtod_l+0x1a0>
 800637e:	786a      	ldrb	r2, [r5, #1]
 8006380:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006384:	2a58      	cmp	r2, #88	@ 0x58
 8006386:	d16c      	bne.n	8006462 <_strtod_l+0x122>
 8006388:	9302      	str	r3, [sp, #8]
 800638a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800638c:	4a8e      	ldr	r2, [pc, #568]	@ (80065c8 <_strtod_l+0x288>)
 800638e:	9301      	str	r3, [sp, #4]
 8006390:	ab1a      	add	r3, sp, #104	@ 0x68
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	9805      	ldr	r0, [sp, #20]
 8006396:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006398:	a919      	add	r1, sp, #100	@ 0x64
 800639a:	f002 fc01 	bl	8008ba0 <__gethex>
 800639e:	f010 060f 	ands.w	r6, r0, #15
 80063a2:	4604      	mov	r4, r0
 80063a4:	d005      	beq.n	80063b2 <_strtod_l+0x72>
 80063a6:	2e06      	cmp	r6, #6
 80063a8:	d126      	bne.n	80063f8 <_strtod_l+0xb8>
 80063aa:	2300      	movs	r3, #0
 80063ac:	3501      	adds	r5, #1
 80063ae:	9519      	str	r5, [sp, #100]	@ 0x64
 80063b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f040 8584 	bne.w	8006ec2 <_strtod_l+0xb82>
 80063ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063bc:	b1bb      	cbz	r3, 80063ee <_strtod_l+0xae>
 80063be:	4650      	mov	r0, sl
 80063c0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80063c4:	b01f      	add	sp, #124	@ 0x7c
 80063c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ca:	2920      	cmp	r1, #32
 80063cc:	d1d0      	bne.n	8006370 <_strtod_l+0x30>
 80063ce:	3201      	adds	r2, #1
 80063d0:	e7c3      	b.n	800635a <_strtod_l+0x1a>
 80063d2:	292d      	cmp	r1, #45	@ 0x2d
 80063d4:	d1cc      	bne.n	8006370 <_strtod_l+0x30>
 80063d6:	2101      	movs	r1, #1
 80063d8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80063da:	1c51      	adds	r1, r2, #1
 80063dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80063de:	7852      	ldrb	r2, [r2, #1]
 80063e0:	2a00      	cmp	r2, #0
 80063e2:	d1c7      	bne.n	8006374 <_strtod_l+0x34>
 80063e4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80063e6:	9419      	str	r4, [sp, #100]	@ 0x64
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f040 8568 	bne.w	8006ebe <_strtod_l+0xb7e>
 80063ee:	4650      	mov	r0, sl
 80063f0:	4659      	mov	r1, fp
 80063f2:	e7e7      	b.n	80063c4 <_strtod_l+0x84>
 80063f4:	2100      	movs	r1, #0
 80063f6:	e7ef      	b.n	80063d8 <_strtod_l+0x98>
 80063f8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80063fa:	b13a      	cbz	r2, 800640c <_strtod_l+0xcc>
 80063fc:	2135      	movs	r1, #53	@ 0x35
 80063fe:	a81c      	add	r0, sp, #112	@ 0x70
 8006400:	f003 fbca 	bl	8009b98 <__copybits>
 8006404:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006406:	9805      	ldr	r0, [sp, #20]
 8006408:	f002 ffa4 	bl	8009354 <_Bfree>
 800640c:	3e01      	subs	r6, #1
 800640e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006410:	2e04      	cmp	r6, #4
 8006412:	d806      	bhi.n	8006422 <_strtod_l+0xe2>
 8006414:	e8df f006 	tbb	[pc, r6]
 8006418:	201d0314 	.word	0x201d0314
 800641c:	14          	.byte	0x14
 800641d:	00          	.byte	0x00
 800641e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006422:	05e1      	lsls	r1, r4, #23
 8006424:	bf48      	it	mi
 8006426:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800642a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800642e:	0d1b      	lsrs	r3, r3, #20
 8006430:	051b      	lsls	r3, r3, #20
 8006432:	2b00      	cmp	r3, #0
 8006434:	d1bd      	bne.n	80063b2 <_strtod_l+0x72>
 8006436:	f001 fc55 	bl	8007ce4 <__errno>
 800643a:	2322      	movs	r3, #34	@ 0x22
 800643c:	6003      	str	r3, [r0, #0]
 800643e:	e7b8      	b.n	80063b2 <_strtod_l+0x72>
 8006440:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006444:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006448:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800644c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006450:	e7e7      	b.n	8006422 <_strtod_l+0xe2>
 8006452:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80065cc <_strtod_l+0x28c>
 8006456:	e7e4      	b.n	8006422 <_strtod_l+0xe2>
 8006458:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800645c:	f04f 3aff 	mov.w	sl, #4294967295
 8006460:	e7df      	b.n	8006422 <_strtod_l+0xe2>
 8006462:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	9219      	str	r2, [sp, #100]	@ 0x64
 8006468:	785b      	ldrb	r3, [r3, #1]
 800646a:	2b30      	cmp	r3, #48	@ 0x30
 800646c:	d0f9      	beq.n	8006462 <_strtod_l+0x122>
 800646e:	2b00      	cmp	r3, #0
 8006470:	d09f      	beq.n	80063b2 <_strtod_l+0x72>
 8006472:	2301      	movs	r3, #1
 8006474:	9309      	str	r3, [sp, #36]	@ 0x24
 8006476:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006478:	220a      	movs	r2, #10
 800647a:	930c      	str	r3, [sp, #48]	@ 0x30
 800647c:	2300      	movs	r3, #0
 800647e:	461f      	mov	r7, r3
 8006480:	9308      	str	r3, [sp, #32]
 8006482:	930a      	str	r3, [sp, #40]	@ 0x28
 8006484:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006486:	7805      	ldrb	r5, [r0, #0]
 8006488:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800648c:	b2d9      	uxtb	r1, r3
 800648e:	2909      	cmp	r1, #9
 8006490:	d928      	bls.n	80064e4 <_strtod_l+0x1a4>
 8006492:	2201      	movs	r2, #1
 8006494:	494e      	ldr	r1, [pc, #312]	@ (80065d0 <_strtod_l+0x290>)
 8006496:	f001 fb9d 	bl	8007bd4 <strncmp>
 800649a:	2800      	cmp	r0, #0
 800649c:	d032      	beq.n	8006504 <_strtod_l+0x1c4>
 800649e:	2000      	movs	r0, #0
 80064a0:	462a      	mov	r2, r5
 80064a2:	4681      	mov	r9, r0
 80064a4:	463d      	mov	r5, r7
 80064a6:	4603      	mov	r3, r0
 80064a8:	2a65      	cmp	r2, #101	@ 0x65
 80064aa:	d001      	beq.n	80064b0 <_strtod_l+0x170>
 80064ac:	2a45      	cmp	r2, #69	@ 0x45
 80064ae:	d114      	bne.n	80064da <_strtod_l+0x19a>
 80064b0:	b91d      	cbnz	r5, 80064ba <_strtod_l+0x17a>
 80064b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80064b4:	4302      	orrs	r2, r0
 80064b6:	d095      	beq.n	80063e4 <_strtod_l+0xa4>
 80064b8:	2500      	movs	r5, #0
 80064ba:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80064bc:	1c62      	adds	r2, r4, #1
 80064be:	9219      	str	r2, [sp, #100]	@ 0x64
 80064c0:	7862      	ldrb	r2, [r4, #1]
 80064c2:	2a2b      	cmp	r2, #43	@ 0x2b
 80064c4:	d077      	beq.n	80065b6 <_strtod_l+0x276>
 80064c6:	2a2d      	cmp	r2, #45	@ 0x2d
 80064c8:	d07b      	beq.n	80065c2 <_strtod_l+0x282>
 80064ca:	f04f 0c00 	mov.w	ip, #0
 80064ce:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80064d2:	2909      	cmp	r1, #9
 80064d4:	f240 8082 	bls.w	80065dc <_strtod_l+0x29c>
 80064d8:	9419      	str	r4, [sp, #100]	@ 0x64
 80064da:	f04f 0800 	mov.w	r8, #0
 80064de:	e0a2      	b.n	8006626 <_strtod_l+0x2e6>
 80064e0:	2300      	movs	r3, #0
 80064e2:	e7c7      	b.n	8006474 <_strtod_l+0x134>
 80064e4:	2f08      	cmp	r7, #8
 80064e6:	bfd5      	itete	le
 80064e8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80064ea:	9908      	ldrgt	r1, [sp, #32]
 80064ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80064f0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80064f4:	f100 0001 	add.w	r0, r0, #1
 80064f8:	bfd4      	ite	le
 80064fa:	930a      	strle	r3, [sp, #40]	@ 0x28
 80064fc:	9308      	strgt	r3, [sp, #32]
 80064fe:	3701      	adds	r7, #1
 8006500:	9019      	str	r0, [sp, #100]	@ 0x64
 8006502:	e7bf      	b.n	8006484 <_strtod_l+0x144>
 8006504:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006506:	1c5a      	adds	r2, r3, #1
 8006508:	9219      	str	r2, [sp, #100]	@ 0x64
 800650a:	785a      	ldrb	r2, [r3, #1]
 800650c:	b37f      	cbz	r7, 800656e <_strtod_l+0x22e>
 800650e:	4681      	mov	r9, r0
 8006510:	463d      	mov	r5, r7
 8006512:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006516:	2b09      	cmp	r3, #9
 8006518:	d912      	bls.n	8006540 <_strtod_l+0x200>
 800651a:	2301      	movs	r3, #1
 800651c:	e7c4      	b.n	80064a8 <_strtod_l+0x168>
 800651e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006520:	3001      	adds	r0, #1
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	9219      	str	r2, [sp, #100]	@ 0x64
 8006526:	785a      	ldrb	r2, [r3, #1]
 8006528:	2a30      	cmp	r2, #48	@ 0x30
 800652a:	d0f8      	beq.n	800651e <_strtod_l+0x1de>
 800652c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006530:	2b08      	cmp	r3, #8
 8006532:	f200 84cb 	bhi.w	8006ecc <_strtod_l+0xb8c>
 8006536:	4681      	mov	r9, r0
 8006538:	2000      	movs	r0, #0
 800653a:	4605      	mov	r5, r0
 800653c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800653e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006540:	3a30      	subs	r2, #48	@ 0x30
 8006542:	f100 0301 	add.w	r3, r0, #1
 8006546:	d02a      	beq.n	800659e <_strtod_l+0x25e>
 8006548:	4499      	add	r9, r3
 800654a:	210a      	movs	r1, #10
 800654c:	462b      	mov	r3, r5
 800654e:	eb00 0c05 	add.w	ip, r0, r5
 8006552:	4563      	cmp	r3, ip
 8006554:	d10d      	bne.n	8006572 <_strtod_l+0x232>
 8006556:	1c69      	adds	r1, r5, #1
 8006558:	4401      	add	r1, r0
 800655a:	4428      	add	r0, r5
 800655c:	2808      	cmp	r0, #8
 800655e:	dc16      	bgt.n	800658e <_strtod_l+0x24e>
 8006560:	230a      	movs	r3, #10
 8006562:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006564:	fb03 2300 	mla	r3, r3, r0, r2
 8006568:	930a      	str	r3, [sp, #40]	@ 0x28
 800656a:	2300      	movs	r3, #0
 800656c:	e018      	b.n	80065a0 <_strtod_l+0x260>
 800656e:	4638      	mov	r0, r7
 8006570:	e7da      	b.n	8006528 <_strtod_l+0x1e8>
 8006572:	2b08      	cmp	r3, #8
 8006574:	f103 0301 	add.w	r3, r3, #1
 8006578:	dc03      	bgt.n	8006582 <_strtod_l+0x242>
 800657a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800657c:	434e      	muls	r6, r1
 800657e:	960a      	str	r6, [sp, #40]	@ 0x28
 8006580:	e7e7      	b.n	8006552 <_strtod_l+0x212>
 8006582:	2b10      	cmp	r3, #16
 8006584:	bfde      	ittt	le
 8006586:	9e08      	ldrle	r6, [sp, #32]
 8006588:	434e      	mulle	r6, r1
 800658a:	9608      	strle	r6, [sp, #32]
 800658c:	e7e1      	b.n	8006552 <_strtod_l+0x212>
 800658e:	280f      	cmp	r0, #15
 8006590:	dceb      	bgt.n	800656a <_strtod_l+0x22a>
 8006592:	230a      	movs	r3, #10
 8006594:	9808      	ldr	r0, [sp, #32]
 8006596:	fb03 2300 	mla	r3, r3, r0, r2
 800659a:	9308      	str	r3, [sp, #32]
 800659c:	e7e5      	b.n	800656a <_strtod_l+0x22a>
 800659e:	4629      	mov	r1, r5
 80065a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80065a2:	460d      	mov	r5, r1
 80065a4:	1c50      	adds	r0, r2, #1
 80065a6:	9019      	str	r0, [sp, #100]	@ 0x64
 80065a8:	7852      	ldrb	r2, [r2, #1]
 80065aa:	4618      	mov	r0, r3
 80065ac:	e7b1      	b.n	8006512 <_strtod_l+0x1d2>
 80065ae:	f04f 0900 	mov.w	r9, #0
 80065b2:	2301      	movs	r3, #1
 80065b4:	e77d      	b.n	80064b2 <_strtod_l+0x172>
 80065b6:	f04f 0c00 	mov.w	ip, #0
 80065ba:	1ca2      	adds	r2, r4, #2
 80065bc:	9219      	str	r2, [sp, #100]	@ 0x64
 80065be:	78a2      	ldrb	r2, [r4, #2]
 80065c0:	e785      	b.n	80064ce <_strtod_l+0x18e>
 80065c2:	f04f 0c01 	mov.w	ip, #1
 80065c6:	e7f8      	b.n	80065ba <_strtod_l+0x27a>
 80065c8:	0800aa84 	.word	0x0800aa84
 80065cc:	7ff00000 	.word	0x7ff00000
 80065d0:	0800aa6e 	.word	0x0800aa6e
 80065d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80065d6:	1c51      	adds	r1, r2, #1
 80065d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80065da:	7852      	ldrb	r2, [r2, #1]
 80065dc:	2a30      	cmp	r2, #48	@ 0x30
 80065de:	d0f9      	beq.n	80065d4 <_strtod_l+0x294>
 80065e0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80065e4:	2908      	cmp	r1, #8
 80065e6:	f63f af78 	bhi.w	80064da <_strtod_l+0x19a>
 80065ea:	f04f 080a 	mov.w	r8, #10
 80065ee:	3a30      	subs	r2, #48	@ 0x30
 80065f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80065f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80065f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80065f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80065f8:	1c56      	adds	r6, r2, #1
 80065fa:	9619      	str	r6, [sp, #100]	@ 0x64
 80065fc:	7852      	ldrb	r2, [r2, #1]
 80065fe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006602:	f1be 0f09 	cmp.w	lr, #9
 8006606:	d939      	bls.n	800667c <_strtod_l+0x33c>
 8006608:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800660a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800660e:	1a76      	subs	r6, r6, r1
 8006610:	2e08      	cmp	r6, #8
 8006612:	dc03      	bgt.n	800661c <_strtod_l+0x2dc>
 8006614:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006616:	4588      	cmp	r8, r1
 8006618:	bfa8      	it	ge
 800661a:	4688      	movge	r8, r1
 800661c:	f1bc 0f00 	cmp.w	ip, #0
 8006620:	d001      	beq.n	8006626 <_strtod_l+0x2e6>
 8006622:	f1c8 0800 	rsb	r8, r8, #0
 8006626:	2d00      	cmp	r5, #0
 8006628:	d14e      	bne.n	80066c8 <_strtod_l+0x388>
 800662a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800662c:	4308      	orrs	r0, r1
 800662e:	f47f aec0 	bne.w	80063b2 <_strtod_l+0x72>
 8006632:	2b00      	cmp	r3, #0
 8006634:	f47f aed6 	bne.w	80063e4 <_strtod_l+0xa4>
 8006638:	2a69      	cmp	r2, #105	@ 0x69
 800663a:	d028      	beq.n	800668e <_strtod_l+0x34e>
 800663c:	dc25      	bgt.n	800668a <_strtod_l+0x34a>
 800663e:	2a49      	cmp	r2, #73	@ 0x49
 8006640:	d025      	beq.n	800668e <_strtod_l+0x34e>
 8006642:	2a4e      	cmp	r2, #78	@ 0x4e
 8006644:	f47f aece 	bne.w	80063e4 <_strtod_l+0xa4>
 8006648:	499a      	ldr	r1, [pc, #616]	@ (80068b4 <_strtod_l+0x574>)
 800664a:	a819      	add	r0, sp, #100	@ 0x64
 800664c:	f002 fcca 	bl	8008fe4 <__match>
 8006650:	2800      	cmp	r0, #0
 8006652:	f43f aec7 	beq.w	80063e4 <_strtod_l+0xa4>
 8006656:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	2b28      	cmp	r3, #40	@ 0x28
 800665c:	d12e      	bne.n	80066bc <_strtod_l+0x37c>
 800665e:	4996      	ldr	r1, [pc, #600]	@ (80068b8 <_strtod_l+0x578>)
 8006660:	aa1c      	add	r2, sp, #112	@ 0x70
 8006662:	a819      	add	r0, sp, #100	@ 0x64
 8006664:	f002 fcd2 	bl	800900c <__hexnan>
 8006668:	2805      	cmp	r0, #5
 800666a:	d127      	bne.n	80066bc <_strtod_l+0x37c>
 800666c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800666e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006672:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006676:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800667a:	e69a      	b.n	80063b2 <_strtod_l+0x72>
 800667c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800667e:	fb08 2101 	mla	r1, r8, r1, r2
 8006682:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006686:	920e      	str	r2, [sp, #56]	@ 0x38
 8006688:	e7b5      	b.n	80065f6 <_strtod_l+0x2b6>
 800668a:	2a6e      	cmp	r2, #110	@ 0x6e
 800668c:	e7da      	b.n	8006644 <_strtod_l+0x304>
 800668e:	498b      	ldr	r1, [pc, #556]	@ (80068bc <_strtod_l+0x57c>)
 8006690:	a819      	add	r0, sp, #100	@ 0x64
 8006692:	f002 fca7 	bl	8008fe4 <__match>
 8006696:	2800      	cmp	r0, #0
 8006698:	f43f aea4 	beq.w	80063e4 <_strtod_l+0xa4>
 800669c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800669e:	4988      	ldr	r1, [pc, #544]	@ (80068c0 <_strtod_l+0x580>)
 80066a0:	3b01      	subs	r3, #1
 80066a2:	a819      	add	r0, sp, #100	@ 0x64
 80066a4:	9319      	str	r3, [sp, #100]	@ 0x64
 80066a6:	f002 fc9d 	bl	8008fe4 <__match>
 80066aa:	b910      	cbnz	r0, 80066b2 <_strtod_l+0x372>
 80066ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80066ae:	3301      	adds	r3, #1
 80066b0:	9319      	str	r3, [sp, #100]	@ 0x64
 80066b2:	f04f 0a00 	mov.w	sl, #0
 80066b6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80068c4 <_strtod_l+0x584>
 80066ba:	e67a      	b.n	80063b2 <_strtod_l+0x72>
 80066bc:	4882      	ldr	r0, [pc, #520]	@ (80068c8 <_strtod_l+0x588>)
 80066be:	f001 fb63 	bl	8007d88 <nan>
 80066c2:	4682      	mov	sl, r0
 80066c4:	468b      	mov	fp, r1
 80066c6:	e674      	b.n	80063b2 <_strtod_l+0x72>
 80066c8:	eba8 0309 	sub.w	r3, r8, r9
 80066cc:	2f00      	cmp	r7, #0
 80066ce:	bf08      	it	eq
 80066d0:	462f      	moveq	r7, r5
 80066d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80066d4:	2d10      	cmp	r5, #16
 80066d6:	462c      	mov	r4, r5
 80066d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80066da:	bfa8      	it	ge
 80066dc:	2410      	movge	r4, #16
 80066de:	f7f9 fe8b 	bl	80003f8 <__aeabi_ui2d>
 80066e2:	2d09      	cmp	r5, #9
 80066e4:	4682      	mov	sl, r0
 80066e6:	468b      	mov	fp, r1
 80066e8:	dc11      	bgt.n	800670e <_strtod_l+0x3ce>
 80066ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f43f ae60 	beq.w	80063b2 <_strtod_l+0x72>
 80066f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066f4:	dd76      	ble.n	80067e4 <_strtod_l+0x4a4>
 80066f6:	2b16      	cmp	r3, #22
 80066f8:	dc5d      	bgt.n	80067b6 <_strtod_l+0x476>
 80066fa:	4974      	ldr	r1, [pc, #464]	@ (80068cc <_strtod_l+0x58c>)
 80066fc:	4652      	mov	r2, sl
 80066fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006702:	465b      	mov	r3, fp
 8006704:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006708:	f7f9 fef0 	bl	80004ec <__aeabi_dmul>
 800670c:	e7d9      	b.n	80066c2 <_strtod_l+0x382>
 800670e:	4b6f      	ldr	r3, [pc, #444]	@ (80068cc <_strtod_l+0x58c>)
 8006710:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006714:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006718:	f7f9 fee8 	bl	80004ec <__aeabi_dmul>
 800671c:	4682      	mov	sl, r0
 800671e:	9808      	ldr	r0, [sp, #32]
 8006720:	468b      	mov	fp, r1
 8006722:	f7f9 fe69 	bl	80003f8 <__aeabi_ui2d>
 8006726:	4602      	mov	r2, r0
 8006728:	460b      	mov	r3, r1
 800672a:	4650      	mov	r0, sl
 800672c:	4659      	mov	r1, fp
 800672e:	f7f9 fd27 	bl	8000180 <__adddf3>
 8006732:	2d0f      	cmp	r5, #15
 8006734:	4682      	mov	sl, r0
 8006736:	468b      	mov	fp, r1
 8006738:	ddd7      	ble.n	80066ea <_strtod_l+0x3aa>
 800673a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800673c:	1b2c      	subs	r4, r5, r4
 800673e:	441c      	add	r4, r3
 8006740:	2c00      	cmp	r4, #0
 8006742:	f340 8096 	ble.w	8006872 <_strtod_l+0x532>
 8006746:	f014 030f 	ands.w	r3, r4, #15
 800674a:	d00a      	beq.n	8006762 <_strtod_l+0x422>
 800674c:	495f      	ldr	r1, [pc, #380]	@ (80068cc <_strtod_l+0x58c>)
 800674e:	4652      	mov	r2, sl
 8006750:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006754:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006758:	465b      	mov	r3, fp
 800675a:	f7f9 fec7 	bl	80004ec <__aeabi_dmul>
 800675e:	4682      	mov	sl, r0
 8006760:	468b      	mov	fp, r1
 8006762:	f034 040f 	bics.w	r4, r4, #15
 8006766:	d073      	beq.n	8006850 <_strtod_l+0x510>
 8006768:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800676c:	dd48      	ble.n	8006800 <_strtod_l+0x4c0>
 800676e:	2400      	movs	r4, #0
 8006770:	46a0      	mov	r8, r4
 8006772:	46a1      	mov	r9, r4
 8006774:	940a      	str	r4, [sp, #40]	@ 0x28
 8006776:	2322      	movs	r3, #34	@ 0x22
 8006778:	f04f 0a00 	mov.w	sl, #0
 800677c:	9a05      	ldr	r2, [sp, #20]
 800677e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80068c4 <_strtod_l+0x584>
 8006782:	6013      	str	r3, [r2, #0]
 8006784:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006786:	2b00      	cmp	r3, #0
 8006788:	f43f ae13 	beq.w	80063b2 <_strtod_l+0x72>
 800678c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800678e:	9805      	ldr	r0, [sp, #20]
 8006790:	f002 fde0 	bl	8009354 <_Bfree>
 8006794:	4649      	mov	r1, r9
 8006796:	9805      	ldr	r0, [sp, #20]
 8006798:	f002 fddc 	bl	8009354 <_Bfree>
 800679c:	4641      	mov	r1, r8
 800679e:	9805      	ldr	r0, [sp, #20]
 80067a0:	f002 fdd8 	bl	8009354 <_Bfree>
 80067a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80067a6:	9805      	ldr	r0, [sp, #20]
 80067a8:	f002 fdd4 	bl	8009354 <_Bfree>
 80067ac:	4621      	mov	r1, r4
 80067ae:	9805      	ldr	r0, [sp, #20]
 80067b0:	f002 fdd0 	bl	8009354 <_Bfree>
 80067b4:	e5fd      	b.n	80063b2 <_strtod_l+0x72>
 80067b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80067b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80067bc:	4293      	cmp	r3, r2
 80067be:	dbbc      	blt.n	800673a <_strtod_l+0x3fa>
 80067c0:	4c42      	ldr	r4, [pc, #264]	@ (80068cc <_strtod_l+0x58c>)
 80067c2:	f1c5 050f 	rsb	r5, r5, #15
 80067c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80067ca:	4652      	mov	r2, sl
 80067cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067d0:	465b      	mov	r3, fp
 80067d2:	f7f9 fe8b 	bl	80004ec <__aeabi_dmul>
 80067d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067d8:	1b5d      	subs	r5, r3, r5
 80067da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80067de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80067e2:	e791      	b.n	8006708 <_strtod_l+0x3c8>
 80067e4:	3316      	adds	r3, #22
 80067e6:	dba8      	blt.n	800673a <_strtod_l+0x3fa>
 80067e8:	4b38      	ldr	r3, [pc, #224]	@ (80068cc <_strtod_l+0x58c>)
 80067ea:	eba9 0808 	sub.w	r8, r9, r8
 80067ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80067f2:	4650      	mov	r0, sl
 80067f4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80067f8:	4659      	mov	r1, fp
 80067fa:	f7f9 ffa1 	bl	8000740 <__aeabi_ddiv>
 80067fe:	e760      	b.n	80066c2 <_strtod_l+0x382>
 8006800:	4b33      	ldr	r3, [pc, #204]	@ (80068d0 <_strtod_l+0x590>)
 8006802:	4650      	mov	r0, sl
 8006804:	9308      	str	r3, [sp, #32]
 8006806:	2300      	movs	r3, #0
 8006808:	4659      	mov	r1, fp
 800680a:	461e      	mov	r6, r3
 800680c:	1124      	asrs	r4, r4, #4
 800680e:	2c01      	cmp	r4, #1
 8006810:	dc21      	bgt.n	8006856 <_strtod_l+0x516>
 8006812:	b10b      	cbz	r3, 8006818 <_strtod_l+0x4d8>
 8006814:	4682      	mov	sl, r0
 8006816:	468b      	mov	fp, r1
 8006818:	492d      	ldr	r1, [pc, #180]	@ (80068d0 <_strtod_l+0x590>)
 800681a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800681e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006822:	4652      	mov	r2, sl
 8006824:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006828:	465b      	mov	r3, fp
 800682a:	f7f9 fe5f 	bl	80004ec <__aeabi_dmul>
 800682e:	4b25      	ldr	r3, [pc, #148]	@ (80068c4 <_strtod_l+0x584>)
 8006830:	460a      	mov	r2, r1
 8006832:	400b      	ands	r3, r1
 8006834:	4927      	ldr	r1, [pc, #156]	@ (80068d4 <_strtod_l+0x594>)
 8006836:	4682      	mov	sl, r0
 8006838:	428b      	cmp	r3, r1
 800683a:	d898      	bhi.n	800676e <_strtod_l+0x42e>
 800683c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006840:	428b      	cmp	r3, r1
 8006842:	bf86      	itte	hi
 8006844:	f04f 3aff 	movhi.w	sl, #4294967295
 8006848:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80068d8 <_strtod_l+0x598>
 800684c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006850:	2300      	movs	r3, #0
 8006852:	9308      	str	r3, [sp, #32]
 8006854:	e07a      	b.n	800694c <_strtod_l+0x60c>
 8006856:	07e2      	lsls	r2, r4, #31
 8006858:	d505      	bpl.n	8006866 <_strtod_l+0x526>
 800685a:	9b08      	ldr	r3, [sp, #32]
 800685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006860:	f7f9 fe44 	bl	80004ec <__aeabi_dmul>
 8006864:	2301      	movs	r3, #1
 8006866:	9a08      	ldr	r2, [sp, #32]
 8006868:	3601      	adds	r6, #1
 800686a:	3208      	adds	r2, #8
 800686c:	1064      	asrs	r4, r4, #1
 800686e:	9208      	str	r2, [sp, #32]
 8006870:	e7cd      	b.n	800680e <_strtod_l+0x4ce>
 8006872:	d0ed      	beq.n	8006850 <_strtod_l+0x510>
 8006874:	4264      	negs	r4, r4
 8006876:	f014 020f 	ands.w	r2, r4, #15
 800687a:	d00a      	beq.n	8006892 <_strtod_l+0x552>
 800687c:	4b13      	ldr	r3, [pc, #76]	@ (80068cc <_strtod_l+0x58c>)
 800687e:	4650      	mov	r0, sl
 8006880:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006884:	4659      	mov	r1, fp
 8006886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800688a:	f7f9 ff59 	bl	8000740 <__aeabi_ddiv>
 800688e:	4682      	mov	sl, r0
 8006890:	468b      	mov	fp, r1
 8006892:	1124      	asrs	r4, r4, #4
 8006894:	d0dc      	beq.n	8006850 <_strtod_l+0x510>
 8006896:	2c1f      	cmp	r4, #31
 8006898:	dd20      	ble.n	80068dc <_strtod_l+0x59c>
 800689a:	2400      	movs	r4, #0
 800689c:	46a0      	mov	r8, r4
 800689e:	46a1      	mov	r9, r4
 80068a0:	940a      	str	r4, [sp, #40]	@ 0x28
 80068a2:	2322      	movs	r3, #34	@ 0x22
 80068a4:	9a05      	ldr	r2, [sp, #20]
 80068a6:	f04f 0a00 	mov.w	sl, #0
 80068aa:	f04f 0b00 	mov.w	fp, #0
 80068ae:	6013      	str	r3, [r2, #0]
 80068b0:	e768      	b.n	8006784 <_strtod_l+0x444>
 80068b2:	bf00      	nop
 80068b4:	0800abce 	.word	0x0800abce
 80068b8:	0800aa70 	.word	0x0800aa70
 80068bc:	0800abc6 	.word	0x0800abc6
 80068c0:	0800ac00 	.word	0x0800ac00
 80068c4:	7ff00000 	.word	0x7ff00000
 80068c8:	0800ae8c 	.word	0x0800ae8c
 80068cc:	0800ad78 	.word	0x0800ad78
 80068d0:	0800ad50 	.word	0x0800ad50
 80068d4:	7ca00000 	.word	0x7ca00000
 80068d8:	7fefffff 	.word	0x7fefffff
 80068dc:	f014 0310 	ands.w	r3, r4, #16
 80068e0:	bf18      	it	ne
 80068e2:	236a      	movne	r3, #106	@ 0x6a
 80068e4:	4650      	mov	r0, sl
 80068e6:	9308      	str	r3, [sp, #32]
 80068e8:	4659      	mov	r1, fp
 80068ea:	2300      	movs	r3, #0
 80068ec:	4ea9      	ldr	r6, [pc, #676]	@ (8006b94 <_strtod_l+0x854>)
 80068ee:	07e2      	lsls	r2, r4, #31
 80068f0:	d504      	bpl.n	80068fc <_strtod_l+0x5bc>
 80068f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80068f6:	f7f9 fdf9 	bl	80004ec <__aeabi_dmul>
 80068fa:	2301      	movs	r3, #1
 80068fc:	1064      	asrs	r4, r4, #1
 80068fe:	f106 0608 	add.w	r6, r6, #8
 8006902:	d1f4      	bne.n	80068ee <_strtod_l+0x5ae>
 8006904:	b10b      	cbz	r3, 800690a <_strtod_l+0x5ca>
 8006906:	4682      	mov	sl, r0
 8006908:	468b      	mov	fp, r1
 800690a:	9b08      	ldr	r3, [sp, #32]
 800690c:	b1b3      	cbz	r3, 800693c <_strtod_l+0x5fc>
 800690e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006912:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006916:	2b00      	cmp	r3, #0
 8006918:	4659      	mov	r1, fp
 800691a:	dd0f      	ble.n	800693c <_strtod_l+0x5fc>
 800691c:	2b1f      	cmp	r3, #31
 800691e:	dd57      	ble.n	80069d0 <_strtod_l+0x690>
 8006920:	2b34      	cmp	r3, #52	@ 0x34
 8006922:	bfd8      	it	le
 8006924:	f04f 33ff 	movle.w	r3, #4294967295
 8006928:	f04f 0a00 	mov.w	sl, #0
 800692c:	bfcf      	iteee	gt
 800692e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006932:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006936:	4093      	lslle	r3, r2
 8006938:	ea03 0b01 	andle.w	fp, r3, r1
 800693c:	2200      	movs	r2, #0
 800693e:	2300      	movs	r3, #0
 8006940:	4650      	mov	r0, sl
 8006942:	4659      	mov	r1, fp
 8006944:	f7fa f83a 	bl	80009bc <__aeabi_dcmpeq>
 8006948:	2800      	cmp	r0, #0
 800694a:	d1a6      	bne.n	800689a <_strtod_l+0x55a>
 800694c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800694e:	463a      	mov	r2, r7
 8006950:	9300      	str	r3, [sp, #0]
 8006952:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006954:	462b      	mov	r3, r5
 8006956:	9805      	ldr	r0, [sp, #20]
 8006958:	f002 fd64 	bl	8009424 <__s2b>
 800695c:	900a      	str	r0, [sp, #40]	@ 0x28
 800695e:	2800      	cmp	r0, #0
 8006960:	f43f af05 	beq.w	800676e <_strtod_l+0x42e>
 8006964:	2400      	movs	r4, #0
 8006966:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006968:	eba9 0308 	sub.w	r3, r9, r8
 800696c:	2a00      	cmp	r2, #0
 800696e:	bfa8      	it	ge
 8006970:	2300      	movge	r3, #0
 8006972:	46a0      	mov	r8, r4
 8006974:	9312      	str	r3, [sp, #72]	@ 0x48
 8006976:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800697a:	9316      	str	r3, [sp, #88]	@ 0x58
 800697c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800697e:	9805      	ldr	r0, [sp, #20]
 8006980:	6859      	ldr	r1, [r3, #4]
 8006982:	f002 fca7 	bl	80092d4 <_Balloc>
 8006986:	4681      	mov	r9, r0
 8006988:	2800      	cmp	r0, #0
 800698a:	f43f aef4 	beq.w	8006776 <_strtod_l+0x436>
 800698e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006990:	300c      	adds	r0, #12
 8006992:	691a      	ldr	r2, [r3, #16]
 8006994:	f103 010c 	add.w	r1, r3, #12
 8006998:	3202      	adds	r2, #2
 800699a:	0092      	lsls	r2, r2, #2
 800699c:	f001 f9e5 	bl	8007d6a <memcpy>
 80069a0:	ab1c      	add	r3, sp, #112	@ 0x70
 80069a2:	9301      	str	r3, [sp, #4]
 80069a4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80069a6:	9300      	str	r3, [sp, #0]
 80069a8:	4652      	mov	r2, sl
 80069aa:	465b      	mov	r3, fp
 80069ac:	9805      	ldr	r0, [sp, #20]
 80069ae:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80069b2:	f003 f869 	bl	8009a88 <__d2b>
 80069b6:	901a      	str	r0, [sp, #104]	@ 0x68
 80069b8:	2800      	cmp	r0, #0
 80069ba:	f43f aedc 	beq.w	8006776 <_strtod_l+0x436>
 80069be:	2101      	movs	r1, #1
 80069c0:	9805      	ldr	r0, [sp, #20]
 80069c2:	f002 fdc5 	bl	8009550 <__i2b>
 80069c6:	4680      	mov	r8, r0
 80069c8:	b948      	cbnz	r0, 80069de <_strtod_l+0x69e>
 80069ca:	f04f 0800 	mov.w	r8, #0
 80069ce:	e6d2      	b.n	8006776 <_strtod_l+0x436>
 80069d0:	f04f 32ff 	mov.w	r2, #4294967295
 80069d4:	fa02 f303 	lsl.w	r3, r2, r3
 80069d8:	ea03 0a0a 	and.w	sl, r3, sl
 80069dc:	e7ae      	b.n	800693c <_strtod_l+0x5fc>
 80069de:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80069e0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80069e2:	2d00      	cmp	r5, #0
 80069e4:	bfab      	itete	ge
 80069e6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80069e8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80069ea:	18ef      	addge	r7, r5, r3
 80069ec:	1b5e      	sublt	r6, r3, r5
 80069ee:	9b08      	ldr	r3, [sp, #32]
 80069f0:	bfa8      	it	ge
 80069f2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80069f4:	eba5 0503 	sub.w	r5, r5, r3
 80069f8:	4415      	add	r5, r2
 80069fa:	4b67      	ldr	r3, [pc, #412]	@ (8006b98 <_strtod_l+0x858>)
 80069fc:	f105 35ff 	add.w	r5, r5, #4294967295
 8006a00:	bfb8      	it	lt
 8006a02:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006a04:	429d      	cmp	r5, r3
 8006a06:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006a0a:	da50      	bge.n	8006aae <_strtod_l+0x76e>
 8006a0c:	1b5b      	subs	r3, r3, r5
 8006a0e:	2b1f      	cmp	r3, #31
 8006a10:	f04f 0101 	mov.w	r1, #1
 8006a14:	eba2 0203 	sub.w	r2, r2, r3
 8006a18:	dc3d      	bgt.n	8006a96 <_strtod_l+0x756>
 8006a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a1e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006a20:	2300      	movs	r3, #0
 8006a22:	9310      	str	r3, [sp, #64]	@ 0x40
 8006a24:	18bd      	adds	r5, r7, r2
 8006a26:	9b08      	ldr	r3, [sp, #32]
 8006a28:	42af      	cmp	r7, r5
 8006a2a:	4416      	add	r6, r2
 8006a2c:	441e      	add	r6, r3
 8006a2e:	463b      	mov	r3, r7
 8006a30:	bfa8      	it	ge
 8006a32:	462b      	movge	r3, r5
 8006a34:	42b3      	cmp	r3, r6
 8006a36:	bfa8      	it	ge
 8006a38:	4633      	movge	r3, r6
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	bfc2      	ittt	gt
 8006a3e:	1aed      	subgt	r5, r5, r3
 8006a40:	1af6      	subgt	r6, r6, r3
 8006a42:	1aff      	subgt	r7, r7, r3
 8006a44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	dd16      	ble.n	8006a78 <_strtod_l+0x738>
 8006a4a:	4641      	mov	r1, r8
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	9805      	ldr	r0, [sp, #20]
 8006a50:	f002 fe3c 	bl	80096cc <__pow5mult>
 8006a54:	4680      	mov	r8, r0
 8006a56:	2800      	cmp	r0, #0
 8006a58:	d0b7      	beq.n	80069ca <_strtod_l+0x68a>
 8006a5a:	4601      	mov	r1, r0
 8006a5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006a5e:	9805      	ldr	r0, [sp, #20]
 8006a60:	f002 fd8c 	bl	800957c <__multiply>
 8006a64:	900e      	str	r0, [sp, #56]	@ 0x38
 8006a66:	2800      	cmp	r0, #0
 8006a68:	f43f ae85 	beq.w	8006776 <_strtod_l+0x436>
 8006a6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006a6e:	9805      	ldr	r0, [sp, #20]
 8006a70:	f002 fc70 	bl	8009354 <_Bfree>
 8006a74:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a76:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a78:	2d00      	cmp	r5, #0
 8006a7a:	dc1d      	bgt.n	8006ab8 <_strtod_l+0x778>
 8006a7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	dd23      	ble.n	8006aca <_strtod_l+0x78a>
 8006a82:	4649      	mov	r1, r9
 8006a84:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006a86:	9805      	ldr	r0, [sp, #20]
 8006a88:	f002 fe20 	bl	80096cc <__pow5mult>
 8006a8c:	4681      	mov	r9, r0
 8006a8e:	b9e0      	cbnz	r0, 8006aca <_strtod_l+0x78a>
 8006a90:	f04f 0900 	mov.w	r9, #0
 8006a94:	e66f      	b.n	8006776 <_strtod_l+0x436>
 8006a96:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006a9a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006a9e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006aa2:	35e2      	adds	r5, #226	@ 0xe2
 8006aa4:	fa01 f305 	lsl.w	r3, r1, r5
 8006aa8:	9310      	str	r3, [sp, #64]	@ 0x40
 8006aaa:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006aac:	e7ba      	b.n	8006a24 <_strtod_l+0x6e4>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ab6:	e7b5      	b.n	8006a24 <_strtod_l+0x6e4>
 8006ab8:	462a      	mov	r2, r5
 8006aba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006abc:	9805      	ldr	r0, [sp, #20]
 8006abe:	f002 fe5f 	bl	8009780 <__lshift>
 8006ac2:	901a      	str	r0, [sp, #104]	@ 0x68
 8006ac4:	2800      	cmp	r0, #0
 8006ac6:	d1d9      	bne.n	8006a7c <_strtod_l+0x73c>
 8006ac8:	e655      	b.n	8006776 <_strtod_l+0x436>
 8006aca:	2e00      	cmp	r6, #0
 8006acc:	dd07      	ble.n	8006ade <_strtod_l+0x79e>
 8006ace:	4649      	mov	r1, r9
 8006ad0:	4632      	mov	r2, r6
 8006ad2:	9805      	ldr	r0, [sp, #20]
 8006ad4:	f002 fe54 	bl	8009780 <__lshift>
 8006ad8:	4681      	mov	r9, r0
 8006ada:	2800      	cmp	r0, #0
 8006adc:	d0d8      	beq.n	8006a90 <_strtod_l+0x750>
 8006ade:	2f00      	cmp	r7, #0
 8006ae0:	dd08      	ble.n	8006af4 <_strtod_l+0x7b4>
 8006ae2:	4641      	mov	r1, r8
 8006ae4:	463a      	mov	r2, r7
 8006ae6:	9805      	ldr	r0, [sp, #20]
 8006ae8:	f002 fe4a 	bl	8009780 <__lshift>
 8006aec:	4680      	mov	r8, r0
 8006aee:	2800      	cmp	r0, #0
 8006af0:	f43f ae41 	beq.w	8006776 <_strtod_l+0x436>
 8006af4:	464a      	mov	r2, r9
 8006af6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006af8:	9805      	ldr	r0, [sp, #20]
 8006afa:	f002 fec9 	bl	8009890 <__mdiff>
 8006afe:	4604      	mov	r4, r0
 8006b00:	2800      	cmp	r0, #0
 8006b02:	f43f ae38 	beq.w	8006776 <_strtod_l+0x436>
 8006b06:	68c3      	ldr	r3, [r0, #12]
 8006b08:	4641      	mov	r1, r8
 8006b0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	60c3      	str	r3, [r0, #12]
 8006b10:	f002 fea2 	bl	8009858 <__mcmp>
 8006b14:	2800      	cmp	r0, #0
 8006b16:	da45      	bge.n	8006ba4 <_strtod_l+0x864>
 8006b18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b1a:	ea53 030a 	orrs.w	r3, r3, sl
 8006b1e:	d16b      	bne.n	8006bf8 <_strtod_l+0x8b8>
 8006b20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d167      	bne.n	8006bf8 <_strtod_l+0x8b8>
 8006b28:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006b2c:	0d1b      	lsrs	r3, r3, #20
 8006b2e:	051b      	lsls	r3, r3, #20
 8006b30:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006b34:	d960      	bls.n	8006bf8 <_strtod_l+0x8b8>
 8006b36:	6963      	ldr	r3, [r4, #20]
 8006b38:	b913      	cbnz	r3, 8006b40 <_strtod_l+0x800>
 8006b3a:	6923      	ldr	r3, [r4, #16]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	dd5b      	ble.n	8006bf8 <_strtod_l+0x8b8>
 8006b40:	4621      	mov	r1, r4
 8006b42:	2201      	movs	r2, #1
 8006b44:	9805      	ldr	r0, [sp, #20]
 8006b46:	f002 fe1b 	bl	8009780 <__lshift>
 8006b4a:	4641      	mov	r1, r8
 8006b4c:	4604      	mov	r4, r0
 8006b4e:	f002 fe83 	bl	8009858 <__mcmp>
 8006b52:	2800      	cmp	r0, #0
 8006b54:	dd50      	ble.n	8006bf8 <_strtod_l+0x8b8>
 8006b56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006b5a:	9a08      	ldr	r2, [sp, #32]
 8006b5c:	0d1b      	lsrs	r3, r3, #20
 8006b5e:	051b      	lsls	r3, r3, #20
 8006b60:	2a00      	cmp	r2, #0
 8006b62:	d06a      	beq.n	8006c3a <_strtod_l+0x8fa>
 8006b64:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006b68:	d867      	bhi.n	8006c3a <_strtod_l+0x8fa>
 8006b6a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006b6e:	f67f ae98 	bls.w	80068a2 <_strtod_l+0x562>
 8006b72:	4650      	mov	r0, sl
 8006b74:	4659      	mov	r1, fp
 8006b76:	4b09      	ldr	r3, [pc, #36]	@ (8006b9c <_strtod_l+0x85c>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f7f9 fcb7 	bl	80004ec <__aeabi_dmul>
 8006b7e:	4b08      	ldr	r3, [pc, #32]	@ (8006ba0 <_strtod_l+0x860>)
 8006b80:	4682      	mov	sl, r0
 8006b82:	400b      	ands	r3, r1
 8006b84:	468b      	mov	fp, r1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	f47f ae00 	bne.w	800678c <_strtod_l+0x44c>
 8006b8c:	2322      	movs	r3, #34	@ 0x22
 8006b8e:	9a05      	ldr	r2, [sp, #20]
 8006b90:	6013      	str	r3, [r2, #0]
 8006b92:	e5fb      	b.n	800678c <_strtod_l+0x44c>
 8006b94:	0800aa98 	.word	0x0800aa98
 8006b98:	fffffc02 	.word	0xfffffc02
 8006b9c:	39500000 	.word	0x39500000
 8006ba0:	7ff00000 	.word	0x7ff00000
 8006ba4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006ba8:	d165      	bne.n	8006c76 <_strtod_l+0x936>
 8006baa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006bac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006bb0:	b35a      	cbz	r2, 8006c0a <_strtod_l+0x8ca>
 8006bb2:	4a99      	ldr	r2, [pc, #612]	@ (8006e18 <_strtod_l+0xad8>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d12b      	bne.n	8006c10 <_strtod_l+0x8d0>
 8006bb8:	9b08      	ldr	r3, [sp, #32]
 8006bba:	4651      	mov	r1, sl
 8006bbc:	b303      	cbz	r3, 8006c00 <_strtod_l+0x8c0>
 8006bbe:	465a      	mov	r2, fp
 8006bc0:	4b96      	ldr	r3, [pc, #600]	@ (8006e1c <_strtod_l+0xadc>)
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bcc:	d81b      	bhi.n	8006c06 <_strtod_l+0x8c6>
 8006bce:	0d1b      	lsrs	r3, r3, #20
 8006bd0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd8:	4299      	cmp	r1, r3
 8006bda:	d119      	bne.n	8006c10 <_strtod_l+0x8d0>
 8006bdc:	4b90      	ldr	r3, [pc, #576]	@ (8006e20 <_strtod_l+0xae0>)
 8006bde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d102      	bne.n	8006bea <_strtod_l+0x8aa>
 8006be4:	3101      	adds	r1, #1
 8006be6:	f43f adc6 	beq.w	8006776 <_strtod_l+0x436>
 8006bea:	f04f 0a00 	mov.w	sl, #0
 8006bee:	4b8b      	ldr	r3, [pc, #556]	@ (8006e1c <_strtod_l+0xadc>)
 8006bf0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006bf2:	401a      	ands	r2, r3
 8006bf4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006bf8:	9b08      	ldr	r3, [sp, #32]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1b9      	bne.n	8006b72 <_strtod_l+0x832>
 8006bfe:	e5c5      	b.n	800678c <_strtod_l+0x44c>
 8006c00:	f04f 33ff 	mov.w	r3, #4294967295
 8006c04:	e7e8      	b.n	8006bd8 <_strtod_l+0x898>
 8006c06:	4613      	mov	r3, r2
 8006c08:	e7e6      	b.n	8006bd8 <_strtod_l+0x898>
 8006c0a:	ea53 030a 	orrs.w	r3, r3, sl
 8006c0e:	d0a2      	beq.n	8006b56 <_strtod_l+0x816>
 8006c10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006c12:	b1db      	cbz	r3, 8006c4c <_strtod_l+0x90c>
 8006c14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c16:	4213      	tst	r3, r2
 8006c18:	d0ee      	beq.n	8006bf8 <_strtod_l+0x8b8>
 8006c1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c1c:	4650      	mov	r0, sl
 8006c1e:	4659      	mov	r1, fp
 8006c20:	9a08      	ldr	r2, [sp, #32]
 8006c22:	b1bb      	cbz	r3, 8006c54 <_strtod_l+0x914>
 8006c24:	f7ff fb69 	bl	80062fa <sulp>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c30:	f7f9 faa6 	bl	8000180 <__adddf3>
 8006c34:	4682      	mov	sl, r0
 8006c36:	468b      	mov	fp, r1
 8006c38:	e7de      	b.n	8006bf8 <_strtod_l+0x8b8>
 8006c3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006c3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006c42:	f04f 3aff 	mov.w	sl, #4294967295
 8006c46:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006c4a:	e7d5      	b.n	8006bf8 <_strtod_l+0x8b8>
 8006c4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006c4e:	ea13 0f0a 	tst.w	r3, sl
 8006c52:	e7e1      	b.n	8006c18 <_strtod_l+0x8d8>
 8006c54:	f7ff fb51 	bl	80062fa <sulp>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c60:	f7f9 fa8c 	bl	800017c <__aeabi_dsub>
 8006c64:	2200      	movs	r2, #0
 8006c66:	2300      	movs	r3, #0
 8006c68:	4682      	mov	sl, r0
 8006c6a:	468b      	mov	fp, r1
 8006c6c:	f7f9 fea6 	bl	80009bc <__aeabi_dcmpeq>
 8006c70:	2800      	cmp	r0, #0
 8006c72:	d0c1      	beq.n	8006bf8 <_strtod_l+0x8b8>
 8006c74:	e615      	b.n	80068a2 <_strtod_l+0x562>
 8006c76:	4641      	mov	r1, r8
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f002 ff5d 	bl	8009b38 <__ratio>
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006c84:	4606      	mov	r6, r0
 8006c86:	460f      	mov	r7, r1
 8006c88:	f7f9 feac 	bl	80009e4 <__aeabi_dcmple>
 8006c8c:	2800      	cmp	r0, #0
 8006c8e:	d06d      	beq.n	8006d6c <_strtod_l+0xa2c>
 8006c90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d178      	bne.n	8006d88 <_strtod_l+0xa48>
 8006c96:	f1ba 0f00 	cmp.w	sl, #0
 8006c9a:	d156      	bne.n	8006d4a <_strtod_l+0xa0a>
 8006c9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d158      	bne.n	8006d58 <_strtod_l+0xa18>
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	4630      	mov	r0, r6
 8006caa:	4639      	mov	r1, r7
 8006cac:	4b5d      	ldr	r3, [pc, #372]	@ (8006e24 <_strtod_l+0xae4>)
 8006cae:	f7f9 fe8f 	bl	80009d0 <__aeabi_dcmplt>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d157      	bne.n	8006d66 <_strtod_l+0xa26>
 8006cb6:	4630      	mov	r0, r6
 8006cb8:	4639      	mov	r1, r7
 8006cba:	2200      	movs	r2, #0
 8006cbc:	4b5a      	ldr	r3, [pc, #360]	@ (8006e28 <_strtod_l+0xae8>)
 8006cbe:	f7f9 fc15 	bl	80004ec <__aeabi_dmul>
 8006cc2:	4606      	mov	r6, r0
 8006cc4:	460f      	mov	r7, r1
 8006cc6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006cca:	9606      	str	r6, [sp, #24]
 8006ccc:	9307      	str	r3, [sp, #28]
 8006cce:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cd2:	4d52      	ldr	r5, [pc, #328]	@ (8006e1c <_strtod_l+0xadc>)
 8006cd4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006cd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cda:	401d      	ands	r5, r3
 8006cdc:	4b53      	ldr	r3, [pc, #332]	@ (8006e2c <_strtod_l+0xaec>)
 8006cde:	429d      	cmp	r5, r3
 8006ce0:	f040 80aa 	bne.w	8006e38 <_strtod_l+0xaf8>
 8006ce4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ce6:	4650      	mov	r0, sl
 8006ce8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006cec:	4659      	mov	r1, fp
 8006cee:	f002 fe63 	bl	80099b8 <__ulp>
 8006cf2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006cf6:	f7f9 fbf9 	bl	80004ec <__aeabi_dmul>
 8006cfa:	4652      	mov	r2, sl
 8006cfc:	465b      	mov	r3, fp
 8006cfe:	f7f9 fa3f 	bl	8000180 <__adddf3>
 8006d02:	460b      	mov	r3, r1
 8006d04:	4945      	ldr	r1, [pc, #276]	@ (8006e1c <_strtod_l+0xadc>)
 8006d06:	4a4a      	ldr	r2, [pc, #296]	@ (8006e30 <_strtod_l+0xaf0>)
 8006d08:	4019      	ands	r1, r3
 8006d0a:	4291      	cmp	r1, r2
 8006d0c:	4682      	mov	sl, r0
 8006d0e:	d942      	bls.n	8006d96 <_strtod_l+0xa56>
 8006d10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006d12:	4b43      	ldr	r3, [pc, #268]	@ (8006e20 <_strtod_l+0xae0>)
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d103      	bne.n	8006d20 <_strtod_l+0x9e0>
 8006d18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	f43f ad2b 	beq.w	8006776 <_strtod_l+0x436>
 8006d20:	f04f 3aff 	mov.w	sl, #4294967295
 8006d24:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8006e20 <_strtod_l+0xae0>
 8006d28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d2a:	9805      	ldr	r0, [sp, #20]
 8006d2c:	f002 fb12 	bl	8009354 <_Bfree>
 8006d30:	4649      	mov	r1, r9
 8006d32:	9805      	ldr	r0, [sp, #20]
 8006d34:	f002 fb0e 	bl	8009354 <_Bfree>
 8006d38:	4641      	mov	r1, r8
 8006d3a:	9805      	ldr	r0, [sp, #20]
 8006d3c:	f002 fb0a 	bl	8009354 <_Bfree>
 8006d40:	4621      	mov	r1, r4
 8006d42:	9805      	ldr	r0, [sp, #20]
 8006d44:	f002 fb06 	bl	8009354 <_Bfree>
 8006d48:	e618      	b.n	800697c <_strtod_l+0x63c>
 8006d4a:	f1ba 0f01 	cmp.w	sl, #1
 8006d4e:	d103      	bne.n	8006d58 <_strtod_l+0xa18>
 8006d50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f43f ada5 	beq.w	80068a2 <_strtod_l+0x562>
 8006d58:	2200      	movs	r2, #0
 8006d5a:	4b36      	ldr	r3, [pc, #216]	@ (8006e34 <_strtod_l+0xaf4>)
 8006d5c:	2600      	movs	r6, #0
 8006d5e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d62:	4f30      	ldr	r7, [pc, #192]	@ (8006e24 <_strtod_l+0xae4>)
 8006d64:	e7b3      	b.n	8006cce <_strtod_l+0x98e>
 8006d66:	2600      	movs	r6, #0
 8006d68:	4f2f      	ldr	r7, [pc, #188]	@ (8006e28 <_strtod_l+0xae8>)
 8006d6a:	e7ac      	b.n	8006cc6 <_strtod_l+0x986>
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	4639      	mov	r1, r7
 8006d70:	4b2d      	ldr	r3, [pc, #180]	@ (8006e28 <_strtod_l+0xae8>)
 8006d72:	2200      	movs	r2, #0
 8006d74:	f7f9 fbba 	bl	80004ec <__aeabi_dmul>
 8006d78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d7a:	4606      	mov	r6, r0
 8006d7c:	460f      	mov	r7, r1
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d0a1      	beq.n	8006cc6 <_strtod_l+0x986>
 8006d82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006d86:	e7a2      	b.n	8006cce <_strtod_l+0x98e>
 8006d88:	2200      	movs	r2, #0
 8006d8a:	4b26      	ldr	r3, [pc, #152]	@ (8006e24 <_strtod_l+0xae4>)
 8006d8c:	4616      	mov	r6, r2
 8006d8e:	461f      	mov	r7, r3
 8006d90:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006d94:	e79b      	b.n	8006cce <_strtod_l+0x98e>
 8006d96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006d9a:	9b08      	ldr	r3, [sp, #32]
 8006d9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1c1      	bne.n	8006d28 <_strtod_l+0x9e8>
 8006da4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006da8:	0d1b      	lsrs	r3, r3, #20
 8006daa:	051b      	lsls	r3, r3, #20
 8006dac:	429d      	cmp	r5, r3
 8006dae:	d1bb      	bne.n	8006d28 <_strtod_l+0x9e8>
 8006db0:	4630      	mov	r0, r6
 8006db2:	4639      	mov	r1, r7
 8006db4:	f7fa f9cc 	bl	8001150 <__aeabi_d2lz>
 8006db8:	f7f9 fb6a 	bl	8000490 <__aeabi_l2d>
 8006dbc:	4602      	mov	r2, r0
 8006dbe:	460b      	mov	r3, r1
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	4639      	mov	r1, r7
 8006dc4:	f7f9 f9da 	bl	800017c <__aeabi_dsub>
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4602      	mov	r2, r0
 8006dcc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006dd0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006dd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006dd6:	ea46 060a 	orr.w	r6, r6, sl
 8006dda:	431e      	orrs	r6, r3
 8006ddc:	d069      	beq.n	8006eb2 <_strtod_l+0xb72>
 8006dde:	a30a      	add	r3, pc, #40	@ (adr r3, 8006e08 <_strtod_l+0xac8>)
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	f7f9 fdf4 	bl	80009d0 <__aeabi_dcmplt>
 8006de8:	2800      	cmp	r0, #0
 8006dea:	f47f accf 	bne.w	800678c <_strtod_l+0x44c>
 8006dee:	a308      	add	r3, pc, #32	@ (adr r3, 8006e10 <_strtod_l+0xad0>)
 8006df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006df4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006df8:	f7f9 fe08 	bl	8000a0c <__aeabi_dcmpgt>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	d093      	beq.n	8006d28 <_strtod_l+0x9e8>
 8006e00:	e4c4      	b.n	800678c <_strtod_l+0x44c>
 8006e02:	bf00      	nop
 8006e04:	f3af 8000 	nop.w
 8006e08:	94a03595 	.word	0x94a03595
 8006e0c:	3fdfffff 	.word	0x3fdfffff
 8006e10:	35afe535 	.word	0x35afe535
 8006e14:	3fe00000 	.word	0x3fe00000
 8006e18:	000fffff 	.word	0x000fffff
 8006e1c:	7ff00000 	.word	0x7ff00000
 8006e20:	7fefffff 	.word	0x7fefffff
 8006e24:	3ff00000 	.word	0x3ff00000
 8006e28:	3fe00000 	.word	0x3fe00000
 8006e2c:	7fe00000 	.word	0x7fe00000
 8006e30:	7c9fffff 	.word	0x7c9fffff
 8006e34:	bff00000 	.word	0xbff00000
 8006e38:	9b08      	ldr	r3, [sp, #32]
 8006e3a:	b323      	cbz	r3, 8006e86 <_strtod_l+0xb46>
 8006e3c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006e40:	d821      	bhi.n	8006e86 <_strtod_l+0xb46>
 8006e42:	a327      	add	r3, pc, #156	@ (adr r3, 8006ee0 <_strtod_l+0xba0>)
 8006e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e48:	4630      	mov	r0, r6
 8006e4a:	4639      	mov	r1, r7
 8006e4c:	f7f9 fdca 	bl	80009e4 <__aeabi_dcmple>
 8006e50:	b1a0      	cbz	r0, 8006e7c <_strtod_l+0xb3c>
 8006e52:	4639      	mov	r1, r7
 8006e54:	4630      	mov	r0, r6
 8006e56:	f7f9 fe21 	bl	8000a9c <__aeabi_d2uiz>
 8006e5a:	2801      	cmp	r0, #1
 8006e5c:	bf38      	it	cc
 8006e5e:	2001      	movcc	r0, #1
 8006e60:	f7f9 faca 	bl	80003f8 <__aeabi_ui2d>
 8006e64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e66:	4606      	mov	r6, r0
 8006e68:	460f      	mov	r7, r1
 8006e6a:	b9fb      	cbnz	r3, 8006eac <_strtod_l+0xb6c>
 8006e6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006e70:	9014      	str	r0, [sp, #80]	@ 0x50
 8006e72:	9315      	str	r3, [sp, #84]	@ 0x54
 8006e74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8006e78:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006e7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006e7e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006e82:	1b5b      	subs	r3, r3, r5
 8006e84:	9311      	str	r3, [sp, #68]	@ 0x44
 8006e86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e8a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006e8e:	f002 fd93 	bl	80099b8 <__ulp>
 8006e92:	4602      	mov	r2, r0
 8006e94:	460b      	mov	r3, r1
 8006e96:	4650      	mov	r0, sl
 8006e98:	4659      	mov	r1, fp
 8006e9a:	f7f9 fb27 	bl	80004ec <__aeabi_dmul>
 8006e9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006ea2:	f7f9 f96d 	bl	8000180 <__adddf3>
 8006ea6:	4682      	mov	sl, r0
 8006ea8:	468b      	mov	fp, r1
 8006eaa:	e776      	b.n	8006d9a <_strtod_l+0xa5a>
 8006eac:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8006eb0:	e7e0      	b.n	8006e74 <_strtod_l+0xb34>
 8006eb2:	a30d      	add	r3, pc, #52	@ (adr r3, 8006ee8 <_strtod_l+0xba8>)
 8006eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb8:	f7f9 fd8a 	bl	80009d0 <__aeabi_dcmplt>
 8006ebc:	e79e      	b.n	8006dfc <_strtod_l+0xabc>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ec2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ec4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006ec6:	6013      	str	r3, [r2, #0]
 8006ec8:	f7ff ba77 	b.w	80063ba <_strtod_l+0x7a>
 8006ecc:	2a65      	cmp	r2, #101	@ 0x65
 8006ece:	f43f ab6e 	beq.w	80065ae <_strtod_l+0x26e>
 8006ed2:	2a45      	cmp	r2, #69	@ 0x45
 8006ed4:	f43f ab6b 	beq.w	80065ae <_strtod_l+0x26e>
 8006ed8:	2301      	movs	r3, #1
 8006eda:	f7ff bba6 	b.w	800662a <_strtod_l+0x2ea>
 8006ede:	bf00      	nop
 8006ee0:	ffc00000 	.word	0xffc00000
 8006ee4:	41dfffff 	.word	0x41dfffff
 8006ee8:	94a03595 	.word	0x94a03595
 8006eec:	3fcfffff 	.word	0x3fcfffff

08006ef0 <strtof>:
 8006ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ef4:	4d24      	ldr	r5, [pc, #144]	@ (8006f88 <strtof+0x98>)
 8006ef6:	460a      	mov	r2, r1
 8006ef8:	4b24      	ldr	r3, [pc, #144]	@ (8006f8c <strtof+0x9c>)
 8006efa:	4601      	mov	r1, r0
 8006efc:	6828      	ldr	r0, [r5, #0]
 8006efe:	f7ff fa1f 	bl	8006340 <_strtod_l>
 8006f02:	4602      	mov	r2, r0
 8006f04:	460b      	mov	r3, r1
 8006f06:	4606      	mov	r6, r0
 8006f08:	460f      	mov	r7, r1
 8006f0a:	f7f9 fd89 	bl	8000a20 <__aeabi_dcmpun>
 8006f0e:	b168      	cbz	r0, 8006f2c <strtof+0x3c>
 8006f10:	2f00      	cmp	r7, #0
 8006f12:	481f      	ldr	r0, [pc, #124]	@ (8006f90 <strtof+0xa0>)
 8006f14:	da06      	bge.n	8006f24 <strtof+0x34>
 8006f16:	f000 ff3d 	bl	8007d94 <nanf>
 8006f1a:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 8006f1e:	4620      	mov	r0, r4
 8006f20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f24:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f28:	f000 bf34 	b.w	8007d94 <nanf>
 8006f2c:	4639      	mov	r1, r7
 8006f2e:	4630      	mov	r0, r6
 8006f30:	f7f9 fdd4 	bl	8000adc <__aeabi_d2f>
 8006f34:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 8006f38:	4604      	mov	r4, r0
 8006f3a:	4916      	ldr	r1, [pc, #88]	@ (8006f94 <strtof+0xa4>)
 8006f3c:	4640      	mov	r0, r8
 8006f3e:	f7fa f8f1 	bl	8001124 <__aeabi_fcmpun>
 8006f42:	b9b0      	cbnz	r0, 8006f72 <strtof+0x82>
 8006f44:	4640      	mov	r0, r8
 8006f46:	4913      	ldr	r1, [pc, #76]	@ (8006f94 <strtof+0xa4>)
 8006f48:	f7fa f8ce 	bl	80010e8 <__aeabi_fcmple>
 8006f4c:	b988      	cbnz	r0, 8006f72 <strtof+0x82>
 8006f4e:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 8006f52:	f04f 32ff 	mov.w	r2, #4294967295
 8006f56:	4630      	mov	r0, r6
 8006f58:	4649      	mov	r1, r9
 8006f5a:	4b0f      	ldr	r3, [pc, #60]	@ (8006f98 <strtof+0xa8>)
 8006f5c:	f7f9 fd60 	bl	8000a20 <__aeabi_dcmpun>
 8006f60:	b970      	cbnz	r0, 8006f80 <strtof+0x90>
 8006f62:	f04f 32ff 	mov.w	r2, #4294967295
 8006f66:	4630      	mov	r0, r6
 8006f68:	4649      	mov	r1, r9
 8006f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f98 <strtof+0xa8>)
 8006f6c:	f7f9 fd3a 	bl	80009e4 <__aeabi_dcmple>
 8006f70:	b930      	cbnz	r0, 8006f80 <strtof+0x90>
 8006f72:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8006f76:	d1d2      	bne.n	8006f1e <strtof+0x2e>
 8006f78:	4b08      	ldr	r3, [pc, #32]	@ (8006f9c <strtof+0xac>)
 8006f7a:	403b      	ands	r3, r7
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d0ce      	beq.n	8006f1e <strtof+0x2e>
 8006f80:	2222      	movs	r2, #34	@ 0x22
 8006f82:	682b      	ldr	r3, [r5, #0]
 8006f84:	601a      	str	r2, [r3, #0]
 8006f86:	e7ca      	b.n	8006f1e <strtof+0x2e>
 8006f88:	2000019c 	.word	0x2000019c
 8006f8c:	20000030 	.word	0x20000030
 8006f90:	0800ae8c 	.word	0x0800ae8c
 8006f94:	7f7fffff 	.word	0x7f7fffff
 8006f98:	7fefffff 	.word	0x7fefffff
 8006f9c:	7ff00000 	.word	0x7ff00000

08006fa0 <_strtoul_l.constprop.0>:
 8006fa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006fa4:	4686      	mov	lr, r0
 8006fa6:	460d      	mov	r5, r1
 8006fa8:	4e33      	ldr	r6, [pc, #204]	@ (8007078 <_strtoul_l.constprop.0+0xd8>)
 8006faa:	4628      	mov	r0, r5
 8006fac:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006fb0:	5d37      	ldrb	r7, [r6, r4]
 8006fb2:	f017 0708 	ands.w	r7, r7, #8
 8006fb6:	d1f8      	bne.n	8006faa <_strtoul_l.constprop.0+0xa>
 8006fb8:	2c2d      	cmp	r4, #45	@ 0x2d
 8006fba:	d12f      	bne.n	800701c <_strtoul_l.constprop.0+0x7c>
 8006fbc:	2701      	movs	r7, #1
 8006fbe:	782c      	ldrb	r4, [r5, #0]
 8006fc0:	1c85      	adds	r5, r0, #2
 8006fc2:	f033 0010 	bics.w	r0, r3, #16
 8006fc6:	d109      	bne.n	8006fdc <_strtoul_l.constprop.0+0x3c>
 8006fc8:	2c30      	cmp	r4, #48	@ 0x30
 8006fca:	d12c      	bne.n	8007026 <_strtoul_l.constprop.0+0x86>
 8006fcc:	7828      	ldrb	r0, [r5, #0]
 8006fce:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8006fd2:	2858      	cmp	r0, #88	@ 0x58
 8006fd4:	d127      	bne.n	8007026 <_strtoul_l.constprop.0+0x86>
 8006fd6:	2310      	movs	r3, #16
 8006fd8:	786c      	ldrb	r4, [r5, #1]
 8006fda:	3502      	adds	r5, #2
 8006fdc:	f04f 38ff 	mov.w	r8, #4294967295
 8006fe0:	fbb8 f8f3 	udiv	r8, r8, r3
 8006fe4:	2600      	movs	r6, #0
 8006fe6:	fb03 f908 	mul.w	r9, r3, r8
 8006fea:	4630      	mov	r0, r6
 8006fec:	ea6f 0909 	mvn.w	r9, r9
 8006ff0:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8006ff4:	f1bc 0f09 	cmp.w	ip, #9
 8006ff8:	d81c      	bhi.n	8007034 <_strtoul_l.constprop.0+0x94>
 8006ffa:	4664      	mov	r4, ip
 8006ffc:	42a3      	cmp	r3, r4
 8006ffe:	dd2a      	ble.n	8007056 <_strtoul_l.constprop.0+0xb6>
 8007000:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007004:	d007      	beq.n	8007016 <_strtoul_l.constprop.0+0x76>
 8007006:	4580      	cmp	r8, r0
 8007008:	d322      	bcc.n	8007050 <_strtoul_l.constprop.0+0xb0>
 800700a:	d101      	bne.n	8007010 <_strtoul_l.constprop.0+0x70>
 800700c:	45a1      	cmp	r9, r4
 800700e:	db1f      	blt.n	8007050 <_strtoul_l.constprop.0+0xb0>
 8007010:	2601      	movs	r6, #1
 8007012:	fb00 4003 	mla	r0, r0, r3, r4
 8007016:	f815 4b01 	ldrb.w	r4, [r5], #1
 800701a:	e7e9      	b.n	8006ff0 <_strtoul_l.constprop.0+0x50>
 800701c:	2c2b      	cmp	r4, #43	@ 0x2b
 800701e:	bf04      	itt	eq
 8007020:	782c      	ldrbeq	r4, [r5, #0]
 8007022:	1c85      	addeq	r5, r0, #2
 8007024:	e7cd      	b.n	8006fc2 <_strtoul_l.constprop.0+0x22>
 8007026:	2b00      	cmp	r3, #0
 8007028:	d1d8      	bne.n	8006fdc <_strtoul_l.constprop.0+0x3c>
 800702a:	2c30      	cmp	r4, #48	@ 0x30
 800702c:	bf0c      	ite	eq
 800702e:	2308      	moveq	r3, #8
 8007030:	230a      	movne	r3, #10
 8007032:	e7d3      	b.n	8006fdc <_strtoul_l.constprop.0+0x3c>
 8007034:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8007038:	f1bc 0f19 	cmp.w	ip, #25
 800703c:	d801      	bhi.n	8007042 <_strtoul_l.constprop.0+0xa2>
 800703e:	3c37      	subs	r4, #55	@ 0x37
 8007040:	e7dc      	b.n	8006ffc <_strtoul_l.constprop.0+0x5c>
 8007042:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8007046:	f1bc 0f19 	cmp.w	ip, #25
 800704a:	d804      	bhi.n	8007056 <_strtoul_l.constprop.0+0xb6>
 800704c:	3c57      	subs	r4, #87	@ 0x57
 800704e:	e7d5      	b.n	8006ffc <_strtoul_l.constprop.0+0x5c>
 8007050:	f04f 36ff 	mov.w	r6, #4294967295
 8007054:	e7df      	b.n	8007016 <_strtoul_l.constprop.0+0x76>
 8007056:	1c73      	adds	r3, r6, #1
 8007058:	d106      	bne.n	8007068 <_strtoul_l.constprop.0+0xc8>
 800705a:	2322      	movs	r3, #34	@ 0x22
 800705c:	4630      	mov	r0, r6
 800705e:	f8ce 3000 	str.w	r3, [lr]
 8007062:	b932      	cbnz	r2, 8007072 <_strtoul_l.constprop.0+0xd2>
 8007064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007068:	b107      	cbz	r7, 800706c <_strtoul_l.constprop.0+0xcc>
 800706a:	4240      	negs	r0, r0
 800706c:	2a00      	cmp	r2, #0
 800706e:	d0f9      	beq.n	8007064 <_strtoul_l.constprop.0+0xc4>
 8007070:	b106      	cbz	r6, 8007074 <_strtoul_l.constprop.0+0xd4>
 8007072:	1e69      	subs	r1, r5, #1
 8007074:	6011      	str	r1, [r2, #0]
 8007076:	e7f5      	b.n	8007064 <_strtoul_l.constprop.0+0xc4>
 8007078:	0800aac1 	.word	0x0800aac1

0800707c <strtoul>:
 800707c:	4613      	mov	r3, r2
 800707e:	460a      	mov	r2, r1
 8007080:	4601      	mov	r1, r0
 8007082:	4802      	ldr	r0, [pc, #8]	@ (800708c <strtoul+0x10>)
 8007084:	6800      	ldr	r0, [r0, #0]
 8007086:	f7ff bf8b 	b.w	8006fa0 <_strtoul_l.constprop.0>
 800708a:	bf00      	nop
 800708c:	2000019c 	.word	0x2000019c

08007090 <__cvt>:
 8007090:	2b00      	cmp	r3, #0
 8007092:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007096:	461d      	mov	r5, r3
 8007098:	bfbb      	ittet	lt
 800709a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800709e:	461d      	movlt	r5, r3
 80070a0:	2300      	movge	r3, #0
 80070a2:	232d      	movlt	r3, #45	@ 0x2d
 80070a4:	b088      	sub	sp, #32
 80070a6:	4614      	mov	r4, r2
 80070a8:	bfb8      	it	lt
 80070aa:	4614      	movlt	r4, r2
 80070ac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80070ae:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80070b0:	7013      	strb	r3, [r2, #0]
 80070b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80070b4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80070b8:	f023 0820 	bic.w	r8, r3, #32
 80070bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80070c0:	d005      	beq.n	80070ce <__cvt+0x3e>
 80070c2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80070c6:	d100      	bne.n	80070ca <__cvt+0x3a>
 80070c8:	3601      	adds	r6, #1
 80070ca:	2302      	movs	r3, #2
 80070cc:	e000      	b.n	80070d0 <__cvt+0x40>
 80070ce:	2303      	movs	r3, #3
 80070d0:	aa07      	add	r2, sp, #28
 80070d2:	9204      	str	r2, [sp, #16]
 80070d4:	aa06      	add	r2, sp, #24
 80070d6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80070da:	e9cd 3600 	strd	r3, r6, [sp]
 80070de:	4622      	mov	r2, r4
 80070e0:	462b      	mov	r3, r5
 80070e2:	f000 fee5 	bl	8007eb0 <_dtoa_r>
 80070e6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80070ea:	4607      	mov	r7, r0
 80070ec:	d119      	bne.n	8007122 <__cvt+0x92>
 80070ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80070f0:	07db      	lsls	r3, r3, #31
 80070f2:	d50e      	bpl.n	8007112 <__cvt+0x82>
 80070f4:	eb00 0906 	add.w	r9, r0, r6
 80070f8:	2200      	movs	r2, #0
 80070fa:	2300      	movs	r3, #0
 80070fc:	4620      	mov	r0, r4
 80070fe:	4629      	mov	r1, r5
 8007100:	f7f9 fc5c 	bl	80009bc <__aeabi_dcmpeq>
 8007104:	b108      	cbz	r0, 800710a <__cvt+0x7a>
 8007106:	f8cd 901c 	str.w	r9, [sp, #28]
 800710a:	2230      	movs	r2, #48	@ 0x30
 800710c:	9b07      	ldr	r3, [sp, #28]
 800710e:	454b      	cmp	r3, r9
 8007110:	d31e      	bcc.n	8007150 <__cvt+0xc0>
 8007112:	4638      	mov	r0, r7
 8007114:	9b07      	ldr	r3, [sp, #28]
 8007116:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007118:	1bdb      	subs	r3, r3, r7
 800711a:	6013      	str	r3, [r2, #0]
 800711c:	b008      	add	sp, #32
 800711e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007122:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007126:	eb00 0906 	add.w	r9, r0, r6
 800712a:	d1e5      	bne.n	80070f8 <__cvt+0x68>
 800712c:	7803      	ldrb	r3, [r0, #0]
 800712e:	2b30      	cmp	r3, #48	@ 0x30
 8007130:	d10a      	bne.n	8007148 <__cvt+0xb8>
 8007132:	2200      	movs	r2, #0
 8007134:	2300      	movs	r3, #0
 8007136:	4620      	mov	r0, r4
 8007138:	4629      	mov	r1, r5
 800713a:	f7f9 fc3f 	bl	80009bc <__aeabi_dcmpeq>
 800713e:	b918      	cbnz	r0, 8007148 <__cvt+0xb8>
 8007140:	f1c6 0601 	rsb	r6, r6, #1
 8007144:	f8ca 6000 	str.w	r6, [sl]
 8007148:	f8da 3000 	ldr.w	r3, [sl]
 800714c:	4499      	add	r9, r3
 800714e:	e7d3      	b.n	80070f8 <__cvt+0x68>
 8007150:	1c59      	adds	r1, r3, #1
 8007152:	9107      	str	r1, [sp, #28]
 8007154:	701a      	strb	r2, [r3, #0]
 8007156:	e7d9      	b.n	800710c <__cvt+0x7c>

08007158 <__exponent>:
 8007158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800715a:	2900      	cmp	r1, #0
 800715c:	bfb6      	itet	lt
 800715e:	232d      	movlt	r3, #45	@ 0x2d
 8007160:	232b      	movge	r3, #43	@ 0x2b
 8007162:	4249      	neglt	r1, r1
 8007164:	2909      	cmp	r1, #9
 8007166:	7002      	strb	r2, [r0, #0]
 8007168:	7043      	strb	r3, [r0, #1]
 800716a:	dd29      	ble.n	80071c0 <__exponent+0x68>
 800716c:	f10d 0307 	add.w	r3, sp, #7
 8007170:	461d      	mov	r5, r3
 8007172:	270a      	movs	r7, #10
 8007174:	fbb1 f6f7 	udiv	r6, r1, r7
 8007178:	461a      	mov	r2, r3
 800717a:	fb07 1416 	mls	r4, r7, r6, r1
 800717e:	3430      	adds	r4, #48	@ 0x30
 8007180:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007184:	460c      	mov	r4, r1
 8007186:	2c63      	cmp	r4, #99	@ 0x63
 8007188:	4631      	mov	r1, r6
 800718a:	f103 33ff 	add.w	r3, r3, #4294967295
 800718e:	dcf1      	bgt.n	8007174 <__exponent+0x1c>
 8007190:	3130      	adds	r1, #48	@ 0x30
 8007192:	1e94      	subs	r4, r2, #2
 8007194:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007198:	4623      	mov	r3, r4
 800719a:	1c41      	adds	r1, r0, #1
 800719c:	42ab      	cmp	r3, r5
 800719e:	d30a      	bcc.n	80071b6 <__exponent+0x5e>
 80071a0:	f10d 0309 	add.w	r3, sp, #9
 80071a4:	1a9b      	subs	r3, r3, r2
 80071a6:	42ac      	cmp	r4, r5
 80071a8:	bf88      	it	hi
 80071aa:	2300      	movhi	r3, #0
 80071ac:	3302      	adds	r3, #2
 80071ae:	4403      	add	r3, r0
 80071b0:	1a18      	subs	r0, r3, r0
 80071b2:	b003      	add	sp, #12
 80071b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071b6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80071ba:	f801 6f01 	strb.w	r6, [r1, #1]!
 80071be:	e7ed      	b.n	800719c <__exponent+0x44>
 80071c0:	2330      	movs	r3, #48	@ 0x30
 80071c2:	3130      	adds	r1, #48	@ 0x30
 80071c4:	7083      	strb	r3, [r0, #2]
 80071c6:	70c1      	strb	r1, [r0, #3]
 80071c8:	1d03      	adds	r3, r0, #4
 80071ca:	e7f1      	b.n	80071b0 <__exponent+0x58>

080071cc <_printf_float>:
 80071cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071d0:	b091      	sub	sp, #68	@ 0x44
 80071d2:	460c      	mov	r4, r1
 80071d4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80071d8:	4616      	mov	r6, r2
 80071da:	461f      	mov	r7, r3
 80071dc:	4605      	mov	r5, r0
 80071de:	f000 fd37 	bl	8007c50 <_localeconv_r>
 80071e2:	6803      	ldr	r3, [r0, #0]
 80071e4:	4618      	mov	r0, r3
 80071e6:	9308      	str	r3, [sp, #32]
 80071e8:	f7f8 ffbc 	bl	8000164 <strlen>
 80071ec:	2300      	movs	r3, #0
 80071ee:	930e      	str	r3, [sp, #56]	@ 0x38
 80071f0:	f8d8 3000 	ldr.w	r3, [r8]
 80071f4:	9009      	str	r0, [sp, #36]	@ 0x24
 80071f6:	3307      	adds	r3, #7
 80071f8:	f023 0307 	bic.w	r3, r3, #7
 80071fc:	f103 0208 	add.w	r2, r3, #8
 8007200:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007204:	f8d4 b000 	ldr.w	fp, [r4]
 8007208:	f8c8 2000 	str.w	r2, [r8]
 800720c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007210:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007214:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007216:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800721a:	f04f 32ff 	mov.w	r2, #4294967295
 800721e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007222:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007226:	4b9c      	ldr	r3, [pc, #624]	@ (8007498 <_printf_float+0x2cc>)
 8007228:	f7f9 fbfa 	bl	8000a20 <__aeabi_dcmpun>
 800722c:	bb70      	cbnz	r0, 800728c <_printf_float+0xc0>
 800722e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007232:	f04f 32ff 	mov.w	r2, #4294967295
 8007236:	4b98      	ldr	r3, [pc, #608]	@ (8007498 <_printf_float+0x2cc>)
 8007238:	f7f9 fbd4 	bl	80009e4 <__aeabi_dcmple>
 800723c:	bb30      	cbnz	r0, 800728c <_printf_float+0xc0>
 800723e:	2200      	movs	r2, #0
 8007240:	2300      	movs	r3, #0
 8007242:	4640      	mov	r0, r8
 8007244:	4649      	mov	r1, r9
 8007246:	f7f9 fbc3 	bl	80009d0 <__aeabi_dcmplt>
 800724a:	b110      	cbz	r0, 8007252 <_printf_float+0x86>
 800724c:	232d      	movs	r3, #45	@ 0x2d
 800724e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007252:	4a92      	ldr	r2, [pc, #584]	@ (800749c <_printf_float+0x2d0>)
 8007254:	4b92      	ldr	r3, [pc, #584]	@ (80074a0 <_printf_float+0x2d4>)
 8007256:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800725a:	bf94      	ite	ls
 800725c:	4690      	movls	r8, r2
 800725e:	4698      	movhi	r8, r3
 8007260:	2303      	movs	r3, #3
 8007262:	f04f 0900 	mov.w	r9, #0
 8007266:	6123      	str	r3, [r4, #16]
 8007268:	f02b 0304 	bic.w	r3, fp, #4
 800726c:	6023      	str	r3, [r4, #0]
 800726e:	4633      	mov	r3, r6
 8007270:	4621      	mov	r1, r4
 8007272:	4628      	mov	r0, r5
 8007274:	9700      	str	r7, [sp, #0]
 8007276:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007278:	f000 f9d4 	bl	8007624 <_printf_common>
 800727c:	3001      	adds	r0, #1
 800727e:	f040 8090 	bne.w	80073a2 <_printf_float+0x1d6>
 8007282:	f04f 30ff 	mov.w	r0, #4294967295
 8007286:	b011      	add	sp, #68	@ 0x44
 8007288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800728c:	4642      	mov	r2, r8
 800728e:	464b      	mov	r3, r9
 8007290:	4640      	mov	r0, r8
 8007292:	4649      	mov	r1, r9
 8007294:	f7f9 fbc4 	bl	8000a20 <__aeabi_dcmpun>
 8007298:	b148      	cbz	r0, 80072ae <_printf_float+0xe2>
 800729a:	464b      	mov	r3, r9
 800729c:	2b00      	cmp	r3, #0
 800729e:	bfb8      	it	lt
 80072a0:	232d      	movlt	r3, #45	@ 0x2d
 80072a2:	4a80      	ldr	r2, [pc, #512]	@ (80074a4 <_printf_float+0x2d8>)
 80072a4:	bfb8      	it	lt
 80072a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80072aa:	4b7f      	ldr	r3, [pc, #508]	@ (80074a8 <_printf_float+0x2dc>)
 80072ac:	e7d3      	b.n	8007256 <_printf_float+0x8a>
 80072ae:	6863      	ldr	r3, [r4, #4]
 80072b0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80072b4:	1c5a      	adds	r2, r3, #1
 80072b6:	d13f      	bne.n	8007338 <_printf_float+0x16c>
 80072b8:	2306      	movs	r3, #6
 80072ba:	6063      	str	r3, [r4, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80072c2:	6023      	str	r3, [r4, #0]
 80072c4:	9206      	str	r2, [sp, #24]
 80072c6:	aa0e      	add	r2, sp, #56	@ 0x38
 80072c8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80072cc:	aa0d      	add	r2, sp, #52	@ 0x34
 80072ce:	9203      	str	r2, [sp, #12]
 80072d0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80072d4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80072d8:	6863      	ldr	r3, [r4, #4]
 80072da:	4642      	mov	r2, r8
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	4628      	mov	r0, r5
 80072e0:	464b      	mov	r3, r9
 80072e2:	910a      	str	r1, [sp, #40]	@ 0x28
 80072e4:	f7ff fed4 	bl	8007090 <__cvt>
 80072e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80072ea:	4680      	mov	r8, r0
 80072ec:	2947      	cmp	r1, #71	@ 0x47
 80072ee:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80072f0:	d128      	bne.n	8007344 <_printf_float+0x178>
 80072f2:	1cc8      	adds	r0, r1, #3
 80072f4:	db02      	blt.n	80072fc <_printf_float+0x130>
 80072f6:	6863      	ldr	r3, [r4, #4]
 80072f8:	4299      	cmp	r1, r3
 80072fa:	dd40      	ble.n	800737e <_printf_float+0x1b2>
 80072fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8007300:	fa5f fa8a 	uxtb.w	sl, sl
 8007304:	4652      	mov	r2, sl
 8007306:	3901      	subs	r1, #1
 8007308:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800730c:	910d      	str	r1, [sp, #52]	@ 0x34
 800730e:	f7ff ff23 	bl	8007158 <__exponent>
 8007312:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007314:	4681      	mov	r9, r0
 8007316:	1813      	adds	r3, r2, r0
 8007318:	2a01      	cmp	r2, #1
 800731a:	6123      	str	r3, [r4, #16]
 800731c:	dc02      	bgt.n	8007324 <_printf_float+0x158>
 800731e:	6822      	ldr	r2, [r4, #0]
 8007320:	07d2      	lsls	r2, r2, #31
 8007322:	d501      	bpl.n	8007328 <_printf_float+0x15c>
 8007324:	3301      	adds	r3, #1
 8007326:	6123      	str	r3, [r4, #16]
 8007328:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800732c:	2b00      	cmp	r3, #0
 800732e:	d09e      	beq.n	800726e <_printf_float+0xa2>
 8007330:	232d      	movs	r3, #45	@ 0x2d
 8007332:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007336:	e79a      	b.n	800726e <_printf_float+0xa2>
 8007338:	2947      	cmp	r1, #71	@ 0x47
 800733a:	d1bf      	bne.n	80072bc <_printf_float+0xf0>
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1bd      	bne.n	80072bc <_printf_float+0xf0>
 8007340:	2301      	movs	r3, #1
 8007342:	e7ba      	b.n	80072ba <_printf_float+0xee>
 8007344:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007348:	d9dc      	bls.n	8007304 <_printf_float+0x138>
 800734a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800734e:	d118      	bne.n	8007382 <_printf_float+0x1b6>
 8007350:	2900      	cmp	r1, #0
 8007352:	6863      	ldr	r3, [r4, #4]
 8007354:	dd0b      	ble.n	800736e <_printf_float+0x1a2>
 8007356:	6121      	str	r1, [r4, #16]
 8007358:	b913      	cbnz	r3, 8007360 <_printf_float+0x194>
 800735a:	6822      	ldr	r2, [r4, #0]
 800735c:	07d0      	lsls	r0, r2, #31
 800735e:	d502      	bpl.n	8007366 <_printf_float+0x19a>
 8007360:	3301      	adds	r3, #1
 8007362:	440b      	add	r3, r1
 8007364:	6123      	str	r3, [r4, #16]
 8007366:	f04f 0900 	mov.w	r9, #0
 800736a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800736c:	e7dc      	b.n	8007328 <_printf_float+0x15c>
 800736e:	b913      	cbnz	r3, 8007376 <_printf_float+0x1aa>
 8007370:	6822      	ldr	r2, [r4, #0]
 8007372:	07d2      	lsls	r2, r2, #31
 8007374:	d501      	bpl.n	800737a <_printf_float+0x1ae>
 8007376:	3302      	adds	r3, #2
 8007378:	e7f4      	b.n	8007364 <_printf_float+0x198>
 800737a:	2301      	movs	r3, #1
 800737c:	e7f2      	b.n	8007364 <_printf_float+0x198>
 800737e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007382:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007384:	4299      	cmp	r1, r3
 8007386:	db05      	blt.n	8007394 <_printf_float+0x1c8>
 8007388:	6823      	ldr	r3, [r4, #0]
 800738a:	6121      	str	r1, [r4, #16]
 800738c:	07d8      	lsls	r0, r3, #31
 800738e:	d5ea      	bpl.n	8007366 <_printf_float+0x19a>
 8007390:	1c4b      	adds	r3, r1, #1
 8007392:	e7e7      	b.n	8007364 <_printf_float+0x198>
 8007394:	2900      	cmp	r1, #0
 8007396:	bfcc      	ite	gt
 8007398:	2201      	movgt	r2, #1
 800739a:	f1c1 0202 	rsble	r2, r1, #2
 800739e:	4413      	add	r3, r2
 80073a0:	e7e0      	b.n	8007364 <_printf_float+0x198>
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	055a      	lsls	r2, r3, #21
 80073a6:	d407      	bmi.n	80073b8 <_printf_float+0x1ec>
 80073a8:	6923      	ldr	r3, [r4, #16]
 80073aa:	4642      	mov	r2, r8
 80073ac:	4631      	mov	r1, r6
 80073ae:	4628      	mov	r0, r5
 80073b0:	47b8      	blx	r7
 80073b2:	3001      	adds	r0, #1
 80073b4:	d12b      	bne.n	800740e <_printf_float+0x242>
 80073b6:	e764      	b.n	8007282 <_printf_float+0xb6>
 80073b8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80073bc:	f240 80dc 	bls.w	8007578 <_printf_float+0x3ac>
 80073c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80073c4:	2200      	movs	r2, #0
 80073c6:	2300      	movs	r3, #0
 80073c8:	f7f9 faf8 	bl	80009bc <__aeabi_dcmpeq>
 80073cc:	2800      	cmp	r0, #0
 80073ce:	d033      	beq.n	8007438 <_printf_float+0x26c>
 80073d0:	2301      	movs	r3, #1
 80073d2:	4631      	mov	r1, r6
 80073d4:	4628      	mov	r0, r5
 80073d6:	4a35      	ldr	r2, [pc, #212]	@ (80074ac <_printf_float+0x2e0>)
 80073d8:	47b8      	blx	r7
 80073da:	3001      	adds	r0, #1
 80073dc:	f43f af51 	beq.w	8007282 <_printf_float+0xb6>
 80073e0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80073e4:	4543      	cmp	r3, r8
 80073e6:	db02      	blt.n	80073ee <_printf_float+0x222>
 80073e8:	6823      	ldr	r3, [r4, #0]
 80073ea:	07d8      	lsls	r0, r3, #31
 80073ec:	d50f      	bpl.n	800740e <_printf_float+0x242>
 80073ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80073f2:	4631      	mov	r1, r6
 80073f4:	4628      	mov	r0, r5
 80073f6:	47b8      	blx	r7
 80073f8:	3001      	adds	r0, #1
 80073fa:	f43f af42 	beq.w	8007282 <_printf_float+0xb6>
 80073fe:	f04f 0900 	mov.w	r9, #0
 8007402:	f108 38ff 	add.w	r8, r8, #4294967295
 8007406:	f104 0a1a 	add.w	sl, r4, #26
 800740a:	45c8      	cmp	r8, r9
 800740c:	dc09      	bgt.n	8007422 <_printf_float+0x256>
 800740e:	6823      	ldr	r3, [r4, #0]
 8007410:	079b      	lsls	r3, r3, #30
 8007412:	f100 8102 	bmi.w	800761a <_printf_float+0x44e>
 8007416:	68e0      	ldr	r0, [r4, #12]
 8007418:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800741a:	4298      	cmp	r0, r3
 800741c:	bfb8      	it	lt
 800741e:	4618      	movlt	r0, r3
 8007420:	e731      	b.n	8007286 <_printf_float+0xba>
 8007422:	2301      	movs	r3, #1
 8007424:	4652      	mov	r2, sl
 8007426:	4631      	mov	r1, r6
 8007428:	4628      	mov	r0, r5
 800742a:	47b8      	blx	r7
 800742c:	3001      	adds	r0, #1
 800742e:	f43f af28 	beq.w	8007282 <_printf_float+0xb6>
 8007432:	f109 0901 	add.w	r9, r9, #1
 8007436:	e7e8      	b.n	800740a <_printf_float+0x23e>
 8007438:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800743a:	2b00      	cmp	r3, #0
 800743c:	dc38      	bgt.n	80074b0 <_printf_float+0x2e4>
 800743e:	2301      	movs	r3, #1
 8007440:	4631      	mov	r1, r6
 8007442:	4628      	mov	r0, r5
 8007444:	4a19      	ldr	r2, [pc, #100]	@ (80074ac <_printf_float+0x2e0>)
 8007446:	47b8      	blx	r7
 8007448:	3001      	adds	r0, #1
 800744a:	f43f af1a 	beq.w	8007282 <_printf_float+0xb6>
 800744e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007452:	ea59 0303 	orrs.w	r3, r9, r3
 8007456:	d102      	bne.n	800745e <_printf_float+0x292>
 8007458:	6823      	ldr	r3, [r4, #0]
 800745a:	07d9      	lsls	r1, r3, #31
 800745c:	d5d7      	bpl.n	800740e <_printf_float+0x242>
 800745e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007462:	4631      	mov	r1, r6
 8007464:	4628      	mov	r0, r5
 8007466:	47b8      	blx	r7
 8007468:	3001      	adds	r0, #1
 800746a:	f43f af0a 	beq.w	8007282 <_printf_float+0xb6>
 800746e:	f04f 0a00 	mov.w	sl, #0
 8007472:	f104 0b1a 	add.w	fp, r4, #26
 8007476:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007478:	425b      	negs	r3, r3
 800747a:	4553      	cmp	r3, sl
 800747c:	dc01      	bgt.n	8007482 <_printf_float+0x2b6>
 800747e:	464b      	mov	r3, r9
 8007480:	e793      	b.n	80073aa <_printf_float+0x1de>
 8007482:	2301      	movs	r3, #1
 8007484:	465a      	mov	r2, fp
 8007486:	4631      	mov	r1, r6
 8007488:	4628      	mov	r0, r5
 800748a:	47b8      	blx	r7
 800748c:	3001      	adds	r0, #1
 800748e:	f43f aef8 	beq.w	8007282 <_printf_float+0xb6>
 8007492:	f10a 0a01 	add.w	sl, sl, #1
 8007496:	e7ee      	b.n	8007476 <_printf_float+0x2aa>
 8007498:	7fefffff 	.word	0x7fefffff
 800749c:	0800abc1 	.word	0x0800abc1
 80074a0:	0800abc5 	.word	0x0800abc5
 80074a4:	0800abc9 	.word	0x0800abc9
 80074a8:	0800abcd 	.word	0x0800abcd
 80074ac:	0800abd1 	.word	0x0800abd1
 80074b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80074b2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80074b6:	4553      	cmp	r3, sl
 80074b8:	bfa8      	it	ge
 80074ba:	4653      	movge	r3, sl
 80074bc:	2b00      	cmp	r3, #0
 80074be:	4699      	mov	r9, r3
 80074c0:	dc36      	bgt.n	8007530 <_printf_float+0x364>
 80074c2:	f04f 0b00 	mov.w	fp, #0
 80074c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80074ca:	f104 021a 	add.w	r2, r4, #26
 80074ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80074d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80074d2:	eba3 0309 	sub.w	r3, r3, r9
 80074d6:	455b      	cmp	r3, fp
 80074d8:	dc31      	bgt.n	800753e <_printf_float+0x372>
 80074da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074dc:	459a      	cmp	sl, r3
 80074de:	dc3a      	bgt.n	8007556 <_printf_float+0x38a>
 80074e0:	6823      	ldr	r3, [r4, #0]
 80074e2:	07da      	lsls	r2, r3, #31
 80074e4:	d437      	bmi.n	8007556 <_printf_float+0x38a>
 80074e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80074e8:	ebaa 0903 	sub.w	r9, sl, r3
 80074ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074ee:	ebaa 0303 	sub.w	r3, sl, r3
 80074f2:	4599      	cmp	r9, r3
 80074f4:	bfa8      	it	ge
 80074f6:	4699      	movge	r9, r3
 80074f8:	f1b9 0f00 	cmp.w	r9, #0
 80074fc:	dc33      	bgt.n	8007566 <_printf_float+0x39a>
 80074fe:	f04f 0800 	mov.w	r8, #0
 8007502:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007506:	f104 0b1a 	add.w	fp, r4, #26
 800750a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800750c:	ebaa 0303 	sub.w	r3, sl, r3
 8007510:	eba3 0309 	sub.w	r3, r3, r9
 8007514:	4543      	cmp	r3, r8
 8007516:	f77f af7a 	ble.w	800740e <_printf_float+0x242>
 800751a:	2301      	movs	r3, #1
 800751c:	465a      	mov	r2, fp
 800751e:	4631      	mov	r1, r6
 8007520:	4628      	mov	r0, r5
 8007522:	47b8      	blx	r7
 8007524:	3001      	adds	r0, #1
 8007526:	f43f aeac 	beq.w	8007282 <_printf_float+0xb6>
 800752a:	f108 0801 	add.w	r8, r8, #1
 800752e:	e7ec      	b.n	800750a <_printf_float+0x33e>
 8007530:	4642      	mov	r2, r8
 8007532:	4631      	mov	r1, r6
 8007534:	4628      	mov	r0, r5
 8007536:	47b8      	blx	r7
 8007538:	3001      	adds	r0, #1
 800753a:	d1c2      	bne.n	80074c2 <_printf_float+0x2f6>
 800753c:	e6a1      	b.n	8007282 <_printf_float+0xb6>
 800753e:	2301      	movs	r3, #1
 8007540:	4631      	mov	r1, r6
 8007542:	4628      	mov	r0, r5
 8007544:	920a      	str	r2, [sp, #40]	@ 0x28
 8007546:	47b8      	blx	r7
 8007548:	3001      	adds	r0, #1
 800754a:	f43f ae9a 	beq.w	8007282 <_printf_float+0xb6>
 800754e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007550:	f10b 0b01 	add.w	fp, fp, #1
 8007554:	e7bb      	b.n	80074ce <_printf_float+0x302>
 8007556:	4631      	mov	r1, r6
 8007558:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800755c:	4628      	mov	r0, r5
 800755e:	47b8      	blx	r7
 8007560:	3001      	adds	r0, #1
 8007562:	d1c0      	bne.n	80074e6 <_printf_float+0x31a>
 8007564:	e68d      	b.n	8007282 <_printf_float+0xb6>
 8007566:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007568:	464b      	mov	r3, r9
 800756a:	4631      	mov	r1, r6
 800756c:	4628      	mov	r0, r5
 800756e:	4442      	add	r2, r8
 8007570:	47b8      	blx	r7
 8007572:	3001      	adds	r0, #1
 8007574:	d1c3      	bne.n	80074fe <_printf_float+0x332>
 8007576:	e684      	b.n	8007282 <_printf_float+0xb6>
 8007578:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800757c:	f1ba 0f01 	cmp.w	sl, #1
 8007580:	dc01      	bgt.n	8007586 <_printf_float+0x3ba>
 8007582:	07db      	lsls	r3, r3, #31
 8007584:	d536      	bpl.n	80075f4 <_printf_float+0x428>
 8007586:	2301      	movs	r3, #1
 8007588:	4642      	mov	r2, r8
 800758a:	4631      	mov	r1, r6
 800758c:	4628      	mov	r0, r5
 800758e:	47b8      	blx	r7
 8007590:	3001      	adds	r0, #1
 8007592:	f43f ae76 	beq.w	8007282 <_printf_float+0xb6>
 8007596:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800759a:	4631      	mov	r1, r6
 800759c:	4628      	mov	r0, r5
 800759e:	47b8      	blx	r7
 80075a0:	3001      	adds	r0, #1
 80075a2:	f43f ae6e 	beq.w	8007282 <_printf_float+0xb6>
 80075a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80075aa:	2200      	movs	r2, #0
 80075ac:	2300      	movs	r3, #0
 80075ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 80075b2:	f7f9 fa03 	bl	80009bc <__aeabi_dcmpeq>
 80075b6:	b9c0      	cbnz	r0, 80075ea <_printf_float+0x41e>
 80075b8:	4653      	mov	r3, sl
 80075ba:	f108 0201 	add.w	r2, r8, #1
 80075be:	4631      	mov	r1, r6
 80075c0:	4628      	mov	r0, r5
 80075c2:	47b8      	blx	r7
 80075c4:	3001      	adds	r0, #1
 80075c6:	d10c      	bne.n	80075e2 <_printf_float+0x416>
 80075c8:	e65b      	b.n	8007282 <_printf_float+0xb6>
 80075ca:	2301      	movs	r3, #1
 80075cc:	465a      	mov	r2, fp
 80075ce:	4631      	mov	r1, r6
 80075d0:	4628      	mov	r0, r5
 80075d2:	47b8      	blx	r7
 80075d4:	3001      	adds	r0, #1
 80075d6:	f43f ae54 	beq.w	8007282 <_printf_float+0xb6>
 80075da:	f108 0801 	add.w	r8, r8, #1
 80075de:	45d0      	cmp	r8, sl
 80075e0:	dbf3      	blt.n	80075ca <_printf_float+0x3fe>
 80075e2:	464b      	mov	r3, r9
 80075e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80075e8:	e6e0      	b.n	80073ac <_printf_float+0x1e0>
 80075ea:	f04f 0800 	mov.w	r8, #0
 80075ee:	f104 0b1a 	add.w	fp, r4, #26
 80075f2:	e7f4      	b.n	80075de <_printf_float+0x412>
 80075f4:	2301      	movs	r3, #1
 80075f6:	4642      	mov	r2, r8
 80075f8:	e7e1      	b.n	80075be <_printf_float+0x3f2>
 80075fa:	2301      	movs	r3, #1
 80075fc:	464a      	mov	r2, r9
 80075fe:	4631      	mov	r1, r6
 8007600:	4628      	mov	r0, r5
 8007602:	47b8      	blx	r7
 8007604:	3001      	adds	r0, #1
 8007606:	f43f ae3c 	beq.w	8007282 <_printf_float+0xb6>
 800760a:	f108 0801 	add.w	r8, r8, #1
 800760e:	68e3      	ldr	r3, [r4, #12]
 8007610:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007612:	1a5b      	subs	r3, r3, r1
 8007614:	4543      	cmp	r3, r8
 8007616:	dcf0      	bgt.n	80075fa <_printf_float+0x42e>
 8007618:	e6fd      	b.n	8007416 <_printf_float+0x24a>
 800761a:	f04f 0800 	mov.w	r8, #0
 800761e:	f104 0919 	add.w	r9, r4, #25
 8007622:	e7f4      	b.n	800760e <_printf_float+0x442>

08007624 <_printf_common>:
 8007624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007628:	4616      	mov	r6, r2
 800762a:	4698      	mov	r8, r3
 800762c:	688a      	ldr	r2, [r1, #8]
 800762e:	690b      	ldr	r3, [r1, #16]
 8007630:	4607      	mov	r7, r0
 8007632:	4293      	cmp	r3, r2
 8007634:	bfb8      	it	lt
 8007636:	4613      	movlt	r3, r2
 8007638:	6033      	str	r3, [r6, #0]
 800763a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800763e:	460c      	mov	r4, r1
 8007640:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007644:	b10a      	cbz	r2, 800764a <_printf_common+0x26>
 8007646:	3301      	adds	r3, #1
 8007648:	6033      	str	r3, [r6, #0]
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	0699      	lsls	r1, r3, #26
 800764e:	bf42      	ittt	mi
 8007650:	6833      	ldrmi	r3, [r6, #0]
 8007652:	3302      	addmi	r3, #2
 8007654:	6033      	strmi	r3, [r6, #0]
 8007656:	6825      	ldr	r5, [r4, #0]
 8007658:	f015 0506 	ands.w	r5, r5, #6
 800765c:	d106      	bne.n	800766c <_printf_common+0x48>
 800765e:	f104 0a19 	add.w	sl, r4, #25
 8007662:	68e3      	ldr	r3, [r4, #12]
 8007664:	6832      	ldr	r2, [r6, #0]
 8007666:	1a9b      	subs	r3, r3, r2
 8007668:	42ab      	cmp	r3, r5
 800766a:	dc2b      	bgt.n	80076c4 <_printf_common+0xa0>
 800766c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007670:	6822      	ldr	r2, [r4, #0]
 8007672:	3b00      	subs	r3, #0
 8007674:	bf18      	it	ne
 8007676:	2301      	movne	r3, #1
 8007678:	0692      	lsls	r2, r2, #26
 800767a:	d430      	bmi.n	80076de <_printf_common+0xba>
 800767c:	4641      	mov	r1, r8
 800767e:	4638      	mov	r0, r7
 8007680:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007684:	47c8      	blx	r9
 8007686:	3001      	adds	r0, #1
 8007688:	d023      	beq.n	80076d2 <_printf_common+0xae>
 800768a:	6823      	ldr	r3, [r4, #0]
 800768c:	6922      	ldr	r2, [r4, #16]
 800768e:	f003 0306 	and.w	r3, r3, #6
 8007692:	2b04      	cmp	r3, #4
 8007694:	bf14      	ite	ne
 8007696:	2500      	movne	r5, #0
 8007698:	6833      	ldreq	r3, [r6, #0]
 800769a:	f04f 0600 	mov.w	r6, #0
 800769e:	bf08      	it	eq
 80076a0:	68e5      	ldreq	r5, [r4, #12]
 80076a2:	f104 041a 	add.w	r4, r4, #26
 80076a6:	bf08      	it	eq
 80076a8:	1aed      	subeq	r5, r5, r3
 80076aa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80076ae:	bf08      	it	eq
 80076b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076b4:	4293      	cmp	r3, r2
 80076b6:	bfc4      	itt	gt
 80076b8:	1a9b      	subgt	r3, r3, r2
 80076ba:	18ed      	addgt	r5, r5, r3
 80076bc:	42b5      	cmp	r5, r6
 80076be:	d11a      	bne.n	80076f6 <_printf_common+0xd2>
 80076c0:	2000      	movs	r0, #0
 80076c2:	e008      	b.n	80076d6 <_printf_common+0xb2>
 80076c4:	2301      	movs	r3, #1
 80076c6:	4652      	mov	r2, sl
 80076c8:	4641      	mov	r1, r8
 80076ca:	4638      	mov	r0, r7
 80076cc:	47c8      	blx	r9
 80076ce:	3001      	adds	r0, #1
 80076d0:	d103      	bne.n	80076da <_printf_common+0xb6>
 80076d2:	f04f 30ff 	mov.w	r0, #4294967295
 80076d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076da:	3501      	adds	r5, #1
 80076dc:	e7c1      	b.n	8007662 <_printf_common+0x3e>
 80076de:	2030      	movs	r0, #48	@ 0x30
 80076e0:	18e1      	adds	r1, r4, r3
 80076e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076e6:	1c5a      	adds	r2, r3, #1
 80076e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076ec:	4422      	add	r2, r4
 80076ee:	3302      	adds	r3, #2
 80076f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076f4:	e7c2      	b.n	800767c <_printf_common+0x58>
 80076f6:	2301      	movs	r3, #1
 80076f8:	4622      	mov	r2, r4
 80076fa:	4641      	mov	r1, r8
 80076fc:	4638      	mov	r0, r7
 80076fe:	47c8      	blx	r9
 8007700:	3001      	adds	r0, #1
 8007702:	d0e6      	beq.n	80076d2 <_printf_common+0xae>
 8007704:	3601      	adds	r6, #1
 8007706:	e7d9      	b.n	80076bc <_printf_common+0x98>

08007708 <_printf_i>:
 8007708:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800770c:	7e0f      	ldrb	r7, [r1, #24]
 800770e:	4691      	mov	r9, r2
 8007710:	2f78      	cmp	r7, #120	@ 0x78
 8007712:	4680      	mov	r8, r0
 8007714:	460c      	mov	r4, r1
 8007716:	469a      	mov	sl, r3
 8007718:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800771a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800771e:	d807      	bhi.n	8007730 <_printf_i+0x28>
 8007720:	2f62      	cmp	r7, #98	@ 0x62
 8007722:	d80a      	bhi.n	800773a <_printf_i+0x32>
 8007724:	2f00      	cmp	r7, #0
 8007726:	f000 80d3 	beq.w	80078d0 <_printf_i+0x1c8>
 800772a:	2f58      	cmp	r7, #88	@ 0x58
 800772c:	f000 80ba 	beq.w	80078a4 <_printf_i+0x19c>
 8007730:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007734:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007738:	e03a      	b.n	80077b0 <_printf_i+0xa8>
 800773a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800773e:	2b15      	cmp	r3, #21
 8007740:	d8f6      	bhi.n	8007730 <_printf_i+0x28>
 8007742:	a101      	add	r1, pc, #4	@ (adr r1, 8007748 <_printf_i+0x40>)
 8007744:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007748:	080077a1 	.word	0x080077a1
 800774c:	080077b5 	.word	0x080077b5
 8007750:	08007731 	.word	0x08007731
 8007754:	08007731 	.word	0x08007731
 8007758:	08007731 	.word	0x08007731
 800775c:	08007731 	.word	0x08007731
 8007760:	080077b5 	.word	0x080077b5
 8007764:	08007731 	.word	0x08007731
 8007768:	08007731 	.word	0x08007731
 800776c:	08007731 	.word	0x08007731
 8007770:	08007731 	.word	0x08007731
 8007774:	080078b7 	.word	0x080078b7
 8007778:	080077df 	.word	0x080077df
 800777c:	08007871 	.word	0x08007871
 8007780:	08007731 	.word	0x08007731
 8007784:	08007731 	.word	0x08007731
 8007788:	080078d9 	.word	0x080078d9
 800778c:	08007731 	.word	0x08007731
 8007790:	080077df 	.word	0x080077df
 8007794:	08007731 	.word	0x08007731
 8007798:	08007731 	.word	0x08007731
 800779c:	08007879 	.word	0x08007879
 80077a0:	6833      	ldr	r3, [r6, #0]
 80077a2:	1d1a      	adds	r2, r3, #4
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	6032      	str	r2, [r6, #0]
 80077a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80077b0:	2301      	movs	r3, #1
 80077b2:	e09e      	b.n	80078f2 <_printf_i+0x1ea>
 80077b4:	6833      	ldr	r3, [r6, #0]
 80077b6:	6820      	ldr	r0, [r4, #0]
 80077b8:	1d19      	adds	r1, r3, #4
 80077ba:	6031      	str	r1, [r6, #0]
 80077bc:	0606      	lsls	r6, r0, #24
 80077be:	d501      	bpl.n	80077c4 <_printf_i+0xbc>
 80077c0:	681d      	ldr	r5, [r3, #0]
 80077c2:	e003      	b.n	80077cc <_printf_i+0xc4>
 80077c4:	0645      	lsls	r5, r0, #25
 80077c6:	d5fb      	bpl.n	80077c0 <_printf_i+0xb8>
 80077c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077cc:	2d00      	cmp	r5, #0
 80077ce:	da03      	bge.n	80077d8 <_printf_i+0xd0>
 80077d0:	232d      	movs	r3, #45	@ 0x2d
 80077d2:	426d      	negs	r5, r5
 80077d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077d8:	230a      	movs	r3, #10
 80077da:	4859      	ldr	r0, [pc, #356]	@ (8007940 <_printf_i+0x238>)
 80077dc:	e011      	b.n	8007802 <_printf_i+0xfa>
 80077de:	6821      	ldr	r1, [r4, #0]
 80077e0:	6833      	ldr	r3, [r6, #0]
 80077e2:	0608      	lsls	r0, r1, #24
 80077e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80077e8:	d402      	bmi.n	80077f0 <_printf_i+0xe8>
 80077ea:	0649      	lsls	r1, r1, #25
 80077ec:	bf48      	it	mi
 80077ee:	b2ad      	uxthmi	r5, r5
 80077f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80077f2:	6033      	str	r3, [r6, #0]
 80077f4:	bf14      	ite	ne
 80077f6:	230a      	movne	r3, #10
 80077f8:	2308      	moveq	r3, #8
 80077fa:	4851      	ldr	r0, [pc, #324]	@ (8007940 <_printf_i+0x238>)
 80077fc:	2100      	movs	r1, #0
 80077fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007802:	6866      	ldr	r6, [r4, #4]
 8007804:	2e00      	cmp	r6, #0
 8007806:	bfa8      	it	ge
 8007808:	6821      	ldrge	r1, [r4, #0]
 800780a:	60a6      	str	r6, [r4, #8]
 800780c:	bfa4      	itt	ge
 800780e:	f021 0104 	bicge.w	r1, r1, #4
 8007812:	6021      	strge	r1, [r4, #0]
 8007814:	b90d      	cbnz	r5, 800781a <_printf_i+0x112>
 8007816:	2e00      	cmp	r6, #0
 8007818:	d04b      	beq.n	80078b2 <_printf_i+0x1aa>
 800781a:	4616      	mov	r6, r2
 800781c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007820:	fb03 5711 	mls	r7, r3, r1, r5
 8007824:	5dc7      	ldrb	r7, [r0, r7]
 8007826:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800782a:	462f      	mov	r7, r5
 800782c:	42bb      	cmp	r3, r7
 800782e:	460d      	mov	r5, r1
 8007830:	d9f4      	bls.n	800781c <_printf_i+0x114>
 8007832:	2b08      	cmp	r3, #8
 8007834:	d10b      	bne.n	800784e <_printf_i+0x146>
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	07df      	lsls	r7, r3, #31
 800783a:	d508      	bpl.n	800784e <_printf_i+0x146>
 800783c:	6923      	ldr	r3, [r4, #16]
 800783e:	6861      	ldr	r1, [r4, #4]
 8007840:	4299      	cmp	r1, r3
 8007842:	bfde      	ittt	le
 8007844:	2330      	movle	r3, #48	@ 0x30
 8007846:	f806 3c01 	strble.w	r3, [r6, #-1]
 800784a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800784e:	1b92      	subs	r2, r2, r6
 8007850:	6122      	str	r2, [r4, #16]
 8007852:	464b      	mov	r3, r9
 8007854:	4621      	mov	r1, r4
 8007856:	4640      	mov	r0, r8
 8007858:	f8cd a000 	str.w	sl, [sp]
 800785c:	aa03      	add	r2, sp, #12
 800785e:	f7ff fee1 	bl	8007624 <_printf_common>
 8007862:	3001      	adds	r0, #1
 8007864:	d14a      	bne.n	80078fc <_printf_i+0x1f4>
 8007866:	f04f 30ff 	mov.w	r0, #4294967295
 800786a:	b004      	add	sp, #16
 800786c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	f043 0320 	orr.w	r3, r3, #32
 8007876:	6023      	str	r3, [r4, #0]
 8007878:	2778      	movs	r7, #120	@ 0x78
 800787a:	4832      	ldr	r0, [pc, #200]	@ (8007944 <_printf_i+0x23c>)
 800787c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007880:	6823      	ldr	r3, [r4, #0]
 8007882:	6831      	ldr	r1, [r6, #0]
 8007884:	061f      	lsls	r7, r3, #24
 8007886:	f851 5b04 	ldr.w	r5, [r1], #4
 800788a:	d402      	bmi.n	8007892 <_printf_i+0x18a>
 800788c:	065f      	lsls	r7, r3, #25
 800788e:	bf48      	it	mi
 8007890:	b2ad      	uxthmi	r5, r5
 8007892:	6031      	str	r1, [r6, #0]
 8007894:	07d9      	lsls	r1, r3, #31
 8007896:	bf44      	itt	mi
 8007898:	f043 0320 	orrmi.w	r3, r3, #32
 800789c:	6023      	strmi	r3, [r4, #0]
 800789e:	b11d      	cbz	r5, 80078a8 <_printf_i+0x1a0>
 80078a0:	2310      	movs	r3, #16
 80078a2:	e7ab      	b.n	80077fc <_printf_i+0xf4>
 80078a4:	4826      	ldr	r0, [pc, #152]	@ (8007940 <_printf_i+0x238>)
 80078a6:	e7e9      	b.n	800787c <_printf_i+0x174>
 80078a8:	6823      	ldr	r3, [r4, #0]
 80078aa:	f023 0320 	bic.w	r3, r3, #32
 80078ae:	6023      	str	r3, [r4, #0]
 80078b0:	e7f6      	b.n	80078a0 <_printf_i+0x198>
 80078b2:	4616      	mov	r6, r2
 80078b4:	e7bd      	b.n	8007832 <_printf_i+0x12a>
 80078b6:	6833      	ldr	r3, [r6, #0]
 80078b8:	6825      	ldr	r5, [r4, #0]
 80078ba:	1d18      	adds	r0, r3, #4
 80078bc:	6961      	ldr	r1, [r4, #20]
 80078be:	6030      	str	r0, [r6, #0]
 80078c0:	062e      	lsls	r6, r5, #24
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	d501      	bpl.n	80078ca <_printf_i+0x1c2>
 80078c6:	6019      	str	r1, [r3, #0]
 80078c8:	e002      	b.n	80078d0 <_printf_i+0x1c8>
 80078ca:	0668      	lsls	r0, r5, #25
 80078cc:	d5fb      	bpl.n	80078c6 <_printf_i+0x1be>
 80078ce:	8019      	strh	r1, [r3, #0]
 80078d0:	2300      	movs	r3, #0
 80078d2:	4616      	mov	r6, r2
 80078d4:	6123      	str	r3, [r4, #16]
 80078d6:	e7bc      	b.n	8007852 <_printf_i+0x14a>
 80078d8:	6833      	ldr	r3, [r6, #0]
 80078da:	2100      	movs	r1, #0
 80078dc:	1d1a      	adds	r2, r3, #4
 80078de:	6032      	str	r2, [r6, #0]
 80078e0:	681e      	ldr	r6, [r3, #0]
 80078e2:	6862      	ldr	r2, [r4, #4]
 80078e4:	4630      	mov	r0, r6
 80078e6:	f000 fa32 	bl	8007d4e <memchr>
 80078ea:	b108      	cbz	r0, 80078f0 <_printf_i+0x1e8>
 80078ec:	1b80      	subs	r0, r0, r6
 80078ee:	6060      	str	r0, [r4, #4]
 80078f0:	6863      	ldr	r3, [r4, #4]
 80078f2:	6123      	str	r3, [r4, #16]
 80078f4:	2300      	movs	r3, #0
 80078f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078fa:	e7aa      	b.n	8007852 <_printf_i+0x14a>
 80078fc:	4632      	mov	r2, r6
 80078fe:	4649      	mov	r1, r9
 8007900:	4640      	mov	r0, r8
 8007902:	6923      	ldr	r3, [r4, #16]
 8007904:	47d0      	blx	sl
 8007906:	3001      	adds	r0, #1
 8007908:	d0ad      	beq.n	8007866 <_printf_i+0x15e>
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	079b      	lsls	r3, r3, #30
 800790e:	d413      	bmi.n	8007938 <_printf_i+0x230>
 8007910:	68e0      	ldr	r0, [r4, #12]
 8007912:	9b03      	ldr	r3, [sp, #12]
 8007914:	4298      	cmp	r0, r3
 8007916:	bfb8      	it	lt
 8007918:	4618      	movlt	r0, r3
 800791a:	e7a6      	b.n	800786a <_printf_i+0x162>
 800791c:	2301      	movs	r3, #1
 800791e:	4632      	mov	r2, r6
 8007920:	4649      	mov	r1, r9
 8007922:	4640      	mov	r0, r8
 8007924:	47d0      	blx	sl
 8007926:	3001      	adds	r0, #1
 8007928:	d09d      	beq.n	8007866 <_printf_i+0x15e>
 800792a:	3501      	adds	r5, #1
 800792c:	68e3      	ldr	r3, [r4, #12]
 800792e:	9903      	ldr	r1, [sp, #12]
 8007930:	1a5b      	subs	r3, r3, r1
 8007932:	42ab      	cmp	r3, r5
 8007934:	dcf2      	bgt.n	800791c <_printf_i+0x214>
 8007936:	e7eb      	b.n	8007910 <_printf_i+0x208>
 8007938:	2500      	movs	r5, #0
 800793a:	f104 0619 	add.w	r6, r4, #25
 800793e:	e7f5      	b.n	800792c <_printf_i+0x224>
 8007940:	0800abd3 	.word	0x0800abd3
 8007944:	0800abe4 	.word	0x0800abe4

08007948 <std>:
 8007948:	2300      	movs	r3, #0
 800794a:	b510      	push	{r4, lr}
 800794c:	4604      	mov	r4, r0
 800794e:	e9c0 3300 	strd	r3, r3, [r0]
 8007952:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007956:	6083      	str	r3, [r0, #8]
 8007958:	8181      	strh	r1, [r0, #12]
 800795a:	6643      	str	r3, [r0, #100]	@ 0x64
 800795c:	81c2      	strh	r2, [r0, #14]
 800795e:	6183      	str	r3, [r0, #24]
 8007960:	4619      	mov	r1, r3
 8007962:	2208      	movs	r2, #8
 8007964:	305c      	adds	r0, #92	@ 0x5c
 8007966:	f000 f92d 	bl	8007bc4 <memset>
 800796a:	4b0d      	ldr	r3, [pc, #52]	@ (80079a0 <std+0x58>)
 800796c:	6224      	str	r4, [r4, #32]
 800796e:	6263      	str	r3, [r4, #36]	@ 0x24
 8007970:	4b0c      	ldr	r3, [pc, #48]	@ (80079a4 <std+0x5c>)
 8007972:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007974:	4b0c      	ldr	r3, [pc, #48]	@ (80079a8 <std+0x60>)
 8007976:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007978:	4b0c      	ldr	r3, [pc, #48]	@ (80079ac <std+0x64>)
 800797a:	6323      	str	r3, [r4, #48]	@ 0x30
 800797c:	4b0c      	ldr	r3, [pc, #48]	@ (80079b0 <std+0x68>)
 800797e:	429c      	cmp	r4, r3
 8007980:	d006      	beq.n	8007990 <std+0x48>
 8007982:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007986:	4294      	cmp	r4, r2
 8007988:	d002      	beq.n	8007990 <std+0x48>
 800798a:	33d0      	adds	r3, #208	@ 0xd0
 800798c:	429c      	cmp	r4, r3
 800798e:	d105      	bne.n	800799c <std+0x54>
 8007990:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007994:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007998:	f000 b9ce 	b.w	8007d38 <__retarget_lock_init_recursive>
 800799c:	bd10      	pop	{r4, pc}
 800799e:	bf00      	nop
 80079a0:	08007acd 	.word	0x08007acd
 80079a4:	08007aef 	.word	0x08007aef
 80079a8:	08007b27 	.word	0x08007b27
 80079ac:	08007b4b 	.word	0x08007b4b
 80079b0:	20000a38 	.word	0x20000a38

080079b4 <stdio_exit_handler>:
 80079b4:	4a02      	ldr	r2, [pc, #8]	@ (80079c0 <stdio_exit_handler+0xc>)
 80079b6:	4903      	ldr	r1, [pc, #12]	@ (80079c4 <stdio_exit_handler+0x10>)
 80079b8:	4803      	ldr	r0, [pc, #12]	@ (80079c8 <stdio_exit_handler+0x14>)
 80079ba:	f000 b869 	b.w	8007a90 <_fwalk_sglue>
 80079be:	bf00      	nop
 80079c0:	20000024 	.word	0x20000024
 80079c4:	08009fe9 	.word	0x08009fe9
 80079c8:	200001a0 	.word	0x200001a0

080079cc <cleanup_stdio>:
 80079cc:	6841      	ldr	r1, [r0, #4]
 80079ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007a00 <cleanup_stdio+0x34>)
 80079d0:	b510      	push	{r4, lr}
 80079d2:	4299      	cmp	r1, r3
 80079d4:	4604      	mov	r4, r0
 80079d6:	d001      	beq.n	80079dc <cleanup_stdio+0x10>
 80079d8:	f002 fb06 	bl	8009fe8 <_fflush_r>
 80079dc:	68a1      	ldr	r1, [r4, #8]
 80079de:	4b09      	ldr	r3, [pc, #36]	@ (8007a04 <cleanup_stdio+0x38>)
 80079e0:	4299      	cmp	r1, r3
 80079e2:	d002      	beq.n	80079ea <cleanup_stdio+0x1e>
 80079e4:	4620      	mov	r0, r4
 80079e6:	f002 faff 	bl	8009fe8 <_fflush_r>
 80079ea:	68e1      	ldr	r1, [r4, #12]
 80079ec:	4b06      	ldr	r3, [pc, #24]	@ (8007a08 <cleanup_stdio+0x3c>)
 80079ee:	4299      	cmp	r1, r3
 80079f0:	d004      	beq.n	80079fc <cleanup_stdio+0x30>
 80079f2:	4620      	mov	r0, r4
 80079f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079f8:	f002 baf6 	b.w	8009fe8 <_fflush_r>
 80079fc:	bd10      	pop	{r4, pc}
 80079fe:	bf00      	nop
 8007a00:	20000a38 	.word	0x20000a38
 8007a04:	20000aa0 	.word	0x20000aa0
 8007a08:	20000b08 	.word	0x20000b08

08007a0c <global_stdio_init.part.0>:
 8007a0c:	b510      	push	{r4, lr}
 8007a0e:	4b0b      	ldr	r3, [pc, #44]	@ (8007a3c <global_stdio_init.part.0+0x30>)
 8007a10:	4c0b      	ldr	r4, [pc, #44]	@ (8007a40 <global_stdio_init.part.0+0x34>)
 8007a12:	4a0c      	ldr	r2, [pc, #48]	@ (8007a44 <global_stdio_init.part.0+0x38>)
 8007a14:	4620      	mov	r0, r4
 8007a16:	601a      	str	r2, [r3, #0]
 8007a18:	2104      	movs	r1, #4
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f7ff ff94 	bl	8007948 <std>
 8007a20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007a24:	2201      	movs	r2, #1
 8007a26:	2109      	movs	r1, #9
 8007a28:	f7ff ff8e 	bl	8007948 <std>
 8007a2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007a30:	2202      	movs	r2, #2
 8007a32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a36:	2112      	movs	r1, #18
 8007a38:	f7ff bf86 	b.w	8007948 <std>
 8007a3c:	20000b70 	.word	0x20000b70
 8007a40:	20000a38 	.word	0x20000a38
 8007a44:	080079b5 	.word	0x080079b5

08007a48 <__sfp_lock_acquire>:
 8007a48:	4801      	ldr	r0, [pc, #4]	@ (8007a50 <__sfp_lock_acquire+0x8>)
 8007a4a:	f000 b976 	b.w	8007d3a <__retarget_lock_acquire_recursive>
 8007a4e:	bf00      	nop
 8007a50:	20000b79 	.word	0x20000b79

08007a54 <__sfp_lock_release>:
 8007a54:	4801      	ldr	r0, [pc, #4]	@ (8007a5c <__sfp_lock_release+0x8>)
 8007a56:	f000 b971 	b.w	8007d3c <__retarget_lock_release_recursive>
 8007a5a:	bf00      	nop
 8007a5c:	20000b79 	.word	0x20000b79

08007a60 <__sinit>:
 8007a60:	b510      	push	{r4, lr}
 8007a62:	4604      	mov	r4, r0
 8007a64:	f7ff fff0 	bl	8007a48 <__sfp_lock_acquire>
 8007a68:	6a23      	ldr	r3, [r4, #32]
 8007a6a:	b11b      	cbz	r3, 8007a74 <__sinit+0x14>
 8007a6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a70:	f7ff bff0 	b.w	8007a54 <__sfp_lock_release>
 8007a74:	4b04      	ldr	r3, [pc, #16]	@ (8007a88 <__sinit+0x28>)
 8007a76:	6223      	str	r3, [r4, #32]
 8007a78:	4b04      	ldr	r3, [pc, #16]	@ (8007a8c <__sinit+0x2c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d1f5      	bne.n	8007a6c <__sinit+0xc>
 8007a80:	f7ff ffc4 	bl	8007a0c <global_stdio_init.part.0>
 8007a84:	e7f2      	b.n	8007a6c <__sinit+0xc>
 8007a86:	bf00      	nop
 8007a88:	080079cd 	.word	0x080079cd
 8007a8c:	20000b70 	.word	0x20000b70

08007a90 <_fwalk_sglue>:
 8007a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a94:	4607      	mov	r7, r0
 8007a96:	4688      	mov	r8, r1
 8007a98:	4614      	mov	r4, r2
 8007a9a:	2600      	movs	r6, #0
 8007a9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007aa0:	f1b9 0901 	subs.w	r9, r9, #1
 8007aa4:	d505      	bpl.n	8007ab2 <_fwalk_sglue+0x22>
 8007aa6:	6824      	ldr	r4, [r4, #0]
 8007aa8:	2c00      	cmp	r4, #0
 8007aaa:	d1f7      	bne.n	8007a9c <_fwalk_sglue+0xc>
 8007aac:	4630      	mov	r0, r6
 8007aae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ab2:	89ab      	ldrh	r3, [r5, #12]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d907      	bls.n	8007ac8 <_fwalk_sglue+0x38>
 8007ab8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007abc:	3301      	adds	r3, #1
 8007abe:	d003      	beq.n	8007ac8 <_fwalk_sglue+0x38>
 8007ac0:	4629      	mov	r1, r5
 8007ac2:	4638      	mov	r0, r7
 8007ac4:	47c0      	blx	r8
 8007ac6:	4306      	orrs	r6, r0
 8007ac8:	3568      	adds	r5, #104	@ 0x68
 8007aca:	e7e9      	b.n	8007aa0 <_fwalk_sglue+0x10>

08007acc <__sread>:
 8007acc:	b510      	push	{r4, lr}
 8007ace:	460c      	mov	r4, r1
 8007ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ad4:	f000 f8e2 	bl	8007c9c <_read_r>
 8007ad8:	2800      	cmp	r0, #0
 8007ada:	bfab      	itete	ge
 8007adc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007ade:	89a3      	ldrhlt	r3, [r4, #12]
 8007ae0:	181b      	addge	r3, r3, r0
 8007ae2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007ae6:	bfac      	ite	ge
 8007ae8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007aea:	81a3      	strhlt	r3, [r4, #12]
 8007aec:	bd10      	pop	{r4, pc}

08007aee <__swrite>:
 8007aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007af2:	461f      	mov	r7, r3
 8007af4:	898b      	ldrh	r3, [r1, #12]
 8007af6:	4605      	mov	r5, r0
 8007af8:	05db      	lsls	r3, r3, #23
 8007afa:	460c      	mov	r4, r1
 8007afc:	4616      	mov	r6, r2
 8007afe:	d505      	bpl.n	8007b0c <__swrite+0x1e>
 8007b00:	2302      	movs	r3, #2
 8007b02:	2200      	movs	r2, #0
 8007b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b08:	f000 f8b6 	bl	8007c78 <_lseek_r>
 8007b0c:	89a3      	ldrh	r3, [r4, #12]
 8007b0e:	4632      	mov	r2, r6
 8007b10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007b14:	81a3      	strh	r3, [r4, #12]
 8007b16:	4628      	mov	r0, r5
 8007b18:	463b      	mov	r3, r7
 8007b1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b22:	f000 b8cd 	b.w	8007cc0 <_write_r>

08007b26 <__sseek>:
 8007b26:	b510      	push	{r4, lr}
 8007b28:	460c      	mov	r4, r1
 8007b2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b2e:	f000 f8a3 	bl	8007c78 <_lseek_r>
 8007b32:	1c43      	adds	r3, r0, #1
 8007b34:	89a3      	ldrh	r3, [r4, #12]
 8007b36:	bf15      	itete	ne
 8007b38:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007b3a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007b3e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007b42:	81a3      	strheq	r3, [r4, #12]
 8007b44:	bf18      	it	ne
 8007b46:	81a3      	strhne	r3, [r4, #12]
 8007b48:	bd10      	pop	{r4, pc}

08007b4a <__sclose>:
 8007b4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b4e:	f000 b883 	b.w	8007c58 <_close_r>

08007b52 <_vsniprintf_r>:
 8007b52:	b530      	push	{r4, r5, lr}
 8007b54:	4614      	mov	r4, r2
 8007b56:	2c00      	cmp	r4, #0
 8007b58:	4605      	mov	r5, r0
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	b09b      	sub	sp, #108	@ 0x6c
 8007b5e:	da05      	bge.n	8007b6c <_vsniprintf_r+0x1a>
 8007b60:	238b      	movs	r3, #139	@ 0x8b
 8007b62:	6003      	str	r3, [r0, #0]
 8007b64:	f04f 30ff 	mov.w	r0, #4294967295
 8007b68:	b01b      	add	sp, #108	@ 0x6c
 8007b6a:	bd30      	pop	{r4, r5, pc}
 8007b6c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007b70:	f8ad 300c 	strh.w	r3, [sp, #12]
 8007b74:	bf0c      	ite	eq
 8007b76:	4623      	moveq	r3, r4
 8007b78:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007b7c:	9302      	str	r3, [sp, #8]
 8007b7e:	9305      	str	r3, [sp, #20]
 8007b80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007b84:	9100      	str	r1, [sp, #0]
 8007b86:	9104      	str	r1, [sp, #16]
 8007b88:	f8ad 300e 	strh.w	r3, [sp, #14]
 8007b8c:	4669      	mov	r1, sp
 8007b8e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007b90:	f002 f8ae 	bl	8009cf0 <_svfiprintf_r>
 8007b94:	1c43      	adds	r3, r0, #1
 8007b96:	bfbc      	itt	lt
 8007b98:	238b      	movlt	r3, #139	@ 0x8b
 8007b9a:	602b      	strlt	r3, [r5, #0]
 8007b9c:	2c00      	cmp	r4, #0
 8007b9e:	d0e3      	beq.n	8007b68 <_vsniprintf_r+0x16>
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	9b00      	ldr	r3, [sp, #0]
 8007ba4:	701a      	strb	r2, [r3, #0]
 8007ba6:	e7df      	b.n	8007b68 <_vsniprintf_r+0x16>

08007ba8 <vsniprintf>:
 8007ba8:	b507      	push	{r0, r1, r2, lr}
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	4613      	mov	r3, r2
 8007bae:	460a      	mov	r2, r1
 8007bb0:	4601      	mov	r1, r0
 8007bb2:	4803      	ldr	r0, [pc, #12]	@ (8007bc0 <vsniprintf+0x18>)
 8007bb4:	6800      	ldr	r0, [r0, #0]
 8007bb6:	f7ff ffcc 	bl	8007b52 <_vsniprintf_r>
 8007bba:	b003      	add	sp, #12
 8007bbc:	f85d fb04 	ldr.w	pc, [sp], #4
 8007bc0:	2000019c 	.word	0x2000019c

08007bc4 <memset>:
 8007bc4:	4603      	mov	r3, r0
 8007bc6:	4402      	add	r2, r0
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d100      	bne.n	8007bce <memset+0xa>
 8007bcc:	4770      	bx	lr
 8007bce:	f803 1b01 	strb.w	r1, [r3], #1
 8007bd2:	e7f9      	b.n	8007bc8 <memset+0x4>

08007bd4 <strncmp>:
 8007bd4:	b510      	push	{r4, lr}
 8007bd6:	b16a      	cbz	r2, 8007bf4 <strncmp+0x20>
 8007bd8:	3901      	subs	r1, #1
 8007bda:	1884      	adds	r4, r0, r2
 8007bdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007be0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d103      	bne.n	8007bf0 <strncmp+0x1c>
 8007be8:	42a0      	cmp	r0, r4
 8007bea:	d001      	beq.n	8007bf0 <strncmp+0x1c>
 8007bec:	2a00      	cmp	r2, #0
 8007bee:	d1f5      	bne.n	8007bdc <strncmp+0x8>
 8007bf0:	1ad0      	subs	r0, r2, r3
 8007bf2:	bd10      	pop	{r4, pc}
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	e7fc      	b.n	8007bf2 <strncmp+0x1e>

08007bf8 <__strtok_r>:
 8007bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007bfa:	4604      	mov	r4, r0
 8007bfc:	b908      	cbnz	r0, 8007c02 <__strtok_r+0xa>
 8007bfe:	6814      	ldr	r4, [r2, #0]
 8007c00:	b144      	cbz	r4, 8007c14 <__strtok_r+0x1c>
 8007c02:	460f      	mov	r7, r1
 8007c04:	4620      	mov	r0, r4
 8007c06:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007c0a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007c0e:	b91e      	cbnz	r6, 8007c18 <__strtok_r+0x20>
 8007c10:	b965      	cbnz	r5, 8007c2c <__strtok_r+0x34>
 8007c12:	6015      	str	r5, [r2, #0]
 8007c14:	2000      	movs	r0, #0
 8007c16:	e005      	b.n	8007c24 <__strtok_r+0x2c>
 8007c18:	42b5      	cmp	r5, r6
 8007c1a:	d1f6      	bne.n	8007c0a <__strtok_r+0x12>
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1f0      	bne.n	8007c02 <__strtok_r+0xa>
 8007c20:	6014      	str	r4, [r2, #0]
 8007c22:	7003      	strb	r3, [r0, #0]
 8007c24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c26:	461c      	mov	r4, r3
 8007c28:	e00c      	b.n	8007c44 <__strtok_r+0x4c>
 8007c2a:	b915      	cbnz	r5, 8007c32 <__strtok_r+0x3a>
 8007c2c:	460e      	mov	r6, r1
 8007c2e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c32:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007c36:	42ab      	cmp	r3, r5
 8007c38:	d1f7      	bne.n	8007c2a <__strtok_r+0x32>
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d0f3      	beq.n	8007c26 <__strtok_r+0x2e>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007c44:	6014      	str	r4, [r2, #0]
 8007c46:	e7ed      	b.n	8007c24 <__strtok_r+0x2c>

08007c48 <strtok_r>:
 8007c48:	2301      	movs	r3, #1
 8007c4a:	f7ff bfd5 	b.w	8007bf8 <__strtok_r>
	...

08007c50 <_localeconv_r>:
 8007c50:	4800      	ldr	r0, [pc, #0]	@ (8007c54 <_localeconv_r+0x4>)
 8007c52:	4770      	bx	lr
 8007c54:	20000120 	.word	0x20000120

08007c58 <_close_r>:
 8007c58:	b538      	push	{r3, r4, r5, lr}
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	4d05      	ldr	r5, [pc, #20]	@ (8007c74 <_close_r+0x1c>)
 8007c5e:	4604      	mov	r4, r0
 8007c60:	4608      	mov	r0, r1
 8007c62:	602b      	str	r3, [r5, #0]
 8007c64:	f7f9 fc79 	bl	800155a <_close>
 8007c68:	1c43      	adds	r3, r0, #1
 8007c6a:	d102      	bne.n	8007c72 <_close_r+0x1a>
 8007c6c:	682b      	ldr	r3, [r5, #0]
 8007c6e:	b103      	cbz	r3, 8007c72 <_close_r+0x1a>
 8007c70:	6023      	str	r3, [r4, #0]
 8007c72:	bd38      	pop	{r3, r4, r5, pc}
 8007c74:	20000b74 	.word	0x20000b74

08007c78 <_lseek_r>:
 8007c78:	b538      	push	{r3, r4, r5, lr}
 8007c7a:	4604      	mov	r4, r0
 8007c7c:	4608      	mov	r0, r1
 8007c7e:	4611      	mov	r1, r2
 8007c80:	2200      	movs	r2, #0
 8007c82:	4d05      	ldr	r5, [pc, #20]	@ (8007c98 <_lseek_r+0x20>)
 8007c84:	602a      	str	r2, [r5, #0]
 8007c86:	461a      	mov	r2, r3
 8007c88:	f7f9 fc8b 	bl	80015a2 <_lseek>
 8007c8c:	1c43      	adds	r3, r0, #1
 8007c8e:	d102      	bne.n	8007c96 <_lseek_r+0x1e>
 8007c90:	682b      	ldr	r3, [r5, #0]
 8007c92:	b103      	cbz	r3, 8007c96 <_lseek_r+0x1e>
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	bd38      	pop	{r3, r4, r5, pc}
 8007c98:	20000b74 	.word	0x20000b74

08007c9c <_read_r>:
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	4608      	mov	r0, r1
 8007ca2:	4611      	mov	r1, r2
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	4d05      	ldr	r5, [pc, #20]	@ (8007cbc <_read_r+0x20>)
 8007ca8:	602a      	str	r2, [r5, #0]
 8007caa:	461a      	mov	r2, r3
 8007cac:	f7f9 fc1c 	bl	80014e8 <_read>
 8007cb0:	1c43      	adds	r3, r0, #1
 8007cb2:	d102      	bne.n	8007cba <_read_r+0x1e>
 8007cb4:	682b      	ldr	r3, [r5, #0]
 8007cb6:	b103      	cbz	r3, 8007cba <_read_r+0x1e>
 8007cb8:	6023      	str	r3, [r4, #0]
 8007cba:	bd38      	pop	{r3, r4, r5, pc}
 8007cbc:	20000b74 	.word	0x20000b74

08007cc0 <_write_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	4604      	mov	r4, r0
 8007cc4:	4608      	mov	r0, r1
 8007cc6:	4611      	mov	r1, r2
 8007cc8:	2200      	movs	r2, #0
 8007cca:	4d05      	ldr	r5, [pc, #20]	@ (8007ce0 <_write_r+0x20>)
 8007ccc:	602a      	str	r2, [r5, #0]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	f7f9 fc27 	bl	8001522 <_write>
 8007cd4:	1c43      	adds	r3, r0, #1
 8007cd6:	d102      	bne.n	8007cde <_write_r+0x1e>
 8007cd8:	682b      	ldr	r3, [r5, #0]
 8007cda:	b103      	cbz	r3, 8007cde <_write_r+0x1e>
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	bd38      	pop	{r3, r4, r5, pc}
 8007ce0:	20000b74 	.word	0x20000b74

08007ce4 <__errno>:
 8007ce4:	4b01      	ldr	r3, [pc, #4]	@ (8007cec <__errno+0x8>)
 8007ce6:	6818      	ldr	r0, [r3, #0]
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	2000019c 	.word	0x2000019c

08007cf0 <__libc_init_array>:
 8007cf0:	b570      	push	{r4, r5, r6, lr}
 8007cf2:	2600      	movs	r6, #0
 8007cf4:	4d0c      	ldr	r5, [pc, #48]	@ (8007d28 <__libc_init_array+0x38>)
 8007cf6:	4c0d      	ldr	r4, [pc, #52]	@ (8007d2c <__libc_init_array+0x3c>)
 8007cf8:	1b64      	subs	r4, r4, r5
 8007cfa:	10a4      	asrs	r4, r4, #2
 8007cfc:	42a6      	cmp	r6, r4
 8007cfe:	d109      	bne.n	8007d14 <__libc_init_array+0x24>
 8007d00:	f002 fce0 	bl	800a6c4 <_init>
 8007d04:	2600      	movs	r6, #0
 8007d06:	4d0a      	ldr	r5, [pc, #40]	@ (8007d30 <__libc_init_array+0x40>)
 8007d08:	4c0a      	ldr	r4, [pc, #40]	@ (8007d34 <__libc_init_array+0x44>)
 8007d0a:	1b64      	subs	r4, r4, r5
 8007d0c:	10a4      	asrs	r4, r4, #2
 8007d0e:	42a6      	cmp	r6, r4
 8007d10:	d105      	bne.n	8007d1e <__libc_init_array+0x2e>
 8007d12:	bd70      	pop	{r4, r5, r6, pc}
 8007d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d18:	4798      	blx	r3
 8007d1a:	3601      	adds	r6, #1
 8007d1c:	e7ee      	b.n	8007cfc <__libc_init_array+0xc>
 8007d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d22:	4798      	blx	r3
 8007d24:	3601      	adds	r6, #1
 8007d26:	e7f2      	b.n	8007d0e <__libc_init_array+0x1e>
 8007d28:	0800ae98 	.word	0x0800ae98
 8007d2c:	0800ae98 	.word	0x0800ae98
 8007d30:	0800ae98 	.word	0x0800ae98
 8007d34:	0800ae9c 	.word	0x0800ae9c

08007d38 <__retarget_lock_init_recursive>:
 8007d38:	4770      	bx	lr

08007d3a <__retarget_lock_acquire_recursive>:
 8007d3a:	4770      	bx	lr

08007d3c <__retarget_lock_release_recursive>:
 8007d3c:	4770      	bx	lr

08007d3e <strcpy>:
 8007d3e:	4603      	mov	r3, r0
 8007d40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007d44:	f803 2b01 	strb.w	r2, [r3], #1
 8007d48:	2a00      	cmp	r2, #0
 8007d4a:	d1f9      	bne.n	8007d40 <strcpy+0x2>
 8007d4c:	4770      	bx	lr

08007d4e <memchr>:
 8007d4e:	4603      	mov	r3, r0
 8007d50:	b510      	push	{r4, lr}
 8007d52:	b2c9      	uxtb	r1, r1
 8007d54:	4402      	add	r2, r0
 8007d56:	4293      	cmp	r3, r2
 8007d58:	4618      	mov	r0, r3
 8007d5a:	d101      	bne.n	8007d60 <memchr+0x12>
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	e003      	b.n	8007d68 <memchr+0x1a>
 8007d60:	7804      	ldrb	r4, [r0, #0]
 8007d62:	3301      	adds	r3, #1
 8007d64:	428c      	cmp	r4, r1
 8007d66:	d1f6      	bne.n	8007d56 <memchr+0x8>
 8007d68:	bd10      	pop	{r4, pc}

08007d6a <memcpy>:
 8007d6a:	440a      	add	r2, r1
 8007d6c:	4291      	cmp	r1, r2
 8007d6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d72:	d100      	bne.n	8007d76 <memcpy+0xc>
 8007d74:	4770      	bx	lr
 8007d76:	b510      	push	{r4, lr}
 8007d78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d7c:	4291      	cmp	r1, r2
 8007d7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d82:	d1f9      	bne.n	8007d78 <memcpy+0xe>
 8007d84:	bd10      	pop	{r4, pc}
	...

08007d88 <nan>:
 8007d88:	2000      	movs	r0, #0
 8007d8a:	4901      	ldr	r1, [pc, #4]	@ (8007d90 <nan+0x8>)
 8007d8c:	4770      	bx	lr
 8007d8e:	bf00      	nop
 8007d90:	7ff80000 	.word	0x7ff80000

08007d94 <nanf>:
 8007d94:	4800      	ldr	r0, [pc, #0]	@ (8007d98 <nanf+0x4>)
 8007d96:	4770      	bx	lr
 8007d98:	7fc00000 	.word	0x7fc00000

08007d9c <quorem>:
 8007d9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da0:	6903      	ldr	r3, [r0, #16]
 8007da2:	690c      	ldr	r4, [r1, #16]
 8007da4:	4607      	mov	r7, r0
 8007da6:	42a3      	cmp	r3, r4
 8007da8:	db7e      	blt.n	8007ea8 <quorem+0x10c>
 8007daa:	3c01      	subs	r4, #1
 8007dac:	00a3      	lsls	r3, r4, #2
 8007dae:	f100 0514 	add.w	r5, r0, #20
 8007db2:	f101 0814 	add.w	r8, r1, #20
 8007db6:	9300      	str	r3, [sp, #0]
 8007db8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007dbc:	9301      	str	r3, [sp, #4]
 8007dbe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007dc2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	fbb2 f6f3 	udiv	r6, r2, r3
 8007dce:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007dd2:	d32e      	bcc.n	8007e32 <quorem+0x96>
 8007dd4:	f04f 0a00 	mov.w	sl, #0
 8007dd8:	46c4      	mov	ip, r8
 8007dda:	46ae      	mov	lr, r5
 8007ddc:	46d3      	mov	fp, sl
 8007dde:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007de2:	b298      	uxth	r0, r3
 8007de4:	fb06 a000 	mla	r0, r6, r0, sl
 8007de8:	0c1b      	lsrs	r3, r3, #16
 8007dea:	0c02      	lsrs	r2, r0, #16
 8007dec:	fb06 2303 	mla	r3, r6, r3, r2
 8007df0:	f8de 2000 	ldr.w	r2, [lr]
 8007df4:	b280      	uxth	r0, r0
 8007df6:	b292      	uxth	r2, r2
 8007df8:	1a12      	subs	r2, r2, r0
 8007dfa:	445a      	add	r2, fp
 8007dfc:	f8de 0000 	ldr.w	r0, [lr]
 8007e00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007e0a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007e0e:	b292      	uxth	r2, r2
 8007e10:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007e14:	45e1      	cmp	r9, ip
 8007e16:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007e1a:	f84e 2b04 	str.w	r2, [lr], #4
 8007e1e:	d2de      	bcs.n	8007dde <quorem+0x42>
 8007e20:	9b00      	ldr	r3, [sp, #0]
 8007e22:	58eb      	ldr	r3, [r5, r3]
 8007e24:	b92b      	cbnz	r3, 8007e32 <quorem+0x96>
 8007e26:	9b01      	ldr	r3, [sp, #4]
 8007e28:	3b04      	subs	r3, #4
 8007e2a:	429d      	cmp	r5, r3
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	d32f      	bcc.n	8007e90 <quorem+0xf4>
 8007e30:	613c      	str	r4, [r7, #16]
 8007e32:	4638      	mov	r0, r7
 8007e34:	f001 fd10 	bl	8009858 <__mcmp>
 8007e38:	2800      	cmp	r0, #0
 8007e3a:	db25      	blt.n	8007e88 <quorem+0xec>
 8007e3c:	4629      	mov	r1, r5
 8007e3e:	2000      	movs	r0, #0
 8007e40:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e44:	f8d1 c000 	ldr.w	ip, [r1]
 8007e48:	fa1f fe82 	uxth.w	lr, r2
 8007e4c:	fa1f f38c 	uxth.w	r3, ip
 8007e50:	eba3 030e 	sub.w	r3, r3, lr
 8007e54:	4403      	add	r3, r0
 8007e56:	0c12      	lsrs	r2, r2, #16
 8007e58:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007e5c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007e60:	b29b      	uxth	r3, r3
 8007e62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e66:	45c1      	cmp	r9, r8
 8007e68:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007e6c:	f841 3b04 	str.w	r3, [r1], #4
 8007e70:	d2e6      	bcs.n	8007e40 <quorem+0xa4>
 8007e72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e7a:	b922      	cbnz	r2, 8007e86 <quorem+0xea>
 8007e7c:	3b04      	subs	r3, #4
 8007e7e:	429d      	cmp	r5, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	d30b      	bcc.n	8007e9c <quorem+0x100>
 8007e84:	613c      	str	r4, [r7, #16]
 8007e86:	3601      	adds	r6, #1
 8007e88:	4630      	mov	r0, r6
 8007e8a:	b003      	add	sp, #12
 8007e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e90:	6812      	ldr	r2, [r2, #0]
 8007e92:	3b04      	subs	r3, #4
 8007e94:	2a00      	cmp	r2, #0
 8007e96:	d1cb      	bne.n	8007e30 <quorem+0x94>
 8007e98:	3c01      	subs	r4, #1
 8007e9a:	e7c6      	b.n	8007e2a <quorem+0x8e>
 8007e9c:	6812      	ldr	r2, [r2, #0]
 8007e9e:	3b04      	subs	r3, #4
 8007ea0:	2a00      	cmp	r2, #0
 8007ea2:	d1ef      	bne.n	8007e84 <quorem+0xe8>
 8007ea4:	3c01      	subs	r4, #1
 8007ea6:	e7ea      	b.n	8007e7e <quorem+0xe2>
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	e7ee      	b.n	8007e8a <quorem+0xee>
 8007eac:	0000      	movs	r0, r0
	...

08007eb0 <_dtoa_r>:
 8007eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007eb4:	4614      	mov	r4, r2
 8007eb6:	461d      	mov	r5, r3
 8007eb8:	69c7      	ldr	r7, [r0, #28]
 8007eba:	b097      	sub	sp, #92	@ 0x5c
 8007ebc:	4683      	mov	fp, r0
 8007ebe:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007ec2:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007ec4:	b97f      	cbnz	r7, 8007ee6 <_dtoa_r+0x36>
 8007ec6:	2010      	movs	r0, #16
 8007ec8:	f001 f93c 	bl	8009144 <malloc>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	f8cb 001c 	str.w	r0, [fp, #28]
 8007ed2:	b920      	cbnz	r0, 8007ede <_dtoa_r+0x2e>
 8007ed4:	21ef      	movs	r1, #239	@ 0xef
 8007ed6:	4ba8      	ldr	r3, [pc, #672]	@ (8008178 <_dtoa_r+0x2c8>)
 8007ed8:	48a8      	ldr	r0, [pc, #672]	@ (800817c <_dtoa_r+0x2cc>)
 8007eda:	f002 f8d7 	bl	800a08c <__assert_func>
 8007ede:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007ee2:	6007      	str	r7, [r0, #0]
 8007ee4:	60c7      	str	r7, [r0, #12]
 8007ee6:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007eea:	6819      	ldr	r1, [r3, #0]
 8007eec:	b159      	cbz	r1, 8007f06 <_dtoa_r+0x56>
 8007eee:	685a      	ldr	r2, [r3, #4]
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	4093      	lsls	r3, r2
 8007ef4:	604a      	str	r2, [r1, #4]
 8007ef6:	608b      	str	r3, [r1, #8]
 8007ef8:	4658      	mov	r0, fp
 8007efa:	f001 fa2b 	bl	8009354 <_Bfree>
 8007efe:	2200      	movs	r2, #0
 8007f00:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	1e2b      	subs	r3, r5, #0
 8007f08:	bfaf      	iteee	ge
 8007f0a:	2300      	movge	r3, #0
 8007f0c:	2201      	movlt	r2, #1
 8007f0e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007f12:	9303      	strlt	r3, [sp, #12]
 8007f14:	bfa8      	it	ge
 8007f16:	6033      	strge	r3, [r6, #0]
 8007f18:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007f1c:	4b98      	ldr	r3, [pc, #608]	@ (8008180 <_dtoa_r+0x2d0>)
 8007f1e:	bfb8      	it	lt
 8007f20:	6032      	strlt	r2, [r6, #0]
 8007f22:	ea33 0308 	bics.w	r3, r3, r8
 8007f26:	d112      	bne.n	8007f4e <_dtoa_r+0x9e>
 8007f28:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007f2c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007f2e:	6013      	str	r3, [r2, #0]
 8007f30:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007f34:	4323      	orrs	r3, r4
 8007f36:	f000 8550 	beq.w	80089da <_dtoa_r+0xb2a>
 8007f3a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007f3c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8008184 <_dtoa_r+0x2d4>
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	f000 8552 	beq.w	80089ea <_dtoa_r+0xb3a>
 8007f46:	f10a 0303 	add.w	r3, sl, #3
 8007f4a:	f000 bd4c 	b.w	80089e6 <_dtoa_r+0xb36>
 8007f4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f52:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007f56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	f7f8 fd2d 	bl	80009bc <__aeabi_dcmpeq>
 8007f62:	4607      	mov	r7, r0
 8007f64:	b158      	cbz	r0, 8007f7e <_dtoa_r+0xce>
 8007f66:	2301      	movs	r3, #1
 8007f68:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007f6a:	6013      	str	r3, [r2, #0]
 8007f6c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007f6e:	b113      	cbz	r3, 8007f76 <_dtoa_r+0xc6>
 8007f70:	4b85      	ldr	r3, [pc, #532]	@ (8008188 <_dtoa_r+0x2d8>)
 8007f72:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800818c <_dtoa_r+0x2dc>
 8007f7a:	f000 bd36 	b.w	80089ea <_dtoa_r+0xb3a>
 8007f7e:	ab14      	add	r3, sp, #80	@ 0x50
 8007f80:	9301      	str	r3, [sp, #4]
 8007f82:	ab15      	add	r3, sp, #84	@ 0x54
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	4658      	mov	r0, fp
 8007f88:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007f8c:	f001 fd7c 	bl	8009a88 <__d2b>
 8007f90:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007f94:	4681      	mov	r9, r0
 8007f96:	2e00      	cmp	r6, #0
 8007f98:	d077      	beq.n	800808a <_dtoa_r+0x1da>
 8007f9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f9e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007fa0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007fa8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007fac:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007fb0:	9712      	str	r7, [sp, #72]	@ 0x48
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	4b76      	ldr	r3, [pc, #472]	@ (8008190 <_dtoa_r+0x2e0>)
 8007fb8:	f7f8 f8e0 	bl	800017c <__aeabi_dsub>
 8007fbc:	a368      	add	r3, pc, #416	@ (adr r3, 8008160 <_dtoa_r+0x2b0>)
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	f7f8 fa93 	bl	80004ec <__aeabi_dmul>
 8007fc6:	a368      	add	r3, pc, #416	@ (adr r3, 8008168 <_dtoa_r+0x2b8>)
 8007fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fcc:	f7f8 f8d8 	bl	8000180 <__adddf3>
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	4630      	mov	r0, r6
 8007fd4:	460d      	mov	r5, r1
 8007fd6:	f7f8 fa1f 	bl	8000418 <__aeabi_i2d>
 8007fda:	a365      	add	r3, pc, #404	@ (adr r3, 8008170 <_dtoa_r+0x2c0>)
 8007fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe0:	f7f8 fa84 	bl	80004ec <__aeabi_dmul>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	4620      	mov	r0, r4
 8007fea:	4629      	mov	r1, r5
 8007fec:	f7f8 f8c8 	bl	8000180 <__adddf3>
 8007ff0:	4604      	mov	r4, r0
 8007ff2:	460d      	mov	r5, r1
 8007ff4:	f7f8 fd2a 	bl	8000a4c <__aeabi_d2iz>
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	4607      	mov	r7, r0
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	4620      	mov	r0, r4
 8008000:	4629      	mov	r1, r5
 8008002:	f7f8 fce5 	bl	80009d0 <__aeabi_dcmplt>
 8008006:	b140      	cbz	r0, 800801a <_dtoa_r+0x16a>
 8008008:	4638      	mov	r0, r7
 800800a:	f7f8 fa05 	bl	8000418 <__aeabi_i2d>
 800800e:	4622      	mov	r2, r4
 8008010:	462b      	mov	r3, r5
 8008012:	f7f8 fcd3 	bl	80009bc <__aeabi_dcmpeq>
 8008016:	b900      	cbnz	r0, 800801a <_dtoa_r+0x16a>
 8008018:	3f01      	subs	r7, #1
 800801a:	2f16      	cmp	r7, #22
 800801c:	d853      	bhi.n	80080c6 <_dtoa_r+0x216>
 800801e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008022:	4b5c      	ldr	r3, [pc, #368]	@ (8008194 <_dtoa_r+0x2e4>)
 8008024:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802c:	f7f8 fcd0 	bl	80009d0 <__aeabi_dcmplt>
 8008030:	2800      	cmp	r0, #0
 8008032:	d04a      	beq.n	80080ca <_dtoa_r+0x21a>
 8008034:	2300      	movs	r3, #0
 8008036:	3f01      	subs	r7, #1
 8008038:	930f      	str	r3, [sp, #60]	@ 0x3c
 800803a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800803c:	1b9b      	subs	r3, r3, r6
 800803e:	1e5a      	subs	r2, r3, #1
 8008040:	bf46      	itte	mi
 8008042:	f1c3 0801 	rsbmi	r8, r3, #1
 8008046:	2300      	movmi	r3, #0
 8008048:	f04f 0800 	movpl.w	r8, #0
 800804c:	9209      	str	r2, [sp, #36]	@ 0x24
 800804e:	bf48      	it	mi
 8008050:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8008052:	2f00      	cmp	r7, #0
 8008054:	db3b      	blt.n	80080ce <_dtoa_r+0x21e>
 8008056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008058:	970e      	str	r7, [sp, #56]	@ 0x38
 800805a:	443b      	add	r3, r7
 800805c:	9309      	str	r3, [sp, #36]	@ 0x24
 800805e:	2300      	movs	r3, #0
 8008060:	930a      	str	r3, [sp, #40]	@ 0x28
 8008062:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008064:	2b09      	cmp	r3, #9
 8008066:	d866      	bhi.n	8008136 <_dtoa_r+0x286>
 8008068:	2b05      	cmp	r3, #5
 800806a:	bfc4      	itt	gt
 800806c:	3b04      	subgt	r3, #4
 800806e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008070:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008072:	bfc8      	it	gt
 8008074:	2400      	movgt	r4, #0
 8008076:	f1a3 0302 	sub.w	r3, r3, #2
 800807a:	bfd8      	it	le
 800807c:	2401      	movle	r4, #1
 800807e:	2b03      	cmp	r3, #3
 8008080:	d864      	bhi.n	800814c <_dtoa_r+0x29c>
 8008082:	e8df f003 	tbb	[pc, r3]
 8008086:	382b      	.short	0x382b
 8008088:	5636      	.short	0x5636
 800808a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800808e:	441e      	add	r6, r3
 8008090:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008094:	2b20      	cmp	r3, #32
 8008096:	bfc1      	itttt	gt
 8008098:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800809c:	fa08 f803 	lslgt.w	r8, r8, r3
 80080a0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80080a4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80080a8:	bfd6      	itet	le
 80080aa:	f1c3 0320 	rsble	r3, r3, #32
 80080ae:	ea48 0003 	orrgt.w	r0, r8, r3
 80080b2:	fa04 f003 	lslle.w	r0, r4, r3
 80080b6:	f7f8 f99f 	bl	80003f8 <__aeabi_ui2d>
 80080ba:	2201      	movs	r2, #1
 80080bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80080c0:	3e01      	subs	r6, #1
 80080c2:	9212      	str	r2, [sp, #72]	@ 0x48
 80080c4:	e775      	b.n	8007fb2 <_dtoa_r+0x102>
 80080c6:	2301      	movs	r3, #1
 80080c8:	e7b6      	b.n	8008038 <_dtoa_r+0x188>
 80080ca:	900f      	str	r0, [sp, #60]	@ 0x3c
 80080cc:	e7b5      	b.n	800803a <_dtoa_r+0x18a>
 80080ce:	427b      	negs	r3, r7
 80080d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80080d2:	2300      	movs	r3, #0
 80080d4:	eba8 0807 	sub.w	r8, r8, r7
 80080d8:	930e      	str	r3, [sp, #56]	@ 0x38
 80080da:	e7c2      	b.n	8008062 <_dtoa_r+0x1b2>
 80080dc:	2300      	movs	r3, #0
 80080de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	dc35      	bgt.n	8008152 <_dtoa_r+0x2a2>
 80080e6:	2301      	movs	r3, #1
 80080e8:	461a      	mov	r2, r3
 80080ea:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80080ee:	9221      	str	r2, [sp, #132]	@ 0x84
 80080f0:	e00b      	b.n	800810a <_dtoa_r+0x25a>
 80080f2:	2301      	movs	r3, #1
 80080f4:	e7f3      	b.n	80080de <_dtoa_r+0x22e>
 80080f6:	2300      	movs	r3, #0
 80080f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080fa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80080fc:	18fb      	adds	r3, r7, r3
 80080fe:	9308      	str	r3, [sp, #32]
 8008100:	3301      	adds	r3, #1
 8008102:	2b01      	cmp	r3, #1
 8008104:	9307      	str	r3, [sp, #28]
 8008106:	bfb8      	it	lt
 8008108:	2301      	movlt	r3, #1
 800810a:	2100      	movs	r1, #0
 800810c:	2204      	movs	r2, #4
 800810e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008112:	f102 0514 	add.w	r5, r2, #20
 8008116:	429d      	cmp	r5, r3
 8008118:	d91f      	bls.n	800815a <_dtoa_r+0x2aa>
 800811a:	6041      	str	r1, [r0, #4]
 800811c:	4658      	mov	r0, fp
 800811e:	f001 f8d9 	bl	80092d4 <_Balloc>
 8008122:	4682      	mov	sl, r0
 8008124:	2800      	cmp	r0, #0
 8008126:	d139      	bne.n	800819c <_dtoa_r+0x2ec>
 8008128:	4602      	mov	r2, r0
 800812a:	f240 11af 	movw	r1, #431	@ 0x1af
 800812e:	4b1a      	ldr	r3, [pc, #104]	@ (8008198 <_dtoa_r+0x2e8>)
 8008130:	e6d2      	b.n	8007ed8 <_dtoa_r+0x28>
 8008132:	2301      	movs	r3, #1
 8008134:	e7e0      	b.n	80080f8 <_dtoa_r+0x248>
 8008136:	2401      	movs	r4, #1
 8008138:	2300      	movs	r3, #0
 800813a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800813c:	9320      	str	r3, [sp, #128]	@ 0x80
 800813e:	f04f 33ff 	mov.w	r3, #4294967295
 8008142:	2200      	movs	r2, #0
 8008144:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008148:	2312      	movs	r3, #18
 800814a:	e7d0      	b.n	80080ee <_dtoa_r+0x23e>
 800814c:	2301      	movs	r3, #1
 800814e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008150:	e7f5      	b.n	800813e <_dtoa_r+0x28e>
 8008152:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008154:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008158:	e7d7      	b.n	800810a <_dtoa_r+0x25a>
 800815a:	3101      	adds	r1, #1
 800815c:	0052      	lsls	r2, r2, #1
 800815e:	e7d8      	b.n	8008112 <_dtoa_r+0x262>
 8008160:	636f4361 	.word	0x636f4361
 8008164:	3fd287a7 	.word	0x3fd287a7
 8008168:	8b60c8b3 	.word	0x8b60c8b3
 800816c:	3fc68a28 	.word	0x3fc68a28
 8008170:	509f79fb 	.word	0x509f79fb
 8008174:	3fd34413 	.word	0x3fd34413
 8008178:	0800ac0a 	.word	0x0800ac0a
 800817c:	0800ac21 	.word	0x0800ac21
 8008180:	7ff00000 	.word	0x7ff00000
 8008184:	0800ac06 	.word	0x0800ac06
 8008188:	0800abd2 	.word	0x0800abd2
 800818c:	0800abd1 	.word	0x0800abd1
 8008190:	3ff80000 	.word	0x3ff80000
 8008194:	0800ad78 	.word	0x0800ad78
 8008198:	0800ac79 	.word	0x0800ac79
 800819c:	f8db 301c 	ldr.w	r3, [fp, #28]
 80081a0:	6018      	str	r0, [r3, #0]
 80081a2:	9b07      	ldr	r3, [sp, #28]
 80081a4:	2b0e      	cmp	r3, #14
 80081a6:	f200 80a4 	bhi.w	80082f2 <_dtoa_r+0x442>
 80081aa:	2c00      	cmp	r4, #0
 80081ac:	f000 80a1 	beq.w	80082f2 <_dtoa_r+0x442>
 80081b0:	2f00      	cmp	r7, #0
 80081b2:	dd33      	ble.n	800821c <_dtoa_r+0x36c>
 80081b4:	4b86      	ldr	r3, [pc, #536]	@ (80083d0 <_dtoa_r+0x520>)
 80081b6:	f007 020f 	and.w	r2, r7, #15
 80081ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081be:	05f8      	lsls	r0, r7, #23
 80081c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80081c4:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80081c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80081cc:	d516      	bpl.n	80081fc <_dtoa_r+0x34c>
 80081ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081d2:	4b80      	ldr	r3, [pc, #512]	@ (80083d4 <_dtoa_r+0x524>)
 80081d4:	2603      	movs	r6, #3
 80081d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081da:	f7f8 fab1 	bl	8000740 <__aeabi_ddiv>
 80081de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081e2:	f004 040f 	and.w	r4, r4, #15
 80081e6:	4d7b      	ldr	r5, [pc, #492]	@ (80083d4 <_dtoa_r+0x524>)
 80081e8:	b954      	cbnz	r4, 8008200 <_dtoa_r+0x350>
 80081ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80081ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081f2:	f7f8 faa5 	bl	8000740 <__aeabi_ddiv>
 80081f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80081fa:	e028      	b.n	800824e <_dtoa_r+0x39e>
 80081fc:	2602      	movs	r6, #2
 80081fe:	e7f2      	b.n	80081e6 <_dtoa_r+0x336>
 8008200:	07e1      	lsls	r1, r4, #31
 8008202:	d508      	bpl.n	8008216 <_dtoa_r+0x366>
 8008204:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008208:	e9d5 2300 	ldrd	r2, r3, [r5]
 800820c:	f7f8 f96e 	bl	80004ec <__aeabi_dmul>
 8008210:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008214:	3601      	adds	r6, #1
 8008216:	1064      	asrs	r4, r4, #1
 8008218:	3508      	adds	r5, #8
 800821a:	e7e5      	b.n	80081e8 <_dtoa_r+0x338>
 800821c:	f000 80d2 	beq.w	80083c4 <_dtoa_r+0x514>
 8008220:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008224:	427c      	negs	r4, r7
 8008226:	4b6a      	ldr	r3, [pc, #424]	@ (80083d0 <_dtoa_r+0x520>)
 8008228:	f004 020f 	and.w	r2, r4, #15
 800822c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008234:	f7f8 f95a 	bl	80004ec <__aeabi_dmul>
 8008238:	2602      	movs	r6, #2
 800823a:	2300      	movs	r3, #0
 800823c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008240:	4d64      	ldr	r5, [pc, #400]	@ (80083d4 <_dtoa_r+0x524>)
 8008242:	1124      	asrs	r4, r4, #4
 8008244:	2c00      	cmp	r4, #0
 8008246:	f040 80b2 	bne.w	80083ae <_dtoa_r+0x4fe>
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1d3      	bne.n	80081f6 <_dtoa_r+0x346>
 800824e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008252:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008254:	2b00      	cmp	r3, #0
 8008256:	f000 80b7 	beq.w	80083c8 <_dtoa_r+0x518>
 800825a:	2200      	movs	r2, #0
 800825c:	4620      	mov	r0, r4
 800825e:	4629      	mov	r1, r5
 8008260:	4b5d      	ldr	r3, [pc, #372]	@ (80083d8 <_dtoa_r+0x528>)
 8008262:	f7f8 fbb5 	bl	80009d0 <__aeabi_dcmplt>
 8008266:	2800      	cmp	r0, #0
 8008268:	f000 80ae 	beq.w	80083c8 <_dtoa_r+0x518>
 800826c:	9b07      	ldr	r3, [sp, #28]
 800826e:	2b00      	cmp	r3, #0
 8008270:	f000 80aa 	beq.w	80083c8 <_dtoa_r+0x518>
 8008274:	9b08      	ldr	r3, [sp, #32]
 8008276:	2b00      	cmp	r3, #0
 8008278:	dd37      	ble.n	80082ea <_dtoa_r+0x43a>
 800827a:	1e7b      	subs	r3, r7, #1
 800827c:	4620      	mov	r0, r4
 800827e:	9304      	str	r3, [sp, #16]
 8008280:	2200      	movs	r2, #0
 8008282:	4629      	mov	r1, r5
 8008284:	4b55      	ldr	r3, [pc, #340]	@ (80083dc <_dtoa_r+0x52c>)
 8008286:	f7f8 f931 	bl	80004ec <__aeabi_dmul>
 800828a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800828e:	9c08      	ldr	r4, [sp, #32]
 8008290:	3601      	adds	r6, #1
 8008292:	4630      	mov	r0, r6
 8008294:	f7f8 f8c0 	bl	8000418 <__aeabi_i2d>
 8008298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800829c:	f7f8 f926 	bl	80004ec <__aeabi_dmul>
 80082a0:	2200      	movs	r2, #0
 80082a2:	4b4f      	ldr	r3, [pc, #316]	@ (80083e0 <_dtoa_r+0x530>)
 80082a4:	f7f7 ff6c 	bl	8000180 <__adddf3>
 80082a8:	4605      	mov	r5, r0
 80082aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80082ae:	2c00      	cmp	r4, #0
 80082b0:	f040 809a 	bne.w	80083e8 <_dtoa_r+0x538>
 80082b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082b8:	2200      	movs	r2, #0
 80082ba:	4b4a      	ldr	r3, [pc, #296]	@ (80083e4 <_dtoa_r+0x534>)
 80082bc:	f7f7 ff5e 	bl	800017c <__aeabi_dsub>
 80082c0:	4602      	mov	r2, r0
 80082c2:	460b      	mov	r3, r1
 80082c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80082c8:	462a      	mov	r2, r5
 80082ca:	4633      	mov	r3, r6
 80082cc:	f7f8 fb9e 	bl	8000a0c <__aeabi_dcmpgt>
 80082d0:	2800      	cmp	r0, #0
 80082d2:	f040 828e 	bne.w	80087f2 <_dtoa_r+0x942>
 80082d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80082da:	462a      	mov	r2, r5
 80082dc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80082e0:	f7f8 fb76 	bl	80009d0 <__aeabi_dcmplt>
 80082e4:	2800      	cmp	r0, #0
 80082e6:	f040 8127 	bne.w	8008538 <_dtoa_r+0x688>
 80082ea:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80082ee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80082f2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f2c0 8163 	blt.w	80085c0 <_dtoa_r+0x710>
 80082fa:	2f0e      	cmp	r7, #14
 80082fc:	f300 8160 	bgt.w	80085c0 <_dtoa_r+0x710>
 8008300:	4b33      	ldr	r3, [pc, #204]	@ (80083d0 <_dtoa_r+0x520>)
 8008302:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008306:	e9d3 3400 	ldrd	r3, r4, [r3]
 800830a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800830e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008310:	2b00      	cmp	r3, #0
 8008312:	da03      	bge.n	800831c <_dtoa_r+0x46c>
 8008314:	9b07      	ldr	r3, [sp, #28]
 8008316:	2b00      	cmp	r3, #0
 8008318:	f340 8100 	ble.w	800851c <_dtoa_r+0x66c>
 800831c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008320:	4656      	mov	r6, sl
 8008322:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008326:	4620      	mov	r0, r4
 8008328:	4629      	mov	r1, r5
 800832a:	f7f8 fa09 	bl	8000740 <__aeabi_ddiv>
 800832e:	f7f8 fb8d 	bl	8000a4c <__aeabi_d2iz>
 8008332:	4680      	mov	r8, r0
 8008334:	f7f8 f870 	bl	8000418 <__aeabi_i2d>
 8008338:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800833c:	f7f8 f8d6 	bl	80004ec <__aeabi_dmul>
 8008340:	4602      	mov	r2, r0
 8008342:	460b      	mov	r3, r1
 8008344:	4620      	mov	r0, r4
 8008346:	4629      	mov	r1, r5
 8008348:	f7f7 ff18 	bl	800017c <__aeabi_dsub>
 800834c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008350:	9d07      	ldr	r5, [sp, #28]
 8008352:	f806 4b01 	strb.w	r4, [r6], #1
 8008356:	eba6 040a 	sub.w	r4, r6, sl
 800835a:	42a5      	cmp	r5, r4
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	f040 8116 	bne.w	8008590 <_dtoa_r+0x6e0>
 8008364:	f7f7 ff0c 	bl	8000180 <__adddf3>
 8008368:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800836c:	4604      	mov	r4, r0
 800836e:	460d      	mov	r5, r1
 8008370:	f7f8 fb4c 	bl	8000a0c <__aeabi_dcmpgt>
 8008374:	2800      	cmp	r0, #0
 8008376:	f040 80f8 	bne.w	800856a <_dtoa_r+0x6ba>
 800837a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800837e:	4620      	mov	r0, r4
 8008380:	4629      	mov	r1, r5
 8008382:	f7f8 fb1b 	bl	80009bc <__aeabi_dcmpeq>
 8008386:	b118      	cbz	r0, 8008390 <_dtoa_r+0x4e0>
 8008388:	f018 0f01 	tst.w	r8, #1
 800838c:	f040 80ed 	bne.w	800856a <_dtoa_r+0x6ba>
 8008390:	4649      	mov	r1, r9
 8008392:	4658      	mov	r0, fp
 8008394:	f000 ffde 	bl	8009354 <_Bfree>
 8008398:	2300      	movs	r3, #0
 800839a:	7033      	strb	r3, [r6, #0]
 800839c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800839e:	3701      	adds	r7, #1
 80083a0:	601f      	str	r7, [r3, #0]
 80083a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f000 8320 	beq.w	80089ea <_dtoa_r+0xb3a>
 80083aa:	601e      	str	r6, [r3, #0]
 80083ac:	e31d      	b.n	80089ea <_dtoa_r+0xb3a>
 80083ae:	07e2      	lsls	r2, r4, #31
 80083b0:	d505      	bpl.n	80083be <_dtoa_r+0x50e>
 80083b2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80083b6:	f7f8 f899 	bl	80004ec <__aeabi_dmul>
 80083ba:	2301      	movs	r3, #1
 80083bc:	3601      	adds	r6, #1
 80083be:	1064      	asrs	r4, r4, #1
 80083c0:	3508      	adds	r5, #8
 80083c2:	e73f      	b.n	8008244 <_dtoa_r+0x394>
 80083c4:	2602      	movs	r6, #2
 80083c6:	e742      	b.n	800824e <_dtoa_r+0x39e>
 80083c8:	9c07      	ldr	r4, [sp, #28]
 80083ca:	9704      	str	r7, [sp, #16]
 80083cc:	e761      	b.n	8008292 <_dtoa_r+0x3e2>
 80083ce:	bf00      	nop
 80083d0:	0800ad78 	.word	0x0800ad78
 80083d4:	0800ad50 	.word	0x0800ad50
 80083d8:	3ff00000 	.word	0x3ff00000
 80083dc:	40240000 	.word	0x40240000
 80083e0:	401c0000 	.word	0x401c0000
 80083e4:	40140000 	.word	0x40140000
 80083e8:	4b70      	ldr	r3, [pc, #448]	@ (80085ac <_dtoa_r+0x6fc>)
 80083ea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80083ec:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80083f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80083f4:	4454      	add	r4, sl
 80083f6:	2900      	cmp	r1, #0
 80083f8:	d045      	beq.n	8008486 <_dtoa_r+0x5d6>
 80083fa:	2000      	movs	r0, #0
 80083fc:	496c      	ldr	r1, [pc, #432]	@ (80085b0 <_dtoa_r+0x700>)
 80083fe:	f7f8 f99f 	bl	8000740 <__aeabi_ddiv>
 8008402:	4633      	mov	r3, r6
 8008404:	462a      	mov	r2, r5
 8008406:	f7f7 feb9 	bl	800017c <__aeabi_dsub>
 800840a:	4656      	mov	r6, sl
 800840c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008410:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008414:	f7f8 fb1a 	bl	8000a4c <__aeabi_d2iz>
 8008418:	4605      	mov	r5, r0
 800841a:	f7f7 fffd 	bl	8000418 <__aeabi_i2d>
 800841e:	4602      	mov	r2, r0
 8008420:	460b      	mov	r3, r1
 8008422:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008426:	f7f7 fea9 	bl	800017c <__aeabi_dsub>
 800842a:	4602      	mov	r2, r0
 800842c:	460b      	mov	r3, r1
 800842e:	3530      	adds	r5, #48	@ 0x30
 8008430:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008434:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008438:	f806 5b01 	strb.w	r5, [r6], #1
 800843c:	f7f8 fac8 	bl	80009d0 <__aeabi_dcmplt>
 8008440:	2800      	cmp	r0, #0
 8008442:	d163      	bne.n	800850c <_dtoa_r+0x65c>
 8008444:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008448:	2000      	movs	r0, #0
 800844a:	495a      	ldr	r1, [pc, #360]	@ (80085b4 <_dtoa_r+0x704>)
 800844c:	f7f7 fe96 	bl	800017c <__aeabi_dsub>
 8008450:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008454:	f7f8 fabc 	bl	80009d0 <__aeabi_dcmplt>
 8008458:	2800      	cmp	r0, #0
 800845a:	f040 8087 	bne.w	800856c <_dtoa_r+0x6bc>
 800845e:	42a6      	cmp	r6, r4
 8008460:	f43f af43 	beq.w	80082ea <_dtoa_r+0x43a>
 8008464:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008468:	2200      	movs	r2, #0
 800846a:	4b53      	ldr	r3, [pc, #332]	@ (80085b8 <_dtoa_r+0x708>)
 800846c:	f7f8 f83e 	bl	80004ec <__aeabi_dmul>
 8008470:	2200      	movs	r2, #0
 8008472:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800847a:	4b4f      	ldr	r3, [pc, #316]	@ (80085b8 <_dtoa_r+0x708>)
 800847c:	f7f8 f836 	bl	80004ec <__aeabi_dmul>
 8008480:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008484:	e7c4      	b.n	8008410 <_dtoa_r+0x560>
 8008486:	4631      	mov	r1, r6
 8008488:	4628      	mov	r0, r5
 800848a:	f7f8 f82f 	bl	80004ec <__aeabi_dmul>
 800848e:	4656      	mov	r6, sl
 8008490:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008494:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800849a:	f7f8 fad7 	bl	8000a4c <__aeabi_d2iz>
 800849e:	4605      	mov	r5, r0
 80084a0:	f7f7 ffba 	bl	8000418 <__aeabi_i2d>
 80084a4:	4602      	mov	r2, r0
 80084a6:	460b      	mov	r3, r1
 80084a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ac:	f7f7 fe66 	bl	800017c <__aeabi_dsub>
 80084b0:	4602      	mov	r2, r0
 80084b2:	460b      	mov	r3, r1
 80084b4:	3530      	adds	r5, #48	@ 0x30
 80084b6:	f806 5b01 	strb.w	r5, [r6], #1
 80084ba:	42a6      	cmp	r6, r4
 80084bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80084c0:	f04f 0200 	mov.w	r2, #0
 80084c4:	d124      	bne.n	8008510 <_dtoa_r+0x660>
 80084c6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80084ca:	4b39      	ldr	r3, [pc, #228]	@ (80085b0 <_dtoa_r+0x700>)
 80084cc:	f7f7 fe58 	bl	8000180 <__adddf3>
 80084d0:	4602      	mov	r2, r0
 80084d2:	460b      	mov	r3, r1
 80084d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084d8:	f7f8 fa98 	bl	8000a0c <__aeabi_dcmpgt>
 80084dc:	2800      	cmp	r0, #0
 80084de:	d145      	bne.n	800856c <_dtoa_r+0x6bc>
 80084e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80084e4:	2000      	movs	r0, #0
 80084e6:	4932      	ldr	r1, [pc, #200]	@ (80085b0 <_dtoa_r+0x700>)
 80084e8:	f7f7 fe48 	bl	800017c <__aeabi_dsub>
 80084ec:	4602      	mov	r2, r0
 80084ee:	460b      	mov	r3, r1
 80084f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084f4:	f7f8 fa6c 	bl	80009d0 <__aeabi_dcmplt>
 80084f8:	2800      	cmp	r0, #0
 80084fa:	f43f aef6 	beq.w	80082ea <_dtoa_r+0x43a>
 80084fe:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008500:	1e73      	subs	r3, r6, #1
 8008502:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008504:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008508:	2b30      	cmp	r3, #48	@ 0x30
 800850a:	d0f8      	beq.n	80084fe <_dtoa_r+0x64e>
 800850c:	9f04      	ldr	r7, [sp, #16]
 800850e:	e73f      	b.n	8008390 <_dtoa_r+0x4e0>
 8008510:	4b29      	ldr	r3, [pc, #164]	@ (80085b8 <_dtoa_r+0x708>)
 8008512:	f7f7 ffeb 	bl	80004ec <__aeabi_dmul>
 8008516:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800851a:	e7bc      	b.n	8008496 <_dtoa_r+0x5e6>
 800851c:	d10c      	bne.n	8008538 <_dtoa_r+0x688>
 800851e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008522:	2200      	movs	r2, #0
 8008524:	4b25      	ldr	r3, [pc, #148]	@ (80085bc <_dtoa_r+0x70c>)
 8008526:	f7f7 ffe1 	bl	80004ec <__aeabi_dmul>
 800852a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800852e:	f7f8 fa63 	bl	80009f8 <__aeabi_dcmpge>
 8008532:	2800      	cmp	r0, #0
 8008534:	f000 815b 	beq.w	80087ee <_dtoa_r+0x93e>
 8008538:	2400      	movs	r4, #0
 800853a:	4625      	mov	r5, r4
 800853c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800853e:	4656      	mov	r6, sl
 8008540:	43db      	mvns	r3, r3
 8008542:	9304      	str	r3, [sp, #16]
 8008544:	2700      	movs	r7, #0
 8008546:	4621      	mov	r1, r4
 8008548:	4658      	mov	r0, fp
 800854a:	f000 ff03 	bl	8009354 <_Bfree>
 800854e:	2d00      	cmp	r5, #0
 8008550:	d0dc      	beq.n	800850c <_dtoa_r+0x65c>
 8008552:	b12f      	cbz	r7, 8008560 <_dtoa_r+0x6b0>
 8008554:	42af      	cmp	r7, r5
 8008556:	d003      	beq.n	8008560 <_dtoa_r+0x6b0>
 8008558:	4639      	mov	r1, r7
 800855a:	4658      	mov	r0, fp
 800855c:	f000 fefa 	bl	8009354 <_Bfree>
 8008560:	4629      	mov	r1, r5
 8008562:	4658      	mov	r0, fp
 8008564:	f000 fef6 	bl	8009354 <_Bfree>
 8008568:	e7d0      	b.n	800850c <_dtoa_r+0x65c>
 800856a:	9704      	str	r7, [sp, #16]
 800856c:	4633      	mov	r3, r6
 800856e:	461e      	mov	r6, r3
 8008570:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008574:	2a39      	cmp	r2, #57	@ 0x39
 8008576:	d107      	bne.n	8008588 <_dtoa_r+0x6d8>
 8008578:	459a      	cmp	sl, r3
 800857a:	d1f8      	bne.n	800856e <_dtoa_r+0x6be>
 800857c:	9a04      	ldr	r2, [sp, #16]
 800857e:	3201      	adds	r2, #1
 8008580:	9204      	str	r2, [sp, #16]
 8008582:	2230      	movs	r2, #48	@ 0x30
 8008584:	f88a 2000 	strb.w	r2, [sl]
 8008588:	781a      	ldrb	r2, [r3, #0]
 800858a:	3201      	adds	r2, #1
 800858c:	701a      	strb	r2, [r3, #0]
 800858e:	e7bd      	b.n	800850c <_dtoa_r+0x65c>
 8008590:	2200      	movs	r2, #0
 8008592:	4b09      	ldr	r3, [pc, #36]	@ (80085b8 <_dtoa_r+0x708>)
 8008594:	f7f7 ffaa 	bl	80004ec <__aeabi_dmul>
 8008598:	2200      	movs	r2, #0
 800859a:	2300      	movs	r3, #0
 800859c:	4604      	mov	r4, r0
 800859e:	460d      	mov	r5, r1
 80085a0:	f7f8 fa0c 	bl	80009bc <__aeabi_dcmpeq>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	f43f aebc 	beq.w	8008322 <_dtoa_r+0x472>
 80085aa:	e6f1      	b.n	8008390 <_dtoa_r+0x4e0>
 80085ac:	0800ad78 	.word	0x0800ad78
 80085b0:	3fe00000 	.word	0x3fe00000
 80085b4:	3ff00000 	.word	0x3ff00000
 80085b8:	40240000 	.word	0x40240000
 80085bc:	40140000 	.word	0x40140000
 80085c0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80085c2:	2a00      	cmp	r2, #0
 80085c4:	f000 80db 	beq.w	800877e <_dtoa_r+0x8ce>
 80085c8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80085ca:	2a01      	cmp	r2, #1
 80085cc:	f300 80bf 	bgt.w	800874e <_dtoa_r+0x89e>
 80085d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80085d2:	2a00      	cmp	r2, #0
 80085d4:	f000 80b7 	beq.w	8008746 <_dtoa_r+0x896>
 80085d8:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80085dc:	4646      	mov	r6, r8
 80085de:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80085e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80085e2:	2101      	movs	r1, #1
 80085e4:	441a      	add	r2, r3
 80085e6:	4658      	mov	r0, fp
 80085e8:	4498      	add	r8, r3
 80085ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80085ec:	f000 ffb0 	bl	8009550 <__i2b>
 80085f0:	4605      	mov	r5, r0
 80085f2:	b15e      	cbz	r6, 800860c <_dtoa_r+0x75c>
 80085f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	dd08      	ble.n	800860c <_dtoa_r+0x75c>
 80085fa:	42b3      	cmp	r3, r6
 80085fc:	bfa8      	it	ge
 80085fe:	4633      	movge	r3, r6
 8008600:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008602:	eba8 0803 	sub.w	r8, r8, r3
 8008606:	1af6      	subs	r6, r6, r3
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	9309      	str	r3, [sp, #36]	@ 0x24
 800860c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800860e:	b1f3      	cbz	r3, 800864e <_dtoa_r+0x79e>
 8008610:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008612:	2b00      	cmp	r3, #0
 8008614:	f000 80b7 	beq.w	8008786 <_dtoa_r+0x8d6>
 8008618:	b18c      	cbz	r4, 800863e <_dtoa_r+0x78e>
 800861a:	4629      	mov	r1, r5
 800861c:	4622      	mov	r2, r4
 800861e:	4658      	mov	r0, fp
 8008620:	f001 f854 	bl	80096cc <__pow5mult>
 8008624:	464a      	mov	r2, r9
 8008626:	4601      	mov	r1, r0
 8008628:	4605      	mov	r5, r0
 800862a:	4658      	mov	r0, fp
 800862c:	f000 ffa6 	bl	800957c <__multiply>
 8008630:	4649      	mov	r1, r9
 8008632:	9004      	str	r0, [sp, #16]
 8008634:	4658      	mov	r0, fp
 8008636:	f000 fe8d 	bl	8009354 <_Bfree>
 800863a:	9b04      	ldr	r3, [sp, #16]
 800863c:	4699      	mov	r9, r3
 800863e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008640:	1b1a      	subs	r2, r3, r4
 8008642:	d004      	beq.n	800864e <_dtoa_r+0x79e>
 8008644:	4649      	mov	r1, r9
 8008646:	4658      	mov	r0, fp
 8008648:	f001 f840 	bl	80096cc <__pow5mult>
 800864c:	4681      	mov	r9, r0
 800864e:	2101      	movs	r1, #1
 8008650:	4658      	mov	r0, fp
 8008652:	f000 ff7d 	bl	8009550 <__i2b>
 8008656:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008658:	4604      	mov	r4, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	f000 81c9 	beq.w	80089f2 <_dtoa_r+0xb42>
 8008660:	461a      	mov	r2, r3
 8008662:	4601      	mov	r1, r0
 8008664:	4658      	mov	r0, fp
 8008666:	f001 f831 	bl	80096cc <__pow5mult>
 800866a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800866c:	4604      	mov	r4, r0
 800866e:	2b01      	cmp	r3, #1
 8008670:	f300 808f 	bgt.w	8008792 <_dtoa_r+0x8e2>
 8008674:	9b02      	ldr	r3, [sp, #8]
 8008676:	2b00      	cmp	r3, #0
 8008678:	f040 8087 	bne.w	800878a <_dtoa_r+0x8da>
 800867c:	9b03      	ldr	r3, [sp, #12]
 800867e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008682:	2b00      	cmp	r3, #0
 8008684:	f040 8083 	bne.w	800878e <_dtoa_r+0x8de>
 8008688:	9b03      	ldr	r3, [sp, #12]
 800868a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800868e:	0d1b      	lsrs	r3, r3, #20
 8008690:	051b      	lsls	r3, r3, #20
 8008692:	b12b      	cbz	r3, 80086a0 <_dtoa_r+0x7f0>
 8008694:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008696:	f108 0801 	add.w	r8, r8, #1
 800869a:	3301      	adds	r3, #1
 800869c:	9309      	str	r3, [sp, #36]	@ 0x24
 800869e:	2301      	movs	r3, #1
 80086a0:	930a      	str	r3, [sp, #40]	@ 0x28
 80086a2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 81aa 	beq.w	80089fe <_dtoa_r+0xb4e>
 80086aa:	6923      	ldr	r3, [r4, #16]
 80086ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80086b0:	6918      	ldr	r0, [r3, #16]
 80086b2:	f000 ff01 	bl	80094b8 <__hi0bits>
 80086b6:	f1c0 0020 	rsb	r0, r0, #32
 80086ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086bc:	4418      	add	r0, r3
 80086be:	f010 001f 	ands.w	r0, r0, #31
 80086c2:	d071      	beq.n	80087a8 <_dtoa_r+0x8f8>
 80086c4:	f1c0 0320 	rsb	r3, r0, #32
 80086c8:	2b04      	cmp	r3, #4
 80086ca:	dd65      	ble.n	8008798 <_dtoa_r+0x8e8>
 80086cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ce:	f1c0 001c 	rsb	r0, r0, #28
 80086d2:	4403      	add	r3, r0
 80086d4:	4480      	add	r8, r0
 80086d6:	4406      	add	r6, r0
 80086d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80086da:	f1b8 0f00 	cmp.w	r8, #0
 80086de:	dd05      	ble.n	80086ec <_dtoa_r+0x83c>
 80086e0:	4649      	mov	r1, r9
 80086e2:	4642      	mov	r2, r8
 80086e4:	4658      	mov	r0, fp
 80086e6:	f001 f84b 	bl	8009780 <__lshift>
 80086ea:	4681      	mov	r9, r0
 80086ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	dd05      	ble.n	80086fe <_dtoa_r+0x84e>
 80086f2:	4621      	mov	r1, r4
 80086f4:	461a      	mov	r2, r3
 80086f6:	4658      	mov	r0, fp
 80086f8:	f001 f842 	bl	8009780 <__lshift>
 80086fc:	4604      	mov	r4, r0
 80086fe:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008700:	2b00      	cmp	r3, #0
 8008702:	d053      	beq.n	80087ac <_dtoa_r+0x8fc>
 8008704:	4621      	mov	r1, r4
 8008706:	4648      	mov	r0, r9
 8008708:	f001 f8a6 	bl	8009858 <__mcmp>
 800870c:	2800      	cmp	r0, #0
 800870e:	da4d      	bge.n	80087ac <_dtoa_r+0x8fc>
 8008710:	1e7b      	subs	r3, r7, #1
 8008712:	4649      	mov	r1, r9
 8008714:	9304      	str	r3, [sp, #16]
 8008716:	220a      	movs	r2, #10
 8008718:	2300      	movs	r3, #0
 800871a:	4658      	mov	r0, fp
 800871c:	f000 fe3c 	bl	8009398 <__multadd>
 8008720:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008722:	4681      	mov	r9, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	f000 816c 	beq.w	8008a02 <_dtoa_r+0xb52>
 800872a:	2300      	movs	r3, #0
 800872c:	4629      	mov	r1, r5
 800872e:	220a      	movs	r2, #10
 8008730:	4658      	mov	r0, fp
 8008732:	f000 fe31 	bl	8009398 <__multadd>
 8008736:	9b08      	ldr	r3, [sp, #32]
 8008738:	4605      	mov	r5, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	dc61      	bgt.n	8008802 <_dtoa_r+0x952>
 800873e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008740:	2b02      	cmp	r3, #2
 8008742:	dc3b      	bgt.n	80087bc <_dtoa_r+0x90c>
 8008744:	e05d      	b.n	8008802 <_dtoa_r+0x952>
 8008746:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008748:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800874c:	e746      	b.n	80085dc <_dtoa_r+0x72c>
 800874e:	9b07      	ldr	r3, [sp, #28]
 8008750:	1e5c      	subs	r4, r3, #1
 8008752:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008754:	42a3      	cmp	r3, r4
 8008756:	bfbf      	itttt	lt
 8008758:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800875a:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800875c:	1ae3      	sublt	r3, r4, r3
 800875e:	18d2      	addlt	r2, r2, r3
 8008760:	bfa8      	it	ge
 8008762:	1b1c      	subge	r4, r3, r4
 8008764:	9b07      	ldr	r3, [sp, #28]
 8008766:	bfbe      	ittt	lt
 8008768:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800876a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800876c:	2400      	movlt	r4, #0
 800876e:	2b00      	cmp	r3, #0
 8008770:	bfb5      	itete	lt
 8008772:	eba8 0603 	sublt.w	r6, r8, r3
 8008776:	4646      	movge	r6, r8
 8008778:	2300      	movlt	r3, #0
 800877a:	9b07      	ldrge	r3, [sp, #28]
 800877c:	e730      	b.n	80085e0 <_dtoa_r+0x730>
 800877e:	4646      	mov	r6, r8
 8008780:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008782:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008784:	e735      	b.n	80085f2 <_dtoa_r+0x742>
 8008786:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008788:	e75c      	b.n	8008644 <_dtoa_r+0x794>
 800878a:	2300      	movs	r3, #0
 800878c:	e788      	b.n	80086a0 <_dtoa_r+0x7f0>
 800878e:	9b02      	ldr	r3, [sp, #8]
 8008790:	e786      	b.n	80086a0 <_dtoa_r+0x7f0>
 8008792:	2300      	movs	r3, #0
 8008794:	930a      	str	r3, [sp, #40]	@ 0x28
 8008796:	e788      	b.n	80086aa <_dtoa_r+0x7fa>
 8008798:	d09f      	beq.n	80086da <_dtoa_r+0x82a>
 800879a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800879c:	331c      	adds	r3, #28
 800879e:	441a      	add	r2, r3
 80087a0:	4498      	add	r8, r3
 80087a2:	441e      	add	r6, r3
 80087a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80087a6:	e798      	b.n	80086da <_dtoa_r+0x82a>
 80087a8:	4603      	mov	r3, r0
 80087aa:	e7f6      	b.n	800879a <_dtoa_r+0x8ea>
 80087ac:	9b07      	ldr	r3, [sp, #28]
 80087ae:	9704      	str	r7, [sp, #16]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	dc20      	bgt.n	80087f6 <_dtoa_r+0x946>
 80087b4:	9308      	str	r3, [sp, #32]
 80087b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80087b8:	2b02      	cmp	r3, #2
 80087ba:	dd1e      	ble.n	80087fa <_dtoa_r+0x94a>
 80087bc:	9b08      	ldr	r3, [sp, #32]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f47f aebc 	bne.w	800853c <_dtoa_r+0x68c>
 80087c4:	4621      	mov	r1, r4
 80087c6:	2205      	movs	r2, #5
 80087c8:	4658      	mov	r0, fp
 80087ca:	f000 fde5 	bl	8009398 <__multadd>
 80087ce:	4601      	mov	r1, r0
 80087d0:	4604      	mov	r4, r0
 80087d2:	4648      	mov	r0, r9
 80087d4:	f001 f840 	bl	8009858 <__mcmp>
 80087d8:	2800      	cmp	r0, #0
 80087da:	f77f aeaf 	ble.w	800853c <_dtoa_r+0x68c>
 80087de:	2331      	movs	r3, #49	@ 0x31
 80087e0:	4656      	mov	r6, sl
 80087e2:	f806 3b01 	strb.w	r3, [r6], #1
 80087e6:	9b04      	ldr	r3, [sp, #16]
 80087e8:	3301      	adds	r3, #1
 80087ea:	9304      	str	r3, [sp, #16]
 80087ec:	e6aa      	b.n	8008544 <_dtoa_r+0x694>
 80087ee:	9c07      	ldr	r4, [sp, #28]
 80087f0:	9704      	str	r7, [sp, #16]
 80087f2:	4625      	mov	r5, r4
 80087f4:	e7f3      	b.n	80087de <_dtoa_r+0x92e>
 80087f6:	9b07      	ldr	r3, [sp, #28]
 80087f8:	9308      	str	r3, [sp, #32]
 80087fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 8104 	beq.w	8008a0a <_dtoa_r+0xb5a>
 8008802:	2e00      	cmp	r6, #0
 8008804:	dd05      	ble.n	8008812 <_dtoa_r+0x962>
 8008806:	4629      	mov	r1, r5
 8008808:	4632      	mov	r2, r6
 800880a:	4658      	mov	r0, fp
 800880c:	f000 ffb8 	bl	8009780 <__lshift>
 8008810:	4605      	mov	r5, r0
 8008812:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008814:	2b00      	cmp	r3, #0
 8008816:	d05a      	beq.n	80088ce <_dtoa_r+0xa1e>
 8008818:	4658      	mov	r0, fp
 800881a:	6869      	ldr	r1, [r5, #4]
 800881c:	f000 fd5a 	bl	80092d4 <_Balloc>
 8008820:	4606      	mov	r6, r0
 8008822:	b928      	cbnz	r0, 8008830 <_dtoa_r+0x980>
 8008824:	4602      	mov	r2, r0
 8008826:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800882a:	4b83      	ldr	r3, [pc, #524]	@ (8008a38 <_dtoa_r+0xb88>)
 800882c:	f7ff bb54 	b.w	8007ed8 <_dtoa_r+0x28>
 8008830:	692a      	ldr	r2, [r5, #16]
 8008832:	f105 010c 	add.w	r1, r5, #12
 8008836:	3202      	adds	r2, #2
 8008838:	0092      	lsls	r2, r2, #2
 800883a:	300c      	adds	r0, #12
 800883c:	f7ff fa95 	bl	8007d6a <memcpy>
 8008840:	2201      	movs	r2, #1
 8008842:	4631      	mov	r1, r6
 8008844:	4658      	mov	r0, fp
 8008846:	f000 ff9b 	bl	8009780 <__lshift>
 800884a:	462f      	mov	r7, r5
 800884c:	4605      	mov	r5, r0
 800884e:	f10a 0301 	add.w	r3, sl, #1
 8008852:	9307      	str	r3, [sp, #28]
 8008854:	9b08      	ldr	r3, [sp, #32]
 8008856:	4453      	add	r3, sl
 8008858:	930b      	str	r3, [sp, #44]	@ 0x2c
 800885a:	9b02      	ldr	r3, [sp, #8]
 800885c:	f003 0301 	and.w	r3, r3, #1
 8008860:	930a      	str	r3, [sp, #40]	@ 0x28
 8008862:	9b07      	ldr	r3, [sp, #28]
 8008864:	4621      	mov	r1, r4
 8008866:	3b01      	subs	r3, #1
 8008868:	4648      	mov	r0, r9
 800886a:	9302      	str	r3, [sp, #8]
 800886c:	f7ff fa96 	bl	8007d9c <quorem>
 8008870:	4639      	mov	r1, r7
 8008872:	9008      	str	r0, [sp, #32]
 8008874:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008878:	4648      	mov	r0, r9
 800887a:	f000 ffed 	bl	8009858 <__mcmp>
 800887e:	462a      	mov	r2, r5
 8008880:	9009      	str	r0, [sp, #36]	@ 0x24
 8008882:	4621      	mov	r1, r4
 8008884:	4658      	mov	r0, fp
 8008886:	f001 f803 	bl	8009890 <__mdiff>
 800888a:	68c2      	ldr	r2, [r0, #12]
 800888c:	4606      	mov	r6, r0
 800888e:	bb02      	cbnz	r2, 80088d2 <_dtoa_r+0xa22>
 8008890:	4601      	mov	r1, r0
 8008892:	4648      	mov	r0, r9
 8008894:	f000 ffe0 	bl	8009858 <__mcmp>
 8008898:	4602      	mov	r2, r0
 800889a:	4631      	mov	r1, r6
 800889c:	4658      	mov	r0, fp
 800889e:	920c      	str	r2, [sp, #48]	@ 0x30
 80088a0:	f000 fd58 	bl	8009354 <_Bfree>
 80088a4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80088a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80088a8:	9e07      	ldr	r6, [sp, #28]
 80088aa:	ea43 0102 	orr.w	r1, r3, r2
 80088ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80088b0:	4319      	orrs	r1, r3
 80088b2:	d110      	bne.n	80088d6 <_dtoa_r+0xa26>
 80088b4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80088b8:	d029      	beq.n	800890e <_dtoa_r+0xa5e>
 80088ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088bc:	2b00      	cmp	r3, #0
 80088be:	dd02      	ble.n	80088c6 <_dtoa_r+0xa16>
 80088c0:	9b08      	ldr	r3, [sp, #32]
 80088c2:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80088c6:	9b02      	ldr	r3, [sp, #8]
 80088c8:	f883 8000 	strb.w	r8, [r3]
 80088cc:	e63b      	b.n	8008546 <_dtoa_r+0x696>
 80088ce:	4628      	mov	r0, r5
 80088d0:	e7bb      	b.n	800884a <_dtoa_r+0x99a>
 80088d2:	2201      	movs	r2, #1
 80088d4:	e7e1      	b.n	800889a <_dtoa_r+0x9ea>
 80088d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088d8:	2b00      	cmp	r3, #0
 80088da:	db04      	blt.n	80088e6 <_dtoa_r+0xa36>
 80088dc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80088de:	430b      	orrs	r3, r1
 80088e0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80088e2:	430b      	orrs	r3, r1
 80088e4:	d120      	bne.n	8008928 <_dtoa_r+0xa78>
 80088e6:	2a00      	cmp	r2, #0
 80088e8:	dded      	ble.n	80088c6 <_dtoa_r+0xa16>
 80088ea:	4649      	mov	r1, r9
 80088ec:	2201      	movs	r2, #1
 80088ee:	4658      	mov	r0, fp
 80088f0:	f000 ff46 	bl	8009780 <__lshift>
 80088f4:	4621      	mov	r1, r4
 80088f6:	4681      	mov	r9, r0
 80088f8:	f000 ffae 	bl	8009858 <__mcmp>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	dc03      	bgt.n	8008908 <_dtoa_r+0xa58>
 8008900:	d1e1      	bne.n	80088c6 <_dtoa_r+0xa16>
 8008902:	f018 0f01 	tst.w	r8, #1
 8008906:	d0de      	beq.n	80088c6 <_dtoa_r+0xa16>
 8008908:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800890c:	d1d8      	bne.n	80088c0 <_dtoa_r+0xa10>
 800890e:	2339      	movs	r3, #57	@ 0x39
 8008910:	9a02      	ldr	r2, [sp, #8]
 8008912:	7013      	strb	r3, [r2, #0]
 8008914:	4633      	mov	r3, r6
 8008916:	461e      	mov	r6, r3
 8008918:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800891c:	3b01      	subs	r3, #1
 800891e:	2a39      	cmp	r2, #57	@ 0x39
 8008920:	d052      	beq.n	80089c8 <_dtoa_r+0xb18>
 8008922:	3201      	adds	r2, #1
 8008924:	701a      	strb	r2, [r3, #0]
 8008926:	e60e      	b.n	8008546 <_dtoa_r+0x696>
 8008928:	2a00      	cmp	r2, #0
 800892a:	dd07      	ble.n	800893c <_dtoa_r+0xa8c>
 800892c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008930:	d0ed      	beq.n	800890e <_dtoa_r+0xa5e>
 8008932:	9a02      	ldr	r2, [sp, #8]
 8008934:	f108 0301 	add.w	r3, r8, #1
 8008938:	7013      	strb	r3, [r2, #0]
 800893a:	e604      	b.n	8008546 <_dtoa_r+0x696>
 800893c:	9b07      	ldr	r3, [sp, #28]
 800893e:	9a07      	ldr	r2, [sp, #28]
 8008940:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008944:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008946:	4293      	cmp	r3, r2
 8008948:	d028      	beq.n	800899c <_dtoa_r+0xaec>
 800894a:	4649      	mov	r1, r9
 800894c:	2300      	movs	r3, #0
 800894e:	220a      	movs	r2, #10
 8008950:	4658      	mov	r0, fp
 8008952:	f000 fd21 	bl	8009398 <__multadd>
 8008956:	42af      	cmp	r7, r5
 8008958:	4681      	mov	r9, r0
 800895a:	f04f 0300 	mov.w	r3, #0
 800895e:	f04f 020a 	mov.w	r2, #10
 8008962:	4639      	mov	r1, r7
 8008964:	4658      	mov	r0, fp
 8008966:	d107      	bne.n	8008978 <_dtoa_r+0xac8>
 8008968:	f000 fd16 	bl	8009398 <__multadd>
 800896c:	4607      	mov	r7, r0
 800896e:	4605      	mov	r5, r0
 8008970:	9b07      	ldr	r3, [sp, #28]
 8008972:	3301      	adds	r3, #1
 8008974:	9307      	str	r3, [sp, #28]
 8008976:	e774      	b.n	8008862 <_dtoa_r+0x9b2>
 8008978:	f000 fd0e 	bl	8009398 <__multadd>
 800897c:	4629      	mov	r1, r5
 800897e:	4607      	mov	r7, r0
 8008980:	2300      	movs	r3, #0
 8008982:	220a      	movs	r2, #10
 8008984:	4658      	mov	r0, fp
 8008986:	f000 fd07 	bl	8009398 <__multadd>
 800898a:	4605      	mov	r5, r0
 800898c:	e7f0      	b.n	8008970 <_dtoa_r+0xac0>
 800898e:	9b08      	ldr	r3, [sp, #32]
 8008990:	2700      	movs	r7, #0
 8008992:	2b00      	cmp	r3, #0
 8008994:	bfcc      	ite	gt
 8008996:	461e      	movgt	r6, r3
 8008998:	2601      	movle	r6, #1
 800899a:	4456      	add	r6, sl
 800899c:	4649      	mov	r1, r9
 800899e:	2201      	movs	r2, #1
 80089a0:	4658      	mov	r0, fp
 80089a2:	f000 feed 	bl	8009780 <__lshift>
 80089a6:	4621      	mov	r1, r4
 80089a8:	4681      	mov	r9, r0
 80089aa:	f000 ff55 	bl	8009858 <__mcmp>
 80089ae:	2800      	cmp	r0, #0
 80089b0:	dcb0      	bgt.n	8008914 <_dtoa_r+0xa64>
 80089b2:	d102      	bne.n	80089ba <_dtoa_r+0xb0a>
 80089b4:	f018 0f01 	tst.w	r8, #1
 80089b8:	d1ac      	bne.n	8008914 <_dtoa_r+0xa64>
 80089ba:	4633      	mov	r3, r6
 80089bc:	461e      	mov	r6, r3
 80089be:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089c2:	2a30      	cmp	r2, #48	@ 0x30
 80089c4:	d0fa      	beq.n	80089bc <_dtoa_r+0xb0c>
 80089c6:	e5be      	b.n	8008546 <_dtoa_r+0x696>
 80089c8:	459a      	cmp	sl, r3
 80089ca:	d1a4      	bne.n	8008916 <_dtoa_r+0xa66>
 80089cc:	9b04      	ldr	r3, [sp, #16]
 80089ce:	3301      	adds	r3, #1
 80089d0:	9304      	str	r3, [sp, #16]
 80089d2:	2331      	movs	r3, #49	@ 0x31
 80089d4:	f88a 3000 	strb.w	r3, [sl]
 80089d8:	e5b5      	b.n	8008546 <_dtoa_r+0x696>
 80089da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80089dc:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008a3c <_dtoa_r+0xb8c>
 80089e0:	b11b      	cbz	r3, 80089ea <_dtoa_r+0xb3a>
 80089e2:	f10a 0308 	add.w	r3, sl, #8
 80089e6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80089e8:	6013      	str	r3, [r2, #0]
 80089ea:	4650      	mov	r0, sl
 80089ec:	b017      	add	sp, #92	@ 0x5c
 80089ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	f77f ae3d 	ble.w	8008674 <_dtoa_r+0x7c4>
 80089fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80089fe:	2001      	movs	r0, #1
 8008a00:	e65b      	b.n	80086ba <_dtoa_r+0x80a>
 8008a02:	9b08      	ldr	r3, [sp, #32]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f77f aed6 	ble.w	80087b6 <_dtoa_r+0x906>
 8008a0a:	4656      	mov	r6, sl
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	4648      	mov	r0, r9
 8008a10:	f7ff f9c4 	bl	8007d9c <quorem>
 8008a14:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008a18:	9b08      	ldr	r3, [sp, #32]
 8008a1a:	f806 8b01 	strb.w	r8, [r6], #1
 8008a1e:	eba6 020a 	sub.w	r2, r6, sl
 8008a22:	4293      	cmp	r3, r2
 8008a24:	ddb3      	ble.n	800898e <_dtoa_r+0xade>
 8008a26:	4649      	mov	r1, r9
 8008a28:	2300      	movs	r3, #0
 8008a2a:	220a      	movs	r2, #10
 8008a2c:	4658      	mov	r0, fp
 8008a2e:	f000 fcb3 	bl	8009398 <__multadd>
 8008a32:	4681      	mov	r9, r0
 8008a34:	e7ea      	b.n	8008a0c <_dtoa_r+0xb5c>
 8008a36:	bf00      	nop
 8008a38:	0800ac79 	.word	0x0800ac79
 8008a3c:	0800abfd 	.word	0x0800abfd

08008a40 <_free_r>:
 8008a40:	b538      	push	{r3, r4, r5, lr}
 8008a42:	4605      	mov	r5, r0
 8008a44:	2900      	cmp	r1, #0
 8008a46:	d040      	beq.n	8008aca <_free_r+0x8a>
 8008a48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a4c:	1f0c      	subs	r4, r1, #4
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	bfb8      	it	lt
 8008a52:	18e4      	addlt	r4, r4, r3
 8008a54:	f000 fc32 	bl	80092bc <__malloc_lock>
 8008a58:	4a1c      	ldr	r2, [pc, #112]	@ (8008acc <_free_r+0x8c>)
 8008a5a:	6813      	ldr	r3, [r2, #0]
 8008a5c:	b933      	cbnz	r3, 8008a6c <_free_r+0x2c>
 8008a5e:	6063      	str	r3, [r4, #4]
 8008a60:	6014      	str	r4, [r2, #0]
 8008a62:	4628      	mov	r0, r5
 8008a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a68:	f000 bc2e 	b.w	80092c8 <__malloc_unlock>
 8008a6c:	42a3      	cmp	r3, r4
 8008a6e:	d908      	bls.n	8008a82 <_free_r+0x42>
 8008a70:	6820      	ldr	r0, [r4, #0]
 8008a72:	1821      	adds	r1, r4, r0
 8008a74:	428b      	cmp	r3, r1
 8008a76:	bf01      	itttt	eq
 8008a78:	6819      	ldreq	r1, [r3, #0]
 8008a7a:	685b      	ldreq	r3, [r3, #4]
 8008a7c:	1809      	addeq	r1, r1, r0
 8008a7e:	6021      	streq	r1, [r4, #0]
 8008a80:	e7ed      	b.n	8008a5e <_free_r+0x1e>
 8008a82:	461a      	mov	r2, r3
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	b10b      	cbz	r3, 8008a8c <_free_r+0x4c>
 8008a88:	42a3      	cmp	r3, r4
 8008a8a:	d9fa      	bls.n	8008a82 <_free_r+0x42>
 8008a8c:	6811      	ldr	r1, [r2, #0]
 8008a8e:	1850      	adds	r0, r2, r1
 8008a90:	42a0      	cmp	r0, r4
 8008a92:	d10b      	bne.n	8008aac <_free_r+0x6c>
 8008a94:	6820      	ldr	r0, [r4, #0]
 8008a96:	4401      	add	r1, r0
 8008a98:	1850      	adds	r0, r2, r1
 8008a9a:	4283      	cmp	r3, r0
 8008a9c:	6011      	str	r1, [r2, #0]
 8008a9e:	d1e0      	bne.n	8008a62 <_free_r+0x22>
 8008aa0:	6818      	ldr	r0, [r3, #0]
 8008aa2:	685b      	ldr	r3, [r3, #4]
 8008aa4:	4408      	add	r0, r1
 8008aa6:	6010      	str	r0, [r2, #0]
 8008aa8:	6053      	str	r3, [r2, #4]
 8008aaa:	e7da      	b.n	8008a62 <_free_r+0x22>
 8008aac:	d902      	bls.n	8008ab4 <_free_r+0x74>
 8008aae:	230c      	movs	r3, #12
 8008ab0:	602b      	str	r3, [r5, #0]
 8008ab2:	e7d6      	b.n	8008a62 <_free_r+0x22>
 8008ab4:	6820      	ldr	r0, [r4, #0]
 8008ab6:	1821      	adds	r1, r4, r0
 8008ab8:	428b      	cmp	r3, r1
 8008aba:	bf01      	itttt	eq
 8008abc:	6819      	ldreq	r1, [r3, #0]
 8008abe:	685b      	ldreq	r3, [r3, #4]
 8008ac0:	1809      	addeq	r1, r1, r0
 8008ac2:	6021      	streq	r1, [r4, #0]
 8008ac4:	6063      	str	r3, [r4, #4]
 8008ac6:	6054      	str	r4, [r2, #4]
 8008ac8:	e7cb      	b.n	8008a62 <_free_r+0x22>
 8008aca:	bd38      	pop	{r3, r4, r5, pc}
 8008acc:	20000b80 	.word	0x20000b80

08008ad0 <rshift>:
 8008ad0:	6903      	ldr	r3, [r0, #16]
 8008ad2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008ad6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008ada:	f100 0414 	add.w	r4, r0, #20
 8008ade:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008ae2:	dd46      	ble.n	8008b72 <rshift+0xa2>
 8008ae4:	f011 011f 	ands.w	r1, r1, #31
 8008ae8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008aec:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008af0:	d10c      	bne.n	8008b0c <rshift+0x3c>
 8008af2:	4629      	mov	r1, r5
 8008af4:	f100 0710 	add.w	r7, r0, #16
 8008af8:	42b1      	cmp	r1, r6
 8008afa:	d335      	bcc.n	8008b68 <rshift+0x98>
 8008afc:	1a9b      	subs	r3, r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	1eea      	subs	r2, r5, #3
 8008b02:	4296      	cmp	r6, r2
 8008b04:	bf38      	it	cc
 8008b06:	2300      	movcc	r3, #0
 8008b08:	4423      	add	r3, r4
 8008b0a:	e015      	b.n	8008b38 <rshift+0x68>
 8008b0c:	46a1      	mov	r9, r4
 8008b0e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008b12:	f1c1 0820 	rsb	r8, r1, #32
 8008b16:	40cf      	lsrs	r7, r1
 8008b18:	f105 0e04 	add.w	lr, r5, #4
 8008b1c:	4576      	cmp	r6, lr
 8008b1e:	46f4      	mov	ip, lr
 8008b20:	d816      	bhi.n	8008b50 <rshift+0x80>
 8008b22:	1a9a      	subs	r2, r3, r2
 8008b24:	0092      	lsls	r2, r2, #2
 8008b26:	3a04      	subs	r2, #4
 8008b28:	3501      	adds	r5, #1
 8008b2a:	42ae      	cmp	r6, r5
 8008b2c:	bf38      	it	cc
 8008b2e:	2200      	movcc	r2, #0
 8008b30:	18a3      	adds	r3, r4, r2
 8008b32:	50a7      	str	r7, [r4, r2]
 8008b34:	b107      	cbz	r7, 8008b38 <rshift+0x68>
 8008b36:	3304      	adds	r3, #4
 8008b38:	42a3      	cmp	r3, r4
 8008b3a:	eba3 0204 	sub.w	r2, r3, r4
 8008b3e:	bf08      	it	eq
 8008b40:	2300      	moveq	r3, #0
 8008b42:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008b46:	6102      	str	r2, [r0, #16]
 8008b48:	bf08      	it	eq
 8008b4a:	6143      	streq	r3, [r0, #20]
 8008b4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b50:	f8dc c000 	ldr.w	ip, [ip]
 8008b54:	fa0c fc08 	lsl.w	ip, ip, r8
 8008b58:	ea4c 0707 	orr.w	r7, ip, r7
 8008b5c:	f849 7b04 	str.w	r7, [r9], #4
 8008b60:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b64:	40cf      	lsrs	r7, r1
 8008b66:	e7d9      	b.n	8008b1c <rshift+0x4c>
 8008b68:	f851 cb04 	ldr.w	ip, [r1], #4
 8008b6c:	f847 cf04 	str.w	ip, [r7, #4]!
 8008b70:	e7c2      	b.n	8008af8 <rshift+0x28>
 8008b72:	4623      	mov	r3, r4
 8008b74:	e7e0      	b.n	8008b38 <rshift+0x68>

08008b76 <__hexdig_fun>:
 8008b76:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008b7a:	2b09      	cmp	r3, #9
 8008b7c:	d802      	bhi.n	8008b84 <__hexdig_fun+0xe>
 8008b7e:	3820      	subs	r0, #32
 8008b80:	b2c0      	uxtb	r0, r0
 8008b82:	4770      	bx	lr
 8008b84:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008b88:	2b05      	cmp	r3, #5
 8008b8a:	d801      	bhi.n	8008b90 <__hexdig_fun+0x1a>
 8008b8c:	3847      	subs	r0, #71	@ 0x47
 8008b8e:	e7f7      	b.n	8008b80 <__hexdig_fun+0xa>
 8008b90:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008b94:	2b05      	cmp	r3, #5
 8008b96:	d801      	bhi.n	8008b9c <__hexdig_fun+0x26>
 8008b98:	3827      	subs	r0, #39	@ 0x27
 8008b9a:	e7f1      	b.n	8008b80 <__hexdig_fun+0xa>
 8008b9c:	2000      	movs	r0, #0
 8008b9e:	4770      	bx	lr

08008ba0 <__gethex>:
 8008ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ba4:	468a      	mov	sl, r1
 8008ba6:	4690      	mov	r8, r2
 8008ba8:	b085      	sub	sp, #20
 8008baa:	9302      	str	r3, [sp, #8]
 8008bac:	680b      	ldr	r3, [r1, #0]
 8008bae:	9001      	str	r0, [sp, #4]
 8008bb0:	1c9c      	adds	r4, r3, #2
 8008bb2:	46a1      	mov	r9, r4
 8008bb4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008bb8:	2830      	cmp	r0, #48	@ 0x30
 8008bba:	d0fa      	beq.n	8008bb2 <__gethex+0x12>
 8008bbc:	eba9 0303 	sub.w	r3, r9, r3
 8008bc0:	f1a3 0b02 	sub.w	fp, r3, #2
 8008bc4:	f7ff ffd7 	bl	8008b76 <__hexdig_fun>
 8008bc8:	4605      	mov	r5, r0
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	d168      	bne.n	8008ca0 <__gethex+0x100>
 8008bce:	2201      	movs	r2, #1
 8008bd0:	4648      	mov	r0, r9
 8008bd2:	499f      	ldr	r1, [pc, #636]	@ (8008e50 <__gethex+0x2b0>)
 8008bd4:	f7fe fffe 	bl	8007bd4 <strncmp>
 8008bd8:	4607      	mov	r7, r0
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d167      	bne.n	8008cae <__gethex+0x10e>
 8008bde:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008be2:	4626      	mov	r6, r4
 8008be4:	f7ff ffc7 	bl	8008b76 <__hexdig_fun>
 8008be8:	2800      	cmp	r0, #0
 8008bea:	d062      	beq.n	8008cb2 <__gethex+0x112>
 8008bec:	4623      	mov	r3, r4
 8008bee:	7818      	ldrb	r0, [r3, #0]
 8008bf0:	4699      	mov	r9, r3
 8008bf2:	2830      	cmp	r0, #48	@ 0x30
 8008bf4:	f103 0301 	add.w	r3, r3, #1
 8008bf8:	d0f9      	beq.n	8008bee <__gethex+0x4e>
 8008bfa:	f7ff ffbc 	bl	8008b76 <__hexdig_fun>
 8008bfe:	fab0 f580 	clz	r5, r0
 8008c02:	f04f 0b01 	mov.w	fp, #1
 8008c06:	096d      	lsrs	r5, r5, #5
 8008c08:	464a      	mov	r2, r9
 8008c0a:	4616      	mov	r6, r2
 8008c0c:	7830      	ldrb	r0, [r6, #0]
 8008c0e:	3201      	adds	r2, #1
 8008c10:	f7ff ffb1 	bl	8008b76 <__hexdig_fun>
 8008c14:	2800      	cmp	r0, #0
 8008c16:	d1f8      	bne.n	8008c0a <__gethex+0x6a>
 8008c18:	2201      	movs	r2, #1
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	498c      	ldr	r1, [pc, #560]	@ (8008e50 <__gethex+0x2b0>)
 8008c1e:	f7fe ffd9 	bl	8007bd4 <strncmp>
 8008c22:	2800      	cmp	r0, #0
 8008c24:	d13f      	bne.n	8008ca6 <__gethex+0x106>
 8008c26:	b944      	cbnz	r4, 8008c3a <__gethex+0x9a>
 8008c28:	1c74      	adds	r4, r6, #1
 8008c2a:	4622      	mov	r2, r4
 8008c2c:	4616      	mov	r6, r2
 8008c2e:	7830      	ldrb	r0, [r6, #0]
 8008c30:	3201      	adds	r2, #1
 8008c32:	f7ff ffa0 	bl	8008b76 <__hexdig_fun>
 8008c36:	2800      	cmp	r0, #0
 8008c38:	d1f8      	bne.n	8008c2c <__gethex+0x8c>
 8008c3a:	1ba4      	subs	r4, r4, r6
 8008c3c:	00a7      	lsls	r7, r4, #2
 8008c3e:	7833      	ldrb	r3, [r6, #0]
 8008c40:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008c44:	2b50      	cmp	r3, #80	@ 0x50
 8008c46:	d13e      	bne.n	8008cc6 <__gethex+0x126>
 8008c48:	7873      	ldrb	r3, [r6, #1]
 8008c4a:	2b2b      	cmp	r3, #43	@ 0x2b
 8008c4c:	d033      	beq.n	8008cb6 <__gethex+0x116>
 8008c4e:	2b2d      	cmp	r3, #45	@ 0x2d
 8008c50:	d034      	beq.n	8008cbc <__gethex+0x11c>
 8008c52:	2400      	movs	r4, #0
 8008c54:	1c71      	adds	r1, r6, #1
 8008c56:	7808      	ldrb	r0, [r1, #0]
 8008c58:	f7ff ff8d 	bl	8008b76 <__hexdig_fun>
 8008c5c:	1e43      	subs	r3, r0, #1
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	2b18      	cmp	r3, #24
 8008c62:	d830      	bhi.n	8008cc6 <__gethex+0x126>
 8008c64:	f1a0 0210 	sub.w	r2, r0, #16
 8008c68:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008c6c:	f7ff ff83 	bl	8008b76 <__hexdig_fun>
 8008c70:	f100 3cff 	add.w	ip, r0, #4294967295
 8008c74:	fa5f fc8c 	uxtb.w	ip, ip
 8008c78:	f1bc 0f18 	cmp.w	ip, #24
 8008c7c:	f04f 030a 	mov.w	r3, #10
 8008c80:	d91e      	bls.n	8008cc0 <__gethex+0x120>
 8008c82:	b104      	cbz	r4, 8008c86 <__gethex+0xe6>
 8008c84:	4252      	negs	r2, r2
 8008c86:	4417      	add	r7, r2
 8008c88:	f8ca 1000 	str.w	r1, [sl]
 8008c8c:	b1ed      	cbz	r5, 8008cca <__gethex+0x12a>
 8008c8e:	f1bb 0f00 	cmp.w	fp, #0
 8008c92:	bf0c      	ite	eq
 8008c94:	2506      	moveq	r5, #6
 8008c96:	2500      	movne	r5, #0
 8008c98:	4628      	mov	r0, r5
 8008c9a:	b005      	add	sp, #20
 8008c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca0:	2500      	movs	r5, #0
 8008ca2:	462c      	mov	r4, r5
 8008ca4:	e7b0      	b.n	8008c08 <__gethex+0x68>
 8008ca6:	2c00      	cmp	r4, #0
 8008ca8:	d1c7      	bne.n	8008c3a <__gethex+0x9a>
 8008caa:	4627      	mov	r7, r4
 8008cac:	e7c7      	b.n	8008c3e <__gethex+0x9e>
 8008cae:	464e      	mov	r6, r9
 8008cb0:	462f      	mov	r7, r5
 8008cb2:	2501      	movs	r5, #1
 8008cb4:	e7c3      	b.n	8008c3e <__gethex+0x9e>
 8008cb6:	2400      	movs	r4, #0
 8008cb8:	1cb1      	adds	r1, r6, #2
 8008cba:	e7cc      	b.n	8008c56 <__gethex+0xb6>
 8008cbc:	2401      	movs	r4, #1
 8008cbe:	e7fb      	b.n	8008cb8 <__gethex+0x118>
 8008cc0:	fb03 0002 	mla	r0, r3, r2, r0
 8008cc4:	e7ce      	b.n	8008c64 <__gethex+0xc4>
 8008cc6:	4631      	mov	r1, r6
 8008cc8:	e7de      	b.n	8008c88 <__gethex+0xe8>
 8008cca:	4629      	mov	r1, r5
 8008ccc:	eba6 0309 	sub.w	r3, r6, r9
 8008cd0:	3b01      	subs	r3, #1
 8008cd2:	2b07      	cmp	r3, #7
 8008cd4:	dc0a      	bgt.n	8008cec <__gethex+0x14c>
 8008cd6:	9801      	ldr	r0, [sp, #4]
 8008cd8:	f000 fafc 	bl	80092d4 <_Balloc>
 8008cdc:	4604      	mov	r4, r0
 8008cde:	b940      	cbnz	r0, 8008cf2 <__gethex+0x152>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	21e4      	movs	r1, #228	@ 0xe4
 8008ce4:	4b5b      	ldr	r3, [pc, #364]	@ (8008e54 <__gethex+0x2b4>)
 8008ce6:	485c      	ldr	r0, [pc, #368]	@ (8008e58 <__gethex+0x2b8>)
 8008ce8:	f001 f9d0 	bl	800a08c <__assert_func>
 8008cec:	3101      	adds	r1, #1
 8008cee:	105b      	asrs	r3, r3, #1
 8008cf0:	e7ef      	b.n	8008cd2 <__gethex+0x132>
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	f100 0a14 	add.w	sl, r0, #20
 8008cf8:	4655      	mov	r5, sl
 8008cfa:	469b      	mov	fp, r3
 8008cfc:	45b1      	cmp	r9, r6
 8008cfe:	d337      	bcc.n	8008d70 <__gethex+0x1d0>
 8008d00:	f845 bb04 	str.w	fp, [r5], #4
 8008d04:	eba5 050a 	sub.w	r5, r5, sl
 8008d08:	10ad      	asrs	r5, r5, #2
 8008d0a:	6125      	str	r5, [r4, #16]
 8008d0c:	4658      	mov	r0, fp
 8008d0e:	f000 fbd3 	bl	80094b8 <__hi0bits>
 8008d12:	016d      	lsls	r5, r5, #5
 8008d14:	f8d8 6000 	ldr.w	r6, [r8]
 8008d18:	1a2d      	subs	r5, r5, r0
 8008d1a:	42b5      	cmp	r5, r6
 8008d1c:	dd54      	ble.n	8008dc8 <__gethex+0x228>
 8008d1e:	1bad      	subs	r5, r5, r6
 8008d20:	4629      	mov	r1, r5
 8008d22:	4620      	mov	r0, r4
 8008d24:	f000 ff5b 	bl	8009bde <__any_on>
 8008d28:	4681      	mov	r9, r0
 8008d2a:	b178      	cbz	r0, 8008d4c <__gethex+0x1ac>
 8008d2c:	f04f 0901 	mov.w	r9, #1
 8008d30:	1e6b      	subs	r3, r5, #1
 8008d32:	1159      	asrs	r1, r3, #5
 8008d34:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008d38:	f003 021f 	and.w	r2, r3, #31
 8008d3c:	fa09 f202 	lsl.w	r2, r9, r2
 8008d40:	420a      	tst	r2, r1
 8008d42:	d003      	beq.n	8008d4c <__gethex+0x1ac>
 8008d44:	454b      	cmp	r3, r9
 8008d46:	dc36      	bgt.n	8008db6 <__gethex+0x216>
 8008d48:	f04f 0902 	mov.w	r9, #2
 8008d4c:	4629      	mov	r1, r5
 8008d4e:	4620      	mov	r0, r4
 8008d50:	f7ff febe 	bl	8008ad0 <rshift>
 8008d54:	442f      	add	r7, r5
 8008d56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008d5a:	42bb      	cmp	r3, r7
 8008d5c:	da42      	bge.n	8008de4 <__gethex+0x244>
 8008d5e:	4621      	mov	r1, r4
 8008d60:	9801      	ldr	r0, [sp, #4]
 8008d62:	f000 faf7 	bl	8009354 <_Bfree>
 8008d66:	2300      	movs	r3, #0
 8008d68:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d6a:	25a3      	movs	r5, #163	@ 0xa3
 8008d6c:	6013      	str	r3, [r2, #0]
 8008d6e:	e793      	b.n	8008c98 <__gethex+0xf8>
 8008d70:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008d74:	2a2e      	cmp	r2, #46	@ 0x2e
 8008d76:	d012      	beq.n	8008d9e <__gethex+0x1fe>
 8008d78:	2b20      	cmp	r3, #32
 8008d7a:	d104      	bne.n	8008d86 <__gethex+0x1e6>
 8008d7c:	f845 bb04 	str.w	fp, [r5], #4
 8008d80:	f04f 0b00 	mov.w	fp, #0
 8008d84:	465b      	mov	r3, fp
 8008d86:	7830      	ldrb	r0, [r6, #0]
 8008d88:	9303      	str	r3, [sp, #12]
 8008d8a:	f7ff fef4 	bl	8008b76 <__hexdig_fun>
 8008d8e:	9b03      	ldr	r3, [sp, #12]
 8008d90:	f000 000f 	and.w	r0, r0, #15
 8008d94:	4098      	lsls	r0, r3
 8008d96:	ea4b 0b00 	orr.w	fp, fp, r0
 8008d9a:	3304      	adds	r3, #4
 8008d9c:	e7ae      	b.n	8008cfc <__gethex+0x15c>
 8008d9e:	45b1      	cmp	r9, r6
 8008da0:	d8ea      	bhi.n	8008d78 <__gethex+0x1d8>
 8008da2:	2201      	movs	r2, #1
 8008da4:	4630      	mov	r0, r6
 8008da6:	492a      	ldr	r1, [pc, #168]	@ (8008e50 <__gethex+0x2b0>)
 8008da8:	9303      	str	r3, [sp, #12]
 8008daa:	f7fe ff13 	bl	8007bd4 <strncmp>
 8008dae:	9b03      	ldr	r3, [sp, #12]
 8008db0:	2800      	cmp	r0, #0
 8008db2:	d1e1      	bne.n	8008d78 <__gethex+0x1d8>
 8008db4:	e7a2      	b.n	8008cfc <__gethex+0x15c>
 8008db6:	4620      	mov	r0, r4
 8008db8:	1ea9      	subs	r1, r5, #2
 8008dba:	f000 ff10 	bl	8009bde <__any_on>
 8008dbe:	2800      	cmp	r0, #0
 8008dc0:	d0c2      	beq.n	8008d48 <__gethex+0x1a8>
 8008dc2:	f04f 0903 	mov.w	r9, #3
 8008dc6:	e7c1      	b.n	8008d4c <__gethex+0x1ac>
 8008dc8:	da09      	bge.n	8008dde <__gethex+0x23e>
 8008dca:	1b75      	subs	r5, r6, r5
 8008dcc:	4621      	mov	r1, r4
 8008dce:	462a      	mov	r2, r5
 8008dd0:	9801      	ldr	r0, [sp, #4]
 8008dd2:	f000 fcd5 	bl	8009780 <__lshift>
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	1b7f      	subs	r7, r7, r5
 8008dda:	f100 0a14 	add.w	sl, r0, #20
 8008dde:	f04f 0900 	mov.w	r9, #0
 8008de2:	e7b8      	b.n	8008d56 <__gethex+0x1b6>
 8008de4:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008de8:	42bd      	cmp	r5, r7
 8008dea:	dd6f      	ble.n	8008ecc <__gethex+0x32c>
 8008dec:	1bed      	subs	r5, r5, r7
 8008dee:	42ae      	cmp	r6, r5
 8008df0:	dc34      	bgt.n	8008e5c <__gethex+0x2bc>
 8008df2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008df6:	2b02      	cmp	r3, #2
 8008df8:	d022      	beq.n	8008e40 <__gethex+0x2a0>
 8008dfa:	2b03      	cmp	r3, #3
 8008dfc:	d024      	beq.n	8008e48 <__gethex+0x2a8>
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d115      	bne.n	8008e2e <__gethex+0x28e>
 8008e02:	42ae      	cmp	r6, r5
 8008e04:	d113      	bne.n	8008e2e <__gethex+0x28e>
 8008e06:	2e01      	cmp	r6, #1
 8008e08:	d10b      	bne.n	8008e22 <__gethex+0x282>
 8008e0a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008e0e:	9a02      	ldr	r2, [sp, #8]
 8008e10:	2562      	movs	r5, #98	@ 0x62
 8008e12:	6013      	str	r3, [r2, #0]
 8008e14:	2301      	movs	r3, #1
 8008e16:	6123      	str	r3, [r4, #16]
 8008e18:	f8ca 3000 	str.w	r3, [sl]
 8008e1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e1e:	601c      	str	r4, [r3, #0]
 8008e20:	e73a      	b.n	8008c98 <__gethex+0xf8>
 8008e22:	4620      	mov	r0, r4
 8008e24:	1e71      	subs	r1, r6, #1
 8008e26:	f000 feda 	bl	8009bde <__any_on>
 8008e2a:	2800      	cmp	r0, #0
 8008e2c:	d1ed      	bne.n	8008e0a <__gethex+0x26a>
 8008e2e:	4621      	mov	r1, r4
 8008e30:	9801      	ldr	r0, [sp, #4]
 8008e32:	f000 fa8f 	bl	8009354 <_Bfree>
 8008e36:	2300      	movs	r3, #0
 8008e38:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e3a:	2550      	movs	r5, #80	@ 0x50
 8008e3c:	6013      	str	r3, [r2, #0]
 8008e3e:	e72b      	b.n	8008c98 <__gethex+0xf8>
 8008e40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1f3      	bne.n	8008e2e <__gethex+0x28e>
 8008e46:	e7e0      	b.n	8008e0a <__gethex+0x26a>
 8008e48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1dd      	bne.n	8008e0a <__gethex+0x26a>
 8008e4e:	e7ee      	b.n	8008e2e <__gethex+0x28e>
 8008e50:	0800aa6e 	.word	0x0800aa6e
 8008e54:	0800ac79 	.word	0x0800ac79
 8008e58:	0800ac8a 	.word	0x0800ac8a
 8008e5c:	1e6f      	subs	r7, r5, #1
 8008e5e:	f1b9 0f00 	cmp.w	r9, #0
 8008e62:	d130      	bne.n	8008ec6 <__gethex+0x326>
 8008e64:	b127      	cbz	r7, 8008e70 <__gethex+0x2d0>
 8008e66:	4639      	mov	r1, r7
 8008e68:	4620      	mov	r0, r4
 8008e6a:	f000 feb8 	bl	8009bde <__any_on>
 8008e6e:	4681      	mov	r9, r0
 8008e70:	2301      	movs	r3, #1
 8008e72:	4629      	mov	r1, r5
 8008e74:	1b76      	subs	r6, r6, r5
 8008e76:	2502      	movs	r5, #2
 8008e78:	117a      	asrs	r2, r7, #5
 8008e7a:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008e7e:	f007 071f 	and.w	r7, r7, #31
 8008e82:	40bb      	lsls	r3, r7
 8008e84:	4213      	tst	r3, r2
 8008e86:	4620      	mov	r0, r4
 8008e88:	bf18      	it	ne
 8008e8a:	f049 0902 	orrne.w	r9, r9, #2
 8008e8e:	f7ff fe1f 	bl	8008ad0 <rshift>
 8008e92:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008e96:	f1b9 0f00 	cmp.w	r9, #0
 8008e9a:	d047      	beq.n	8008f2c <__gethex+0x38c>
 8008e9c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d015      	beq.n	8008ed0 <__gethex+0x330>
 8008ea4:	2b03      	cmp	r3, #3
 8008ea6:	d017      	beq.n	8008ed8 <__gethex+0x338>
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d109      	bne.n	8008ec0 <__gethex+0x320>
 8008eac:	f019 0f02 	tst.w	r9, #2
 8008eb0:	d006      	beq.n	8008ec0 <__gethex+0x320>
 8008eb2:	f8da 3000 	ldr.w	r3, [sl]
 8008eb6:	ea49 0903 	orr.w	r9, r9, r3
 8008eba:	f019 0f01 	tst.w	r9, #1
 8008ebe:	d10e      	bne.n	8008ede <__gethex+0x33e>
 8008ec0:	f045 0510 	orr.w	r5, r5, #16
 8008ec4:	e032      	b.n	8008f2c <__gethex+0x38c>
 8008ec6:	f04f 0901 	mov.w	r9, #1
 8008eca:	e7d1      	b.n	8008e70 <__gethex+0x2d0>
 8008ecc:	2501      	movs	r5, #1
 8008ece:	e7e2      	b.n	8008e96 <__gethex+0x2f6>
 8008ed0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ed2:	f1c3 0301 	rsb	r3, r3, #1
 8008ed6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ed8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d0f0      	beq.n	8008ec0 <__gethex+0x320>
 8008ede:	f04f 0c00 	mov.w	ip, #0
 8008ee2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008ee6:	f104 0314 	add.w	r3, r4, #20
 8008eea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008eee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ef8:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008efc:	d01b      	beq.n	8008f36 <__gethex+0x396>
 8008efe:	3201      	adds	r2, #1
 8008f00:	6002      	str	r2, [r0, #0]
 8008f02:	2d02      	cmp	r5, #2
 8008f04:	f104 0314 	add.w	r3, r4, #20
 8008f08:	d13c      	bne.n	8008f84 <__gethex+0x3e4>
 8008f0a:	f8d8 2000 	ldr.w	r2, [r8]
 8008f0e:	3a01      	subs	r2, #1
 8008f10:	42b2      	cmp	r2, r6
 8008f12:	d109      	bne.n	8008f28 <__gethex+0x388>
 8008f14:	2201      	movs	r2, #1
 8008f16:	1171      	asrs	r1, r6, #5
 8008f18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008f1c:	f006 061f 	and.w	r6, r6, #31
 8008f20:	fa02 f606 	lsl.w	r6, r2, r6
 8008f24:	421e      	tst	r6, r3
 8008f26:	d13a      	bne.n	8008f9e <__gethex+0x3fe>
 8008f28:	f045 0520 	orr.w	r5, r5, #32
 8008f2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f2e:	601c      	str	r4, [r3, #0]
 8008f30:	9b02      	ldr	r3, [sp, #8]
 8008f32:	601f      	str	r7, [r3, #0]
 8008f34:	e6b0      	b.n	8008c98 <__gethex+0xf8>
 8008f36:	4299      	cmp	r1, r3
 8008f38:	f843 cc04 	str.w	ip, [r3, #-4]
 8008f3c:	d8d9      	bhi.n	8008ef2 <__gethex+0x352>
 8008f3e:	68a3      	ldr	r3, [r4, #8]
 8008f40:	459b      	cmp	fp, r3
 8008f42:	db17      	blt.n	8008f74 <__gethex+0x3d4>
 8008f44:	6861      	ldr	r1, [r4, #4]
 8008f46:	9801      	ldr	r0, [sp, #4]
 8008f48:	3101      	adds	r1, #1
 8008f4a:	f000 f9c3 	bl	80092d4 <_Balloc>
 8008f4e:	4681      	mov	r9, r0
 8008f50:	b918      	cbnz	r0, 8008f5a <__gethex+0x3ba>
 8008f52:	4602      	mov	r2, r0
 8008f54:	2184      	movs	r1, #132	@ 0x84
 8008f56:	4b19      	ldr	r3, [pc, #100]	@ (8008fbc <__gethex+0x41c>)
 8008f58:	e6c5      	b.n	8008ce6 <__gethex+0x146>
 8008f5a:	6922      	ldr	r2, [r4, #16]
 8008f5c:	f104 010c 	add.w	r1, r4, #12
 8008f60:	3202      	adds	r2, #2
 8008f62:	0092      	lsls	r2, r2, #2
 8008f64:	300c      	adds	r0, #12
 8008f66:	f7fe ff00 	bl	8007d6a <memcpy>
 8008f6a:	4621      	mov	r1, r4
 8008f6c:	9801      	ldr	r0, [sp, #4]
 8008f6e:	f000 f9f1 	bl	8009354 <_Bfree>
 8008f72:	464c      	mov	r4, r9
 8008f74:	6923      	ldr	r3, [r4, #16]
 8008f76:	1c5a      	adds	r2, r3, #1
 8008f78:	6122      	str	r2, [r4, #16]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008f80:	615a      	str	r2, [r3, #20]
 8008f82:	e7be      	b.n	8008f02 <__gethex+0x362>
 8008f84:	6922      	ldr	r2, [r4, #16]
 8008f86:	455a      	cmp	r2, fp
 8008f88:	dd0b      	ble.n	8008fa2 <__gethex+0x402>
 8008f8a:	2101      	movs	r1, #1
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	f7ff fd9f 	bl	8008ad0 <rshift>
 8008f92:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008f96:	3701      	adds	r7, #1
 8008f98:	42bb      	cmp	r3, r7
 8008f9a:	f6ff aee0 	blt.w	8008d5e <__gethex+0x1be>
 8008f9e:	2501      	movs	r5, #1
 8008fa0:	e7c2      	b.n	8008f28 <__gethex+0x388>
 8008fa2:	f016 061f 	ands.w	r6, r6, #31
 8008fa6:	d0fa      	beq.n	8008f9e <__gethex+0x3fe>
 8008fa8:	4453      	add	r3, sl
 8008faa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008fae:	f000 fa83 	bl	80094b8 <__hi0bits>
 8008fb2:	f1c6 0620 	rsb	r6, r6, #32
 8008fb6:	42b0      	cmp	r0, r6
 8008fb8:	dbe7      	blt.n	8008f8a <__gethex+0x3ea>
 8008fba:	e7f0      	b.n	8008f9e <__gethex+0x3fe>
 8008fbc:	0800ac79 	.word	0x0800ac79

08008fc0 <L_shift>:
 8008fc0:	f1c2 0208 	rsb	r2, r2, #8
 8008fc4:	0092      	lsls	r2, r2, #2
 8008fc6:	b570      	push	{r4, r5, r6, lr}
 8008fc8:	f1c2 0620 	rsb	r6, r2, #32
 8008fcc:	6843      	ldr	r3, [r0, #4]
 8008fce:	6804      	ldr	r4, [r0, #0]
 8008fd0:	fa03 f506 	lsl.w	r5, r3, r6
 8008fd4:	432c      	orrs	r4, r5
 8008fd6:	40d3      	lsrs	r3, r2
 8008fd8:	6004      	str	r4, [r0, #0]
 8008fda:	f840 3f04 	str.w	r3, [r0, #4]!
 8008fde:	4288      	cmp	r0, r1
 8008fe0:	d3f4      	bcc.n	8008fcc <L_shift+0xc>
 8008fe2:	bd70      	pop	{r4, r5, r6, pc}

08008fe4 <__match>:
 8008fe4:	b530      	push	{r4, r5, lr}
 8008fe6:	6803      	ldr	r3, [r0, #0]
 8008fe8:	3301      	adds	r3, #1
 8008fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fee:	b914      	cbnz	r4, 8008ff6 <__match+0x12>
 8008ff0:	6003      	str	r3, [r0, #0]
 8008ff2:	2001      	movs	r0, #1
 8008ff4:	bd30      	pop	{r4, r5, pc}
 8008ff6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ffa:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008ffe:	2d19      	cmp	r5, #25
 8009000:	bf98      	it	ls
 8009002:	3220      	addls	r2, #32
 8009004:	42a2      	cmp	r2, r4
 8009006:	d0f0      	beq.n	8008fea <__match+0x6>
 8009008:	2000      	movs	r0, #0
 800900a:	e7f3      	b.n	8008ff4 <__match+0x10>

0800900c <__hexnan>:
 800900c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009010:	2500      	movs	r5, #0
 8009012:	680b      	ldr	r3, [r1, #0]
 8009014:	4682      	mov	sl, r0
 8009016:	115e      	asrs	r6, r3, #5
 8009018:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800901c:	f013 031f 	ands.w	r3, r3, #31
 8009020:	bf18      	it	ne
 8009022:	3604      	addne	r6, #4
 8009024:	1f37      	subs	r7, r6, #4
 8009026:	4690      	mov	r8, r2
 8009028:	46b9      	mov	r9, r7
 800902a:	463c      	mov	r4, r7
 800902c:	46ab      	mov	fp, r5
 800902e:	b087      	sub	sp, #28
 8009030:	6801      	ldr	r1, [r0, #0]
 8009032:	9301      	str	r3, [sp, #4]
 8009034:	f846 5c04 	str.w	r5, [r6, #-4]
 8009038:	9502      	str	r5, [sp, #8]
 800903a:	784a      	ldrb	r2, [r1, #1]
 800903c:	1c4b      	adds	r3, r1, #1
 800903e:	9303      	str	r3, [sp, #12]
 8009040:	b342      	cbz	r2, 8009094 <__hexnan+0x88>
 8009042:	4610      	mov	r0, r2
 8009044:	9105      	str	r1, [sp, #20]
 8009046:	9204      	str	r2, [sp, #16]
 8009048:	f7ff fd95 	bl	8008b76 <__hexdig_fun>
 800904c:	2800      	cmp	r0, #0
 800904e:	d151      	bne.n	80090f4 <__hexnan+0xe8>
 8009050:	9a04      	ldr	r2, [sp, #16]
 8009052:	9905      	ldr	r1, [sp, #20]
 8009054:	2a20      	cmp	r2, #32
 8009056:	d818      	bhi.n	800908a <__hexnan+0x7e>
 8009058:	9b02      	ldr	r3, [sp, #8]
 800905a:	459b      	cmp	fp, r3
 800905c:	dd13      	ble.n	8009086 <__hexnan+0x7a>
 800905e:	454c      	cmp	r4, r9
 8009060:	d206      	bcs.n	8009070 <__hexnan+0x64>
 8009062:	2d07      	cmp	r5, #7
 8009064:	dc04      	bgt.n	8009070 <__hexnan+0x64>
 8009066:	462a      	mov	r2, r5
 8009068:	4649      	mov	r1, r9
 800906a:	4620      	mov	r0, r4
 800906c:	f7ff ffa8 	bl	8008fc0 <L_shift>
 8009070:	4544      	cmp	r4, r8
 8009072:	d952      	bls.n	800911a <__hexnan+0x10e>
 8009074:	2300      	movs	r3, #0
 8009076:	f1a4 0904 	sub.w	r9, r4, #4
 800907a:	f844 3c04 	str.w	r3, [r4, #-4]
 800907e:	461d      	mov	r5, r3
 8009080:	464c      	mov	r4, r9
 8009082:	f8cd b008 	str.w	fp, [sp, #8]
 8009086:	9903      	ldr	r1, [sp, #12]
 8009088:	e7d7      	b.n	800903a <__hexnan+0x2e>
 800908a:	2a29      	cmp	r2, #41	@ 0x29
 800908c:	d157      	bne.n	800913e <__hexnan+0x132>
 800908e:	3102      	adds	r1, #2
 8009090:	f8ca 1000 	str.w	r1, [sl]
 8009094:	f1bb 0f00 	cmp.w	fp, #0
 8009098:	d051      	beq.n	800913e <__hexnan+0x132>
 800909a:	454c      	cmp	r4, r9
 800909c:	d206      	bcs.n	80090ac <__hexnan+0xa0>
 800909e:	2d07      	cmp	r5, #7
 80090a0:	dc04      	bgt.n	80090ac <__hexnan+0xa0>
 80090a2:	462a      	mov	r2, r5
 80090a4:	4649      	mov	r1, r9
 80090a6:	4620      	mov	r0, r4
 80090a8:	f7ff ff8a 	bl	8008fc0 <L_shift>
 80090ac:	4544      	cmp	r4, r8
 80090ae:	d936      	bls.n	800911e <__hexnan+0x112>
 80090b0:	4623      	mov	r3, r4
 80090b2:	f1a8 0204 	sub.w	r2, r8, #4
 80090b6:	f853 1b04 	ldr.w	r1, [r3], #4
 80090ba:	429f      	cmp	r7, r3
 80090bc:	f842 1f04 	str.w	r1, [r2, #4]!
 80090c0:	d2f9      	bcs.n	80090b6 <__hexnan+0xaa>
 80090c2:	1b3b      	subs	r3, r7, r4
 80090c4:	f023 0303 	bic.w	r3, r3, #3
 80090c8:	3304      	adds	r3, #4
 80090ca:	3401      	adds	r4, #1
 80090cc:	3e03      	subs	r6, #3
 80090ce:	42b4      	cmp	r4, r6
 80090d0:	bf88      	it	hi
 80090d2:	2304      	movhi	r3, #4
 80090d4:	2200      	movs	r2, #0
 80090d6:	4443      	add	r3, r8
 80090d8:	f843 2b04 	str.w	r2, [r3], #4
 80090dc:	429f      	cmp	r7, r3
 80090de:	d2fb      	bcs.n	80090d8 <__hexnan+0xcc>
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	b91b      	cbnz	r3, 80090ec <__hexnan+0xe0>
 80090e4:	4547      	cmp	r7, r8
 80090e6:	d128      	bne.n	800913a <__hexnan+0x12e>
 80090e8:	2301      	movs	r3, #1
 80090ea:	603b      	str	r3, [r7, #0]
 80090ec:	2005      	movs	r0, #5
 80090ee:	b007      	add	sp, #28
 80090f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090f4:	3501      	adds	r5, #1
 80090f6:	2d08      	cmp	r5, #8
 80090f8:	f10b 0b01 	add.w	fp, fp, #1
 80090fc:	dd06      	ble.n	800910c <__hexnan+0x100>
 80090fe:	4544      	cmp	r4, r8
 8009100:	d9c1      	bls.n	8009086 <__hexnan+0x7a>
 8009102:	2300      	movs	r3, #0
 8009104:	2501      	movs	r5, #1
 8009106:	f844 3c04 	str.w	r3, [r4, #-4]
 800910a:	3c04      	subs	r4, #4
 800910c:	6822      	ldr	r2, [r4, #0]
 800910e:	f000 000f 	and.w	r0, r0, #15
 8009112:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009116:	6020      	str	r0, [r4, #0]
 8009118:	e7b5      	b.n	8009086 <__hexnan+0x7a>
 800911a:	2508      	movs	r5, #8
 800911c:	e7b3      	b.n	8009086 <__hexnan+0x7a>
 800911e:	9b01      	ldr	r3, [sp, #4]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d0dd      	beq.n	80090e0 <__hexnan+0xd4>
 8009124:	f04f 32ff 	mov.w	r2, #4294967295
 8009128:	f1c3 0320 	rsb	r3, r3, #32
 800912c:	40da      	lsrs	r2, r3
 800912e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009132:	4013      	ands	r3, r2
 8009134:	f846 3c04 	str.w	r3, [r6, #-4]
 8009138:	e7d2      	b.n	80090e0 <__hexnan+0xd4>
 800913a:	3f04      	subs	r7, #4
 800913c:	e7d0      	b.n	80090e0 <__hexnan+0xd4>
 800913e:	2004      	movs	r0, #4
 8009140:	e7d5      	b.n	80090ee <__hexnan+0xe2>
	...

08009144 <malloc>:
 8009144:	4b02      	ldr	r3, [pc, #8]	@ (8009150 <malloc+0xc>)
 8009146:	4601      	mov	r1, r0
 8009148:	6818      	ldr	r0, [r3, #0]
 800914a:	f000 b825 	b.w	8009198 <_malloc_r>
 800914e:	bf00      	nop
 8009150:	2000019c 	.word	0x2000019c

08009154 <sbrk_aligned>:
 8009154:	b570      	push	{r4, r5, r6, lr}
 8009156:	4e0f      	ldr	r6, [pc, #60]	@ (8009194 <sbrk_aligned+0x40>)
 8009158:	460c      	mov	r4, r1
 800915a:	6831      	ldr	r1, [r6, #0]
 800915c:	4605      	mov	r5, r0
 800915e:	b911      	cbnz	r1, 8009166 <sbrk_aligned+0x12>
 8009160:	f000 ff84 	bl	800a06c <_sbrk_r>
 8009164:	6030      	str	r0, [r6, #0]
 8009166:	4621      	mov	r1, r4
 8009168:	4628      	mov	r0, r5
 800916a:	f000 ff7f 	bl	800a06c <_sbrk_r>
 800916e:	1c43      	adds	r3, r0, #1
 8009170:	d103      	bne.n	800917a <sbrk_aligned+0x26>
 8009172:	f04f 34ff 	mov.w	r4, #4294967295
 8009176:	4620      	mov	r0, r4
 8009178:	bd70      	pop	{r4, r5, r6, pc}
 800917a:	1cc4      	adds	r4, r0, #3
 800917c:	f024 0403 	bic.w	r4, r4, #3
 8009180:	42a0      	cmp	r0, r4
 8009182:	d0f8      	beq.n	8009176 <sbrk_aligned+0x22>
 8009184:	1a21      	subs	r1, r4, r0
 8009186:	4628      	mov	r0, r5
 8009188:	f000 ff70 	bl	800a06c <_sbrk_r>
 800918c:	3001      	adds	r0, #1
 800918e:	d1f2      	bne.n	8009176 <sbrk_aligned+0x22>
 8009190:	e7ef      	b.n	8009172 <sbrk_aligned+0x1e>
 8009192:	bf00      	nop
 8009194:	20000b7c 	.word	0x20000b7c

08009198 <_malloc_r>:
 8009198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800919c:	1ccd      	adds	r5, r1, #3
 800919e:	f025 0503 	bic.w	r5, r5, #3
 80091a2:	3508      	adds	r5, #8
 80091a4:	2d0c      	cmp	r5, #12
 80091a6:	bf38      	it	cc
 80091a8:	250c      	movcc	r5, #12
 80091aa:	2d00      	cmp	r5, #0
 80091ac:	4606      	mov	r6, r0
 80091ae:	db01      	blt.n	80091b4 <_malloc_r+0x1c>
 80091b0:	42a9      	cmp	r1, r5
 80091b2:	d904      	bls.n	80091be <_malloc_r+0x26>
 80091b4:	230c      	movs	r3, #12
 80091b6:	6033      	str	r3, [r6, #0]
 80091b8:	2000      	movs	r0, #0
 80091ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009294 <_malloc_r+0xfc>
 80091c2:	f000 f87b 	bl	80092bc <__malloc_lock>
 80091c6:	f8d8 3000 	ldr.w	r3, [r8]
 80091ca:	461c      	mov	r4, r3
 80091cc:	bb44      	cbnz	r4, 8009220 <_malloc_r+0x88>
 80091ce:	4629      	mov	r1, r5
 80091d0:	4630      	mov	r0, r6
 80091d2:	f7ff ffbf 	bl	8009154 <sbrk_aligned>
 80091d6:	1c43      	adds	r3, r0, #1
 80091d8:	4604      	mov	r4, r0
 80091da:	d158      	bne.n	800928e <_malloc_r+0xf6>
 80091dc:	f8d8 4000 	ldr.w	r4, [r8]
 80091e0:	4627      	mov	r7, r4
 80091e2:	2f00      	cmp	r7, #0
 80091e4:	d143      	bne.n	800926e <_malloc_r+0xd6>
 80091e6:	2c00      	cmp	r4, #0
 80091e8:	d04b      	beq.n	8009282 <_malloc_r+0xea>
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	4639      	mov	r1, r7
 80091ee:	4630      	mov	r0, r6
 80091f0:	eb04 0903 	add.w	r9, r4, r3
 80091f4:	f000 ff3a 	bl	800a06c <_sbrk_r>
 80091f8:	4581      	cmp	r9, r0
 80091fa:	d142      	bne.n	8009282 <_malloc_r+0xea>
 80091fc:	6821      	ldr	r1, [r4, #0]
 80091fe:	4630      	mov	r0, r6
 8009200:	1a6d      	subs	r5, r5, r1
 8009202:	4629      	mov	r1, r5
 8009204:	f7ff ffa6 	bl	8009154 <sbrk_aligned>
 8009208:	3001      	adds	r0, #1
 800920a:	d03a      	beq.n	8009282 <_malloc_r+0xea>
 800920c:	6823      	ldr	r3, [r4, #0]
 800920e:	442b      	add	r3, r5
 8009210:	6023      	str	r3, [r4, #0]
 8009212:	f8d8 3000 	ldr.w	r3, [r8]
 8009216:	685a      	ldr	r2, [r3, #4]
 8009218:	bb62      	cbnz	r2, 8009274 <_malloc_r+0xdc>
 800921a:	f8c8 7000 	str.w	r7, [r8]
 800921e:	e00f      	b.n	8009240 <_malloc_r+0xa8>
 8009220:	6822      	ldr	r2, [r4, #0]
 8009222:	1b52      	subs	r2, r2, r5
 8009224:	d420      	bmi.n	8009268 <_malloc_r+0xd0>
 8009226:	2a0b      	cmp	r2, #11
 8009228:	d917      	bls.n	800925a <_malloc_r+0xc2>
 800922a:	1961      	adds	r1, r4, r5
 800922c:	42a3      	cmp	r3, r4
 800922e:	6025      	str	r5, [r4, #0]
 8009230:	bf18      	it	ne
 8009232:	6059      	strne	r1, [r3, #4]
 8009234:	6863      	ldr	r3, [r4, #4]
 8009236:	bf08      	it	eq
 8009238:	f8c8 1000 	streq.w	r1, [r8]
 800923c:	5162      	str	r2, [r4, r5]
 800923e:	604b      	str	r3, [r1, #4]
 8009240:	4630      	mov	r0, r6
 8009242:	f000 f841 	bl	80092c8 <__malloc_unlock>
 8009246:	f104 000b 	add.w	r0, r4, #11
 800924a:	1d23      	adds	r3, r4, #4
 800924c:	f020 0007 	bic.w	r0, r0, #7
 8009250:	1ac2      	subs	r2, r0, r3
 8009252:	bf1c      	itt	ne
 8009254:	1a1b      	subne	r3, r3, r0
 8009256:	50a3      	strne	r3, [r4, r2]
 8009258:	e7af      	b.n	80091ba <_malloc_r+0x22>
 800925a:	6862      	ldr	r2, [r4, #4]
 800925c:	42a3      	cmp	r3, r4
 800925e:	bf0c      	ite	eq
 8009260:	f8c8 2000 	streq.w	r2, [r8]
 8009264:	605a      	strne	r2, [r3, #4]
 8009266:	e7eb      	b.n	8009240 <_malloc_r+0xa8>
 8009268:	4623      	mov	r3, r4
 800926a:	6864      	ldr	r4, [r4, #4]
 800926c:	e7ae      	b.n	80091cc <_malloc_r+0x34>
 800926e:	463c      	mov	r4, r7
 8009270:	687f      	ldr	r7, [r7, #4]
 8009272:	e7b6      	b.n	80091e2 <_malloc_r+0x4a>
 8009274:	461a      	mov	r2, r3
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	42a3      	cmp	r3, r4
 800927a:	d1fb      	bne.n	8009274 <_malloc_r+0xdc>
 800927c:	2300      	movs	r3, #0
 800927e:	6053      	str	r3, [r2, #4]
 8009280:	e7de      	b.n	8009240 <_malloc_r+0xa8>
 8009282:	230c      	movs	r3, #12
 8009284:	4630      	mov	r0, r6
 8009286:	6033      	str	r3, [r6, #0]
 8009288:	f000 f81e 	bl	80092c8 <__malloc_unlock>
 800928c:	e794      	b.n	80091b8 <_malloc_r+0x20>
 800928e:	6005      	str	r5, [r0, #0]
 8009290:	e7d6      	b.n	8009240 <_malloc_r+0xa8>
 8009292:	bf00      	nop
 8009294:	20000b80 	.word	0x20000b80

08009298 <__ascii_mbtowc>:
 8009298:	b082      	sub	sp, #8
 800929a:	b901      	cbnz	r1, 800929e <__ascii_mbtowc+0x6>
 800929c:	a901      	add	r1, sp, #4
 800929e:	b142      	cbz	r2, 80092b2 <__ascii_mbtowc+0x1a>
 80092a0:	b14b      	cbz	r3, 80092b6 <__ascii_mbtowc+0x1e>
 80092a2:	7813      	ldrb	r3, [r2, #0]
 80092a4:	600b      	str	r3, [r1, #0]
 80092a6:	7812      	ldrb	r2, [r2, #0]
 80092a8:	1e10      	subs	r0, r2, #0
 80092aa:	bf18      	it	ne
 80092ac:	2001      	movne	r0, #1
 80092ae:	b002      	add	sp, #8
 80092b0:	4770      	bx	lr
 80092b2:	4610      	mov	r0, r2
 80092b4:	e7fb      	b.n	80092ae <__ascii_mbtowc+0x16>
 80092b6:	f06f 0001 	mvn.w	r0, #1
 80092ba:	e7f8      	b.n	80092ae <__ascii_mbtowc+0x16>

080092bc <__malloc_lock>:
 80092bc:	4801      	ldr	r0, [pc, #4]	@ (80092c4 <__malloc_lock+0x8>)
 80092be:	f7fe bd3c 	b.w	8007d3a <__retarget_lock_acquire_recursive>
 80092c2:	bf00      	nop
 80092c4:	20000b78 	.word	0x20000b78

080092c8 <__malloc_unlock>:
 80092c8:	4801      	ldr	r0, [pc, #4]	@ (80092d0 <__malloc_unlock+0x8>)
 80092ca:	f7fe bd37 	b.w	8007d3c <__retarget_lock_release_recursive>
 80092ce:	bf00      	nop
 80092d0:	20000b78 	.word	0x20000b78

080092d4 <_Balloc>:
 80092d4:	b570      	push	{r4, r5, r6, lr}
 80092d6:	69c6      	ldr	r6, [r0, #28]
 80092d8:	4604      	mov	r4, r0
 80092da:	460d      	mov	r5, r1
 80092dc:	b976      	cbnz	r6, 80092fc <_Balloc+0x28>
 80092de:	2010      	movs	r0, #16
 80092e0:	f7ff ff30 	bl	8009144 <malloc>
 80092e4:	4602      	mov	r2, r0
 80092e6:	61e0      	str	r0, [r4, #28]
 80092e8:	b920      	cbnz	r0, 80092f4 <_Balloc+0x20>
 80092ea:	216b      	movs	r1, #107	@ 0x6b
 80092ec:	4b17      	ldr	r3, [pc, #92]	@ (800934c <_Balloc+0x78>)
 80092ee:	4818      	ldr	r0, [pc, #96]	@ (8009350 <_Balloc+0x7c>)
 80092f0:	f000 fecc 	bl	800a08c <__assert_func>
 80092f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092f8:	6006      	str	r6, [r0, #0]
 80092fa:	60c6      	str	r6, [r0, #12]
 80092fc:	69e6      	ldr	r6, [r4, #28]
 80092fe:	68f3      	ldr	r3, [r6, #12]
 8009300:	b183      	cbz	r3, 8009324 <_Balloc+0x50>
 8009302:	69e3      	ldr	r3, [r4, #28]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800930a:	b9b8      	cbnz	r0, 800933c <_Balloc+0x68>
 800930c:	2101      	movs	r1, #1
 800930e:	fa01 f605 	lsl.w	r6, r1, r5
 8009312:	1d72      	adds	r2, r6, #5
 8009314:	4620      	mov	r0, r4
 8009316:	0092      	lsls	r2, r2, #2
 8009318:	f000 fed6 	bl	800a0c8 <_calloc_r>
 800931c:	b160      	cbz	r0, 8009338 <_Balloc+0x64>
 800931e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009322:	e00e      	b.n	8009342 <_Balloc+0x6e>
 8009324:	2221      	movs	r2, #33	@ 0x21
 8009326:	2104      	movs	r1, #4
 8009328:	4620      	mov	r0, r4
 800932a:	f000 fecd 	bl	800a0c8 <_calloc_r>
 800932e:	69e3      	ldr	r3, [r4, #28]
 8009330:	60f0      	str	r0, [r6, #12]
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1e4      	bne.n	8009302 <_Balloc+0x2e>
 8009338:	2000      	movs	r0, #0
 800933a:	bd70      	pop	{r4, r5, r6, pc}
 800933c:	6802      	ldr	r2, [r0, #0]
 800933e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009342:	2300      	movs	r3, #0
 8009344:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009348:	e7f7      	b.n	800933a <_Balloc+0x66>
 800934a:	bf00      	nop
 800934c:	0800ac0a 	.word	0x0800ac0a
 8009350:	0800acea 	.word	0x0800acea

08009354 <_Bfree>:
 8009354:	b570      	push	{r4, r5, r6, lr}
 8009356:	69c6      	ldr	r6, [r0, #28]
 8009358:	4605      	mov	r5, r0
 800935a:	460c      	mov	r4, r1
 800935c:	b976      	cbnz	r6, 800937c <_Bfree+0x28>
 800935e:	2010      	movs	r0, #16
 8009360:	f7ff fef0 	bl	8009144 <malloc>
 8009364:	4602      	mov	r2, r0
 8009366:	61e8      	str	r0, [r5, #28]
 8009368:	b920      	cbnz	r0, 8009374 <_Bfree+0x20>
 800936a:	218f      	movs	r1, #143	@ 0x8f
 800936c:	4b08      	ldr	r3, [pc, #32]	@ (8009390 <_Bfree+0x3c>)
 800936e:	4809      	ldr	r0, [pc, #36]	@ (8009394 <_Bfree+0x40>)
 8009370:	f000 fe8c 	bl	800a08c <__assert_func>
 8009374:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009378:	6006      	str	r6, [r0, #0]
 800937a:	60c6      	str	r6, [r0, #12]
 800937c:	b13c      	cbz	r4, 800938e <_Bfree+0x3a>
 800937e:	69eb      	ldr	r3, [r5, #28]
 8009380:	6862      	ldr	r2, [r4, #4]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009388:	6021      	str	r1, [r4, #0]
 800938a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800938e:	bd70      	pop	{r4, r5, r6, pc}
 8009390:	0800ac0a 	.word	0x0800ac0a
 8009394:	0800acea 	.word	0x0800acea

08009398 <__multadd>:
 8009398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800939c:	4607      	mov	r7, r0
 800939e:	460c      	mov	r4, r1
 80093a0:	461e      	mov	r6, r3
 80093a2:	2000      	movs	r0, #0
 80093a4:	690d      	ldr	r5, [r1, #16]
 80093a6:	f101 0c14 	add.w	ip, r1, #20
 80093aa:	f8dc 3000 	ldr.w	r3, [ip]
 80093ae:	3001      	adds	r0, #1
 80093b0:	b299      	uxth	r1, r3
 80093b2:	fb02 6101 	mla	r1, r2, r1, r6
 80093b6:	0c1e      	lsrs	r6, r3, #16
 80093b8:	0c0b      	lsrs	r3, r1, #16
 80093ba:	fb02 3306 	mla	r3, r2, r6, r3
 80093be:	b289      	uxth	r1, r1
 80093c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80093c4:	4285      	cmp	r5, r0
 80093c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80093ca:	f84c 1b04 	str.w	r1, [ip], #4
 80093ce:	dcec      	bgt.n	80093aa <__multadd+0x12>
 80093d0:	b30e      	cbz	r6, 8009416 <__multadd+0x7e>
 80093d2:	68a3      	ldr	r3, [r4, #8]
 80093d4:	42ab      	cmp	r3, r5
 80093d6:	dc19      	bgt.n	800940c <__multadd+0x74>
 80093d8:	6861      	ldr	r1, [r4, #4]
 80093da:	4638      	mov	r0, r7
 80093dc:	3101      	adds	r1, #1
 80093de:	f7ff ff79 	bl	80092d4 <_Balloc>
 80093e2:	4680      	mov	r8, r0
 80093e4:	b928      	cbnz	r0, 80093f2 <__multadd+0x5a>
 80093e6:	4602      	mov	r2, r0
 80093e8:	21ba      	movs	r1, #186	@ 0xba
 80093ea:	4b0c      	ldr	r3, [pc, #48]	@ (800941c <__multadd+0x84>)
 80093ec:	480c      	ldr	r0, [pc, #48]	@ (8009420 <__multadd+0x88>)
 80093ee:	f000 fe4d 	bl	800a08c <__assert_func>
 80093f2:	6922      	ldr	r2, [r4, #16]
 80093f4:	f104 010c 	add.w	r1, r4, #12
 80093f8:	3202      	adds	r2, #2
 80093fa:	0092      	lsls	r2, r2, #2
 80093fc:	300c      	adds	r0, #12
 80093fe:	f7fe fcb4 	bl	8007d6a <memcpy>
 8009402:	4621      	mov	r1, r4
 8009404:	4638      	mov	r0, r7
 8009406:	f7ff ffa5 	bl	8009354 <_Bfree>
 800940a:	4644      	mov	r4, r8
 800940c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009410:	3501      	adds	r5, #1
 8009412:	615e      	str	r6, [r3, #20]
 8009414:	6125      	str	r5, [r4, #16]
 8009416:	4620      	mov	r0, r4
 8009418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800941c:	0800ac79 	.word	0x0800ac79
 8009420:	0800acea 	.word	0x0800acea

08009424 <__s2b>:
 8009424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009428:	4615      	mov	r5, r2
 800942a:	2209      	movs	r2, #9
 800942c:	461f      	mov	r7, r3
 800942e:	3308      	adds	r3, #8
 8009430:	460c      	mov	r4, r1
 8009432:	fb93 f3f2 	sdiv	r3, r3, r2
 8009436:	4606      	mov	r6, r0
 8009438:	2201      	movs	r2, #1
 800943a:	2100      	movs	r1, #0
 800943c:	429a      	cmp	r2, r3
 800943e:	db09      	blt.n	8009454 <__s2b+0x30>
 8009440:	4630      	mov	r0, r6
 8009442:	f7ff ff47 	bl	80092d4 <_Balloc>
 8009446:	b940      	cbnz	r0, 800945a <__s2b+0x36>
 8009448:	4602      	mov	r2, r0
 800944a:	21d3      	movs	r1, #211	@ 0xd3
 800944c:	4b18      	ldr	r3, [pc, #96]	@ (80094b0 <__s2b+0x8c>)
 800944e:	4819      	ldr	r0, [pc, #100]	@ (80094b4 <__s2b+0x90>)
 8009450:	f000 fe1c 	bl	800a08c <__assert_func>
 8009454:	0052      	lsls	r2, r2, #1
 8009456:	3101      	adds	r1, #1
 8009458:	e7f0      	b.n	800943c <__s2b+0x18>
 800945a:	9b08      	ldr	r3, [sp, #32]
 800945c:	2d09      	cmp	r5, #9
 800945e:	6143      	str	r3, [r0, #20]
 8009460:	f04f 0301 	mov.w	r3, #1
 8009464:	6103      	str	r3, [r0, #16]
 8009466:	dd16      	ble.n	8009496 <__s2b+0x72>
 8009468:	f104 0909 	add.w	r9, r4, #9
 800946c:	46c8      	mov	r8, r9
 800946e:	442c      	add	r4, r5
 8009470:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009474:	4601      	mov	r1, r0
 8009476:	220a      	movs	r2, #10
 8009478:	4630      	mov	r0, r6
 800947a:	3b30      	subs	r3, #48	@ 0x30
 800947c:	f7ff ff8c 	bl	8009398 <__multadd>
 8009480:	45a0      	cmp	r8, r4
 8009482:	d1f5      	bne.n	8009470 <__s2b+0x4c>
 8009484:	f1a5 0408 	sub.w	r4, r5, #8
 8009488:	444c      	add	r4, r9
 800948a:	1b2d      	subs	r5, r5, r4
 800948c:	1963      	adds	r3, r4, r5
 800948e:	42bb      	cmp	r3, r7
 8009490:	db04      	blt.n	800949c <__s2b+0x78>
 8009492:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009496:	2509      	movs	r5, #9
 8009498:	340a      	adds	r4, #10
 800949a:	e7f6      	b.n	800948a <__s2b+0x66>
 800949c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80094a0:	4601      	mov	r1, r0
 80094a2:	220a      	movs	r2, #10
 80094a4:	4630      	mov	r0, r6
 80094a6:	3b30      	subs	r3, #48	@ 0x30
 80094a8:	f7ff ff76 	bl	8009398 <__multadd>
 80094ac:	e7ee      	b.n	800948c <__s2b+0x68>
 80094ae:	bf00      	nop
 80094b0:	0800ac79 	.word	0x0800ac79
 80094b4:	0800acea 	.word	0x0800acea

080094b8 <__hi0bits>:
 80094b8:	4603      	mov	r3, r0
 80094ba:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80094be:	bf3a      	itte	cc
 80094c0:	0403      	lslcc	r3, r0, #16
 80094c2:	2010      	movcc	r0, #16
 80094c4:	2000      	movcs	r0, #0
 80094c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80094ca:	bf3c      	itt	cc
 80094cc:	021b      	lslcc	r3, r3, #8
 80094ce:	3008      	addcc	r0, #8
 80094d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094d4:	bf3c      	itt	cc
 80094d6:	011b      	lslcc	r3, r3, #4
 80094d8:	3004      	addcc	r0, #4
 80094da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80094de:	bf3c      	itt	cc
 80094e0:	009b      	lslcc	r3, r3, #2
 80094e2:	3002      	addcc	r0, #2
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	db05      	blt.n	80094f4 <__hi0bits+0x3c>
 80094e8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80094ec:	f100 0001 	add.w	r0, r0, #1
 80094f0:	bf08      	it	eq
 80094f2:	2020      	moveq	r0, #32
 80094f4:	4770      	bx	lr

080094f6 <__lo0bits>:
 80094f6:	6803      	ldr	r3, [r0, #0]
 80094f8:	4602      	mov	r2, r0
 80094fa:	f013 0007 	ands.w	r0, r3, #7
 80094fe:	d00b      	beq.n	8009518 <__lo0bits+0x22>
 8009500:	07d9      	lsls	r1, r3, #31
 8009502:	d421      	bmi.n	8009548 <__lo0bits+0x52>
 8009504:	0798      	lsls	r0, r3, #30
 8009506:	bf49      	itett	mi
 8009508:	085b      	lsrmi	r3, r3, #1
 800950a:	089b      	lsrpl	r3, r3, #2
 800950c:	2001      	movmi	r0, #1
 800950e:	6013      	strmi	r3, [r2, #0]
 8009510:	bf5c      	itt	pl
 8009512:	2002      	movpl	r0, #2
 8009514:	6013      	strpl	r3, [r2, #0]
 8009516:	4770      	bx	lr
 8009518:	b299      	uxth	r1, r3
 800951a:	b909      	cbnz	r1, 8009520 <__lo0bits+0x2a>
 800951c:	2010      	movs	r0, #16
 800951e:	0c1b      	lsrs	r3, r3, #16
 8009520:	b2d9      	uxtb	r1, r3
 8009522:	b909      	cbnz	r1, 8009528 <__lo0bits+0x32>
 8009524:	3008      	adds	r0, #8
 8009526:	0a1b      	lsrs	r3, r3, #8
 8009528:	0719      	lsls	r1, r3, #28
 800952a:	bf04      	itt	eq
 800952c:	091b      	lsreq	r3, r3, #4
 800952e:	3004      	addeq	r0, #4
 8009530:	0799      	lsls	r1, r3, #30
 8009532:	bf04      	itt	eq
 8009534:	089b      	lsreq	r3, r3, #2
 8009536:	3002      	addeq	r0, #2
 8009538:	07d9      	lsls	r1, r3, #31
 800953a:	d403      	bmi.n	8009544 <__lo0bits+0x4e>
 800953c:	085b      	lsrs	r3, r3, #1
 800953e:	f100 0001 	add.w	r0, r0, #1
 8009542:	d003      	beq.n	800954c <__lo0bits+0x56>
 8009544:	6013      	str	r3, [r2, #0]
 8009546:	4770      	bx	lr
 8009548:	2000      	movs	r0, #0
 800954a:	4770      	bx	lr
 800954c:	2020      	movs	r0, #32
 800954e:	4770      	bx	lr

08009550 <__i2b>:
 8009550:	b510      	push	{r4, lr}
 8009552:	460c      	mov	r4, r1
 8009554:	2101      	movs	r1, #1
 8009556:	f7ff febd 	bl	80092d4 <_Balloc>
 800955a:	4602      	mov	r2, r0
 800955c:	b928      	cbnz	r0, 800956a <__i2b+0x1a>
 800955e:	f240 1145 	movw	r1, #325	@ 0x145
 8009562:	4b04      	ldr	r3, [pc, #16]	@ (8009574 <__i2b+0x24>)
 8009564:	4804      	ldr	r0, [pc, #16]	@ (8009578 <__i2b+0x28>)
 8009566:	f000 fd91 	bl	800a08c <__assert_func>
 800956a:	2301      	movs	r3, #1
 800956c:	6144      	str	r4, [r0, #20]
 800956e:	6103      	str	r3, [r0, #16]
 8009570:	bd10      	pop	{r4, pc}
 8009572:	bf00      	nop
 8009574:	0800ac79 	.word	0x0800ac79
 8009578:	0800acea 	.word	0x0800acea

0800957c <__multiply>:
 800957c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009580:	4614      	mov	r4, r2
 8009582:	690a      	ldr	r2, [r1, #16]
 8009584:	6923      	ldr	r3, [r4, #16]
 8009586:	460f      	mov	r7, r1
 8009588:	429a      	cmp	r2, r3
 800958a:	bfa2      	ittt	ge
 800958c:	4623      	movge	r3, r4
 800958e:	460c      	movge	r4, r1
 8009590:	461f      	movge	r7, r3
 8009592:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009596:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800959a:	68a3      	ldr	r3, [r4, #8]
 800959c:	6861      	ldr	r1, [r4, #4]
 800959e:	eb0a 0609 	add.w	r6, sl, r9
 80095a2:	42b3      	cmp	r3, r6
 80095a4:	b085      	sub	sp, #20
 80095a6:	bfb8      	it	lt
 80095a8:	3101      	addlt	r1, #1
 80095aa:	f7ff fe93 	bl	80092d4 <_Balloc>
 80095ae:	b930      	cbnz	r0, 80095be <__multiply+0x42>
 80095b0:	4602      	mov	r2, r0
 80095b2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80095b6:	4b43      	ldr	r3, [pc, #268]	@ (80096c4 <__multiply+0x148>)
 80095b8:	4843      	ldr	r0, [pc, #268]	@ (80096c8 <__multiply+0x14c>)
 80095ba:	f000 fd67 	bl	800a08c <__assert_func>
 80095be:	f100 0514 	add.w	r5, r0, #20
 80095c2:	462b      	mov	r3, r5
 80095c4:	2200      	movs	r2, #0
 80095c6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80095ca:	4543      	cmp	r3, r8
 80095cc:	d321      	bcc.n	8009612 <__multiply+0x96>
 80095ce:	f107 0114 	add.w	r1, r7, #20
 80095d2:	f104 0214 	add.w	r2, r4, #20
 80095d6:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80095da:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80095de:	9302      	str	r3, [sp, #8]
 80095e0:	1b13      	subs	r3, r2, r4
 80095e2:	3b15      	subs	r3, #21
 80095e4:	f023 0303 	bic.w	r3, r3, #3
 80095e8:	3304      	adds	r3, #4
 80095ea:	f104 0715 	add.w	r7, r4, #21
 80095ee:	42ba      	cmp	r2, r7
 80095f0:	bf38      	it	cc
 80095f2:	2304      	movcc	r3, #4
 80095f4:	9301      	str	r3, [sp, #4]
 80095f6:	9b02      	ldr	r3, [sp, #8]
 80095f8:	9103      	str	r1, [sp, #12]
 80095fa:	428b      	cmp	r3, r1
 80095fc:	d80c      	bhi.n	8009618 <__multiply+0x9c>
 80095fe:	2e00      	cmp	r6, #0
 8009600:	dd03      	ble.n	800960a <__multiply+0x8e>
 8009602:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009606:	2b00      	cmp	r3, #0
 8009608:	d05a      	beq.n	80096c0 <__multiply+0x144>
 800960a:	6106      	str	r6, [r0, #16]
 800960c:	b005      	add	sp, #20
 800960e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009612:	f843 2b04 	str.w	r2, [r3], #4
 8009616:	e7d8      	b.n	80095ca <__multiply+0x4e>
 8009618:	f8b1 a000 	ldrh.w	sl, [r1]
 800961c:	f1ba 0f00 	cmp.w	sl, #0
 8009620:	d023      	beq.n	800966a <__multiply+0xee>
 8009622:	46a9      	mov	r9, r5
 8009624:	f04f 0c00 	mov.w	ip, #0
 8009628:	f104 0e14 	add.w	lr, r4, #20
 800962c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009630:	f8d9 3000 	ldr.w	r3, [r9]
 8009634:	fa1f fb87 	uxth.w	fp, r7
 8009638:	b29b      	uxth	r3, r3
 800963a:	fb0a 330b 	mla	r3, sl, fp, r3
 800963e:	4463      	add	r3, ip
 8009640:	f8d9 c000 	ldr.w	ip, [r9]
 8009644:	0c3f      	lsrs	r7, r7, #16
 8009646:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800964a:	fb0a c707 	mla	r7, sl, r7, ip
 800964e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009652:	b29b      	uxth	r3, r3
 8009654:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009658:	4572      	cmp	r2, lr
 800965a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800965e:	f849 3b04 	str.w	r3, [r9], #4
 8009662:	d8e3      	bhi.n	800962c <__multiply+0xb0>
 8009664:	9b01      	ldr	r3, [sp, #4]
 8009666:	f845 c003 	str.w	ip, [r5, r3]
 800966a:	9b03      	ldr	r3, [sp, #12]
 800966c:	3104      	adds	r1, #4
 800966e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009672:	f1b9 0f00 	cmp.w	r9, #0
 8009676:	d021      	beq.n	80096bc <__multiply+0x140>
 8009678:	46ae      	mov	lr, r5
 800967a:	f04f 0a00 	mov.w	sl, #0
 800967e:	682b      	ldr	r3, [r5, #0]
 8009680:	f104 0c14 	add.w	ip, r4, #20
 8009684:	f8bc b000 	ldrh.w	fp, [ip]
 8009688:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800968c:	b29b      	uxth	r3, r3
 800968e:	fb09 770b 	mla	r7, r9, fp, r7
 8009692:	4457      	add	r7, sl
 8009694:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009698:	f84e 3b04 	str.w	r3, [lr], #4
 800969c:	f85c 3b04 	ldr.w	r3, [ip], #4
 80096a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096a4:	f8be 3000 	ldrh.w	r3, [lr]
 80096a8:	4562      	cmp	r2, ip
 80096aa:	fb09 330a 	mla	r3, r9, sl, r3
 80096ae:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80096b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80096b6:	d8e5      	bhi.n	8009684 <__multiply+0x108>
 80096b8:	9f01      	ldr	r7, [sp, #4]
 80096ba:	51eb      	str	r3, [r5, r7]
 80096bc:	3504      	adds	r5, #4
 80096be:	e79a      	b.n	80095f6 <__multiply+0x7a>
 80096c0:	3e01      	subs	r6, #1
 80096c2:	e79c      	b.n	80095fe <__multiply+0x82>
 80096c4:	0800ac79 	.word	0x0800ac79
 80096c8:	0800acea 	.word	0x0800acea

080096cc <__pow5mult>:
 80096cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096d0:	4615      	mov	r5, r2
 80096d2:	f012 0203 	ands.w	r2, r2, #3
 80096d6:	4607      	mov	r7, r0
 80096d8:	460e      	mov	r6, r1
 80096da:	d007      	beq.n	80096ec <__pow5mult+0x20>
 80096dc:	4c25      	ldr	r4, [pc, #148]	@ (8009774 <__pow5mult+0xa8>)
 80096de:	3a01      	subs	r2, #1
 80096e0:	2300      	movs	r3, #0
 80096e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096e6:	f7ff fe57 	bl	8009398 <__multadd>
 80096ea:	4606      	mov	r6, r0
 80096ec:	10ad      	asrs	r5, r5, #2
 80096ee:	d03d      	beq.n	800976c <__pow5mult+0xa0>
 80096f0:	69fc      	ldr	r4, [r7, #28]
 80096f2:	b97c      	cbnz	r4, 8009714 <__pow5mult+0x48>
 80096f4:	2010      	movs	r0, #16
 80096f6:	f7ff fd25 	bl	8009144 <malloc>
 80096fa:	4602      	mov	r2, r0
 80096fc:	61f8      	str	r0, [r7, #28]
 80096fe:	b928      	cbnz	r0, 800970c <__pow5mult+0x40>
 8009700:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009704:	4b1c      	ldr	r3, [pc, #112]	@ (8009778 <__pow5mult+0xac>)
 8009706:	481d      	ldr	r0, [pc, #116]	@ (800977c <__pow5mult+0xb0>)
 8009708:	f000 fcc0 	bl	800a08c <__assert_func>
 800970c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009710:	6004      	str	r4, [r0, #0]
 8009712:	60c4      	str	r4, [r0, #12]
 8009714:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009718:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800971c:	b94c      	cbnz	r4, 8009732 <__pow5mult+0x66>
 800971e:	f240 2171 	movw	r1, #625	@ 0x271
 8009722:	4638      	mov	r0, r7
 8009724:	f7ff ff14 	bl	8009550 <__i2b>
 8009728:	2300      	movs	r3, #0
 800972a:	4604      	mov	r4, r0
 800972c:	f8c8 0008 	str.w	r0, [r8, #8]
 8009730:	6003      	str	r3, [r0, #0]
 8009732:	f04f 0900 	mov.w	r9, #0
 8009736:	07eb      	lsls	r3, r5, #31
 8009738:	d50a      	bpl.n	8009750 <__pow5mult+0x84>
 800973a:	4631      	mov	r1, r6
 800973c:	4622      	mov	r2, r4
 800973e:	4638      	mov	r0, r7
 8009740:	f7ff ff1c 	bl	800957c <__multiply>
 8009744:	4680      	mov	r8, r0
 8009746:	4631      	mov	r1, r6
 8009748:	4638      	mov	r0, r7
 800974a:	f7ff fe03 	bl	8009354 <_Bfree>
 800974e:	4646      	mov	r6, r8
 8009750:	106d      	asrs	r5, r5, #1
 8009752:	d00b      	beq.n	800976c <__pow5mult+0xa0>
 8009754:	6820      	ldr	r0, [r4, #0]
 8009756:	b938      	cbnz	r0, 8009768 <__pow5mult+0x9c>
 8009758:	4622      	mov	r2, r4
 800975a:	4621      	mov	r1, r4
 800975c:	4638      	mov	r0, r7
 800975e:	f7ff ff0d 	bl	800957c <__multiply>
 8009762:	6020      	str	r0, [r4, #0]
 8009764:	f8c0 9000 	str.w	r9, [r0]
 8009768:	4604      	mov	r4, r0
 800976a:	e7e4      	b.n	8009736 <__pow5mult+0x6a>
 800976c:	4630      	mov	r0, r6
 800976e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009772:	bf00      	nop
 8009774:	0800ad44 	.word	0x0800ad44
 8009778:	0800ac0a 	.word	0x0800ac0a
 800977c:	0800acea 	.word	0x0800acea

08009780 <__lshift>:
 8009780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009784:	460c      	mov	r4, r1
 8009786:	4607      	mov	r7, r0
 8009788:	4691      	mov	r9, r2
 800978a:	6923      	ldr	r3, [r4, #16]
 800978c:	6849      	ldr	r1, [r1, #4]
 800978e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009792:	68a3      	ldr	r3, [r4, #8]
 8009794:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009798:	f108 0601 	add.w	r6, r8, #1
 800979c:	42b3      	cmp	r3, r6
 800979e:	db0b      	blt.n	80097b8 <__lshift+0x38>
 80097a0:	4638      	mov	r0, r7
 80097a2:	f7ff fd97 	bl	80092d4 <_Balloc>
 80097a6:	4605      	mov	r5, r0
 80097a8:	b948      	cbnz	r0, 80097be <__lshift+0x3e>
 80097aa:	4602      	mov	r2, r0
 80097ac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80097b0:	4b27      	ldr	r3, [pc, #156]	@ (8009850 <__lshift+0xd0>)
 80097b2:	4828      	ldr	r0, [pc, #160]	@ (8009854 <__lshift+0xd4>)
 80097b4:	f000 fc6a 	bl	800a08c <__assert_func>
 80097b8:	3101      	adds	r1, #1
 80097ba:	005b      	lsls	r3, r3, #1
 80097bc:	e7ee      	b.n	800979c <__lshift+0x1c>
 80097be:	2300      	movs	r3, #0
 80097c0:	f100 0114 	add.w	r1, r0, #20
 80097c4:	f100 0210 	add.w	r2, r0, #16
 80097c8:	4618      	mov	r0, r3
 80097ca:	4553      	cmp	r3, sl
 80097cc:	db33      	blt.n	8009836 <__lshift+0xb6>
 80097ce:	6920      	ldr	r0, [r4, #16]
 80097d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097d4:	f104 0314 	add.w	r3, r4, #20
 80097d8:	f019 091f 	ands.w	r9, r9, #31
 80097dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80097e4:	d02b      	beq.n	800983e <__lshift+0xbe>
 80097e6:	468a      	mov	sl, r1
 80097e8:	2200      	movs	r2, #0
 80097ea:	f1c9 0e20 	rsb	lr, r9, #32
 80097ee:	6818      	ldr	r0, [r3, #0]
 80097f0:	fa00 f009 	lsl.w	r0, r0, r9
 80097f4:	4310      	orrs	r0, r2
 80097f6:	f84a 0b04 	str.w	r0, [sl], #4
 80097fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80097fe:	459c      	cmp	ip, r3
 8009800:	fa22 f20e 	lsr.w	r2, r2, lr
 8009804:	d8f3      	bhi.n	80097ee <__lshift+0x6e>
 8009806:	ebac 0304 	sub.w	r3, ip, r4
 800980a:	3b15      	subs	r3, #21
 800980c:	f023 0303 	bic.w	r3, r3, #3
 8009810:	3304      	adds	r3, #4
 8009812:	f104 0015 	add.w	r0, r4, #21
 8009816:	4584      	cmp	ip, r0
 8009818:	bf38      	it	cc
 800981a:	2304      	movcc	r3, #4
 800981c:	50ca      	str	r2, [r1, r3]
 800981e:	b10a      	cbz	r2, 8009824 <__lshift+0xa4>
 8009820:	f108 0602 	add.w	r6, r8, #2
 8009824:	3e01      	subs	r6, #1
 8009826:	4638      	mov	r0, r7
 8009828:	4621      	mov	r1, r4
 800982a:	612e      	str	r6, [r5, #16]
 800982c:	f7ff fd92 	bl	8009354 <_Bfree>
 8009830:	4628      	mov	r0, r5
 8009832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009836:	f842 0f04 	str.w	r0, [r2, #4]!
 800983a:	3301      	adds	r3, #1
 800983c:	e7c5      	b.n	80097ca <__lshift+0x4a>
 800983e:	3904      	subs	r1, #4
 8009840:	f853 2b04 	ldr.w	r2, [r3], #4
 8009844:	459c      	cmp	ip, r3
 8009846:	f841 2f04 	str.w	r2, [r1, #4]!
 800984a:	d8f9      	bhi.n	8009840 <__lshift+0xc0>
 800984c:	e7ea      	b.n	8009824 <__lshift+0xa4>
 800984e:	bf00      	nop
 8009850:	0800ac79 	.word	0x0800ac79
 8009854:	0800acea 	.word	0x0800acea

08009858 <__mcmp>:
 8009858:	4603      	mov	r3, r0
 800985a:	690a      	ldr	r2, [r1, #16]
 800985c:	6900      	ldr	r0, [r0, #16]
 800985e:	b530      	push	{r4, r5, lr}
 8009860:	1a80      	subs	r0, r0, r2
 8009862:	d10e      	bne.n	8009882 <__mcmp+0x2a>
 8009864:	3314      	adds	r3, #20
 8009866:	3114      	adds	r1, #20
 8009868:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800986c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009870:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009874:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009878:	4295      	cmp	r5, r2
 800987a:	d003      	beq.n	8009884 <__mcmp+0x2c>
 800987c:	d205      	bcs.n	800988a <__mcmp+0x32>
 800987e:	f04f 30ff 	mov.w	r0, #4294967295
 8009882:	bd30      	pop	{r4, r5, pc}
 8009884:	42a3      	cmp	r3, r4
 8009886:	d3f3      	bcc.n	8009870 <__mcmp+0x18>
 8009888:	e7fb      	b.n	8009882 <__mcmp+0x2a>
 800988a:	2001      	movs	r0, #1
 800988c:	e7f9      	b.n	8009882 <__mcmp+0x2a>
	...

08009890 <__mdiff>:
 8009890:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009894:	4689      	mov	r9, r1
 8009896:	4606      	mov	r6, r0
 8009898:	4611      	mov	r1, r2
 800989a:	4648      	mov	r0, r9
 800989c:	4614      	mov	r4, r2
 800989e:	f7ff ffdb 	bl	8009858 <__mcmp>
 80098a2:	1e05      	subs	r5, r0, #0
 80098a4:	d112      	bne.n	80098cc <__mdiff+0x3c>
 80098a6:	4629      	mov	r1, r5
 80098a8:	4630      	mov	r0, r6
 80098aa:	f7ff fd13 	bl	80092d4 <_Balloc>
 80098ae:	4602      	mov	r2, r0
 80098b0:	b928      	cbnz	r0, 80098be <__mdiff+0x2e>
 80098b2:	f240 2137 	movw	r1, #567	@ 0x237
 80098b6:	4b3e      	ldr	r3, [pc, #248]	@ (80099b0 <__mdiff+0x120>)
 80098b8:	483e      	ldr	r0, [pc, #248]	@ (80099b4 <__mdiff+0x124>)
 80098ba:	f000 fbe7 	bl	800a08c <__assert_func>
 80098be:	2301      	movs	r3, #1
 80098c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098c4:	4610      	mov	r0, r2
 80098c6:	b003      	add	sp, #12
 80098c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098cc:	bfbc      	itt	lt
 80098ce:	464b      	movlt	r3, r9
 80098d0:	46a1      	movlt	r9, r4
 80098d2:	4630      	mov	r0, r6
 80098d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80098d8:	bfba      	itte	lt
 80098da:	461c      	movlt	r4, r3
 80098dc:	2501      	movlt	r5, #1
 80098de:	2500      	movge	r5, #0
 80098e0:	f7ff fcf8 	bl	80092d4 <_Balloc>
 80098e4:	4602      	mov	r2, r0
 80098e6:	b918      	cbnz	r0, 80098f0 <__mdiff+0x60>
 80098e8:	f240 2145 	movw	r1, #581	@ 0x245
 80098ec:	4b30      	ldr	r3, [pc, #192]	@ (80099b0 <__mdiff+0x120>)
 80098ee:	e7e3      	b.n	80098b8 <__mdiff+0x28>
 80098f0:	f100 0b14 	add.w	fp, r0, #20
 80098f4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80098f8:	f109 0310 	add.w	r3, r9, #16
 80098fc:	60c5      	str	r5, [r0, #12]
 80098fe:	f04f 0c00 	mov.w	ip, #0
 8009902:	f109 0514 	add.w	r5, r9, #20
 8009906:	46d9      	mov	r9, fp
 8009908:	6926      	ldr	r6, [r4, #16]
 800990a:	f104 0e14 	add.w	lr, r4, #20
 800990e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009912:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009916:	9301      	str	r3, [sp, #4]
 8009918:	9b01      	ldr	r3, [sp, #4]
 800991a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800991e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009922:	b281      	uxth	r1, r0
 8009924:	9301      	str	r3, [sp, #4]
 8009926:	fa1f f38a 	uxth.w	r3, sl
 800992a:	1a5b      	subs	r3, r3, r1
 800992c:	0c00      	lsrs	r0, r0, #16
 800992e:	4463      	add	r3, ip
 8009930:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009934:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009938:	b29b      	uxth	r3, r3
 800993a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800993e:	4576      	cmp	r6, lr
 8009940:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009944:	f849 3b04 	str.w	r3, [r9], #4
 8009948:	d8e6      	bhi.n	8009918 <__mdiff+0x88>
 800994a:	1b33      	subs	r3, r6, r4
 800994c:	3b15      	subs	r3, #21
 800994e:	f023 0303 	bic.w	r3, r3, #3
 8009952:	3415      	adds	r4, #21
 8009954:	3304      	adds	r3, #4
 8009956:	42a6      	cmp	r6, r4
 8009958:	bf38      	it	cc
 800995a:	2304      	movcc	r3, #4
 800995c:	441d      	add	r5, r3
 800995e:	445b      	add	r3, fp
 8009960:	461e      	mov	r6, r3
 8009962:	462c      	mov	r4, r5
 8009964:	4544      	cmp	r4, r8
 8009966:	d30e      	bcc.n	8009986 <__mdiff+0xf6>
 8009968:	f108 0103 	add.w	r1, r8, #3
 800996c:	1b49      	subs	r1, r1, r5
 800996e:	f021 0103 	bic.w	r1, r1, #3
 8009972:	3d03      	subs	r5, #3
 8009974:	45a8      	cmp	r8, r5
 8009976:	bf38      	it	cc
 8009978:	2100      	movcc	r1, #0
 800997a:	440b      	add	r3, r1
 800997c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009980:	b199      	cbz	r1, 80099aa <__mdiff+0x11a>
 8009982:	6117      	str	r7, [r2, #16]
 8009984:	e79e      	b.n	80098c4 <__mdiff+0x34>
 8009986:	46e6      	mov	lr, ip
 8009988:	f854 1b04 	ldr.w	r1, [r4], #4
 800998c:	fa1f fc81 	uxth.w	ip, r1
 8009990:	44f4      	add	ip, lr
 8009992:	0c08      	lsrs	r0, r1, #16
 8009994:	4471      	add	r1, lr
 8009996:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800999a:	b289      	uxth	r1, r1
 800999c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80099a0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80099a4:	f846 1b04 	str.w	r1, [r6], #4
 80099a8:	e7dc      	b.n	8009964 <__mdiff+0xd4>
 80099aa:	3f01      	subs	r7, #1
 80099ac:	e7e6      	b.n	800997c <__mdiff+0xec>
 80099ae:	bf00      	nop
 80099b0:	0800ac79 	.word	0x0800ac79
 80099b4:	0800acea 	.word	0x0800acea

080099b8 <__ulp>:
 80099b8:	4b0e      	ldr	r3, [pc, #56]	@ (80099f4 <__ulp+0x3c>)
 80099ba:	400b      	ands	r3, r1
 80099bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	dc08      	bgt.n	80099d6 <__ulp+0x1e>
 80099c4:	425b      	negs	r3, r3
 80099c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80099ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 80099ce:	da04      	bge.n	80099da <__ulp+0x22>
 80099d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80099d4:	4113      	asrs	r3, r2
 80099d6:	2200      	movs	r2, #0
 80099d8:	e008      	b.n	80099ec <__ulp+0x34>
 80099da:	f1a2 0314 	sub.w	r3, r2, #20
 80099de:	2b1e      	cmp	r3, #30
 80099e0:	bfd6      	itet	le
 80099e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80099e6:	2201      	movgt	r2, #1
 80099e8:	40da      	lsrle	r2, r3
 80099ea:	2300      	movs	r3, #0
 80099ec:	4619      	mov	r1, r3
 80099ee:	4610      	mov	r0, r2
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	7ff00000 	.word	0x7ff00000

080099f8 <__b2d>:
 80099f8:	6902      	ldr	r2, [r0, #16]
 80099fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099fc:	f100 0614 	add.w	r6, r0, #20
 8009a00:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009a04:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009a08:	4f1e      	ldr	r7, [pc, #120]	@ (8009a84 <__b2d+0x8c>)
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	f7ff fd54 	bl	80094b8 <__hi0bits>
 8009a10:	4603      	mov	r3, r0
 8009a12:	f1c0 0020 	rsb	r0, r0, #32
 8009a16:	2b0a      	cmp	r3, #10
 8009a18:	f1a2 0504 	sub.w	r5, r2, #4
 8009a1c:	6008      	str	r0, [r1, #0]
 8009a1e:	dc12      	bgt.n	8009a46 <__b2d+0x4e>
 8009a20:	42ae      	cmp	r6, r5
 8009a22:	bf2c      	ite	cs
 8009a24:	2200      	movcs	r2, #0
 8009a26:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009a2a:	f1c3 0c0b 	rsb	ip, r3, #11
 8009a2e:	3315      	adds	r3, #21
 8009a30:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009a34:	fa04 f303 	lsl.w	r3, r4, r3
 8009a38:	fa22 f20c 	lsr.w	r2, r2, ip
 8009a3c:	ea4e 0107 	orr.w	r1, lr, r7
 8009a40:	431a      	orrs	r2, r3
 8009a42:	4610      	mov	r0, r2
 8009a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a46:	42ae      	cmp	r6, r5
 8009a48:	bf36      	itet	cc
 8009a4a:	f1a2 0508 	subcc.w	r5, r2, #8
 8009a4e:	2200      	movcs	r2, #0
 8009a50:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009a54:	3b0b      	subs	r3, #11
 8009a56:	d012      	beq.n	8009a7e <__b2d+0x86>
 8009a58:	f1c3 0720 	rsb	r7, r3, #32
 8009a5c:	fa22 f107 	lsr.w	r1, r2, r7
 8009a60:	409c      	lsls	r4, r3
 8009a62:	430c      	orrs	r4, r1
 8009a64:	42b5      	cmp	r5, r6
 8009a66:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009a6a:	bf94      	ite	ls
 8009a6c:	2400      	movls	r4, #0
 8009a6e:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8009a72:	409a      	lsls	r2, r3
 8009a74:	40fc      	lsrs	r4, r7
 8009a76:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009a7a:	4322      	orrs	r2, r4
 8009a7c:	e7e1      	b.n	8009a42 <__b2d+0x4a>
 8009a7e:	ea44 0107 	orr.w	r1, r4, r7
 8009a82:	e7de      	b.n	8009a42 <__b2d+0x4a>
 8009a84:	3ff00000 	.word	0x3ff00000

08009a88 <__d2b>:
 8009a88:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009a8c:	2101      	movs	r1, #1
 8009a8e:	4690      	mov	r8, r2
 8009a90:	4699      	mov	r9, r3
 8009a92:	9e08      	ldr	r6, [sp, #32]
 8009a94:	f7ff fc1e 	bl	80092d4 <_Balloc>
 8009a98:	4604      	mov	r4, r0
 8009a9a:	b930      	cbnz	r0, 8009aaa <__d2b+0x22>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	f240 310f 	movw	r1, #783	@ 0x30f
 8009aa2:	4b23      	ldr	r3, [pc, #140]	@ (8009b30 <__d2b+0xa8>)
 8009aa4:	4823      	ldr	r0, [pc, #140]	@ (8009b34 <__d2b+0xac>)
 8009aa6:	f000 faf1 	bl	800a08c <__assert_func>
 8009aaa:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009aae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ab2:	b10d      	cbz	r5, 8009ab8 <__d2b+0x30>
 8009ab4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009ab8:	9301      	str	r3, [sp, #4]
 8009aba:	f1b8 0300 	subs.w	r3, r8, #0
 8009abe:	d024      	beq.n	8009b0a <__d2b+0x82>
 8009ac0:	4668      	mov	r0, sp
 8009ac2:	9300      	str	r3, [sp, #0]
 8009ac4:	f7ff fd17 	bl	80094f6 <__lo0bits>
 8009ac8:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009acc:	b1d8      	cbz	r0, 8009b06 <__d2b+0x7e>
 8009ace:	f1c0 0320 	rsb	r3, r0, #32
 8009ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad6:	430b      	orrs	r3, r1
 8009ad8:	40c2      	lsrs	r2, r0
 8009ada:	6163      	str	r3, [r4, #20]
 8009adc:	9201      	str	r2, [sp, #4]
 8009ade:	9b01      	ldr	r3, [sp, #4]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	bf0c      	ite	eq
 8009ae4:	2201      	moveq	r2, #1
 8009ae6:	2202      	movne	r2, #2
 8009ae8:	61a3      	str	r3, [r4, #24]
 8009aea:	6122      	str	r2, [r4, #16]
 8009aec:	b1ad      	cbz	r5, 8009b1a <__d2b+0x92>
 8009aee:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009af2:	4405      	add	r5, r0
 8009af4:	6035      	str	r5, [r6, #0]
 8009af6:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009afa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009afc:	6018      	str	r0, [r3, #0]
 8009afe:	4620      	mov	r0, r4
 8009b00:	b002      	add	sp, #8
 8009b02:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009b06:	6161      	str	r1, [r4, #20]
 8009b08:	e7e9      	b.n	8009ade <__d2b+0x56>
 8009b0a:	a801      	add	r0, sp, #4
 8009b0c:	f7ff fcf3 	bl	80094f6 <__lo0bits>
 8009b10:	9b01      	ldr	r3, [sp, #4]
 8009b12:	2201      	movs	r2, #1
 8009b14:	6163      	str	r3, [r4, #20]
 8009b16:	3020      	adds	r0, #32
 8009b18:	e7e7      	b.n	8009aea <__d2b+0x62>
 8009b1a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009b1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b22:	6030      	str	r0, [r6, #0]
 8009b24:	6918      	ldr	r0, [r3, #16]
 8009b26:	f7ff fcc7 	bl	80094b8 <__hi0bits>
 8009b2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b2e:	e7e4      	b.n	8009afa <__d2b+0x72>
 8009b30:	0800ac79 	.word	0x0800ac79
 8009b34:	0800acea 	.word	0x0800acea

08009b38 <__ratio>:
 8009b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b3c:	b085      	sub	sp, #20
 8009b3e:	e9cd 1000 	strd	r1, r0, [sp]
 8009b42:	a902      	add	r1, sp, #8
 8009b44:	f7ff ff58 	bl	80099f8 <__b2d>
 8009b48:	468b      	mov	fp, r1
 8009b4a:	4606      	mov	r6, r0
 8009b4c:	460f      	mov	r7, r1
 8009b4e:	9800      	ldr	r0, [sp, #0]
 8009b50:	a903      	add	r1, sp, #12
 8009b52:	f7ff ff51 	bl	80099f8 <__b2d>
 8009b56:	460d      	mov	r5, r1
 8009b58:	9b01      	ldr	r3, [sp, #4]
 8009b5a:	4689      	mov	r9, r1
 8009b5c:	6919      	ldr	r1, [r3, #16]
 8009b5e:	9b00      	ldr	r3, [sp, #0]
 8009b60:	4604      	mov	r4, r0
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	4630      	mov	r0, r6
 8009b66:	1ac9      	subs	r1, r1, r3
 8009b68:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009b6c:	1a9b      	subs	r3, r3, r2
 8009b6e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	bfcd      	iteet	gt
 8009b76:	463a      	movgt	r2, r7
 8009b78:	462a      	movle	r2, r5
 8009b7a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009b7e:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8009b82:	bfd8      	it	le
 8009b84:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009b88:	464b      	mov	r3, r9
 8009b8a:	4622      	mov	r2, r4
 8009b8c:	4659      	mov	r1, fp
 8009b8e:	f7f6 fdd7 	bl	8000740 <__aeabi_ddiv>
 8009b92:	b005      	add	sp, #20
 8009b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009b98 <__copybits>:
 8009b98:	3901      	subs	r1, #1
 8009b9a:	b570      	push	{r4, r5, r6, lr}
 8009b9c:	1149      	asrs	r1, r1, #5
 8009b9e:	6914      	ldr	r4, [r2, #16]
 8009ba0:	3101      	adds	r1, #1
 8009ba2:	f102 0314 	add.w	r3, r2, #20
 8009ba6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009baa:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009bae:	1f05      	subs	r5, r0, #4
 8009bb0:	42a3      	cmp	r3, r4
 8009bb2:	d30c      	bcc.n	8009bce <__copybits+0x36>
 8009bb4:	1aa3      	subs	r3, r4, r2
 8009bb6:	3b11      	subs	r3, #17
 8009bb8:	f023 0303 	bic.w	r3, r3, #3
 8009bbc:	3211      	adds	r2, #17
 8009bbe:	42a2      	cmp	r2, r4
 8009bc0:	bf88      	it	hi
 8009bc2:	2300      	movhi	r3, #0
 8009bc4:	4418      	add	r0, r3
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	4288      	cmp	r0, r1
 8009bca:	d305      	bcc.n	8009bd8 <__copybits+0x40>
 8009bcc:	bd70      	pop	{r4, r5, r6, pc}
 8009bce:	f853 6b04 	ldr.w	r6, [r3], #4
 8009bd2:	f845 6f04 	str.w	r6, [r5, #4]!
 8009bd6:	e7eb      	b.n	8009bb0 <__copybits+0x18>
 8009bd8:	f840 3b04 	str.w	r3, [r0], #4
 8009bdc:	e7f4      	b.n	8009bc8 <__copybits+0x30>

08009bde <__any_on>:
 8009bde:	f100 0214 	add.w	r2, r0, #20
 8009be2:	6900      	ldr	r0, [r0, #16]
 8009be4:	114b      	asrs	r3, r1, #5
 8009be6:	4298      	cmp	r0, r3
 8009be8:	b510      	push	{r4, lr}
 8009bea:	db11      	blt.n	8009c10 <__any_on+0x32>
 8009bec:	dd0a      	ble.n	8009c04 <__any_on+0x26>
 8009bee:	f011 011f 	ands.w	r1, r1, #31
 8009bf2:	d007      	beq.n	8009c04 <__any_on+0x26>
 8009bf4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009bf8:	fa24 f001 	lsr.w	r0, r4, r1
 8009bfc:	fa00 f101 	lsl.w	r1, r0, r1
 8009c00:	428c      	cmp	r4, r1
 8009c02:	d10b      	bne.n	8009c1c <__any_on+0x3e>
 8009c04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d803      	bhi.n	8009c14 <__any_on+0x36>
 8009c0c:	2000      	movs	r0, #0
 8009c0e:	bd10      	pop	{r4, pc}
 8009c10:	4603      	mov	r3, r0
 8009c12:	e7f7      	b.n	8009c04 <__any_on+0x26>
 8009c14:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009c18:	2900      	cmp	r1, #0
 8009c1a:	d0f5      	beq.n	8009c08 <__any_on+0x2a>
 8009c1c:	2001      	movs	r0, #1
 8009c1e:	e7f6      	b.n	8009c0e <__any_on+0x30>

08009c20 <__ascii_wctomb>:
 8009c20:	4603      	mov	r3, r0
 8009c22:	4608      	mov	r0, r1
 8009c24:	b141      	cbz	r1, 8009c38 <__ascii_wctomb+0x18>
 8009c26:	2aff      	cmp	r2, #255	@ 0xff
 8009c28:	d904      	bls.n	8009c34 <__ascii_wctomb+0x14>
 8009c2a:	228a      	movs	r2, #138	@ 0x8a
 8009c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c30:	601a      	str	r2, [r3, #0]
 8009c32:	4770      	bx	lr
 8009c34:	2001      	movs	r0, #1
 8009c36:	700a      	strb	r2, [r1, #0]
 8009c38:	4770      	bx	lr

08009c3a <__ssputs_r>:
 8009c3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c3e:	461f      	mov	r7, r3
 8009c40:	688e      	ldr	r6, [r1, #8]
 8009c42:	4682      	mov	sl, r0
 8009c44:	42be      	cmp	r6, r7
 8009c46:	460c      	mov	r4, r1
 8009c48:	4690      	mov	r8, r2
 8009c4a:	680b      	ldr	r3, [r1, #0]
 8009c4c:	d82d      	bhi.n	8009caa <__ssputs_r+0x70>
 8009c4e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c52:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009c56:	d026      	beq.n	8009ca6 <__ssputs_r+0x6c>
 8009c58:	6965      	ldr	r5, [r4, #20]
 8009c5a:	6909      	ldr	r1, [r1, #16]
 8009c5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c60:	eba3 0901 	sub.w	r9, r3, r1
 8009c64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c68:	1c7b      	adds	r3, r7, #1
 8009c6a:	444b      	add	r3, r9
 8009c6c:	106d      	asrs	r5, r5, #1
 8009c6e:	429d      	cmp	r5, r3
 8009c70:	bf38      	it	cc
 8009c72:	461d      	movcc	r5, r3
 8009c74:	0553      	lsls	r3, r2, #21
 8009c76:	d527      	bpl.n	8009cc8 <__ssputs_r+0x8e>
 8009c78:	4629      	mov	r1, r5
 8009c7a:	f7ff fa8d 	bl	8009198 <_malloc_r>
 8009c7e:	4606      	mov	r6, r0
 8009c80:	b360      	cbz	r0, 8009cdc <__ssputs_r+0xa2>
 8009c82:	464a      	mov	r2, r9
 8009c84:	6921      	ldr	r1, [r4, #16]
 8009c86:	f7fe f870 	bl	8007d6a <memcpy>
 8009c8a:	89a3      	ldrh	r3, [r4, #12]
 8009c8c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009c90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c94:	81a3      	strh	r3, [r4, #12]
 8009c96:	6126      	str	r6, [r4, #16]
 8009c98:	444e      	add	r6, r9
 8009c9a:	6026      	str	r6, [r4, #0]
 8009c9c:	463e      	mov	r6, r7
 8009c9e:	6165      	str	r5, [r4, #20]
 8009ca0:	eba5 0509 	sub.w	r5, r5, r9
 8009ca4:	60a5      	str	r5, [r4, #8]
 8009ca6:	42be      	cmp	r6, r7
 8009ca8:	d900      	bls.n	8009cac <__ssputs_r+0x72>
 8009caa:	463e      	mov	r6, r7
 8009cac:	4632      	mov	r2, r6
 8009cae:	4641      	mov	r1, r8
 8009cb0:	6820      	ldr	r0, [r4, #0]
 8009cb2:	f000 f9c1 	bl	800a038 <memmove>
 8009cb6:	2000      	movs	r0, #0
 8009cb8:	68a3      	ldr	r3, [r4, #8]
 8009cba:	1b9b      	subs	r3, r3, r6
 8009cbc:	60a3      	str	r3, [r4, #8]
 8009cbe:	6823      	ldr	r3, [r4, #0]
 8009cc0:	4433      	add	r3, r6
 8009cc2:	6023      	str	r3, [r4, #0]
 8009cc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cc8:	462a      	mov	r2, r5
 8009cca:	f000 fa11 	bl	800a0f0 <_realloc_r>
 8009cce:	4606      	mov	r6, r0
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	d1e0      	bne.n	8009c96 <__ssputs_r+0x5c>
 8009cd4:	4650      	mov	r0, sl
 8009cd6:	6921      	ldr	r1, [r4, #16]
 8009cd8:	f7fe feb2 	bl	8008a40 <_free_r>
 8009cdc:	230c      	movs	r3, #12
 8009cde:	f8ca 3000 	str.w	r3, [sl]
 8009ce2:	89a3      	ldrh	r3, [r4, #12]
 8009ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cec:	81a3      	strh	r3, [r4, #12]
 8009cee:	e7e9      	b.n	8009cc4 <__ssputs_r+0x8a>

08009cf0 <_svfiprintf_r>:
 8009cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cf4:	4698      	mov	r8, r3
 8009cf6:	898b      	ldrh	r3, [r1, #12]
 8009cf8:	4607      	mov	r7, r0
 8009cfa:	061b      	lsls	r3, r3, #24
 8009cfc:	460d      	mov	r5, r1
 8009cfe:	4614      	mov	r4, r2
 8009d00:	b09d      	sub	sp, #116	@ 0x74
 8009d02:	d510      	bpl.n	8009d26 <_svfiprintf_r+0x36>
 8009d04:	690b      	ldr	r3, [r1, #16]
 8009d06:	b973      	cbnz	r3, 8009d26 <_svfiprintf_r+0x36>
 8009d08:	2140      	movs	r1, #64	@ 0x40
 8009d0a:	f7ff fa45 	bl	8009198 <_malloc_r>
 8009d0e:	6028      	str	r0, [r5, #0]
 8009d10:	6128      	str	r0, [r5, #16]
 8009d12:	b930      	cbnz	r0, 8009d22 <_svfiprintf_r+0x32>
 8009d14:	230c      	movs	r3, #12
 8009d16:	603b      	str	r3, [r7, #0]
 8009d18:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1c:	b01d      	add	sp, #116	@ 0x74
 8009d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d22:	2340      	movs	r3, #64	@ 0x40
 8009d24:	616b      	str	r3, [r5, #20]
 8009d26:	2300      	movs	r3, #0
 8009d28:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d2a:	2320      	movs	r3, #32
 8009d2c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d30:	2330      	movs	r3, #48	@ 0x30
 8009d32:	f04f 0901 	mov.w	r9, #1
 8009d36:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d3a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009ed4 <_svfiprintf_r+0x1e4>
 8009d3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d42:	4623      	mov	r3, r4
 8009d44:	469a      	mov	sl, r3
 8009d46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d4a:	b10a      	cbz	r2, 8009d50 <_svfiprintf_r+0x60>
 8009d4c:	2a25      	cmp	r2, #37	@ 0x25
 8009d4e:	d1f9      	bne.n	8009d44 <_svfiprintf_r+0x54>
 8009d50:	ebba 0b04 	subs.w	fp, sl, r4
 8009d54:	d00b      	beq.n	8009d6e <_svfiprintf_r+0x7e>
 8009d56:	465b      	mov	r3, fp
 8009d58:	4622      	mov	r2, r4
 8009d5a:	4629      	mov	r1, r5
 8009d5c:	4638      	mov	r0, r7
 8009d5e:	f7ff ff6c 	bl	8009c3a <__ssputs_r>
 8009d62:	3001      	adds	r0, #1
 8009d64:	f000 80a7 	beq.w	8009eb6 <_svfiprintf_r+0x1c6>
 8009d68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d6a:	445a      	add	r2, fp
 8009d6c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	f000 809f 	beq.w	8009eb6 <_svfiprintf_r+0x1c6>
 8009d78:	2300      	movs	r3, #0
 8009d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d82:	f10a 0a01 	add.w	sl, sl, #1
 8009d86:	9304      	str	r3, [sp, #16]
 8009d88:	9307      	str	r3, [sp, #28]
 8009d8a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d8e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d90:	4654      	mov	r4, sl
 8009d92:	2205      	movs	r2, #5
 8009d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d98:	484e      	ldr	r0, [pc, #312]	@ (8009ed4 <_svfiprintf_r+0x1e4>)
 8009d9a:	f7fd ffd8 	bl	8007d4e <memchr>
 8009d9e:	9a04      	ldr	r2, [sp, #16]
 8009da0:	b9d8      	cbnz	r0, 8009dda <_svfiprintf_r+0xea>
 8009da2:	06d0      	lsls	r0, r2, #27
 8009da4:	bf44      	itt	mi
 8009da6:	2320      	movmi	r3, #32
 8009da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dac:	0711      	lsls	r1, r2, #28
 8009dae:	bf44      	itt	mi
 8009db0:	232b      	movmi	r3, #43	@ 0x2b
 8009db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009db6:	f89a 3000 	ldrb.w	r3, [sl]
 8009dba:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dbc:	d015      	beq.n	8009dea <_svfiprintf_r+0xfa>
 8009dbe:	4654      	mov	r4, sl
 8009dc0:	2000      	movs	r0, #0
 8009dc2:	f04f 0c0a 	mov.w	ip, #10
 8009dc6:	9a07      	ldr	r2, [sp, #28]
 8009dc8:	4621      	mov	r1, r4
 8009dca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dce:	3b30      	subs	r3, #48	@ 0x30
 8009dd0:	2b09      	cmp	r3, #9
 8009dd2:	d94b      	bls.n	8009e6c <_svfiprintf_r+0x17c>
 8009dd4:	b1b0      	cbz	r0, 8009e04 <_svfiprintf_r+0x114>
 8009dd6:	9207      	str	r2, [sp, #28]
 8009dd8:	e014      	b.n	8009e04 <_svfiprintf_r+0x114>
 8009dda:	eba0 0308 	sub.w	r3, r0, r8
 8009dde:	fa09 f303 	lsl.w	r3, r9, r3
 8009de2:	4313      	orrs	r3, r2
 8009de4:	46a2      	mov	sl, r4
 8009de6:	9304      	str	r3, [sp, #16]
 8009de8:	e7d2      	b.n	8009d90 <_svfiprintf_r+0xa0>
 8009dea:	9b03      	ldr	r3, [sp, #12]
 8009dec:	1d19      	adds	r1, r3, #4
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	9103      	str	r1, [sp, #12]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	bfbb      	ittet	lt
 8009df6:	425b      	neglt	r3, r3
 8009df8:	f042 0202 	orrlt.w	r2, r2, #2
 8009dfc:	9307      	strge	r3, [sp, #28]
 8009dfe:	9307      	strlt	r3, [sp, #28]
 8009e00:	bfb8      	it	lt
 8009e02:	9204      	strlt	r2, [sp, #16]
 8009e04:	7823      	ldrb	r3, [r4, #0]
 8009e06:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e08:	d10a      	bne.n	8009e20 <_svfiprintf_r+0x130>
 8009e0a:	7863      	ldrb	r3, [r4, #1]
 8009e0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e0e:	d132      	bne.n	8009e76 <_svfiprintf_r+0x186>
 8009e10:	9b03      	ldr	r3, [sp, #12]
 8009e12:	3402      	adds	r4, #2
 8009e14:	1d1a      	adds	r2, r3, #4
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	9203      	str	r2, [sp, #12]
 8009e1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e1e:	9305      	str	r3, [sp, #20]
 8009e20:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009ed8 <_svfiprintf_r+0x1e8>
 8009e24:	2203      	movs	r2, #3
 8009e26:	4650      	mov	r0, sl
 8009e28:	7821      	ldrb	r1, [r4, #0]
 8009e2a:	f7fd ff90 	bl	8007d4e <memchr>
 8009e2e:	b138      	cbz	r0, 8009e40 <_svfiprintf_r+0x150>
 8009e30:	2240      	movs	r2, #64	@ 0x40
 8009e32:	9b04      	ldr	r3, [sp, #16]
 8009e34:	eba0 000a 	sub.w	r0, r0, sl
 8009e38:	4082      	lsls	r2, r0
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	3401      	adds	r4, #1
 8009e3e:	9304      	str	r3, [sp, #16]
 8009e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e44:	2206      	movs	r2, #6
 8009e46:	4825      	ldr	r0, [pc, #148]	@ (8009edc <_svfiprintf_r+0x1ec>)
 8009e48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e4c:	f7fd ff7f 	bl	8007d4e <memchr>
 8009e50:	2800      	cmp	r0, #0
 8009e52:	d036      	beq.n	8009ec2 <_svfiprintf_r+0x1d2>
 8009e54:	4b22      	ldr	r3, [pc, #136]	@ (8009ee0 <_svfiprintf_r+0x1f0>)
 8009e56:	bb1b      	cbnz	r3, 8009ea0 <_svfiprintf_r+0x1b0>
 8009e58:	9b03      	ldr	r3, [sp, #12]
 8009e5a:	3307      	adds	r3, #7
 8009e5c:	f023 0307 	bic.w	r3, r3, #7
 8009e60:	3308      	adds	r3, #8
 8009e62:	9303      	str	r3, [sp, #12]
 8009e64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e66:	4433      	add	r3, r6
 8009e68:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e6a:	e76a      	b.n	8009d42 <_svfiprintf_r+0x52>
 8009e6c:	460c      	mov	r4, r1
 8009e6e:	2001      	movs	r0, #1
 8009e70:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e74:	e7a8      	b.n	8009dc8 <_svfiprintf_r+0xd8>
 8009e76:	2300      	movs	r3, #0
 8009e78:	f04f 0c0a 	mov.w	ip, #10
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	3401      	adds	r4, #1
 8009e80:	9305      	str	r3, [sp, #20]
 8009e82:	4620      	mov	r0, r4
 8009e84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e88:	3a30      	subs	r2, #48	@ 0x30
 8009e8a:	2a09      	cmp	r2, #9
 8009e8c:	d903      	bls.n	8009e96 <_svfiprintf_r+0x1a6>
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d0c6      	beq.n	8009e20 <_svfiprintf_r+0x130>
 8009e92:	9105      	str	r1, [sp, #20]
 8009e94:	e7c4      	b.n	8009e20 <_svfiprintf_r+0x130>
 8009e96:	4604      	mov	r4, r0
 8009e98:	2301      	movs	r3, #1
 8009e9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e9e:	e7f0      	b.n	8009e82 <_svfiprintf_r+0x192>
 8009ea0:	ab03      	add	r3, sp, #12
 8009ea2:	9300      	str	r3, [sp, #0]
 8009ea4:	462a      	mov	r2, r5
 8009ea6:	4638      	mov	r0, r7
 8009ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8009ee4 <_svfiprintf_r+0x1f4>)
 8009eaa:	a904      	add	r1, sp, #16
 8009eac:	f7fd f98e 	bl	80071cc <_printf_float>
 8009eb0:	1c42      	adds	r2, r0, #1
 8009eb2:	4606      	mov	r6, r0
 8009eb4:	d1d6      	bne.n	8009e64 <_svfiprintf_r+0x174>
 8009eb6:	89ab      	ldrh	r3, [r5, #12]
 8009eb8:	065b      	lsls	r3, r3, #25
 8009eba:	f53f af2d 	bmi.w	8009d18 <_svfiprintf_r+0x28>
 8009ebe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ec0:	e72c      	b.n	8009d1c <_svfiprintf_r+0x2c>
 8009ec2:	ab03      	add	r3, sp, #12
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	462a      	mov	r2, r5
 8009ec8:	4638      	mov	r0, r7
 8009eca:	4b06      	ldr	r3, [pc, #24]	@ (8009ee4 <_svfiprintf_r+0x1f4>)
 8009ecc:	a904      	add	r1, sp, #16
 8009ece:	f7fd fc1b 	bl	8007708 <_printf_i>
 8009ed2:	e7ed      	b.n	8009eb0 <_svfiprintf_r+0x1c0>
 8009ed4:	0800ae40 	.word	0x0800ae40
 8009ed8:	0800ae46 	.word	0x0800ae46
 8009edc:	0800ae4a 	.word	0x0800ae4a
 8009ee0:	080071cd 	.word	0x080071cd
 8009ee4:	08009c3b 	.word	0x08009c3b

08009ee8 <__sflush_r>:
 8009ee8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eee:	0716      	lsls	r6, r2, #28
 8009ef0:	4605      	mov	r5, r0
 8009ef2:	460c      	mov	r4, r1
 8009ef4:	d454      	bmi.n	8009fa0 <__sflush_r+0xb8>
 8009ef6:	684b      	ldr	r3, [r1, #4]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	dc02      	bgt.n	8009f02 <__sflush_r+0x1a>
 8009efc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	dd48      	ble.n	8009f94 <__sflush_r+0xac>
 8009f02:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f04:	2e00      	cmp	r6, #0
 8009f06:	d045      	beq.n	8009f94 <__sflush_r+0xac>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009f0e:	682f      	ldr	r7, [r5, #0]
 8009f10:	6a21      	ldr	r1, [r4, #32]
 8009f12:	602b      	str	r3, [r5, #0]
 8009f14:	d030      	beq.n	8009f78 <__sflush_r+0x90>
 8009f16:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009f18:	89a3      	ldrh	r3, [r4, #12]
 8009f1a:	0759      	lsls	r1, r3, #29
 8009f1c:	d505      	bpl.n	8009f2a <__sflush_r+0x42>
 8009f1e:	6863      	ldr	r3, [r4, #4]
 8009f20:	1ad2      	subs	r2, r2, r3
 8009f22:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009f24:	b10b      	cbz	r3, 8009f2a <__sflush_r+0x42>
 8009f26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009f28:	1ad2      	subs	r2, r2, r3
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	4628      	mov	r0, r5
 8009f2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009f30:	6a21      	ldr	r1, [r4, #32]
 8009f32:	47b0      	blx	r6
 8009f34:	1c43      	adds	r3, r0, #1
 8009f36:	89a3      	ldrh	r3, [r4, #12]
 8009f38:	d106      	bne.n	8009f48 <__sflush_r+0x60>
 8009f3a:	6829      	ldr	r1, [r5, #0]
 8009f3c:	291d      	cmp	r1, #29
 8009f3e:	d82b      	bhi.n	8009f98 <__sflush_r+0xb0>
 8009f40:	4a28      	ldr	r2, [pc, #160]	@ (8009fe4 <__sflush_r+0xfc>)
 8009f42:	410a      	asrs	r2, r1
 8009f44:	07d6      	lsls	r6, r2, #31
 8009f46:	d427      	bmi.n	8009f98 <__sflush_r+0xb0>
 8009f48:	2200      	movs	r2, #0
 8009f4a:	6062      	str	r2, [r4, #4]
 8009f4c:	6922      	ldr	r2, [r4, #16]
 8009f4e:	04d9      	lsls	r1, r3, #19
 8009f50:	6022      	str	r2, [r4, #0]
 8009f52:	d504      	bpl.n	8009f5e <__sflush_r+0x76>
 8009f54:	1c42      	adds	r2, r0, #1
 8009f56:	d101      	bne.n	8009f5c <__sflush_r+0x74>
 8009f58:	682b      	ldr	r3, [r5, #0]
 8009f5a:	b903      	cbnz	r3, 8009f5e <__sflush_r+0x76>
 8009f5c:	6560      	str	r0, [r4, #84]	@ 0x54
 8009f5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009f60:	602f      	str	r7, [r5, #0]
 8009f62:	b1b9      	cbz	r1, 8009f94 <__sflush_r+0xac>
 8009f64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009f68:	4299      	cmp	r1, r3
 8009f6a:	d002      	beq.n	8009f72 <__sflush_r+0x8a>
 8009f6c:	4628      	mov	r0, r5
 8009f6e:	f7fe fd67 	bl	8008a40 <_free_r>
 8009f72:	2300      	movs	r3, #0
 8009f74:	6363      	str	r3, [r4, #52]	@ 0x34
 8009f76:	e00d      	b.n	8009f94 <__sflush_r+0xac>
 8009f78:	2301      	movs	r3, #1
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	47b0      	blx	r6
 8009f7e:	4602      	mov	r2, r0
 8009f80:	1c50      	adds	r0, r2, #1
 8009f82:	d1c9      	bne.n	8009f18 <__sflush_r+0x30>
 8009f84:	682b      	ldr	r3, [r5, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d0c6      	beq.n	8009f18 <__sflush_r+0x30>
 8009f8a:	2b1d      	cmp	r3, #29
 8009f8c:	d001      	beq.n	8009f92 <__sflush_r+0xaa>
 8009f8e:	2b16      	cmp	r3, #22
 8009f90:	d11d      	bne.n	8009fce <__sflush_r+0xe6>
 8009f92:	602f      	str	r7, [r5, #0]
 8009f94:	2000      	movs	r0, #0
 8009f96:	e021      	b.n	8009fdc <__sflush_r+0xf4>
 8009f98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f9c:	b21b      	sxth	r3, r3
 8009f9e:	e01a      	b.n	8009fd6 <__sflush_r+0xee>
 8009fa0:	690f      	ldr	r7, [r1, #16]
 8009fa2:	2f00      	cmp	r7, #0
 8009fa4:	d0f6      	beq.n	8009f94 <__sflush_r+0xac>
 8009fa6:	0793      	lsls	r3, r2, #30
 8009fa8:	bf18      	it	ne
 8009faa:	2300      	movne	r3, #0
 8009fac:	680e      	ldr	r6, [r1, #0]
 8009fae:	bf08      	it	eq
 8009fb0:	694b      	ldreq	r3, [r1, #20]
 8009fb2:	1bf6      	subs	r6, r6, r7
 8009fb4:	600f      	str	r7, [r1, #0]
 8009fb6:	608b      	str	r3, [r1, #8]
 8009fb8:	2e00      	cmp	r6, #0
 8009fba:	ddeb      	ble.n	8009f94 <__sflush_r+0xac>
 8009fbc:	4633      	mov	r3, r6
 8009fbe:	463a      	mov	r2, r7
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	6a21      	ldr	r1, [r4, #32]
 8009fc4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009fc8:	47e0      	blx	ip
 8009fca:	2800      	cmp	r0, #0
 8009fcc:	dc07      	bgt.n	8009fde <__sflush_r+0xf6>
 8009fce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009fd2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8009fda:	81a3      	strh	r3, [r4, #12]
 8009fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fde:	4407      	add	r7, r0
 8009fe0:	1a36      	subs	r6, r6, r0
 8009fe2:	e7e9      	b.n	8009fb8 <__sflush_r+0xd0>
 8009fe4:	dfbffffe 	.word	0xdfbffffe

08009fe8 <_fflush_r>:
 8009fe8:	b538      	push	{r3, r4, r5, lr}
 8009fea:	690b      	ldr	r3, [r1, #16]
 8009fec:	4605      	mov	r5, r0
 8009fee:	460c      	mov	r4, r1
 8009ff0:	b913      	cbnz	r3, 8009ff8 <_fflush_r+0x10>
 8009ff2:	2500      	movs	r5, #0
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	bd38      	pop	{r3, r4, r5, pc}
 8009ff8:	b118      	cbz	r0, 800a002 <_fflush_r+0x1a>
 8009ffa:	6a03      	ldr	r3, [r0, #32]
 8009ffc:	b90b      	cbnz	r3, 800a002 <_fflush_r+0x1a>
 8009ffe:	f7fd fd2f 	bl	8007a60 <__sinit>
 800a002:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d0f3      	beq.n	8009ff2 <_fflush_r+0xa>
 800a00a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a00c:	07d0      	lsls	r0, r2, #31
 800a00e:	d404      	bmi.n	800a01a <_fflush_r+0x32>
 800a010:	0599      	lsls	r1, r3, #22
 800a012:	d402      	bmi.n	800a01a <_fflush_r+0x32>
 800a014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a016:	f7fd fe90 	bl	8007d3a <__retarget_lock_acquire_recursive>
 800a01a:	4628      	mov	r0, r5
 800a01c:	4621      	mov	r1, r4
 800a01e:	f7ff ff63 	bl	8009ee8 <__sflush_r>
 800a022:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a024:	4605      	mov	r5, r0
 800a026:	07da      	lsls	r2, r3, #31
 800a028:	d4e4      	bmi.n	8009ff4 <_fflush_r+0xc>
 800a02a:	89a3      	ldrh	r3, [r4, #12]
 800a02c:	059b      	lsls	r3, r3, #22
 800a02e:	d4e1      	bmi.n	8009ff4 <_fflush_r+0xc>
 800a030:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a032:	f7fd fe83 	bl	8007d3c <__retarget_lock_release_recursive>
 800a036:	e7dd      	b.n	8009ff4 <_fflush_r+0xc>

0800a038 <memmove>:
 800a038:	4288      	cmp	r0, r1
 800a03a:	b510      	push	{r4, lr}
 800a03c:	eb01 0402 	add.w	r4, r1, r2
 800a040:	d902      	bls.n	800a048 <memmove+0x10>
 800a042:	4284      	cmp	r4, r0
 800a044:	4623      	mov	r3, r4
 800a046:	d807      	bhi.n	800a058 <memmove+0x20>
 800a048:	1e43      	subs	r3, r0, #1
 800a04a:	42a1      	cmp	r1, r4
 800a04c:	d008      	beq.n	800a060 <memmove+0x28>
 800a04e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a052:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a056:	e7f8      	b.n	800a04a <memmove+0x12>
 800a058:	4601      	mov	r1, r0
 800a05a:	4402      	add	r2, r0
 800a05c:	428a      	cmp	r2, r1
 800a05e:	d100      	bne.n	800a062 <memmove+0x2a>
 800a060:	bd10      	pop	{r4, pc}
 800a062:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a066:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a06a:	e7f7      	b.n	800a05c <memmove+0x24>

0800a06c <_sbrk_r>:
 800a06c:	b538      	push	{r3, r4, r5, lr}
 800a06e:	2300      	movs	r3, #0
 800a070:	4d05      	ldr	r5, [pc, #20]	@ (800a088 <_sbrk_r+0x1c>)
 800a072:	4604      	mov	r4, r0
 800a074:	4608      	mov	r0, r1
 800a076:	602b      	str	r3, [r5, #0]
 800a078:	f7f7 faa0 	bl	80015bc <_sbrk>
 800a07c:	1c43      	adds	r3, r0, #1
 800a07e:	d102      	bne.n	800a086 <_sbrk_r+0x1a>
 800a080:	682b      	ldr	r3, [r5, #0]
 800a082:	b103      	cbz	r3, 800a086 <_sbrk_r+0x1a>
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	bd38      	pop	{r3, r4, r5, pc}
 800a088:	20000b74 	.word	0x20000b74

0800a08c <__assert_func>:
 800a08c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a08e:	4614      	mov	r4, r2
 800a090:	461a      	mov	r2, r3
 800a092:	4b09      	ldr	r3, [pc, #36]	@ (800a0b8 <__assert_func+0x2c>)
 800a094:	4605      	mov	r5, r0
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	68d8      	ldr	r0, [r3, #12]
 800a09a:	b954      	cbnz	r4, 800a0b2 <__assert_func+0x26>
 800a09c:	4b07      	ldr	r3, [pc, #28]	@ (800a0bc <__assert_func+0x30>)
 800a09e:	461c      	mov	r4, r3
 800a0a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a0a4:	9100      	str	r1, [sp, #0]
 800a0a6:	462b      	mov	r3, r5
 800a0a8:	4905      	ldr	r1, [pc, #20]	@ (800a0c0 <__assert_func+0x34>)
 800a0aa:	f000 f84f 	bl	800a14c <fiprintf>
 800a0ae:	f000 f85f 	bl	800a170 <abort>
 800a0b2:	4b04      	ldr	r3, [pc, #16]	@ (800a0c4 <__assert_func+0x38>)
 800a0b4:	e7f4      	b.n	800a0a0 <__assert_func+0x14>
 800a0b6:	bf00      	nop
 800a0b8:	2000019c 	.word	0x2000019c
 800a0bc:	0800ae8c 	.word	0x0800ae8c
 800a0c0:	0800ae5e 	.word	0x0800ae5e
 800a0c4:	0800ae51 	.word	0x0800ae51

0800a0c8 <_calloc_r>:
 800a0c8:	b570      	push	{r4, r5, r6, lr}
 800a0ca:	fba1 5402 	umull	r5, r4, r1, r2
 800a0ce:	b93c      	cbnz	r4, 800a0e0 <_calloc_r+0x18>
 800a0d0:	4629      	mov	r1, r5
 800a0d2:	f7ff f861 	bl	8009198 <_malloc_r>
 800a0d6:	4606      	mov	r6, r0
 800a0d8:	b928      	cbnz	r0, 800a0e6 <_calloc_r+0x1e>
 800a0da:	2600      	movs	r6, #0
 800a0dc:	4630      	mov	r0, r6
 800a0de:	bd70      	pop	{r4, r5, r6, pc}
 800a0e0:	220c      	movs	r2, #12
 800a0e2:	6002      	str	r2, [r0, #0]
 800a0e4:	e7f9      	b.n	800a0da <_calloc_r+0x12>
 800a0e6:	462a      	mov	r2, r5
 800a0e8:	4621      	mov	r1, r4
 800a0ea:	f7fd fd6b 	bl	8007bc4 <memset>
 800a0ee:	e7f5      	b.n	800a0dc <_calloc_r+0x14>

0800a0f0 <_realloc_r>:
 800a0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f4:	4680      	mov	r8, r0
 800a0f6:	4615      	mov	r5, r2
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	b921      	cbnz	r1, 800a106 <_realloc_r+0x16>
 800a0fc:	4611      	mov	r1, r2
 800a0fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a102:	f7ff b849 	b.w	8009198 <_malloc_r>
 800a106:	b92a      	cbnz	r2, 800a114 <_realloc_r+0x24>
 800a108:	f7fe fc9a 	bl	8008a40 <_free_r>
 800a10c:	2400      	movs	r4, #0
 800a10e:	4620      	mov	r0, r4
 800a110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a114:	f000 f833 	bl	800a17e <_malloc_usable_size_r>
 800a118:	4285      	cmp	r5, r0
 800a11a:	4606      	mov	r6, r0
 800a11c:	d802      	bhi.n	800a124 <_realloc_r+0x34>
 800a11e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a122:	d8f4      	bhi.n	800a10e <_realloc_r+0x1e>
 800a124:	4629      	mov	r1, r5
 800a126:	4640      	mov	r0, r8
 800a128:	f7ff f836 	bl	8009198 <_malloc_r>
 800a12c:	4607      	mov	r7, r0
 800a12e:	2800      	cmp	r0, #0
 800a130:	d0ec      	beq.n	800a10c <_realloc_r+0x1c>
 800a132:	42b5      	cmp	r5, r6
 800a134:	462a      	mov	r2, r5
 800a136:	4621      	mov	r1, r4
 800a138:	bf28      	it	cs
 800a13a:	4632      	movcs	r2, r6
 800a13c:	f7fd fe15 	bl	8007d6a <memcpy>
 800a140:	4621      	mov	r1, r4
 800a142:	4640      	mov	r0, r8
 800a144:	f7fe fc7c 	bl	8008a40 <_free_r>
 800a148:	463c      	mov	r4, r7
 800a14a:	e7e0      	b.n	800a10e <_realloc_r+0x1e>

0800a14c <fiprintf>:
 800a14c:	b40e      	push	{r1, r2, r3}
 800a14e:	b503      	push	{r0, r1, lr}
 800a150:	4601      	mov	r1, r0
 800a152:	ab03      	add	r3, sp, #12
 800a154:	4805      	ldr	r0, [pc, #20]	@ (800a16c <fiprintf+0x20>)
 800a156:	f853 2b04 	ldr.w	r2, [r3], #4
 800a15a:	6800      	ldr	r0, [r0, #0]
 800a15c:	9301      	str	r3, [sp, #4]
 800a15e:	f000 f83d 	bl	800a1dc <_vfiprintf_r>
 800a162:	b002      	add	sp, #8
 800a164:	f85d eb04 	ldr.w	lr, [sp], #4
 800a168:	b003      	add	sp, #12
 800a16a:	4770      	bx	lr
 800a16c:	2000019c 	.word	0x2000019c

0800a170 <abort>:
 800a170:	2006      	movs	r0, #6
 800a172:	b508      	push	{r3, lr}
 800a174:	f000 fa06 	bl	800a584 <raise>
 800a178:	2001      	movs	r0, #1
 800a17a:	f7f7 f9aa 	bl	80014d2 <_exit>

0800a17e <_malloc_usable_size_r>:
 800a17e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a182:	1f18      	subs	r0, r3, #4
 800a184:	2b00      	cmp	r3, #0
 800a186:	bfbc      	itt	lt
 800a188:	580b      	ldrlt	r3, [r1, r0]
 800a18a:	18c0      	addlt	r0, r0, r3
 800a18c:	4770      	bx	lr

0800a18e <__sfputc_r>:
 800a18e:	6893      	ldr	r3, [r2, #8]
 800a190:	b410      	push	{r4}
 800a192:	3b01      	subs	r3, #1
 800a194:	2b00      	cmp	r3, #0
 800a196:	6093      	str	r3, [r2, #8]
 800a198:	da07      	bge.n	800a1aa <__sfputc_r+0x1c>
 800a19a:	6994      	ldr	r4, [r2, #24]
 800a19c:	42a3      	cmp	r3, r4
 800a19e:	db01      	blt.n	800a1a4 <__sfputc_r+0x16>
 800a1a0:	290a      	cmp	r1, #10
 800a1a2:	d102      	bne.n	800a1aa <__sfputc_r+0x1c>
 800a1a4:	bc10      	pop	{r4}
 800a1a6:	f000 b931 	b.w	800a40c <__swbuf_r>
 800a1aa:	6813      	ldr	r3, [r2, #0]
 800a1ac:	1c58      	adds	r0, r3, #1
 800a1ae:	6010      	str	r0, [r2, #0]
 800a1b0:	7019      	strb	r1, [r3, #0]
 800a1b2:	4608      	mov	r0, r1
 800a1b4:	bc10      	pop	{r4}
 800a1b6:	4770      	bx	lr

0800a1b8 <__sfputs_r>:
 800a1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ba:	4606      	mov	r6, r0
 800a1bc:	460f      	mov	r7, r1
 800a1be:	4614      	mov	r4, r2
 800a1c0:	18d5      	adds	r5, r2, r3
 800a1c2:	42ac      	cmp	r4, r5
 800a1c4:	d101      	bne.n	800a1ca <__sfputs_r+0x12>
 800a1c6:	2000      	movs	r0, #0
 800a1c8:	e007      	b.n	800a1da <__sfputs_r+0x22>
 800a1ca:	463a      	mov	r2, r7
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1d2:	f7ff ffdc 	bl	800a18e <__sfputc_r>
 800a1d6:	1c43      	adds	r3, r0, #1
 800a1d8:	d1f3      	bne.n	800a1c2 <__sfputs_r+0xa>
 800a1da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a1dc <_vfiprintf_r>:
 800a1dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e0:	460d      	mov	r5, r1
 800a1e2:	4614      	mov	r4, r2
 800a1e4:	4698      	mov	r8, r3
 800a1e6:	4606      	mov	r6, r0
 800a1e8:	b09d      	sub	sp, #116	@ 0x74
 800a1ea:	b118      	cbz	r0, 800a1f4 <_vfiprintf_r+0x18>
 800a1ec:	6a03      	ldr	r3, [r0, #32]
 800a1ee:	b90b      	cbnz	r3, 800a1f4 <_vfiprintf_r+0x18>
 800a1f0:	f7fd fc36 	bl	8007a60 <__sinit>
 800a1f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a1f6:	07d9      	lsls	r1, r3, #31
 800a1f8:	d405      	bmi.n	800a206 <_vfiprintf_r+0x2a>
 800a1fa:	89ab      	ldrh	r3, [r5, #12]
 800a1fc:	059a      	lsls	r2, r3, #22
 800a1fe:	d402      	bmi.n	800a206 <_vfiprintf_r+0x2a>
 800a200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a202:	f7fd fd9a 	bl	8007d3a <__retarget_lock_acquire_recursive>
 800a206:	89ab      	ldrh	r3, [r5, #12]
 800a208:	071b      	lsls	r3, r3, #28
 800a20a:	d501      	bpl.n	800a210 <_vfiprintf_r+0x34>
 800a20c:	692b      	ldr	r3, [r5, #16]
 800a20e:	b99b      	cbnz	r3, 800a238 <_vfiprintf_r+0x5c>
 800a210:	4629      	mov	r1, r5
 800a212:	4630      	mov	r0, r6
 800a214:	f000 f938 	bl	800a488 <__swsetup_r>
 800a218:	b170      	cbz	r0, 800a238 <_vfiprintf_r+0x5c>
 800a21a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a21c:	07dc      	lsls	r4, r3, #31
 800a21e:	d504      	bpl.n	800a22a <_vfiprintf_r+0x4e>
 800a220:	f04f 30ff 	mov.w	r0, #4294967295
 800a224:	b01d      	add	sp, #116	@ 0x74
 800a226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a22a:	89ab      	ldrh	r3, [r5, #12]
 800a22c:	0598      	lsls	r0, r3, #22
 800a22e:	d4f7      	bmi.n	800a220 <_vfiprintf_r+0x44>
 800a230:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a232:	f7fd fd83 	bl	8007d3c <__retarget_lock_release_recursive>
 800a236:	e7f3      	b.n	800a220 <_vfiprintf_r+0x44>
 800a238:	2300      	movs	r3, #0
 800a23a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a23c:	2320      	movs	r3, #32
 800a23e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a242:	2330      	movs	r3, #48	@ 0x30
 800a244:	f04f 0901 	mov.w	r9, #1
 800a248:	f8cd 800c 	str.w	r8, [sp, #12]
 800a24c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800a3f8 <_vfiprintf_r+0x21c>
 800a250:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a254:	4623      	mov	r3, r4
 800a256:	469a      	mov	sl, r3
 800a258:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a25c:	b10a      	cbz	r2, 800a262 <_vfiprintf_r+0x86>
 800a25e:	2a25      	cmp	r2, #37	@ 0x25
 800a260:	d1f9      	bne.n	800a256 <_vfiprintf_r+0x7a>
 800a262:	ebba 0b04 	subs.w	fp, sl, r4
 800a266:	d00b      	beq.n	800a280 <_vfiprintf_r+0xa4>
 800a268:	465b      	mov	r3, fp
 800a26a:	4622      	mov	r2, r4
 800a26c:	4629      	mov	r1, r5
 800a26e:	4630      	mov	r0, r6
 800a270:	f7ff ffa2 	bl	800a1b8 <__sfputs_r>
 800a274:	3001      	adds	r0, #1
 800a276:	f000 80a7 	beq.w	800a3c8 <_vfiprintf_r+0x1ec>
 800a27a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a27c:	445a      	add	r2, fp
 800a27e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a280:	f89a 3000 	ldrb.w	r3, [sl]
 800a284:	2b00      	cmp	r3, #0
 800a286:	f000 809f 	beq.w	800a3c8 <_vfiprintf_r+0x1ec>
 800a28a:	2300      	movs	r3, #0
 800a28c:	f04f 32ff 	mov.w	r2, #4294967295
 800a290:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a294:	f10a 0a01 	add.w	sl, sl, #1
 800a298:	9304      	str	r3, [sp, #16]
 800a29a:	9307      	str	r3, [sp, #28]
 800a29c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2a0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2a2:	4654      	mov	r4, sl
 800a2a4:	2205      	movs	r2, #5
 800a2a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2aa:	4853      	ldr	r0, [pc, #332]	@ (800a3f8 <_vfiprintf_r+0x21c>)
 800a2ac:	f7fd fd4f 	bl	8007d4e <memchr>
 800a2b0:	9a04      	ldr	r2, [sp, #16]
 800a2b2:	b9d8      	cbnz	r0, 800a2ec <_vfiprintf_r+0x110>
 800a2b4:	06d1      	lsls	r1, r2, #27
 800a2b6:	bf44      	itt	mi
 800a2b8:	2320      	movmi	r3, #32
 800a2ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2be:	0713      	lsls	r3, r2, #28
 800a2c0:	bf44      	itt	mi
 800a2c2:	232b      	movmi	r3, #43	@ 0x2b
 800a2c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a2cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2ce:	d015      	beq.n	800a2fc <_vfiprintf_r+0x120>
 800a2d0:	4654      	mov	r4, sl
 800a2d2:	2000      	movs	r0, #0
 800a2d4:	f04f 0c0a 	mov.w	ip, #10
 800a2d8:	9a07      	ldr	r2, [sp, #28]
 800a2da:	4621      	mov	r1, r4
 800a2dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2e0:	3b30      	subs	r3, #48	@ 0x30
 800a2e2:	2b09      	cmp	r3, #9
 800a2e4:	d94b      	bls.n	800a37e <_vfiprintf_r+0x1a2>
 800a2e6:	b1b0      	cbz	r0, 800a316 <_vfiprintf_r+0x13a>
 800a2e8:	9207      	str	r2, [sp, #28]
 800a2ea:	e014      	b.n	800a316 <_vfiprintf_r+0x13a>
 800a2ec:	eba0 0308 	sub.w	r3, r0, r8
 800a2f0:	fa09 f303 	lsl.w	r3, r9, r3
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	46a2      	mov	sl, r4
 800a2f8:	9304      	str	r3, [sp, #16]
 800a2fa:	e7d2      	b.n	800a2a2 <_vfiprintf_r+0xc6>
 800a2fc:	9b03      	ldr	r3, [sp, #12]
 800a2fe:	1d19      	adds	r1, r3, #4
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	9103      	str	r1, [sp, #12]
 800a304:	2b00      	cmp	r3, #0
 800a306:	bfbb      	ittet	lt
 800a308:	425b      	neglt	r3, r3
 800a30a:	f042 0202 	orrlt.w	r2, r2, #2
 800a30e:	9307      	strge	r3, [sp, #28]
 800a310:	9307      	strlt	r3, [sp, #28]
 800a312:	bfb8      	it	lt
 800a314:	9204      	strlt	r2, [sp, #16]
 800a316:	7823      	ldrb	r3, [r4, #0]
 800a318:	2b2e      	cmp	r3, #46	@ 0x2e
 800a31a:	d10a      	bne.n	800a332 <_vfiprintf_r+0x156>
 800a31c:	7863      	ldrb	r3, [r4, #1]
 800a31e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a320:	d132      	bne.n	800a388 <_vfiprintf_r+0x1ac>
 800a322:	9b03      	ldr	r3, [sp, #12]
 800a324:	3402      	adds	r4, #2
 800a326:	1d1a      	adds	r2, r3, #4
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	9203      	str	r2, [sp, #12]
 800a32c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a330:	9305      	str	r3, [sp, #20]
 800a332:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800a3fc <_vfiprintf_r+0x220>
 800a336:	2203      	movs	r2, #3
 800a338:	4650      	mov	r0, sl
 800a33a:	7821      	ldrb	r1, [r4, #0]
 800a33c:	f7fd fd07 	bl	8007d4e <memchr>
 800a340:	b138      	cbz	r0, 800a352 <_vfiprintf_r+0x176>
 800a342:	2240      	movs	r2, #64	@ 0x40
 800a344:	9b04      	ldr	r3, [sp, #16]
 800a346:	eba0 000a 	sub.w	r0, r0, sl
 800a34a:	4082      	lsls	r2, r0
 800a34c:	4313      	orrs	r3, r2
 800a34e:	3401      	adds	r4, #1
 800a350:	9304      	str	r3, [sp, #16]
 800a352:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a356:	2206      	movs	r2, #6
 800a358:	4829      	ldr	r0, [pc, #164]	@ (800a400 <_vfiprintf_r+0x224>)
 800a35a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a35e:	f7fd fcf6 	bl	8007d4e <memchr>
 800a362:	2800      	cmp	r0, #0
 800a364:	d03f      	beq.n	800a3e6 <_vfiprintf_r+0x20a>
 800a366:	4b27      	ldr	r3, [pc, #156]	@ (800a404 <_vfiprintf_r+0x228>)
 800a368:	bb1b      	cbnz	r3, 800a3b2 <_vfiprintf_r+0x1d6>
 800a36a:	9b03      	ldr	r3, [sp, #12]
 800a36c:	3307      	adds	r3, #7
 800a36e:	f023 0307 	bic.w	r3, r3, #7
 800a372:	3308      	adds	r3, #8
 800a374:	9303      	str	r3, [sp, #12]
 800a376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a378:	443b      	add	r3, r7
 800a37a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a37c:	e76a      	b.n	800a254 <_vfiprintf_r+0x78>
 800a37e:	460c      	mov	r4, r1
 800a380:	2001      	movs	r0, #1
 800a382:	fb0c 3202 	mla	r2, ip, r2, r3
 800a386:	e7a8      	b.n	800a2da <_vfiprintf_r+0xfe>
 800a388:	2300      	movs	r3, #0
 800a38a:	f04f 0c0a 	mov.w	ip, #10
 800a38e:	4619      	mov	r1, r3
 800a390:	3401      	adds	r4, #1
 800a392:	9305      	str	r3, [sp, #20]
 800a394:	4620      	mov	r0, r4
 800a396:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a39a:	3a30      	subs	r2, #48	@ 0x30
 800a39c:	2a09      	cmp	r2, #9
 800a39e:	d903      	bls.n	800a3a8 <_vfiprintf_r+0x1cc>
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d0c6      	beq.n	800a332 <_vfiprintf_r+0x156>
 800a3a4:	9105      	str	r1, [sp, #20]
 800a3a6:	e7c4      	b.n	800a332 <_vfiprintf_r+0x156>
 800a3a8:	4604      	mov	r4, r0
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3b0:	e7f0      	b.n	800a394 <_vfiprintf_r+0x1b8>
 800a3b2:	ab03      	add	r3, sp, #12
 800a3b4:	9300      	str	r3, [sp, #0]
 800a3b6:	462a      	mov	r2, r5
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	4b13      	ldr	r3, [pc, #76]	@ (800a408 <_vfiprintf_r+0x22c>)
 800a3bc:	a904      	add	r1, sp, #16
 800a3be:	f7fc ff05 	bl	80071cc <_printf_float>
 800a3c2:	4607      	mov	r7, r0
 800a3c4:	1c78      	adds	r0, r7, #1
 800a3c6:	d1d6      	bne.n	800a376 <_vfiprintf_r+0x19a>
 800a3c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3ca:	07d9      	lsls	r1, r3, #31
 800a3cc:	d405      	bmi.n	800a3da <_vfiprintf_r+0x1fe>
 800a3ce:	89ab      	ldrh	r3, [r5, #12]
 800a3d0:	059a      	lsls	r2, r3, #22
 800a3d2:	d402      	bmi.n	800a3da <_vfiprintf_r+0x1fe>
 800a3d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3d6:	f7fd fcb1 	bl	8007d3c <__retarget_lock_release_recursive>
 800a3da:	89ab      	ldrh	r3, [r5, #12]
 800a3dc:	065b      	lsls	r3, r3, #25
 800a3de:	f53f af1f 	bmi.w	800a220 <_vfiprintf_r+0x44>
 800a3e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3e4:	e71e      	b.n	800a224 <_vfiprintf_r+0x48>
 800a3e6:	ab03      	add	r3, sp, #12
 800a3e8:	9300      	str	r3, [sp, #0]
 800a3ea:	462a      	mov	r2, r5
 800a3ec:	4630      	mov	r0, r6
 800a3ee:	4b06      	ldr	r3, [pc, #24]	@ (800a408 <_vfiprintf_r+0x22c>)
 800a3f0:	a904      	add	r1, sp, #16
 800a3f2:	f7fd f989 	bl	8007708 <_printf_i>
 800a3f6:	e7e4      	b.n	800a3c2 <_vfiprintf_r+0x1e6>
 800a3f8:	0800ae40 	.word	0x0800ae40
 800a3fc:	0800ae46 	.word	0x0800ae46
 800a400:	0800ae4a 	.word	0x0800ae4a
 800a404:	080071cd 	.word	0x080071cd
 800a408:	0800a1b9 	.word	0x0800a1b9

0800a40c <__swbuf_r>:
 800a40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a40e:	460e      	mov	r6, r1
 800a410:	4614      	mov	r4, r2
 800a412:	4605      	mov	r5, r0
 800a414:	b118      	cbz	r0, 800a41e <__swbuf_r+0x12>
 800a416:	6a03      	ldr	r3, [r0, #32]
 800a418:	b90b      	cbnz	r3, 800a41e <__swbuf_r+0x12>
 800a41a:	f7fd fb21 	bl	8007a60 <__sinit>
 800a41e:	69a3      	ldr	r3, [r4, #24]
 800a420:	60a3      	str	r3, [r4, #8]
 800a422:	89a3      	ldrh	r3, [r4, #12]
 800a424:	071a      	lsls	r2, r3, #28
 800a426:	d501      	bpl.n	800a42c <__swbuf_r+0x20>
 800a428:	6923      	ldr	r3, [r4, #16]
 800a42a:	b943      	cbnz	r3, 800a43e <__swbuf_r+0x32>
 800a42c:	4621      	mov	r1, r4
 800a42e:	4628      	mov	r0, r5
 800a430:	f000 f82a 	bl	800a488 <__swsetup_r>
 800a434:	b118      	cbz	r0, 800a43e <__swbuf_r+0x32>
 800a436:	f04f 37ff 	mov.w	r7, #4294967295
 800a43a:	4638      	mov	r0, r7
 800a43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a43e:	6823      	ldr	r3, [r4, #0]
 800a440:	6922      	ldr	r2, [r4, #16]
 800a442:	b2f6      	uxtb	r6, r6
 800a444:	1a98      	subs	r0, r3, r2
 800a446:	6963      	ldr	r3, [r4, #20]
 800a448:	4637      	mov	r7, r6
 800a44a:	4283      	cmp	r3, r0
 800a44c:	dc05      	bgt.n	800a45a <__swbuf_r+0x4e>
 800a44e:	4621      	mov	r1, r4
 800a450:	4628      	mov	r0, r5
 800a452:	f7ff fdc9 	bl	8009fe8 <_fflush_r>
 800a456:	2800      	cmp	r0, #0
 800a458:	d1ed      	bne.n	800a436 <__swbuf_r+0x2a>
 800a45a:	68a3      	ldr	r3, [r4, #8]
 800a45c:	3b01      	subs	r3, #1
 800a45e:	60a3      	str	r3, [r4, #8]
 800a460:	6823      	ldr	r3, [r4, #0]
 800a462:	1c5a      	adds	r2, r3, #1
 800a464:	6022      	str	r2, [r4, #0]
 800a466:	701e      	strb	r6, [r3, #0]
 800a468:	6962      	ldr	r2, [r4, #20]
 800a46a:	1c43      	adds	r3, r0, #1
 800a46c:	429a      	cmp	r2, r3
 800a46e:	d004      	beq.n	800a47a <__swbuf_r+0x6e>
 800a470:	89a3      	ldrh	r3, [r4, #12]
 800a472:	07db      	lsls	r3, r3, #31
 800a474:	d5e1      	bpl.n	800a43a <__swbuf_r+0x2e>
 800a476:	2e0a      	cmp	r6, #10
 800a478:	d1df      	bne.n	800a43a <__swbuf_r+0x2e>
 800a47a:	4621      	mov	r1, r4
 800a47c:	4628      	mov	r0, r5
 800a47e:	f7ff fdb3 	bl	8009fe8 <_fflush_r>
 800a482:	2800      	cmp	r0, #0
 800a484:	d0d9      	beq.n	800a43a <__swbuf_r+0x2e>
 800a486:	e7d6      	b.n	800a436 <__swbuf_r+0x2a>

0800a488 <__swsetup_r>:
 800a488:	b538      	push	{r3, r4, r5, lr}
 800a48a:	4b29      	ldr	r3, [pc, #164]	@ (800a530 <__swsetup_r+0xa8>)
 800a48c:	4605      	mov	r5, r0
 800a48e:	6818      	ldr	r0, [r3, #0]
 800a490:	460c      	mov	r4, r1
 800a492:	b118      	cbz	r0, 800a49c <__swsetup_r+0x14>
 800a494:	6a03      	ldr	r3, [r0, #32]
 800a496:	b90b      	cbnz	r3, 800a49c <__swsetup_r+0x14>
 800a498:	f7fd fae2 	bl	8007a60 <__sinit>
 800a49c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4a0:	0719      	lsls	r1, r3, #28
 800a4a2:	d422      	bmi.n	800a4ea <__swsetup_r+0x62>
 800a4a4:	06da      	lsls	r2, r3, #27
 800a4a6:	d407      	bmi.n	800a4b8 <__swsetup_r+0x30>
 800a4a8:	2209      	movs	r2, #9
 800a4aa:	602a      	str	r2, [r5, #0]
 800a4ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b4:	81a3      	strh	r3, [r4, #12]
 800a4b6:	e033      	b.n	800a520 <__swsetup_r+0x98>
 800a4b8:	0758      	lsls	r0, r3, #29
 800a4ba:	d512      	bpl.n	800a4e2 <__swsetup_r+0x5a>
 800a4bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a4be:	b141      	cbz	r1, 800a4d2 <__swsetup_r+0x4a>
 800a4c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a4c4:	4299      	cmp	r1, r3
 800a4c6:	d002      	beq.n	800a4ce <__swsetup_r+0x46>
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	f7fe fab9 	bl	8008a40 <_free_r>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a4d2:	89a3      	ldrh	r3, [r4, #12]
 800a4d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a4d8:	81a3      	strh	r3, [r4, #12]
 800a4da:	2300      	movs	r3, #0
 800a4dc:	6063      	str	r3, [r4, #4]
 800a4de:	6923      	ldr	r3, [r4, #16]
 800a4e0:	6023      	str	r3, [r4, #0]
 800a4e2:	89a3      	ldrh	r3, [r4, #12]
 800a4e4:	f043 0308 	orr.w	r3, r3, #8
 800a4e8:	81a3      	strh	r3, [r4, #12]
 800a4ea:	6923      	ldr	r3, [r4, #16]
 800a4ec:	b94b      	cbnz	r3, 800a502 <__swsetup_r+0x7a>
 800a4ee:	89a3      	ldrh	r3, [r4, #12]
 800a4f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a4f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a4f8:	d003      	beq.n	800a502 <__swsetup_r+0x7a>
 800a4fa:	4621      	mov	r1, r4
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	f000 f882 	bl	800a606 <__smakebuf_r>
 800a502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a506:	f013 0201 	ands.w	r2, r3, #1
 800a50a:	d00a      	beq.n	800a522 <__swsetup_r+0x9a>
 800a50c:	2200      	movs	r2, #0
 800a50e:	60a2      	str	r2, [r4, #8]
 800a510:	6962      	ldr	r2, [r4, #20]
 800a512:	4252      	negs	r2, r2
 800a514:	61a2      	str	r2, [r4, #24]
 800a516:	6922      	ldr	r2, [r4, #16]
 800a518:	b942      	cbnz	r2, 800a52c <__swsetup_r+0xa4>
 800a51a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a51e:	d1c5      	bne.n	800a4ac <__swsetup_r+0x24>
 800a520:	bd38      	pop	{r3, r4, r5, pc}
 800a522:	0799      	lsls	r1, r3, #30
 800a524:	bf58      	it	pl
 800a526:	6962      	ldrpl	r2, [r4, #20]
 800a528:	60a2      	str	r2, [r4, #8]
 800a52a:	e7f4      	b.n	800a516 <__swsetup_r+0x8e>
 800a52c:	2000      	movs	r0, #0
 800a52e:	e7f7      	b.n	800a520 <__swsetup_r+0x98>
 800a530:	2000019c 	.word	0x2000019c

0800a534 <_raise_r>:
 800a534:	291f      	cmp	r1, #31
 800a536:	b538      	push	{r3, r4, r5, lr}
 800a538:	4605      	mov	r5, r0
 800a53a:	460c      	mov	r4, r1
 800a53c:	d904      	bls.n	800a548 <_raise_r+0x14>
 800a53e:	2316      	movs	r3, #22
 800a540:	6003      	str	r3, [r0, #0]
 800a542:	f04f 30ff 	mov.w	r0, #4294967295
 800a546:	bd38      	pop	{r3, r4, r5, pc}
 800a548:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a54a:	b112      	cbz	r2, 800a552 <_raise_r+0x1e>
 800a54c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a550:	b94b      	cbnz	r3, 800a566 <_raise_r+0x32>
 800a552:	4628      	mov	r0, r5
 800a554:	f000 f830 	bl	800a5b8 <_getpid_r>
 800a558:	4622      	mov	r2, r4
 800a55a:	4601      	mov	r1, r0
 800a55c:	4628      	mov	r0, r5
 800a55e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a562:	f000 b817 	b.w	800a594 <_kill_r>
 800a566:	2b01      	cmp	r3, #1
 800a568:	d00a      	beq.n	800a580 <_raise_r+0x4c>
 800a56a:	1c59      	adds	r1, r3, #1
 800a56c:	d103      	bne.n	800a576 <_raise_r+0x42>
 800a56e:	2316      	movs	r3, #22
 800a570:	6003      	str	r3, [r0, #0]
 800a572:	2001      	movs	r0, #1
 800a574:	e7e7      	b.n	800a546 <_raise_r+0x12>
 800a576:	2100      	movs	r1, #0
 800a578:	4620      	mov	r0, r4
 800a57a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a57e:	4798      	blx	r3
 800a580:	2000      	movs	r0, #0
 800a582:	e7e0      	b.n	800a546 <_raise_r+0x12>

0800a584 <raise>:
 800a584:	4b02      	ldr	r3, [pc, #8]	@ (800a590 <raise+0xc>)
 800a586:	4601      	mov	r1, r0
 800a588:	6818      	ldr	r0, [r3, #0]
 800a58a:	f7ff bfd3 	b.w	800a534 <_raise_r>
 800a58e:	bf00      	nop
 800a590:	2000019c 	.word	0x2000019c

0800a594 <_kill_r>:
 800a594:	b538      	push	{r3, r4, r5, lr}
 800a596:	2300      	movs	r3, #0
 800a598:	4d06      	ldr	r5, [pc, #24]	@ (800a5b4 <_kill_r+0x20>)
 800a59a:	4604      	mov	r4, r0
 800a59c:	4608      	mov	r0, r1
 800a59e:	4611      	mov	r1, r2
 800a5a0:	602b      	str	r3, [r5, #0]
 800a5a2:	f7f6 ff86 	bl	80014b2 <_kill>
 800a5a6:	1c43      	adds	r3, r0, #1
 800a5a8:	d102      	bne.n	800a5b0 <_kill_r+0x1c>
 800a5aa:	682b      	ldr	r3, [r5, #0]
 800a5ac:	b103      	cbz	r3, 800a5b0 <_kill_r+0x1c>
 800a5ae:	6023      	str	r3, [r4, #0]
 800a5b0:	bd38      	pop	{r3, r4, r5, pc}
 800a5b2:	bf00      	nop
 800a5b4:	20000b74 	.word	0x20000b74

0800a5b8 <_getpid_r>:
 800a5b8:	f7f6 bf74 	b.w	80014a4 <_getpid>

0800a5bc <__swhatbuf_r>:
 800a5bc:	b570      	push	{r4, r5, r6, lr}
 800a5be:	460c      	mov	r4, r1
 800a5c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5c4:	4615      	mov	r5, r2
 800a5c6:	2900      	cmp	r1, #0
 800a5c8:	461e      	mov	r6, r3
 800a5ca:	b096      	sub	sp, #88	@ 0x58
 800a5cc:	da0c      	bge.n	800a5e8 <__swhatbuf_r+0x2c>
 800a5ce:	89a3      	ldrh	r3, [r4, #12]
 800a5d0:	2100      	movs	r1, #0
 800a5d2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a5d6:	bf14      	ite	ne
 800a5d8:	2340      	movne	r3, #64	@ 0x40
 800a5da:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a5de:	2000      	movs	r0, #0
 800a5e0:	6031      	str	r1, [r6, #0]
 800a5e2:	602b      	str	r3, [r5, #0]
 800a5e4:	b016      	add	sp, #88	@ 0x58
 800a5e6:	bd70      	pop	{r4, r5, r6, pc}
 800a5e8:	466a      	mov	r2, sp
 800a5ea:	f000 f849 	bl	800a680 <_fstat_r>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	dbed      	blt.n	800a5ce <__swhatbuf_r+0x12>
 800a5f2:	9901      	ldr	r1, [sp, #4]
 800a5f4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a5f8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a5fc:	4259      	negs	r1, r3
 800a5fe:	4159      	adcs	r1, r3
 800a600:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a604:	e7eb      	b.n	800a5de <__swhatbuf_r+0x22>

0800a606 <__smakebuf_r>:
 800a606:	898b      	ldrh	r3, [r1, #12]
 800a608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a60a:	079d      	lsls	r5, r3, #30
 800a60c:	4606      	mov	r6, r0
 800a60e:	460c      	mov	r4, r1
 800a610:	d507      	bpl.n	800a622 <__smakebuf_r+0x1c>
 800a612:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a616:	6023      	str	r3, [r4, #0]
 800a618:	6123      	str	r3, [r4, #16]
 800a61a:	2301      	movs	r3, #1
 800a61c:	6163      	str	r3, [r4, #20]
 800a61e:	b003      	add	sp, #12
 800a620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a622:	466a      	mov	r2, sp
 800a624:	ab01      	add	r3, sp, #4
 800a626:	f7ff ffc9 	bl	800a5bc <__swhatbuf_r>
 800a62a:	9f00      	ldr	r7, [sp, #0]
 800a62c:	4605      	mov	r5, r0
 800a62e:	4639      	mov	r1, r7
 800a630:	4630      	mov	r0, r6
 800a632:	f7fe fdb1 	bl	8009198 <_malloc_r>
 800a636:	b948      	cbnz	r0, 800a64c <__smakebuf_r+0x46>
 800a638:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a63c:	059a      	lsls	r2, r3, #22
 800a63e:	d4ee      	bmi.n	800a61e <__smakebuf_r+0x18>
 800a640:	f023 0303 	bic.w	r3, r3, #3
 800a644:	f043 0302 	orr.w	r3, r3, #2
 800a648:	81a3      	strh	r3, [r4, #12]
 800a64a:	e7e2      	b.n	800a612 <__smakebuf_r+0xc>
 800a64c:	89a3      	ldrh	r3, [r4, #12]
 800a64e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a656:	81a3      	strh	r3, [r4, #12]
 800a658:	9b01      	ldr	r3, [sp, #4]
 800a65a:	6020      	str	r0, [r4, #0]
 800a65c:	b15b      	cbz	r3, 800a676 <__smakebuf_r+0x70>
 800a65e:	4630      	mov	r0, r6
 800a660:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a664:	f000 f81e 	bl	800a6a4 <_isatty_r>
 800a668:	b128      	cbz	r0, 800a676 <__smakebuf_r+0x70>
 800a66a:	89a3      	ldrh	r3, [r4, #12]
 800a66c:	f023 0303 	bic.w	r3, r3, #3
 800a670:	f043 0301 	orr.w	r3, r3, #1
 800a674:	81a3      	strh	r3, [r4, #12]
 800a676:	89a3      	ldrh	r3, [r4, #12]
 800a678:	431d      	orrs	r5, r3
 800a67a:	81a5      	strh	r5, [r4, #12]
 800a67c:	e7cf      	b.n	800a61e <__smakebuf_r+0x18>
	...

0800a680 <_fstat_r>:
 800a680:	b538      	push	{r3, r4, r5, lr}
 800a682:	2300      	movs	r3, #0
 800a684:	4d06      	ldr	r5, [pc, #24]	@ (800a6a0 <_fstat_r+0x20>)
 800a686:	4604      	mov	r4, r0
 800a688:	4608      	mov	r0, r1
 800a68a:	4611      	mov	r1, r2
 800a68c:	602b      	str	r3, [r5, #0]
 800a68e:	f7f6 ff6f 	bl	8001570 <_fstat>
 800a692:	1c43      	adds	r3, r0, #1
 800a694:	d102      	bne.n	800a69c <_fstat_r+0x1c>
 800a696:	682b      	ldr	r3, [r5, #0]
 800a698:	b103      	cbz	r3, 800a69c <_fstat_r+0x1c>
 800a69a:	6023      	str	r3, [r4, #0]
 800a69c:	bd38      	pop	{r3, r4, r5, pc}
 800a69e:	bf00      	nop
 800a6a0:	20000b74 	.word	0x20000b74

0800a6a4 <_isatty_r>:
 800a6a4:	b538      	push	{r3, r4, r5, lr}
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	4d05      	ldr	r5, [pc, #20]	@ (800a6c0 <_isatty_r+0x1c>)
 800a6aa:	4604      	mov	r4, r0
 800a6ac:	4608      	mov	r0, r1
 800a6ae:	602b      	str	r3, [r5, #0]
 800a6b0:	f7f6 ff6d 	bl	800158e <_isatty>
 800a6b4:	1c43      	adds	r3, r0, #1
 800a6b6:	d102      	bne.n	800a6be <_isatty_r+0x1a>
 800a6b8:	682b      	ldr	r3, [r5, #0]
 800a6ba:	b103      	cbz	r3, 800a6be <_isatty_r+0x1a>
 800a6bc:	6023      	str	r3, [r4, #0]
 800a6be:	bd38      	pop	{r3, r4, r5, pc}
 800a6c0:	20000b74 	.word	0x20000b74

0800a6c4 <_init>:
 800a6c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6c6:	bf00      	nop
 800a6c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6ca:	bc08      	pop	{r3}
 800a6cc:	469e      	mov	lr, r3
 800a6ce:	4770      	bx	lr

0800a6d0 <_fini>:
 800a6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6d2:	bf00      	nop
 800a6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a6d6:	bc08      	pop	{r3}
 800a6d8:	469e      	mov	lr, r3
 800a6da:	4770      	bx	lr
