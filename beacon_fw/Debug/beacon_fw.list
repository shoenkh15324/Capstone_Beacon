
beacon_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1a4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  0800d2b8  0800d2b8  0000e2b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d898  0800d898  0000f1e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d898  0800d898  0000e898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d8a0  0800d8a0  0000f1e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d8a0  0800d8a0  0000e8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d8a4  0800d8a4  0000e8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800d8a8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001338  200001e4  0800da8c  0000f1e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000151c  0800da8c  0000f51c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001208b  00000000  00000000  0000f20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ac1  00000000  00000000  00021298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001018  00000000  00000000  00024d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bf3  00000000  00000000  00025d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c4b9  00000000  00000000  0002696b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b9e2  00000000  00000000  00042e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089646  00000000  00000000  0005e806  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e7e4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052cc  00000000  00000000  000e7e90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000ed15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800d29c 	.word	0x0800d29c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800d29c 	.word	0x0800d29c

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <__aeabi_drsub>:
 8000164:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000168:	e002      	b.n	8000170 <__adddf3>
 800016a:	bf00      	nop

0800016c <__aeabi_dsub>:
 800016c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000170 <__adddf3>:
 8000170:	b530      	push	{r4, r5, lr}
 8000172:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000176:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800017a:	ea94 0f05 	teq	r4, r5
 800017e:	bf08      	it	eq
 8000180:	ea90 0f02 	teqeq	r0, r2
 8000184:	bf1f      	itttt	ne
 8000186:	ea54 0c00 	orrsne.w	ip, r4, r0
 800018a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000192:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000196:	f000 80e2 	beq.w	800035e <__adddf3+0x1ee>
 800019a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001a2:	bfb8      	it	lt
 80001a4:	426d      	neglt	r5, r5
 80001a6:	dd0c      	ble.n	80001c2 <__adddf3+0x52>
 80001a8:	442c      	add	r4, r5
 80001aa:	ea80 0202 	eor.w	r2, r0, r2
 80001ae:	ea81 0303 	eor.w	r3, r1, r3
 80001b2:	ea82 0000 	eor.w	r0, r2, r0
 80001b6:	ea83 0101 	eor.w	r1, r3, r1
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	2d36      	cmp	r5, #54	@ 0x36
 80001c4:	bf88      	it	hi
 80001c6:	bd30      	pophi	{r4, r5, pc}
 80001c8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001d0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x70>
 80001da:	4240      	negs	r0, r0
 80001dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001ec:	d002      	beq.n	80001f4 <__adddf3+0x84>
 80001ee:	4252      	negs	r2, r2
 80001f0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f4:	ea94 0f05 	teq	r4, r5
 80001f8:	f000 80a7 	beq.w	800034a <__adddf3+0x1da>
 80001fc:	f1a4 0401 	sub.w	r4, r4, #1
 8000200:	f1d5 0e20 	rsbs	lr, r5, #32
 8000204:	db0d      	blt.n	8000222 <__adddf3+0xb2>
 8000206:	fa02 fc0e 	lsl.w	ip, r2, lr
 800020a:	fa22 f205 	lsr.w	r2, r2, r5
 800020e:	1880      	adds	r0, r0, r2
 8000210:	f141 0100 	adc.w	r1, r1, #0
 8000214:	fa03 f20e 	lsl.w	r2, r3, lr
 8000218:	1880      	adds	r0, r0, r2
 800021a:	fa43 f305 	asr.w	r3, r3, r5
 800021e:	4159      	adcs	r1, r3
 8000220:	e00e      	b.n	8000240 <__adddf3+0xd0>
 8000222:	f1a5 0520 	sub.w	r5, r5, #32
 8000226:	f10e 0e20 	add.w	lr, lr, #32
 800022a:	2a01      	cmp	r2, #1
 800022c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000230:	bf28      	it	cs
 8000232:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	18c0      	adds	r0, r0, r3
 800023c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000240:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000244:	d507      	bpl.n	8000256 <__adddf3+0xe6>
 8000246:	f04f 0e00 	mov.w	lr, #0
 800024a:	f1dc 0c00 	rsbs	ip, ip, #0
 800024e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000252:	eb6e 0101 	sbc.w	r1, lr, r1
 8000256:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800025a:	d31b      	bcc.n	8000294 <__adddf3+0x124>
 800025c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000260:	d30c      	bcc.n	800027c <__adddf3+0x10c>
 8000262:	0849      	lsrs	r1, r1, #1
 8000264:	ea5f 0030 	movs.w	r0, r0, rrx
 8000268:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800026c:	f104 0401 	add.w	r4, r4, #1
 8000270:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000274:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000278:	f080 809a 	bcs.w	80003b0 <__adddf3+0x240>
 800027c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000280:	bf08      	it	eq
 8000282:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000286:	f150 0000 	adcs.w	r0, r0, #0
 800028a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028e:	ea41 0105 	orr.w	r1, r1, r5
 8000292:	bd30      	pop	{r4, r5, pc}
 8000294:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000298:	4140      	adcs	r0, r0
 800029a:	eb41 0101 	adc.w	r1, r1, r1
 800029e:	3c01      	subs	r4, #1
 80002a0:	bf28      	it	cs
 80002a2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a6:	d2e9      	bcs.n	800027c <__adddf3+0x10c>
 80002a8:	f091 0f00 	teq	r1, #0
 80002ac:	bf04      	itt	eq
 80002ae:	4601      	moveq	r1, r0
 80002b0:	2000      	moveq	r0, #0
 80002b2:	fab1 f381 	clz	r3, r1
 80002b6:	bf08      	it	eq
 80002b8:	3320      	addeq	r3, #32
 80002ba:	f1a3 030b 	sub.w	r3, r3, #11
 80002be:	f1b3 0220 	subs.w	r2, r3, #32
 80002c2:	da0c      	bge.n	80002de <__adddf3+0x16e>
 80002c4:	320c      	adds	r2, #12
 80002c6:	dd08      	ble.n	80002da <__adddf3+0x16a>
 80002c8:	f102 0c14 	add.w	ip, r2, #20
 80002cc:	f1c2 020c 	rsb	r2, r2, #12
 80002d0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d4:	fa21 f102 	lsr.w	r1, r1, r2
 80002d8:	e00c      	b.n	80002f4 <__adddf3+0x184>
 80002da:	f102 0214 	add.w	r2, r2, #20
 80002de:	bfd8      	it	le
 80002e0:	f1c2 0c20 	rsble	ip, r2, #32
 80002e4:	fa01 f102 	lsl.w	r1, r1, r2
 80002e8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002ec:	bfdc      	itt	le
 80002ee:	ea41 010c 	orrle.w	r1, r1, ip
 80002f2:	4090      	lslle	r0, r2
 80002f4:	1ae4      	subs	r4, r4, r3
 80002f6:	bfa2      	ittt	ge
 80002f8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002fc:	4329      	orrge	r1, r5
 80002fe:	bd30      	popge	{r4, r5, pc}
 8000300:	ea6f 0404 	mvn.w	r4, r4
 8000304:	3c1f      	subs	r4, #31
 8000306:	da1c      	bge.n	8000342 <__adddf3+0x1d2>
 8000308:	340c      	adds	r4, #12
 800030a:	dc0e      	bgt.n	800032a <__adddf3+0x1ba>
 800030c:	f104 0414 	add.w	r4, r4, #20
 8000310:	f1c4 0220 	rsb	r2, r4, #32
 8000314:	fa20 f004 	lsr.w	r0, r0, r4
 8000318:	fa01 f302 	lsl.w	r3, r1, r2
 800031c:	ea40 0003 	orr.w	r0, r0, r3
 8000320:	fa21 f304 	lsr.w	r3, r1, r4
 8000324:	ea45 0103 	orr.w	r1, r5, r3
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	f1c4 040c 	rsb	r4, r4, #12
 800032e:	f1c4 0220 	rsb	r2, r4, #32
 8000332:	fa20 f002 	lsr.w	r0, r0, r2
 8000336:	fa01 f304 	lsl.w	r3, r1, r4
 800033a:	ea40 0003 	orr.w	r0, r0, r3
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	fa21 f004 	lsr.w	r0, r1, r4
 8000346:	4629      	mov	r1, r5
 8000348:	bd30      	pop	{r4, r5, pc}
 800034a:	f094 0f00 	teq	r4, #0
 800034e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000352:	bf06      	itte	eq
 8000354:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000358:	3401      	addeq	r4, #1
 800035a:	3d01      	subne	r5, #1
 800035c:	e74e      	b.n	80001fc <__adddf3+0x8c>
 800035e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000362:	bf18      	it	ne
 8000364:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000368:	d029      	beq.n	80003be <__adddf3+0x24e>
 800036a:	ea94 0f05 	teq	r4, r5
 800036e:	bf08      	it	eq
 8000370:	ea90 0f02 	teqeq	r0, r2
 8000374:	d005      	beq.n	8000382 <__adddf3+0x212>
 8000376:	ea54 0c00 	orrs.w	ip, r4, r0
 800037a:	bf04      	itt	eq
 800037c:	4619      	moveq	r1, r3
 800037e:	4610      	moveq	r0, r2
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	ea91 0f03 	teq	r1, r3
 8000386:	bf1e      	ittt	ne
 8000388:	2100      	movne	r1, #0
 800038a:	2000      	movne	r0, #0
 800038c:	bd30      	popne	{r4, r5, pc}
 800038e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000392:	d105      	bne.n	80003a0 <__adddf3+0x230>
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	4149      	adcs	r1, r1
 8000398:	bf28      	it	cs
 800039a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a4:	bf3c      	itt	cc
 80003a6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003aa:	bd30      	popcc	{r4, r5, pc}
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b8:	f04f 0000 	mov.w	r0, #0
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c2:	bf1a      	itte	ne
 80003c4:	4619      	movne	r1, r3
 80003c6:	4610      	movne	r0, r2
 80003c8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003cc:	bf1c      	itt	ne
 80003ce:	460b      	movne	r3, r1
 80003d0:	4602      	movne	r2, r0
 80003d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d6:	bf06      	itte	eq
 80003d8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003dc:	ea91 0f03 	teqeq	r1, r3
 80003e0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	bf00      	nop

080003e8 <__aeabi_ui2d>:
 80003e8:	f090 0f00 	teq	r0, #0
 80003ec:	bf04      	itt	eq
 80003ee:	2100      	moveq	r1, #0
 80003f0:	4770      	bxeq	lr
 80003f2:	b530      	push	{r4, r5, lr}
 80003f4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003fc:	f04f 0500 	mov.w	r5, #0
 8000400:	f04f 0100 	mov.w	r1, #0
 8000404:	e750      	b.n	80002a8 <__adddf3+0x138>
 8000406:	bf00      	nop

08000408 <__aeabi_i2d>:
 8000408:	f090 0f00 	teq	r0, #0
 800040c:	bf04      	itt	eq
 800040e:	2100      	moveq	r1, #0
 8000410:	4770      	bxeq	lr
 8000412:	b530      	push	{r4, r5, lr}
 8000414:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000418:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800041c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000420:	bf48      	it	mi
 8000422:	4240      	negmi	r0, r0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e73e      	b.n	80002a8 <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_f2d>:
 800042c:	0042      	lsls	r2, r0, #1
 800042e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000432:	ea4f 0131 	mov.w	r1, r1, rrx
 8000436:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800043a:	bf1f      	itttt	ne
 800043c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000440:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000444:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000448:	4770      	bxne	lr
 800044a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044e:	bf08      	it	eq
 8000450:	4770      	bxeq	lr
 8000452:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000456:	bf04      	itt	eq
 8000458:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000464:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000468:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800046c:	e71c      	b.n	80002a8 <__adddf3+0x138>
 800046e:	bf00      	nop

08000470 <__aeabi_ul2d>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	f04f 0500 	mov.w	r5, #0
 800047e:	e00a      	b.n	8000496 <__aeabi_l2d+0x16>

08000480 <__aeabi_l2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048e:	d502      	bpl.n	8000496 <__aeabi_l2d+0x16>
 8000490:	4240      	negs	r0, r0
 8000492:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000496:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004a2:	f43f aed8 	beq.w	8000256 <__adddf3+0xe6>
 80004a6:	f04f 0203 	mov.w	r2, #3
 80004aa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ae:	bf18      	it	ne
 80004b0:	3203      	addne	r2, #3
 80004b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b6:	bf18      	it	ne
 80004b8:	3203      	addne	r2, #3
 80004ba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004be:	f1c2 0320 	rsb	r3, r2, #32
 80004c2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ca:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ce:	ea40 000e 	orr.w	r0, r0, lr
 80004d2:	fa21 f102 	lsr.w	r1, r1, r2
 80004d6:	4414      	add	r4, r2
 80004d8:	e6bd      	b.n	8000256 <__adddf3+0xe6>
 80004da:	bf00      	nop

080004dc <__aeabi_dmul>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004e2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ea:	bf1d      	ittte	ne
 80004ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004f0:	ea94 0f0c 	teqne	r4, ip
 80004f4:	ea95 0f0c 	teqne	r5, ip
 80004f8:	f000 f8de 	bleq	80006b8 <__aeabi_dmul+0x1dc>
 80004fc:	442c      	add	r4, r5
 80004fe:	ea81 0603 	eor.w	r6, r1, r3
 8000502:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000506:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800050a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050e:	bf18      	it	ne
 8000510:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000514:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000518:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800051c:	d038      	beq.n	8000590 <__aeabi_dmul+0xb4>
 800051e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000522:	f04f 0500 	mov.w	r5, #0
 8000526:	fbe1 e502 	umlal	lr, r5, r1, r2
 800052a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000532:	f04f 0600 	mov.w	r6, #0
 8000536:	fbe1 5603 	umlal	r5, r6, r1, r3
 800053a:	f09c 0f00 	teq	ip, #0
 800053e:	bf18      	it	ne
 8000540:	f04e 0e01 	orrne.w	lr, lr, #1
 8000544:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000548:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800054c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000550:	d204      	bcs.n	800055c <__aeabi_dmul+0x80>
 8000552:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000556:	416d      	adcs	r5, r5
 8000558:	eb46 0606 	adc.w	r6, r6, r6
 800055c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000560:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000564:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000568:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800056c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000570:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000574:	bf88      	it	hi
 8000576:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800057a:	d81e      	bhi.n	80005ba <__aeabi_dmul+0xde>
 800057c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000580:	bf08      	it	eq
 8000582:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000586:	f150 0000 	adcs.w	r0, r0, #0
 800058a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058e:	bd70      	pop	{r4, r5, r6, pc}
 8000590:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000594:	ea46 0101 	orr.w	r1, r6, r1
 8000598:	ea40 0002 	orr.w	r0, r0, r2
 800059c:	ea81 0103 	eor.w	r1, r1, r3
 80005a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a4:	bfc2      	ittt	gt
 80005a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ae:	bd70      	popgt	{r4, r5, r6, pc}
 80005b0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b4:	f04f 0e00 	mov.w	lr, #0
 80005b8:	3c01      	subs	r4, #1
 80005ba:	f300 80ab 	bgt.w	8000714 <__aeabi_dmul+0x238>
 80005be:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005c2:	bfde      	ittt	le
 80005c4:	2000      	movle	r0, #0
 80005c6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd70      	pople	{r4, r5, r6, pc}
 80005cc:	f1c4 0400 	rsb	r4, r4, #0
 80005d0:	3c20      	subs	r4, #32
 80005d2:	da35      	bge.n	8000640 <__aeabi_dmul+0x164>
 80005d4:	340c      	adds	r4, #12
 80005d6:	dc1b      	bgt.n	8000610 <__aeabi_dmul+0x134>
 80005d8:	f104 0414 	add.w	r4, r4, #20
 80005dc:	f1c4 0520 	rsb	r5, r4, #32
 80005e0:	fa00 f305 	lsl.w	r3, r0, r5
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f205 	lsl.w	r2, r1, r5
 80005ec:	ea40 0002 	orr.w	r0, r0, r2
 80005f0:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005fc:	fa21 f604 	lsr.w	r6, r1, r4
 8000600:	eb42 0106 	adc.w	r1, r2, r6
 8000604:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000608:	bf08      	it	eq
 800060a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060e:	bd70      	pop	{r4, r5, r6, pc}
 8000610:	f1c4 040c 	rsb	r4, r4, #12
 8000614:	f1c4 0520 	rsb	r5, r4, #32
 8000618:	fa00 f304 	lsl.w	r3, r0, r4
 800061c:	fa20 f005 	lsr.w	r0, r0, r5
 8000620:	fa01 f204 	lsl.w	r2, r1, r4
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800062c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000630:	f141 0100 	adc.w	r1, r1, #0
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f205 	lsl.w	r2, r0, r5
 8000648:	ea4e 0e02 	orr.w	lr, lr, r2
 800064c:	fa20 f304 	lsr.w	r3, r0, r4
 8000650:	fa01 f205 	lsl.w	r2, r1, r5
 8000654:	ea43 0302 	orr.w	r3, r3, r2
 8000658:	fa21 f004 	lsr.w	r0, r1, r4
 800065c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000660:	fa21 f204 	lsr.w	r2, r1, r4
 8000664:	ea20 0002 	bic.w	r0, r0, r2
 8000668:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800066c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000670:	bf08      	it	eq
 8000672:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f094 0f00 	teq	r4, #0
 800067c:	d10f      	bne.n	800069e <__aeabi_dmul+0x1c2>
 800067e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000682:	0040      	lsls	r0, r0, #1
 8000684:	eb41 0101 	adc.w	r1, r1, r1
 8000688:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800068c:	bf08      	it	eq
 800068e:	3c01      	subeq	r4, #1
 8000690:	d0f7      	beq.n	8000682 <__aeabi_dmul+0x1a6>
 8000692:	ea41 0106 	orr.w	r1, r1, r6
 8000696:	f095 0f00 	teq	r5, #0
 800069a:	bf18      	it	ne
 800069c:	4770      	bxne	lr
 800069e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006a2:	0052      	lsls	r2, r2, #1
 80006a4:	eb43 0303 	adc.w	r3, r3, r3
 80006a8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006ac:	bf08      	it	eq
 80006ae:	3d01      	subeq	r5, #1
 80006b0:	d0f7      	beq.n	80006a2 <__aeabi_dmul+0x1c6>
 80006b2:	ea43 0306 	orr.w	r3, r3, r6
 80006b6:	4770      	bx	lr
 80006b8:	ea94 0f0c 	teq	r4, ip
 80006bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006c0:	bf18      	it	ne
 80006c2:	ea95 0f0c 	teqne	r5, ip
 80006c6:	d00c      	beq.n	80006e2 <__aeabi_dmul+0x206>
 80006c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006cc:	bf18      	it	ne
 80006ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d2:	d1d1      	bne.n	8000678 <__aeabi_dmul+0x19c>
 80006d4:	ea81 0103 	eor.w	r1, r1, r3
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	f04f 0000 	mov.w	r0, #0
 80006e0:	bd70      	pop	{r4, r5, r6, pc}
 80006e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e6:	bf06      	itte	eq
 80006e8:	4610      	moveq	r0, r2
 80006ea:	4619      	moveq	r1, r3
 80006ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006f0:	d019      	beq.n	8000726 <__aeabi_dmul+0x24a>
 80006f2:	ea94 0f0c 	teq	r4, ip
 80006f6:	d102      	bne.n	80006fe <__aeabi_dmul+0x222>
 80006f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006fc:	d113      	bne.n	8000726 <__aeabi_dmul+0x24a>
 80006fe:	ea95 0f0c 	teq	r5, ip
 8000702:	d105      	bne.n	8000710 <__aeabi_dmul+0x234>
 8000704:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000708:	bf1c      	itt	ne
 800070a:	4610      	movne	r0, r2
 800070c:	4619      	movne	r1, r3
 800070e:	d10a      	bne.n	8000726 <__aeabi_dmul+0x24a>
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000718:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800071c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000720:	f04f 0000 	mov.w	r0, #0
 8000724:	bd70      	pop	{r4, r5, r6, pc}
 8000726:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072e:	bd70      	pop	{r4, r5, r6, pc}

08000730 <__aeabi_ddiv>:
 8000730:	b570      	push	{r4, r5, r6, lr}
 8000732:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000736:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800073a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073e:	bf1d      	ittte	ne
 8000740:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000744:	ea94 0f0c 	teqne	r4, ip
 8000748:	ea95 0f0c 	teqne	r5, ip
 800074c:	f000 f8a7 	bleq	800089e <__aeabi_ddiv+0x16e>
 8000750:	eba4 0405 	sub.w	r4, r4, r5
 8000754:	ea81 0e03 	eor.w	lr, r1, r3
 8000758:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800075c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000760:	f000 8088 	beq.w	8000874 <__aeabi_ddiv+0x144>
 8000764:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000768:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800076c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000770:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000774:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000778:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800077c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000780:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000784:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000788:	429d      	cmp	r5, r3
 800078a:	bf08      	it	eq
 800078c:	4296      	cmpeq	r6, r2
 800078e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000792:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000796:	d202      	bcs.n	800079e <__aeabi_ddiv+0x6e>
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	1ab6      	subs	r6, r6, r2
 80007a0:	eb65 0503 	sbc.w	r5, r5, r3
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007ae:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800080c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000810:	d018      	beq.n	8000844 <__aeabi_ddiv+0x114>
 8000812:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000816:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800081a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000822:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000826:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800082a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082e:	d1c0      	bne.n	80007b2 <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	d10b      	bne.n	800084e <__aeabi_ddiv+0x11e>
 8000836:	ea41 0100 	orr.w	r1, r1, r0
 800083a:	f04f 0000 	mov.w	r0, #0
 800083e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000842:	e7b6      	b.n	80007b2 <__aeabi_ddiv+0x82>
 8000844:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000848:	bf04      	itt	eq
 800084a:	4301      	orreq	r1, r0
 800084c:	2000      	moveq	r0, #0
 800084e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000852:	bf88      	it	hi
 8000854:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000858:	f63f aeaf 	bhi.w	80005ba <__aeabi_dmul+0xde>
 800085c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000860:	bf04      	itt	eq
 8000862:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000866:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800086a:	f150 0000 	adcs.w	r0, r0, #0
 800086e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000872:	bd70      	pop	{r4, r5, r6, pc}
 8000874:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000878:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800087c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000880:	bfc2      	ittt	gt
 8000882:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000886:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800088a:	bd70      	popgt	{r4, r5, r6, pc}
 800088c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000890:	f04f 0e00 	mov.w	lr, #0
 8000894:	3c01      	subs	r4, #1
 8000896:	e690      	b.n	80005ba <__aeabi_dmul+0xde>
 8000898:	ea45 0e06 	orr.w	lr, r5, r6
 800089c:	e68d      	b.n	80005ba <__aeabi_dmul+0xde>
 800089e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008a2:	ea94 0f0c 	teq	r4, ip
 80008a6:	bf08      	it	eq
 80008a8:	ea95 0f0c 	teqeq	r5, ip
 80008ac:	f43f af3b 	beq.w	8000726 <__aeabi_dmul+0x24a>
 80008b0:	ea94 0f0c 	teq	r4, ip
 80008b4:	d10a      	bne.n	80008cc <__aeabi_ddiv+0x19c>
 80008b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ba:	f47f af34 	bne.w	8000726 <__aeabi_dmul+0x24a>
 80008be:	ea95 0f0c 	teq	r5, ip
 80008c2:	f47f af25 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e72c      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008cc:	ea95 0f0c 	teq	r5, ip
 80008d0:	d106      	bne.n	80008e0 <__aeabi_ddiv+0x1b0>
 80008d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d6:	f43f aefd 	beq.w	80006d4 <__aeabi_dmul+0x1f8>
 80008da:	4610      	mov	r0, r2
 80008dc:	4619      	mov	r1, r3
 80008de:	e722      	b.n	8000726 <__aeabi_dmul+0x24a>
 80008e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e4:	bf18      	it	ne
 80008e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ea:	f47f aec5 	bne.w	8000678 <__aeabi_dmul+0x19c>
 80008ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008f2:	f47f af0d 	bne.w	8000710 <__aeabi_dmul+0x234>
 80008f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008fa:	f47f aeeb 	bne.w	80006d4 <__aeabi_dmul+0x1f8>
 80008fe:	e712      	b.n	8000726 <__aeabi_dmul+0x24a>

08000900 <__gedf2>:
 8000900:	f04f 3cff 	mov.w	ip, #4294967295
 8000904:	e006      	b.n	8000914 <__cmpdf2+0x4>
 8000906:	bf00      	nop

08000908 <__ledf2>:
 8000908:	f04f 0c01 	mov.w	ip, #1
 800090c:	e002      	b.n	8000914 <__cmpdf2+0x4>
 800090e:	bf00      	nop

08000910 <__cmpdf2>:
 8000910:	f04f 0c01 	mov.w	ip, #1
 8000914:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000918:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800091c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000920:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000924:	bf18      	it	ne
 8000926:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800092a:	d01b      	beq.n	8000964 <__cmpdf2+0x54>
 800092c:	b001      	add	sp, #4
 800092e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000932:	bf0c      	ite	eq
 8000934:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000938:	ea91 0f03 	teqne	r1, r3
 800093c:	bf02      	ittt	eq
 800093e:	ea90 0f02 	teqeq	r0, r2
 8000942:	2000      	moveq	r0, #0
 8000944:	4770      	bxeq	lr
 8000946:	f110 0f00 	cmn.w	r0, #0
 800094a:	ea91 0f03 	teq	r1, r3
 800094e:	bf58      	it	pl
 8000950:	4299      	cmppl	r1, r3
 8000952:	bf08      	it	eq
 8000954:	4290      	cmpeq	r0, r2
 8000956:	bf2c      	ite	cs
 8000958:	17d8      	asrcs	r0, r3, #31
 800095a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095e:	f040 0001 	orr.w	r0, r0, #1
 8000962:	4770      	bx	lr
 8000964:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000968:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800096c:	d102      	bne.n	8000974 <__cmpdf2+0x64>
 800096e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000972:	d107      	bne.n	8000984 <__cmpdf2+0x74>
 8000974:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d1d6      	bne.n	800092c <__cmpdf2+0x1c>
 800097e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000982:	d0d3      	beq.n	800092c <__cmpdf2+0x1c>
 8000984:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_cdrcmple>:
 800098c:	4684      	mov	ip, r0
 800098e:	4610      	mov	r0, r2
 8000990:	4662      	mov	r2, ip
 8000992:	468c      	mov	ip, r1
 8000994:	4619      	mov	r1, r3
 8000996:	4663      	mov	r3, ip
 8000998:	e000      	b.n	800099c <__aeabi_cdcmpeq>
 800099a:	bf00      	nop

0800099c <__aeabi_cdcmpeq>:
 800099c:	b501      	push	{r0, lr}
 800099e:	f7ff ffb7 	bl	8000910 <__cmpdf2>
 80009a2:	2800      	cmp	r0, #0
 80009a4:	bf48      	it	mi
 80009a6:	f110 0f00 	cmnmi.w	r0, #0
 80009aa:	bd01      	pop	{r0, pc}

080009ac <__aeabi_dcmpeq>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff fff4 	bl	800099c <__aeabi_cdcmpeq>
 80009b4:	bf0c      	ite	eq
 80009b6:	2001      	moveq	r0, #1
 80009b8:	2000      	movne	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmplt>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffea 	bl	800099c <__aeabi_cdcmpeq>
 80009c8:	bf34      	ite	cc
 80009ca:	2001      	movcc	r0, #1
 80009cc:	2000      	movcs	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmple>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffe0 	bl	800099c <__aeabi_cdcmpeq>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpge>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffce 	bl	800098c <__aeabi_cdrcmple>
 80009f0:	bf94      	ite	ls
 80009f2:	2001      	movls	r0, #1
 80009f4:	2000      	movhi	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpgt>:
 80009fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a00:	f7ff ffc4 	bl	800098c <__aeabi_cdrcmple>
 8000a04:	bf34      	ite	cc
 8000a06:	2001      	movcc	r0, #1
 8000a08:	2000      	movcs	r0, #0
 8000a0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0e:	bf00      	nop

08000a10 <__aeabi_dcmpun>:
 8000a10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__aeabi_dcmpun+0x10>
 8000a1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1e:	d10a      	bne.n	8000a36 <__aeabi_dcmpun+0x26>
 8000a20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x20>
 8000a2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2e:	d102      	bne.n	8000a36 <__aeabi_dcmpun+0x26>
 8000a30:	f04f 0000 	mov.w	r0, #0
 8000a34:	4770      	bx	lr
 8000a36:	f04f 0001 	mov.w	r0, #1
 8000a3a:	4770      	bx	lr

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__gesf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpsf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__lesf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpsf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpsf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b38:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b3c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b46:	d011      	beq.n	8000b6c <__cmpsf2+0x40>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b4e:	bf18      	it	ne
 8000b50:	ea90 0f01 	teqne	r0, r1
 8000b54:	bf58      	it	pl
 8000b56:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b5a:	bf88      	it	hi
 8000b5c:	17c8      	asrhi	r0, r1, #31
 8000b5e:	bf38      	it	cc
 8000b60:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b64:	bf18      	it	ne
 8000b66:	f040 0001 	orrne.w	r0, r0, #1
 8000b6a:	4770      	bx	lr
 8000b6c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b70:	d102      	bne.n	8000b78 <__cmpsf2+0x4c>
 8000b72:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b76:	d105      	bne.n	8000b84 <__cmpsf2+0x58>
 8000b78:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b7c:	d1e4      	bne.n	8000b48 <__cmpsf2+0x1c>
 8000b7e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b82:	d0e1      	beq.n	8000b48 <__cmpsf2+0x1c>
 8000b84:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop

08000b8c <__aeabi_cfrcmple>:
 8000b8c:	4684      	mov	ip, r0
 8000b8e:	4608      	mov	r0, r1
 8000b90:	4661      	mov	r1, ip
 8000b92:	e7ff      	b.n	8000b94 <__aeabi_cfcmpeq>

08000b94 <__aeabi_cfcmpeq>:
 8000b94:	b50f      	push	{r0, r1, r2, r3, lr}
 8000b96:	f7ff ffc9 	bl	8000b2c <__cmpsf2>
 8000b9a:	2800      	cmp	r0, #0
 8000b9c:	bf48      	it	mi
 8000b9e:	f110 0f00 	cmnmi.w	r0, #0
 8000ba2:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ba4 <__aeabi_fcmpeq>:
 8000ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba8:	f7ff fff4 	bl	8000b94 <__aeabi_cfcmpeq>
 8000bac:	bf0c      	ite	eq
 8000bae:	2001      	moveq	r0, #1
 8000bb0:	2000      	movne	r0, #0
 8000bb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_fcmplt>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff ffea 	bl	8000b94 <__aeabi_cfcmpeq>
 8000bc0:	bf34      	ite	cc
 8000bc2:	2001      	movcc	r0, #1
 8000bc4:	2000      	movcs	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_fcmple>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffe0 	bl	8000b94 <__aeabi_cfcmpeq>
 8000bd4:	bf94      	ite	ls
 8000bd6:	2001      	movls	r0, #1
 8000bd8:	2000      	movhi	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_fcmpge>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff ffd2 	bl	8000b8c <__aeabi_cfrcmple>
 8000be8:	bf94      	ite	ls
 8000bea:	2001      	movls	r0, #1
 8000bec:	2000      	movhi	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_fcmpgt>:
 8000bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf8:	f7ff ffc8 	bl	8000b8c <__aeabi_cfrcmple>
 8000bfc:	bf34      	ite	cc
 8000bfe:	2001      	movcc	r0, #1
 8000c00:	2000      	movcs	r0, #0
 8000c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c06:	bf00      	nop

08000c08 <__aeabi_fcmpun>:
 8000c08:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c14:	d102      	bne.n	8000c1c <__aeabi_fcmpun+0x14>
 8000c16:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c1a:	d108      	bne.n	8000c2e <__aeabi_fcmpun+0x26>
 8000c1c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c20:	d102      	bne.n	8000c28 <__aeabi_fcmpun+0x20>
 8000c22:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c26:	d102      	bne.n	8000c2e <__aeabi_fcmpun+0x26>
 8000c28:	f04f 0000 	mov.w	r0, #0
 8000c2c:	4770      	bx	lr
 8000c2e:	f04f 0001 	mov.w	r0, #1
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_d2lz>:
 8000c34:	b538      	push	{r3, r4, r5, lr}
 8000c36:	2200      	movs	r2, #0
 8000c38:	2300      	movs	r3, #0
 8000c3a:	4604      	mov	r4, r0
 8000c3c:	460d      	mov	r5, r1
 8000c3e:	f7ff febf 	bl	80009c0 <__aeabi_dcmplt>
 8000c42:	b928      	cbnz	r0, 8000c50 <__aeabi_d2lz+0x1c>
 8000c44:	4620      	mov	r0, r4
 8000c46:	4629      	mov	r1, r5
 8000c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c4c:	f000 b80a 	b.w	8000c64 <__aeabi_d2ulz>
 8000c50:	4620      	mov	r0, r4
 8000c52:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c56:	f000 f805 	bl	8000c64 <__aeabi_d2ulz>
 8000c5a:	4240      	negs	r0, r0
 8000c5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c60:	bd38      	pop	{r3, r4, r5, pc}
 8000c62:	bf00      	nop

08000c64 <__aeabi_d2ulz>:
 8000c64:	b5d0      	push	{r4, r6, r7, lr}
 8000c66:	2200      	movs	r2, #0
 8000c68:	4b0b      	ldr	r3, [pc, #44]	@ (8000c98 <__aeabi_d2ulz+0x34>)
 8000c6a:	4606      	mov	r6, r0
 8000c6c:	460f      	mov	r7, r1
 8000c6e:	f7ff fc35 	bl	80004dc <__aeabi_dmul>
 8000c72:	f7ff fee3 	bl	8000a3c <__aeabi_d2uiz>
 8000c76:	4604      	mov	r4, r0
 8000c78:	f7ff fbb6 	bl	80003e8 <__aeabi_ui2d>
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	4b07      	ldr	r3, [pc, #28]	@ (8000c9c <__aeabi_d2ulz+0x38>)
 8000c80:	f7ff fc2c 	bl	80004dc <__aeabi_dmul>
 8000c84:	4602      	mov	r2, r0
 8000c86:	460b      	mov	r3, r1
 8000c88:	4630      	mov	r0, r6
 8000c8a:	4639      	mov	r1, r7
 8000c8c:	f7ff fa6e 	bl	800016c <__aeabi_dsub>
 8000c90:	f7ff fed4 	bl	8000a3c <__aeabi_d2uiz>
 8000c94:	4621      	mov	r1, r4
 8000c96:	bdd0      	pop	{r4, r6, r7, pc}
 8000c98:	3df00000 	.word	0x3df00000
 8000c9c:	41f00000 	.word	0x41f00000

08000ca0 <apInit>:




void apInit(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0
  cliOpen(_DEF_UART2, 57600);
 8000ca4:	f44f 4161 	mov.w	r1, #57600	@ 0xe100
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f000 fb95 	bl	80013d8 <cliOpen>
  uartOpen(_DEF_UART3, 9600);
 8000cae:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 8000cb2:	2002      	movs	r0, #2
 8000cb4:	f001 fb7c 	bl	80023b0 <uartOpen>
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <apMain>:

void apMain(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
  uint32_t pre_uart2_time;

  pre_uart2_time = millis();
 8000cc2:	f000 f84b 	bl	8000d5c <millis>
 8000cc6:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if(millis() - pre_uart2_time >= 500)
 8000cc8:	f000 f848 	bl	8000d5c <millis>
 8000ccc:	4602      	mov	r2, r0
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000cd6:	d309      	bcc.n	8000cec <apMain+0x30>
    {
      if(uartAvailable(_DEF_UART3) >= 0)
 8000cd8:	2002      	movs	r0, #2
 8000cda:	f001 fc7b 	bl	80025d4 <uartAvailable>
      {
        pre_uart2_time = millis();
 8000cde:	f000 f83d 	bl	8000d5c <millis>
 8000ce2:	6078      	str	r0, [r7, #4]
        uartPrintf(_DEF_UART3, "RF TEST\n");
 8000ce4:	4903      	ldr	r1, [pc, #12]	@ (8000cf4 <apMain+0x38>)
 8000ce6:	2002      	movs	r0, #2
 8000ce8:	f001 fd38 	bl	800275c <uartPrintf>
      }
    }

    cliMain();
 8000cec:	f000 fc2c 	bl	8001548 <cliMain>
    if(millis() - pre_uart2_time >= 500)
 8000cf0:	e7ea      	b.n	8000cc8 <apMain+0xc>
 8000cf2:	bf00      	nop
 8000cf4:	0800d2b8 	.word	0x0800d2b8

08000cf8 <bspInit>:
#include "bsp.h"

void SystemClock_Config(void);

void bspInit(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
  HAL_Init();
 8000cfe:	f001 feaf 	bl	8002a60 <HAL_Init>
  SystemClock_Config();
 8000d02:	f000 f832 	bl	8000d6a <SystemClock_Config>

  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d06:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <bspInit+0x60>)
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	4a13      	ldr	r2, [pc, #76]	@ (8000d58 <bspInit+0x60>)
 8000d0c:	f043 0320 	orr.w	r3, r3, #32
 8000d10:	6193      	str	r3, [r2, #24]
 8000d12:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <bspInit+0x60>)
 8000d14:	699b      	ldr	r3, [r3, #24]
 8000d16:	f003 0320 	and.w	r3, r3, #32
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <bspInit+0x60>)
 8000d20:	699b      	ldr	r3, [r3, #24]
 8000d22:	4a0d      	ldr	r2, [pc, #52]	@ (8000d58 <bspInit+0x60>)
 8000d24:	f043 0308 	orr.w	r3, r3, #8
 8000d28:	6193      	str	r3, [r2, #24]
 8000d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d58 <bspInit+0x60>)
 8000d2c:	699b      	ldr	r3, [r3, #24]
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	4b08      	ldr	r3, [pc, #32]	@ (8000d58 <bspInit+0x60>)
 8000d38:	699b      	ldr	r3, [r3, #24]
 8000d3a:	4a07      	ldr	r2, [pc, #28]	@ (8000d58 <bspInit+0x60>)
 8000d3c:	f043 0304 	orr.w	r3, r3, #4
 8000d40:	6193      	str	r3, [r2, #24]
 8000d42:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <bspInit+0x60>)
 8000d44:	699b      	ldr	r3, [r3, #24]
 8000d46:	f003 0304 	and.w	r3, r3, #4
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
}
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40021000 	.word	0x40021000

08000d5c <millis>:
{
  HAL_Delay(ms);
}

uint32_t millis(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000d60:	f001 fed6 	bl	8002b10 <HAL_GetTick>
 8000d64:	4603      	mov	r3, r0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <SystemClock_Config>:

void SystemClock_Config(void)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b094      	sub	sp, #80	@ 0x50
 8000d6e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d70:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d74:	2228      	movs	r2, #40	@ 0x28
 8000d76:	2100      	movs	r1, #0
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f00a f9d3 	bl	800b124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d8e:	1d3b      	adds	r3, r7, #4
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d9e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000da8:	2301      	movs	r3, #1
 8000daa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dac:	2302      	movs	r3, #2
 8000dae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000db0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000db4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000db6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dbc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f004 f905 	bl	8004fd0 <HAL_RCC_OscConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000dcc:	f000 f827 	bl	8000e1e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd0:	230f      	movs	r3, #15
 8000dd2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ddc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000de0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de2:	2300      	movs	r3, #0
 8000de4:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	2102      	movs	r1, #2
 8000dec:	4618      	mov	r0, r3
 8000dee:	f004 fb71 	bl	80054d4 <HAL_RCC_ClockConfig>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000df8:	f000 f811 	bl	8000e1e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000dfc:	2310      	movs	r3, #16
 8000dfe:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000e00:	2300      	movs	r3, #0
 8000e02:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	4618      	mov	r0, r3
 8000e08:	f004 fcf2 	bl	80057f0 <HAL_RCCEx_PeriphCLKConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000e12:	f000 f804 	bl	8000e1e <Error_Handler>
  }
}
 8000e16:	bf00      	nop
 8000e18:	3750      	adds	r7, #80	@ 0x50
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e22:	b672      	cpsid	i
}
 8000e24:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e26:	bf00      	nop
 8000e28:	e7fd      	b.n	8000e26 <Error_Handler+0x8>
	...

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e32:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <HAL_MspInit+0x5c>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	4a14      	ldr	r2, [pc, #80]	@ (8000e88 <HAL_MspInit+0x5c>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6193      	str	r3, [r2, #24]
 8000e3e:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <HAL_MspInit+0x5c>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <HAL_MspInit+0x5c>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e88 <HAL_MspInit+0x5c>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e54:	61d3      	str	r3, [r2, #28]
 8000e56:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <HAL_MspInit+0x5c>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e62:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <HAL_MspInit+0x60>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	4a04      	ldr	r2, [pc, #16]	@ (8000e8c <HAL_MspInit+0x60>)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010000 	.word	0x40010000

08000e90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <NMI_Handler+0x4>

08000e98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eac:	bf00      	nop
 8000eae:	e7fd      	b.n	8000eac <BusFault_Handler+0x4>

08000eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb4:	bf00      	nop
 8000eb6:	e7fd      	b.n	8000eb4 <UsageFault_Handler+0x4>

08000eb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bc80      	pop	{r7}
 8000ec2:	4770      	bx	lr

08000ec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bc80      	pop	{r7}
 8000ece:	4770      	bx	lr

08000ed0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr

08000edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee0:	f001 fe04 	bl	8002aec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000eec:	4802      	ldr	r0, [pc, #8]	@ (8000ef8 <DMA1_Channel5_IRQHandler+0x10>)
 8000eee:	f002 f923 	bl	8003138 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000984 	.word	0x20000984

08000efc <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000f00:	4802      	ldr	r0, [pc, #8]	@ (8000f0c <DMA1_Channel6_IRQHandler+0x10>)
 8000f02:	f002 f919 	bl	8003138 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	200009c8 	.word	0x200009c8

08000f10 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f14:	4802      	ldr	r0, [pc, #8]	@ (8000f20 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000f16:	f002 fcb4 	bl	8003882 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200010e0 	.word	0x200010e0

08000f24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f28:	4802      	ldr	r0, [pc, #8]	@ (8000f34 <USART1_IRQHandler+0x10>)
 8000f2a:	f004 fe41 	bl	8005bb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200008f4 	.word	0x200008f4

08000f38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f3c:	4802      	ldr	r0, [pc, #8]	@ (8000f48 <USART2_IRQHandler+0x10>)
 8000f3e:	f004 fe37 	bl	8005bb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000093c 	.word	0x2000093c

08000f4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return 1;
 8000f50:	2301      	movs	r3, #1
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr

08000f5a <_kill>:

int _kill(int pid, int sig)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f64:	f00a f96a 	bl	800b23c <__errno>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2216      	movs	r2, #22
 8000f6c:	601a      	str	r2, [r3, #0]
  return -1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_exit>:

void _exit (int status)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f82:	f04f 31ff 	mov.w	r1, #4294967295
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffe7 	bl	8000f5a <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f8c:	bf00      	nop
 8000f8e:	e7fd      	b.n	8000f8c <_exit+0x12>

08000f90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	e00a      	b.n	8000fb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fa2:	f3af 8000 	nop.w
 8000fa6:	4601      	mov	r1, r0
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	1c5a      	adds	r2, r3, #1
 8000fac:	60ba      	str	r2, [r7, #8]
 8000fae:	b2ca      	uxtb	r2, r1
 8000fb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	dbf0      	blt.n	8000fa2 <_read+0x12>
  }

  return len;
 8000fc0:	687b      	ldr	r3, [r7, #4]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3718      	adds	r7, #24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}

08000fca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b086      	sub	sp, #24
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	60f8      	str	r0, [r7, #12]
 8000fd2:	60b9      	str	r1, [r7, #8]
 8000fd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	e009      	b.n	8000ff0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	1c5a      	adds	r2, r3, #1
 8000fe0:	60ba      	str	r2, [r7, #8]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	3301      	adds	r3, #1
 8000fee:	617b      	str	r3, [r7, #20]
 8000ff0:	697a      	ldr	r2, [r7, #20]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	dbf1      	blt.n	8000fdc <_write+0x12>
  }
  return len;
 8000ff8:	687b      	ldr	r3, [r7, #4]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <_close>:

int _close(int file)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	bc80      	pop	{r7}
 8001016:	4770      	bx	lr

08001018 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001028:	605a      	str	r2, [r3, #4]
  return 0;
 800102a:	2300      	movs	r3, #0
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr

08001036 <_isatty>:

int _isatty(int file)
{
 8001036:	b480      	push	{r7}
 8001038:	b083      	sub	sp, #12
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800103e:	2301      	movs	r3, #1
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr

0800104a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800104a:	b480      	push	{r7}
 800104c:	b085      	sub	sp, #20
 800104e:	af00      	add	r7, sp, #0
 8001050:	60f8      	str	r0, [r7, #12]
 8001052:	60b9      	str	r1, [r7, #8]
 8001054:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	bc80      	pop	{r7}
 8001060:	4770      	bx	lr
	...

08001064 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800106c:	4a14      	ldr	r2, [pc, #80]	@ (80010c0 <_sbrk+0x5c>)
 800106e:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <_sbrk+0x60>)
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001078:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <_sbrk+0x64>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d102      	bne.n	8001086 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <_sbrk+0x64>)
 8001082:	4a12      	ldr	r2, [pc, #72]	@ (80010cc <_sbrk+0x68>)
 8001084:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001086:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4413      	add	r3, r2
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	429a      	cmp	r2, r3
 8001092:	d207      	bcs.n	80010a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001094:	f00a f8d2 	bl	800b23c <__errno>
 8001098:	4603      	mov	r3, r0
 800109a:	220c      	movs	r2, #12
 800109c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	e009      	b.n	80010b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a4:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <_sbrk+0x64>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010aa:	4b07      	ldr	r3, [pc, #28]	@ (80010c8 <_sbrk+0x64>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4413      	add	r3, r2
 80010b2:	4a05      	ldr	r2, [pc, #20]	@ (80010c8 <_sbrk+0x64>)
 80010b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010b6:	68fb      	ldr	r3, [r7, #12]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20005000 	.word	0x20005000
 80010c4:	00000400 	.word	0x00000400
 80010c8:	20000200 	.word	0x20000200
 80010cc:	20001520 	.word	0x20001520

080010d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bc80      	pop	{r7}
 80010da:	4770      	bx	lr

080010dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010dc:	f7ff fff8 	bl	80010d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e0:	480b      	ldr	r0, [pc, #44]	@ (8001110 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010e2:	490c      	ldr	r1, [pc, #48]	@ (8001114 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001118 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a09      	ldr	r2, [pc, #36]	@ (800111c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010f8:	4c09      	ldr	r4, [pc, #36]	@ (8001120 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001106:	f00a f89f 	bl	800b248 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800110a:	f008 fff9 	bl	800a100 <main>
  bx lr
 800110e:	4770      	bx	lr
  ldr r0, =_sdata
 8001110:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001114:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001118:	0800d8a8 	.word	0x0800d8a8
  ldr r2, =_sbss
 800111c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001120:	2000151c 	.word	0x2000151c

08001124 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001124:	e7fe      	b.n	8001124 <ADC1_2_IRQHandler>

08001126 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 8001126:	b480      	push	{r7}
 8001128:	b087      	sub	sp, #28
 800112a:	af00      	add	r7, sp, #0
 800112c:	60f8      	str	r0, [r7, #12]
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001132:	2301      	movs	r3, #1
 8001134:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2200      	movs	r2, #0
 8001140:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	609a      	str	r2, [r3, #8]
  p_node->p_buf = p_buf;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	60da      	str	r2, [r3, #12]

  return ret;
 800114e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001150:	4618      	mov	r0, r3
 8001152:	371c      	adds	r7, #28
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <qbufferRead>:

  return ret;
}

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800115a:	b480      	push	{r7}
 800115c:	b087      	sub	sp, #28
 800115e:	af00      	add	r7, sp, #0
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	60b9      	str	r1, [r7, #8]
 8001164:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001166:	2301      	movs	r3, #1
 8001168:	75fb      	strb	r3, [r7, #23]


  for (int i=0; i<length; i++)
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	e026      	b.n	80011be <qbufferRead+0x64>
  {
    if (p_node->p_buf != NULL)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d009      	beq.n	800118c <qbufferRead+0x32>
    {
      p_data[i] = p_node->p_buf[p_node->out];
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	441a      	add	r2, r3
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	440b      	add	r3, r1
 8001188:	7812      	ldrb	r2, [r2, #0]
 800118a:	701a      	strb	r2, [r3, #0]
    }

    if (p_node->out != p_node->in)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	429a      	cmp	r2, r3
 8001196:	d00c      	beq.n	80011b2 <qbufferRead+0x58>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	3301      	adds	r3, #1
 800119e:	68fa      	ldr	r2, [r7, #12]
 80011a0:	6892      	ldr	r2, [r2, #8]
 80011a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80011a6:	fb01 f202 	mul.w	r2, r1, r2
 80011aa:	1a9a      	subs	r2, r3, r2
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	e002      	b.n	80011b8 <qbufferRead+0x5e>
    }
    else
    {
      ret = false;
 80011b2:	2300      	movs	r3, #0
 80011b4:	75fb      	strb	r3, [r7, #23]
      break;
 80011b6:	e006      	b.n	80011c6 <qbufferRead+0x6c>
  for (int i=0; i<length; i++)
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	3301      	adds	r3, #1
 80011bc:	613b      	str	r3, [r7, #16]
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	429a      	cmp	r2, r3
 80011c4:	d8d4      	bhi.n	8001170 <qbufferRead+0x16>
    }
  }

  return ret;
 80011c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	371c      	adds	r7, #28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bc80      	pop	{r7}
 80011d0:	4770      	bx	lr

080011d2 <qbufferAvailable>:

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 80011d2:	b480      	push	{r7}
 80011d4:	b085      	sub	sp, #20
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
  uint32_t ret;

  ret = (p_node->in - p_node->out) % p_node->len;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	6892      	ldr	r2, [r2, #8]
 80011e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80011ec:	fb01 f202 	mul.w	r2, r1, r2
 80011f0:	1a9b      	subs	r3, r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]

  return ret;
 80011f4:	68fb      	ldr	r3, [r7, #12]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3714      	adds	r7, #20
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr

08001200 <beaconInit>:
static void cliBeacon(cli_args_t *args);
#endif


bool beaconInit()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
  bool ret = true;
 8001206:	2301      	movs	r3, #1
 8001208:	71fb      	strb	r3, [r7, #7]

  beacon_tbl.floor = 0;
 800120a:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <beaconInit+0x30>)
 800120c:	2200      	movs	r2, #0
 800120e:	701a      	strb	r2, [r3, #0]
  beacon_tbl.x = 0;
 8001210:	4b07      	ldr	r3, [pc, #28]	@ (8001230 <beaconInit+0x30>)
 8001212:	2200      	movs	r2, #0
 8001214:	705a      	strb	r2, [r3, #1]
  beacon_tbl.y = 0;
 8001216:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <beaconInit+0x30>)
 8001218:	2200      	movs	r2, #0
 800121a:	709a      	strb	r2, [r3, #2]

#ifdef _USE_HW_CLI
  cliAdd("beacon", cliBeacon);
 800121c:	4905      	ldr	r1, [pc, #20]	@ (8001234 <beaconInit+0x34>)
 800121e:	4806      	ldr	r0, [pc, #24]	@ (8001238 <beaconInit+0x38>)
 8001220:	f000 feb0 	bl	8001f84 <cliAdd>
#endif

  return ret;
 8001224:	79fb      	ldrb	r3, [r7, #7]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000204 	.word	0x20000204
 8001234:	0800123d 	.word	0x0800123d
 8001238:	0800d2c4 	.word	0x0800d2c4

0800123c <cliBeacon>:


#ifdef _USE_HW_CLI

void cliBeacon(cli_args_t *args)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001244:	2300      	movs	r3, #0
 8001246:	73fb      	strb	r3, [r7, #15]

  if(args->argc == 1 && args->isStr(0, "info") == true)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	881b      	ldrh	r3, [r3, #0]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d118      	bne.n	8001282 <cliBeacon+0x46>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	4927      	ldr	r1, [pc, #156]	@ (80012f4 <cliBeacon+0xb8>)
 8001256:	2000      	movs	r0, #0
 8001258:	4798      	blx	r3
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d010      	beq.n	8001282 <cliBeacon+0x46>
  {
    uint8_t beacon_floor = beacon_tbl.floor;
 8001260:	4b25      	ldr	r3, [pc, #148]	@ (80012f8 <cliBeacon+0xbc>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	73bb      	strb	r3, [r7, #14]
    uint8_t beacon_x = beacon_tbl.x;
 8001266:	4b24      	ldr	r3, [pc, #144]	@ (80012f8 <cliBeacon+0xbc>)
 8001268:	785b      	ldrb	r3, [r3, #1]
 800126a:	737b      	strb	r3, [r7, #13]
    uint8_t beacon_y = beacon_tbl.y;
 800126c:	4b22      	ldr	r3, [pc, #136]	@ (80012f8 <cliBeacon+0xbc>)
 800126e:	789b      	ldrb	r3, [r3, #2]
 8001270:	733b      	strb	r3, [r7, #12]

    cliPrintf("Floor: %d, [x, y]: [%d, %d]\n", beacon_floor, beacon_x, beacon_y);
 8001272:	7bb9      	ldrb	r1, [r7, #14]
 8001274:	7b7a      	ldrb	r2, [r7, #13]
 8001276:	7b3b      	ldrb	r3, [r7, #12]
 8001278:	4820      	ldr	r0, [pc, #128]	@ (80012fc <cliBeacon+0xc0>)
 800127a:	f000 fd79 	bl	8001d70 <cliPrintf>

    ret = true;
 800127e:	2301      	movs	r3, #1
 8001280:	73fb      	strb	r3, [r7, #15]
  }

  if(args->argc == 4 && args->isStr(0, "set") == true)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	2b04      	cmp	r3, #4
 8001288:	d124      	bne.n	80012d4 <cliBeacon+0x98>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	491c      	ldr	r1, [pc, #112]	@ (8001300 <cliBeacon+0xc4>)
 8001290:	2000      	movs	r0, #0
 8001292:	4798      	blx	r3
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d01c      	beq.n	80012d4 <cliBeacon+0x98>
  {
    uint8_t beacon_floor = (uint8_t)args->getData(1);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	2001      	movs	r0, #1
 80012a0:	4798      	blx	r3
 80012a2:	4603      	mov	r3, r0
 80012a4:	72fb      	strb	r3, [r7, #11]
    uint8_t beacon_x = (uint8_t)args->getData(2);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2002      	movs	r0, #2
 80012ac:	4798      	blx	r3
 80012ae:	4603      	mov	r3, r0
 80012b0:	72bb      	strb	r3, [r7, #10]
    uint8_t beacon_y = (uint8_t)args->getData(3);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	2003      	movs	r0, #3
 80012b8:	4798      	blx	r3
 80012ba:	4603      	mov	r3, r0
 80012bc:	727b      	strb	r3, [r7, #9]

    beacon_tbl.floor = beacon_floor;
 80012be:	4a0e      	ldr	r2, [pc, #56]	@ (80012f8 <cliBeacon+0xbc>)
 80012c0:	7afb      	ldrb	r3, [r7, #11]
 80012c2:	7013      	strb	r3, [r2, #0]
    beacon_tbl.x = beacon_x;
 80012c4:	4a0c      	ldr	r2, [pc, #48]	@ (80012f8 <cliBeacon+0xbc>)
 80012c6:	7abb      	ldrb	r3, [r7, #10]
 80012c8:	7053      	strb	r3, [r2, #1]
    beacon_tbl.y = beacon_y;
 80012ca:	4a0b      	ldr	r2, [pc, #44]	@ (80012f8 <cliBeacon+0xbc>)
 80012cc:	7a7b      	ldrb	r3, [r7, #9]
 80012ce:	7093      	strb	r3, [r2, #2]

    ret = true;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
  }

  if(ret != true)
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	f083 0301 	eor.w	r3, r3, #1
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d005      	beq.n	80012ec <cliBeacon+0xb0>
  {
    cliPrintf("beacon info\n");
 80012e0:	4808      	ldr	r0, [pc, #32]	@ (8001304 <cliBeacon+0xc8>)
 80012e2:	f000 fd45 	bl	8001d70 <cliPrintf>
    cliPrintf("beacon set floor x_axis y_axis\n");
 80012e6:	4808      	ldr	r0, [pc, #32]	@ (8001308 <cliBeacon+0xcc>)
 80012e8:	f000 fd42 	bl	8001d70 <cliPrintf>
  }
}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	0800d2cc 	.word	0x0800d2cc
 80012f8:	20000204 	.word	0x20000204
 80012fc:	0800d2d4 	.word	0x0800d2d4
 8001300:	0800d2f4 	.word	0x0800d2f4
 8001304:	0800d2f8 	.word	0x0800d2f8
 8001308:	0800d308 	.word	0x0800d308

0800130c <cdcInit>:

static bool is_init = false;


bool cdcInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
  bool ret = true;
 8001312:	2301      	movs	r3, #1
 8001314:	71fb      	strb	r3, [r7, #7]


  is_init = true;
 8001316:	4b04      	ldr	r3, [pc, #16]	@ (8001328 <cdcInit+0x1c>)
 8001318:	2201      	movs	r2, #1
 800131a:	701a      	strb	r2, [r3, #0]

  return ret;
 800131c:	79fb      	ldrb	r3, [r7, #7]
}
 800131e:	4618      	mov	r0, r3
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	20000207 	.word	0x20000207

0800132c <cdcIsInit>:

bool cdcIsInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return is_init;
 8001330:	4b02      	ldr	r3, [pc, #8]	@ (800133c <cdcIsInit+0x10>)
 8001332:	781b      	ldrb	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	20000207 	.word	0x20000207

08001340 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 8001344:	4b1b      	ldr	r3, [pc, #108]	@ (80013b4 <cliInit+0x74>)
 8001346:	2200      	movs	r2, #0
 8001348:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 800134a:	4b1a      	ldr	r3, [pc, #104]	@ (80013b4 <cliInit+0x74>)
 800134c:	2200      	movs	r2, #0
 800134e:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8001350:	4b18      	ldr	r3, [pc, #96]	@ (80013b4 <cliInit+0x74>)
 8001352:	2200      	movs	r2, #0
 8001354:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 8001356:	4b17      	ldr	r3, [pc, #92]	@ (80013b4 <cliInit+0x74>)
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  cli_node.hist_line_last  = 0;
 800135e:	4b15      	ldr	r3, [pc, #84]	@ (80013b4 <cliInit+0x74>)
 8001360:	2200      	movs	r2, #0
 8001362:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  cli_node.hist_line_count = 0;
 8001366:	4b13      	ldr	r3, [pc, #76]	@ (80013b4 <cliInit+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  cli_node.hist_line_new   = false;
 800136e:	4b11      	ldr	r3, [pc, #68]	@ (80013b4 <cliInit+0x74>)
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 8001376:	4b0f      	ldr	r3, [pc, #60]	@ (80013b4 <cliInit+0x74>)
 8001378:	4a0f      	ldr	r2, [pc, #60]	@ (80013b8 <cliInit+0x78>)
 800137a:	f8c3 24b8 	str.w	r2, [r3, #1208]	@ 0x4b8
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 800137e:	4b0d      	ldr	r3, [pc, #52]	@ (80013b4 <cliInit+0x74>)
 8001380:	4a0e      	ldr	r2, [pc, #56]	@ (80013bc <cliInit+0x7c>)
 8001382:	f8c3 24bc 	str.w	r2, [r3, #1212]	@ 0x4bc
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 8001386:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <cliInit+0x74>)
 8001388:	4a0d      	ldr	r2, [pc, #52]	@ (80013c0 <cliInit+0x80>)
 800138a:	f8c3 24c0 	str.w	r2, [r3, #1216]	@ 0x4c0
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 800138e:	4b09      	ldr	r3, [pc, #36]	@ (80013b4 <cliInit+0x74>)
 8001390:	4a0c      	ldr	r2, [pc, #48]	@ (80013c4 <cliInit+0x84>)
 8001392:	f8c3 24c4 	str.w	r2, [r3, #1220]	@ 0x4c4

  cliLineClean(&cli_node);
 8001396:	4807      	ldr	r0, [pc, #28]	@ (80013b4 <cliInit+0x74>)
 8001398:	f000 fb5a 	bl	8001a50 <cliLineClean>


  cliAdd("help", cliShowList);
 800139c:	490a      	ldr	r1, [pc, #40]	@ (80013c8 <cliInit+0x88>)
 800139e:	480b      	ldr	r0, [pc, #44]	@ (80013cc <cliInit+0x8c>)
 80013a0:	f000 fdf0 	bl	8001f84 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 80013a4:	490a      	ldr	r1, [pc, #40]	@ (80013d0 <cliInit+0x90>)
 80013a6:	480b      	ldr	r0, [pc, #44]	@ (80013d4 <cliInit+0x94>)
 80013a8:	f000 fdec 	bl	8001f84 <cliAdd>

  return true;
 80013ac:	2301      	movs	r3, #1
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000208 	.word	0x20000208
 80013b8:	08001e21 	.word	0x08001e21
 80013bc:	08001e71 	.word	0x08001e71
 80013c0:	08001ec1 	.word	0x08001ec1
 80013c4:	08001f05 	.word	0x08001f05
 80013c8:	08002015 	.word	0x08002015
 80013cc:	0800d328 	.word	0x0800d328
 80013d0:	08002085 	.word	0x08002085
 80013d4:	0800d330 	.word	0x0800d330

080013d8 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 80013e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001410 <cliOpen+0x38>)
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 80013ea:	4a09      	ldr	r2, [pc, #36]	@ (8001410 <cliOpen+0x38>)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 80013f0:	79fb      	ldrb	r3, [r7, #7]
 80013f2:	6839      	ldr	r1, [r7, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f000 ffdb 	bl	80023b0 <uartOpen>
 80013fa:	4603      	mov	r3, r0
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b04      	ldr	r3, [pc, #16]	@ (8001410 <cliOpen+0x38>)
 8001400:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 8001402:	4b03      	ldr	r3, [pc, #12]	@ (8001410 <cliOpen+0x38>)
 8001404:	7a1b      	ldrb	r3, [r3, #8]
}
 8001406:	4618      	mov	r0, r3
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	20000208 	.word	0x20000208

08001414 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 800141c:	4b34      	ldr	r3, [pc, #208]	@ (80014f0 <cliShowLog+0xdc>)
 800141e:	7a5b      	ldrb	r3, [r3, #9]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d061      	beq.n	80014e8 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	7a98      	ldrb	r0, [r3, #10]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f893 336b 	ldrb.w	r3, [r3, #875]	@ 0x36b
 800142e:	461a      	mov	r2, r3
 8001430:	4930      	ldr	r1, [pc, #192]	@ (80014f4 <cliShowLog+0xe0>)
 8001432:	f001 f993 	bl	800275c <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	7a98      	ldrb	r0, [r3, #10]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	f893 336c 	ldrb.w	r3, [r3, #876]	@ 0x36c
 8001440:	461a      	mov	r2, r3
 8001442:	492d      	ldr	r1, [pc, #180]	@ (80014f8 <cliShowLog+0xe4>)
 8001444:	f001 f98a 	bl	800275c <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	7a98      	ldrb	r0, [r3, #10]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 336a 	ldrb.w	r3, [r3, #874]	@ 0x36a
 8001452:	461a      	mov	r2, r3
 8001454:	4929      	ldr	r1, [pc, #164]	@ (80014fc <cliShowLog+0xe8>)
 8001456:	f001 f981 	bl	800275c <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	7a98      	ldrb	r0, [r3, #10]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	f203 332a 	addw	r3, r3, #810	@ 0x32a
 8001464:	461a      	mov	r2, r3
 8001466:	4926      	ldr	r1, [pc, #152]	@ (8001500 <cliShowLog+0xec>)
 8001468:	f001 f978 	bl	800275c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	7a98      	ldrb	r0, [r3, #10]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001476:	461a      	mov	r2, r3
 8001478:	4922      	ldr	r1, [pc, #136]	@ (8001504 <cliShowLog+0xf0>)
 800147a:	f001 f96f 	bl	800275c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7a98      	ldrb	r0, [r3, #10]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001488:	461a      	mov	r2, r3
 800148a:	491f      	ldr	r1, [pc, #124]	@ (8001508 <cliShowLog+0xf4>)
 800148c:	f001 f966 	bl	800275c <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	7a98      	ldrb	r0, [r3, #10]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 800149a:	461a      	mov	r2, r3
 800149c:	491b      	ldr	r1, [pc, #108]	@ (800150c <cliShowLog+0xf8>)
 800149e:	f001 f95d 	bl	800275c <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	e012      	b.n	80014ce <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	7a98      	ldrb	r0, [r3, #10]
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	4613      	mov	r3, r2
 80014b0:	015b      	lsls	r3, r3, #5
 80014b2:	4413      	add	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	f503 73cc 	add.w	r3, r3, #408	@ 0x198
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	4413      	add	r3, r2
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	4913      	ldr	r1, [pc, #76]	@ (8001510 <cliShowLog+0xfc>)
 80014c4:	f001 f94a 	bl	800275c <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	3301      	adds	r3, #1
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 80014d4:	461a      	mov	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4293      	cmp	r3, r2
 80014da:	dbe5      	blt.n	80014a8 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7a9b      	ldrb	r3, [r3, #10]
 80014e0:	490c      	ldr	r1, [pc, #48]	@ (8001514 <cliShowLog+0x100>)
 80014e2:	4618      	mov	r0, r3
 80014e4:	f001 f93a 	bl	800275c <uartPrintf>
  }
}
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000208 	.word	0x20000208
 80014f4:	0800d334 	.word	0x0800d334
 80014f8:	0800d344 	.word	0x0800d344
 80014fc:	0800d354 	.word	0x0800d354
 8001500:	0800d364 	.word	0x0800d364
 8001504:	0800d374 	.word	0x0800d374
 8001508:	0800d384 	.word	0x0800d384
 800150c:	0800d394 	.word	0x0800d394
 8001510:	0800d3a4 	.word	0x0800d3a4
 8001514:	0800d3b4 	.word	0x0800d3b4

08001518 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4906      	ldr	r1, [pc, #24]	@ (8001540 <cliShowPrompt+0x28>)
 8001526:	4618      	mov	r0, r3
 8001528:	f001 f918 	bl	800275c <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4904      	ldr	r1, [pc, #16]	@ (8001544 <cliShowPrompt+0x2c>)
 8001532:	4618      	mov	r0, r3
 8001534:	f001 f912 	bl	800275c <uartPrintf>
}
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	0800d3b8 	.word	0x0800d3b8
 8001544:	0800d3bc 	.word	0x0800d3bc

08001548 <cliMain>:

bool cliMain(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 800154c:	4b0e      	ldr	r3, [pc, #56]	@ (8001588 <cliMain+0x40>)
 800154e:	7a1b      	ldrb	r3, [r3, #8]
 8001550:	f083 0301 	eor.w	r3, r3, #1
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <cliMain+0x16>
  {
    return false;
 800155a:	2300      	movs	r3, #0
 800155c:	e012      	b.n	8001584 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 800155e:	4b0a      	ldr	r3, [pc, #40]	@ (8001588 <cliMain+0x40>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f001 f836 	bl	80025d4 <uartAvailable>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d009      	beq.n	8001582 <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 800156e:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <cliMain+0x40>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f001 f87e 	bl	8002674 <uartRead>
 8001578:	4603      	mov	r3, r0
 800157a:	4619      	mov	r1, r3
 800157c:	4802      	ldr	r0, [pc, #8]	@ (8001588 <cliMain+0x40>)
 800157e:	f000 f805 	bl	800158c <cliUpdate>
  }

  return true;
 8001582:	2301      	movs	r3, #1
}
 8001584:	4618      	mov	r0, r3
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000208 	.word	0x20000208

0800158c <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08c      	sub	sp, #48	@ 0x30
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	460b      	mov	r3, r1
 8001596:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 8001598:	2300      	movs	r3, #0
 800159a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f203 332a 	addw	r3, r3, #810	@ 0x32a
 80015a4:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	7c1b      	ldrb	r3, [r3, #16]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f040 816d 	bne.w	800188a <cliUpdate+0x2fe>
  {
    switch(rx_data)
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80015b4:	d02a      	beq.n	800160c <cliUpdate+0x80>
 80015b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80015b8:	f300 80da 	bgt.w	8001770 <cliUpdate+0x1e4>
 80015bc:	2b1b      	cmp	r3, #27
 80015be:	d021      	beq.n	8001604 <cliUpdate+0x78>
 80015c0:	2b1b      	cmp	r3, #27
 80015c2:	f300 80d5 	bgt.w	8001770 <cliUpdate+0x1e4>
 80015c6:	2b08      	cmp	r3, #8
 80015c8:	d062      	beq.n	8001690 <cliUpdate+0x104>
 80015ca:	2b0d      	cmp	r3, #13
 80015cc:	f040 80d0 	bne.w	8001770 <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f000 fa52 	bl	8001a84 <cliLineAdd>
          cliRunCmd(p_cli);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f000 fb23 	bl	8001c2c <cliRunCmd>
        }

        line->count = 0;
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	2200      	movs	r2, #0
 80015ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        line->cursor = 0;
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        line->buf[0] = 0;
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff ff8b 	bl	8001518 <cliShowPrompt>
        break;
 8001602:	e142      	b.n	800188a <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2201      	movs	r2, #1
 8001608:	741a      	strb	r2, [r3, #16]
        break;
 800160a:	e13e      	b.n	800188a <cliUpdate+0x2fe>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001618:	429a      	cmp	r2, r3
 800161a:	f080 8131 	bcs.w	8001880 <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 800162e:	2301      	movs	r3, #1
 8001630:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001632:	e013      	b.n	800165c <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800163a:	461a      	mov	r2, r3
 800163c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800163e:	441a      	add	r2, r3
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001646:	4619      	mov	r1, r3
 8001648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800164a:	440b      	add	r3, r1
 800164c:	3b01      	subs	r3, #1
 800164e:	69f9      	ldr	r1, [r7, #28]
 8001650:	5c89      	ldrb	r1, [r1, r2]
 8001652:	69fa      	ldr	r2, [r7, #28]
 8001654:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 8001656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001658:	3301      	adds	r3, #1
 800165a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800165c:	7efb      	ldrb	r3, [r7, #27]
 800165e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001660:	429a      	cmp	r2, r3
 8001662:	dbe7      	blt.n	8001634 <cliUpdate+0xa8>
          }

          line->count--;
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800166a:	3b01      	subs	r3, #1
 800166c:	b2da      	uxtb	r2, r3
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          line->buf[line->count] = 0;
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800167a:	461a      	mov	r2, r3
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	2100      	movs	r1, #0
 8001680:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	498d      	ldr	r1, [pc, #564]	@ (80018bc <cliUpdate+0x330>)
 8001688:	4618      	mov	r0, r3
 800168a:	f001 f867 	bl	800275c <uartPrintf>
        }
        break;
 800168e:	e0f7      	b.n	8001880 <cliUpdate+0x2f4>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001696:	2b00      	cmp	r3, #0
 8001698:	d055      	beq.n	8001746 <cliUpdate+0x1ba>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d050      	beq.n	8001746 <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d10e      	bne.n	80016d2 <cliUpdate+0x146>
          {
            line->count--;
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016ba:	3b01      	subs	r3, #1
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016ca:	461a      	mov	r2, r3
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	2100      	movs	r1, #0
 80016d0:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80016de:	429a      	cmp	r2, r3
 80016e0:	d231      	bcs.n	8001746 <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80016e8:	69fb      	ldr	r3, [r7, #28]
 80016ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80016f6:	e013      	b.n	8001720 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016fe:	461a      	mov	r2, r3
 8001700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001702:	441a      	add	r2, r3
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800170a:	4619      	mov	r1, r3
 800170c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800170e:	440b      	add	r3, r1
 8001710:	3b01      	subs	r3, #1
 8001712:	69f9      	ldr	r1, [r7, #28]
 8001714:	5c89      	ldrb	r1, [r1, r2]
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 800171a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800171c:	3301      	adds	r3, #1
 800171e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001720:	7ebb      	ldrb	r3, [r7, #26]
 8001722:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001724:	429a      	cmp	r2, r3
 8001726:	dbe7      	blt.n	80016f8 <cliUpdate+0x16c>
            }

            line->count--;
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800172e:	3b01      	subs	r3, #1
 8001730:	b2da      	uxtb	r2, r3
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->buf[line->count] = 0;
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800173e:	461a      	mov	r2, r3
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	2100      	movs	r1, #0
 8001744:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 8099 	beq.w	8001884 <cliUpdate+0x2f8>
        {
          line->cursor--;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001758:	3b01      	subs	r3, #1
 800175a:	b2da      	uxtb	r2, r3
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	4956      	ldr	r1, [pc, #344]	@ (80018c0 <cliUpdate+0x334>)
 8001768:	4618      	mov	r0, r3
 800176a:	f000 fff7 	bl	800275c <uartPrintf>
        }
        break;
 800176e:	e089      	b.n	8001884 <cliUpdate+0x2f8>


      default:
        if ((line->count + 1) < line->buf_len)
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001776:	3301      	adds	r3, #1
 8001778:	69fa      	ldr	r2, [r7, #28]
 800177a:	f892 2040 	ldrb.w	r2, [r2, #64]	@ 0x40
 800177e:	4293      	cmp	r3, r2
 8001780:	f280 8082 	bge.w	8001888 <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001790:	429a      	cmp	r2, r3
 8001792:	d124      	bne.n	80017de <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	1cf9      	adds	r1, r7, #3
 800179a:	2201      	movs	r2, #1
 800179c:	4618      	mov	r0, r3
 800179e:	f000 ff99 	bl	80026d4 <uartWrite>

            line->buf[line->cursor] = rx_data;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017a8:	461a      	mov	r2, r3
 80017aa:	78f9      	ldrb	r1, [r7, #3]
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	5499      	strb	r1, [r3, r2]
            line->count++;
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017b6:	3301      	adds	r3, #1
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017c6:	3301      	adds	r3, #1
 80017c8:	b2da      	uxtb	r2, r3
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017d6:	461a      	mov	r2, r3
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	2100      	movs	r1, #0
 80017dc:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d24c      	bcs.n	8001888 <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	@ 0x24
 8001802:	e013      	b.n	800182c <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800180a:	461a      	mov	r2, r3
 800180c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	1e5a      	subs	r2, r3, #1
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001818:	4619      	mov	r1, r3
 800181a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800181c:	1acb      	subs	r3, r1, r3
 800181e:	69f9      	ldr	r1, [r7, #28]
 8001820:	5c89      	ldrb	r1, [r1, r2]
 8001822:	69fa      	ldr	r2, [r7, #28]
 8001824:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001828:	3301      	adds	r3, #1
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
 800182c:	7e7b      	ldrb	r3, [r7, #25]
 800182e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001830:	429a      	cmp	r2, r3
 8001832:	dbe7      	blt.n	8001804 <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800183a:	461a      	mov	r2, r3
 800183c:	78f9      	ldrb	r1, [r7, #3]
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001848:	3301      	adds	r3, #1
 800184a:	b2da      	uxtb	r2, r3
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
            line->cursor++;
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001858:	3301      	adds	r3, #1
 800185a:	b2da      	uxtb	r2, r3
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
            line->buf[line->count] = 0;
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001868:	461a      	mov	r2, r3
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	2100      	movs	r1, #0
 800186e:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	4913      	ldr	r1, [pc, #76]	@ (80018c4 <cliUpdate+0x338>)
 8001878:	4618      	mov	r0, r3
 800187a:	f000 ff6f 	bl	800275c <uartPrintf>
          }
        }
        break;
 800187e:	e003      	b.n	8001888 <cliUpdate+0x2fc>
        break;
 8001880:	bf00      	nop
 8001882:	e002      	b.n	800188a <cliUpdate+0x2fe>
        break;
 8001884:	bf00      	nop
 8001886:	e000      	b.n	800188a <cliUpdate+0x2fe>
        break;
 8001888:	bf00      	nop
    }
  }

  switch(p_cli->state)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	7c1b      	ldrb	r3, [r3, #16]
 800188e:	3b01      	subs	r3, #1
 8001890:	2b03      	cmp	r3, #3
 8001892:	f200 80d0 	bhi.w	8001a36 <cliUpdate+0x4aa>
 8001896:	a201      	add	r2, pc, #4	@ (adr r2, 800189c <cliUpdate+0x310>)
 8001898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800189c:	080018ad 	.word	0x080018ad
 80018a0:	080018b5 	.word	0x080018b5
 80018a4:	080018c9 	.word	0x080018c9
 80018a8:	08001a2d 	.word	0x08001a2d
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2202      	movs	r2, #2
 80018b0:	741a      	strb	r2, [r3, #16]
      break;
 80018b2:	e0c0      	b.n	8001a36 <cliUpdate+0x4aa>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2203      	movs	r2, #3
 80018b8:	741a      	strb	r2, [r3, #16]
      break;
 80018ba:	e0bc      	b.n	8001a36 <cliUpdate+0x4aa>
 80018bc:	0800d3c4 	.word	0x0800d3c4
 80018c0:	0800d3cc 	.word	0x0800d3cc
 80018c4:	0800d3d4 	.word	0x0800d3d4

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 80018ce:	78fb      	ldrb	r3, [r7, #3]
 80018d0:	2b44      	cmp	r3, #68	@ 0x44
 80018d2:	d11a      	bne.n	800190a <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d015      	beq.n	800190a <cliUpdate+0x37e>
        {
          line->cursor--;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          tx_buf[0] = 0x1B;
 80018ee:	231b      	movs	r3, #27
 80018f0:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 80018f2:	235b      	movs	r3, #91	@ 0x5b
 80018f4:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 80018f6:	78fb      	ldrb	r3, [r7, #3]
 80018f8:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	f107 010c 	add.w	r1, r7, #12
 8001902:	2203      	movs	r2, #3
 8001904:	4618      	mov	r0, r3
 8001906:	f000 fee5 	bl	80026d4 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 800190a:	78fb      	ldrb	r3, [r7, #3]
 800190c:	2b43      	cmp	r3, #67	@ 0x43
 800190e:	d11d      	bne.n	800194c <cliUpdate+0x3c0>
      {
        if (line->cursor < line->count)
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800191c:	429a      	cmp	r2, r3
 800191e:	d215      	bcs.n	800194c <cliUpdate+0x3c0>
        {
          line->cursor++;
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001926:	3301      	adds	r3, #1
 8001928:	b2da      	uxtb	r2, r3
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

          tx_buf[0] = 0x1B;
 8001930:	231b      	movs	r3, #27
 8001932:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001934:	235b      	movs	r3, #91	@ 0x5b
 8001936:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001938:	78fb      	ldrb	r3, [r7, #3]
 800193a:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	f107 010c 	add.w	r1, r7, #12
 8001944:	2203      	movs	r2, #3
 8001946:	4618      	mov	r0, r3
 8001948:	f000 fec4 	bl	80026d4 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 800194c:	78fb      	ldrb	r3, [r7, #3]
 800194e:	2b41      	cmp	r3, #65	@ 0x41
 8001950:	d10c      	bne.n	800196c <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 8001952:	2101      	movs	r1, #1
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 f8df 	bl	8001b18 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	781a      	ldrb	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f203 332a 	addw	r3, r3, #810	@ 0x32a
 8001964:	4619      	mov	r1, r3
 8001966:	4610      	mov	r0, r2
 8001968:	f000 fef8 	bl	800275c <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 800196c:	78fb      	ldrb	r3, [r7, #3]
 800196e:	2b42      	cmp	r3, #66	@ 0x42
 8001970:	d10c      	bne.n	800198c <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 8001972:	2100      	movs	r1, #0
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f8cf 	bl	8001b18 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	781a      	ldrb	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f203 332a 	addw	r3, r3, #810	@ 0x32a
 8001984:	4619      	mov	r1, r3
 8001986:	4610      	mov	r0, r2
 8001988:	f000 fee8 	bl	800275c <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 800198c:	78fb      	ldrb	r3, [r7, #3]
 800198e:	2b31      	cmp	r3, #49	@ 0x31
 8001990:	d10f      	bne.n	80019b2 <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	7818      	ldrb	r0, [r3, #0]
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800199c:	461a      	mov	r2, r3
 800199e:	492a      	ldr	r1, [pc, #168]	@ (8001a48 <cliUpdate+0x4bc>)
 80019a0:	f000 fedc 	bl	800275c <uartPrintf>
        line->cursor = 0;
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        p_cli->state = CLI_RX_SP4;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2204      	movs	r2, #4
 80019b0:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	2b34      	cmp	r3, #52	@ 0x34
 80019b6:	d13d      	bne.n	8001a34 <cliUpdate+0x4a8>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d20f      	bcs.n	80019e8 <cliUpdate+0x45c>
        {
          mov_len = line->count - line->cursor;
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80019ce:	461a      	mov	r2, r3
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	8afa      	ldrh	r2, [r7, #22]
 80019e0:	491a      	ldr	r1, [pc, #104]	@ (8001a4c <cliUpdate+0x4c0>)
 80019e2:	4618      	mov	r0, r3
 80019e4:	f000 feba 	bl	800275c <uartPrintf>
        }
        if (line->cursor > line->count)
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f893 2041 	ldrb.w	r2, [r3, #65]	@ 0x41
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d90f      	bls.n	8001a18 <cliUpdate+0x48c>
        {
          mov_len = line->cursor - line->count;
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019fe:	461a      	mov	r2, r3
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	8afa      	ldrh	r2, [r7, #22]
 8001a10:	490d      	ldr	r1, [pc, #52]	@ (8001a48 <cliUpdate+0x4bc>)
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 fea2 	bl	800275c <uartPrintf>
        }
        line->cursor = line->count;
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f893 2042 	ldrb.w	r2, [r3, #66]	@ 0x42
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        p_cli->state = CLI_RX_SP4;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2204      	movs	r2, #4
 8001a28:	741a      	strb	r2, [r3, #16]
      }
      break;
 8001a2a:	e003      	b.n	8001a34 <cliUpdate+0x4a8>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	741a      	strb	r2, [r3, #16]
      break;
 8001a32:	e000      	b.n	8001a36 <cliUpdate+0x4aa>
      break;
 8001a34:	bf00      	nop
  }



  cliShowLog(p_cli);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff fcec 	bl	8001414 <cliShowLog>

  return ret;
 8001a3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3730      	adds	r7, #48	@ 0x30
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	0800d3e0 	.word	0x0800d3e0
 8001a4c:	0800d3e8 	.word	0x0800d3e8

08001a50 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 236c 	strb.w	r2, [r3, #876]	@ 0x36c
  p_cli->line.cursor  = 0;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 236b 	strb.w	r2, [r3, #875]	@ 0x36b
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	223f      	movs	r2, #63	@ 0x3f
 8001a6c:	f883 236a 	strb.w	r2, [r3, #874]	@ 0x36a
  p_cli->line.buf[0]  = 0;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 232a 	strb.w	r2, [r3, #810]	@ 0x32a
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
	...

08001a84 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001a92:	461a      	mov	r2, r3
 8001a94:	6879      	ldr	r1, [r7, #4]
 8001a96:	4613      	mov	r3, r2
 8001a98:	015b      	lsls	r3, r3, #5
 8001a9a:	4413      	add	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	440b      	add	r3, r1
 8001aa2:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	f203 332a 	addw	r3, r3, #810	@ 0x32a
 8001aae:	2243      	movs	r2, #67	@ 0x43
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	f009 fbf8 	bl	800b2a6 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001abc:	2b05      	cmp	r3, #5
 8001abe:	d807      	bhi.n	8001ad0 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f883 2197 	strb.w	r2, [r3, #407]	@ 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001ad6:	b25a      	sxtb	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b14 <cliLineAdd+0x90>)
 8001ae8:	fb83 3102 	smull	r3, r1, r3, r2
 8001aec:	17d3      	asrs	r3, r2, #31
 8001aee:	1ac9      	subs	r1, r1, r3
 8001af0:	460b      	mov	r3, r1
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	440b      	add	r3, r1
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	1ad1      	subs	r1, r2, r3
 8001afa:	b2ca      	uxtb	r2, r1
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
  p_cli->hist_line_new  = true;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2201      	movs	r2, #1
 8001b06:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	2aaaaaab 	.word	0x2aaaaaab

08001b18 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	460b      	mov	r3, r1
 8001b22:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d076      	beq.n	8001c1c <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 336b 	ldrb.w	r3, [r3, #875]	@ 0x36b
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d008      	beq.n	8001b4a <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7818      	ldrb	r0, [r3, #0]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	f893 336b 	ldrb.w	r3, [r3, #875]	@ 0x36b
 8001b42:	461a      	mov	r2, r3
 8001b44:	4937      	ldr	r1, [pc, #220]	@ (8001c24 <cliLineChange+0x10c>)
 8001b46:	f000 fe09 	bl	800275c <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 336c 	ldrb.w	r3, [r3, #876]	@ 0x36c
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d008      	beq.n	8001b66 <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	7818      	ldrb	r0, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 336c 	ldrb.w	r3, [r3, #876]	@ 0x36c
 8001b5e:	461a      	mov	r2, r3
 8001b60:	4931      	ldr	r1, [pc, #196]	@ (8001c28 <cliLineChange+0x110>)
 8001b62:	f000 fdfb 	bl	800275c <uartPrintf>
  }


  if (key_up == true)
 8001b66:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d125      	bne.n	8001bba <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3194 	ldrb.w	r3, [r3, #404]	@ 0x194
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d006      	beq.n	8001b86 <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8001b7e:	b25a      	sxtb	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f893 3197 	ldrb.w	r3, [r3, #407]	@ 0x197
 8001b94:	4413      	add	r3, r2
 8001b96:	3b01      	subs	r3, #1
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 8001b9e:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ba2:	fb01 f202 	mul.w	r2, r1, r2
 8001ba6:	1a9b      	subs	r3, r3, r2
 8001ba8:	b25a      	sxtb	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001bb6:	73fb      	strb	r3, [r7, #15]
 8001bb8:	e013      	b.n	8001be2 <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	f892 2197 	ldrb.w	r2, [r2, #407]	@ 0x197
 8001bc8:	fb93 f1f2 	sdiv	r1, r3, r2
 8001bcc:	fb01 f202 	mul.w	r2, r1, r2
 8001bd0:	1a9b      	subs	r3, r3, r2
 8001bd2:	b25a      	sxtb	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    change_i = p_cli->hist_line_i;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f993 3195 	ldrsb.w	r3, [r3, #405]	@ 0x195
 8001be0:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8001be2:	7bfa      	ldrb	r2, [r7, #15]
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	4613      	mov	r3, r2
 8001bea:	015b      	lsls	r3, r3, #5
 8001bec:	4413      	add	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	4403      	add	r3, r0
 8001bf4:	f503 72cc 	add.w	r2, r3, #408	@ 0x198
 8001bf8:	f201 332a 	addw	r3, r1, #810	@ 0x32a
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	2243      	movs	r2, #67	@ 0x43
 8001c00:	4618      	mov	r0, r3
 8001c02:	f009 fb50 	bl	800b2a6 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 236c 	ldrb.w	r2, [r3, #876]	@ 0x36c
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f883 236b 	strb.w	r2, [r3, #875]	@ 0x36b

  p_cli->hist_line_new = false;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
 8001c1a:	e000      	b.n	8001c1e <cliLineChange+0x106>
    return;
 8001c1c:	bf00      	nop
}
 8001c1e:	3710      	adds	r7, #16
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	0800d3e0 	.word	0x0800d3e0
 8001c28:	0800d3f0 	.word	0x0800d3f0

08001c2c <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001c34:	2300      	movs	r3, #0
 8001c36:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f851 	bl	8001ce0 <cliParseArgs>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d045      	beq.n	8001cd0 <cliRunCmd+0xa4>
  {
    cliPrintf("\r\n");
 8001c44:	4825      	ldr	r0, [pc, #148]	@ (8001cdc <cliRunCmd+0xb0>)
 8001c46:	f000 f893 	bl	8001d70 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8001c50:	4618      	mov	r0, r3
 8001c52:	f000 f8b1 	bl	8001db8 <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	e032      	b.n	8001cc2 <cliRunCmd+0x96>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f8d3 0114 	ldr.w	r0, [r3, #276]	@ 0x114
 8001c62:	68fa      	ldr	r2, [r7, #12]
 8001c64:	4613      	mov	r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	4413      	add	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	f503 735c 	add.w	r3, r3, #880	@ 0x370
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	4413      	add	r3, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	f7fe fa6b 	bl	8000150 <strcmp>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d11d      	bne.n	8001cbc <cliRunCmd+0x90>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f8b3 3112 	ldrh.w	r3, [r3, #274]	@ 0x112
 8001c86:	3b01      	subs	r3, #1
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f8a3 24b0 	strh.w	r2, [r3, #1200]	@ 0x4b0
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f503 728c 	add.w	r2, r3, #280	@ 0x118
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f8c3 24b4 	str.w	r2, [r3, #1204]	@ 0x4b4
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	68fa      	ldr	r2, [r7, #12]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	f503 7360 	add.w	r3, r3, #896	@ 0x380
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	f502 6296 	add.w	r2, r2, #1200	@ 0x4b0
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	4798      	blx	r3
        break;
 8001cba:	e009      	b.n	8001cd0 <cliRunCmd+0xa4>
    for (int i=0; i<p_cli->cmd_count; i++)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f8b3 336e 	ldrh.w	r3, [r3, #878]	@ 0x36e
 8001cc8:	461a      	mov	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	dbc5      	blt.n	8001c5c <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 8001cd0:	7afb      	ldrb	r3, [r7, #11]
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	0800d3f8 	.word	0x0800d3f8

08001ce0 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  cmdline = (char *)p_cli->line.buf;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	f203 332a 	addw	r3, r3, #810	@ 0x32a
 8001cfe:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8001d06:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 8001d08:	8afb      	ldrh	r3, [r7, #22]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	4413      	add	r3, r2
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001d14:	4b15      	ldr	r3, [pc, #84]	@ (8001d6c <cliParseArgs+0x8c>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f107 0208 	add.w	r2, r7, #8
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	6938      	ldr	r0, [r7, #16]
 8001d20:	f009 fa42 	bl	800b1a8 <strtok_r>
 8001d24:	61b8      	str	r0, [r7, #24]
 8001d26:	e010      	b.n	8001d4a <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 8001d28:	8afb      	ldrh	r3, [r7, #22]
 8001d2a:	1c5a      	adds	r2, r3, #1
 8001d2c:	82fa      	strh	r2, [r7, #22]
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001d38:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <cliParseArgs+0x8c>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f107 0208 	add.w	r2, r7, #8
 8001d40:	4619      	mov	r1, r3
 8001d42:	2000      	movs	r0, #0
 8001d44:	f009 fa30 	bl	800b1a8 <strtok_r>
 8001d48:	61b8      	str	r0, [r7, #24]
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1eb      	bne.n	8001d28 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	8afa      	ldrh	r2, [r7, #22]
 8001d54:	f8a3 2112 	strh.w	r2, [r3, #274]	@ 0x112

  if (argc > 0)
 8001d58:	8afb      	ldrh	r3, [r7, #22]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <cliParseArgs+0x82>
  {
    ret = true;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8001d62:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3720      	adds	r7, #32
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20000004 	.word	0x20000004

08001d70 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 8001d70:	b40f      	push	{r0, r1, r2, r3}
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001db4 <cliPrintf+0x44>)
 8001d80:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f103 0011 	add.w	r0, r3, #17
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69ba      	ldr	r2, [r7, #24]
 8001d8c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d90:	f009 f9ba 	bl	800b108 <vsniprintf>
 8001d94:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	7818      	ldrb	r0, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	3311      	adds	r3, #17
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	4619      	mov	r1, r3
 8001da2:	f000 fc97 	bl	80026d4 <uartWrite>
}
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001db0:	b004      	add	sp, #16
 8001db2:	4770      	bx	lr
 8001db4:	20000208 	.word	0x20000208

08001db8 <cliToUpper>:

void cliToUpper(char *str)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	81fb      	strh	r3, [r7, #14]
 8001dc4:	e018      	b.n	8001df8 <cliToUpper+0x40>
  {
    str_ch = str[i];
 8001dc6:	89fb      	ldrh	r3, [r7, #14]
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	4413      	add	r3, r2
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8001dd0:	7b7b      	ldrb	r3, [r7, #13]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d014      	beq.n	8001e00 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 8001dd6:	7b7b      	ldrb	r3, [r7, #13]
 8001dd8:	2b60      	cmp	r3, #96	@ 0x60
 8001dda:	d905      	bls.n	8001de8 <cliToUpper+0x30>
 8001ddc:	7b7b      	ldrb	r3, [r7, #13]
 8001dde:	2b7a      	cmp	r3, #122	@ 0x7a
 8001de0:	d802      	bhi.n	8001de8 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8001de2:	7b7b      	ldrb	r3, [r7, #13]
 8001de4:	3b20      	subs	r3, #32
 8001de6:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 8001de8:	89fb      	ldrh	r3, [r7, #14]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	7b7a      	ldrb	r2, [r7, #13]
 8001df0:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001df2:	89fb      	ldrh	r3, [r7, #14]
 8001df4:	3301      	adds	r3, #1
 8001df6:	81fb      	strh	r3, [r7, #14]
 8001df8:	89fb      	ldrh	r3, [r7, #14]
 8001dfa:	2b0f      	cmp	r3, #15
 8001dfc:	d9e3      	bls.n	8001dc6 <cliToUpper+0xe>
 8001dfe:	e000      	b.n	8001e02 <cliToUpper+0x4a>
      break;
 8001e00:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8001e02:	89fb      	ldrh	r3, [r7, #14]
 8001e04:	2b10      	cmp	r3, #16
 8001e06:	d105      	bne.n	8001e14 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8001e08:	89fb      	ldrh	r3, [r7, #14]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	4413      	add	r3, r2
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]
  }
}
 8001e14:	bf00      	nop
 8001e16:	3714      	adds	r7, #20
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
	...

08001e20 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e6c <cliArgsGetData+0x4c>)
 8001e30:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	@ 0x4b0
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d301      	bcc.n	8001e44 <cliArgsGetData+0x24>
  {
    return 0;
 8001e40:	2300      	movs	r3, #0
 8001e42:	e00e      	b.n	8001e62 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f8d3 24b4 	ldr.w	r2, [r3, #1204]	@ 0x4b4
 8001e4a:	79fb      	ldrb	r3, [r7, #7]
 8001e4c:	009b      	lsls	r3, r3, #2
 8001e4e:	4413      	add	r3, r2
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f009 f81c 	bl	800ae94 <strtoul>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	60fb      	str	r3, [r7, #12]

  return ret;
 8001e60:	68fb      	ldr	r3, [r7, #12]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000208 	.word	0x20000208

08001e70 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001e80:	4b0e      	ldr	r3, [pc, #56]	@ (8001ebc <cliArgsGetFloat+0x4c>)
 8001e82:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	@ 0x4b0
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d302      	bcc.n	8001e98 <cliArgsGetFloat+0x28>
  {
    return 0;
 8001e92:	f04f 0300 	mov.w	r3, #0
 8001e96:	e00c      	b.n	8001eb2 <cliArgsGetFloat+0x42>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	f8d3 24b4 	ldr.w	r2, [r3, #1204]	@ 0x4b4
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4413      	add	r3, r2
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f008 ff2d 	bl	800ad08 <strtof>
 8001eae:	60f8      	str	r0, [r7, #12]

  return ret;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	20000208 	.word	0x20000208

08001ec0 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001ece:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <cliArgsGetStr+0x40>)
 8001ed0:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	@ 0x4b0
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d301      	bcc.n	8001ee4 <cliArgsGetStr+0x24>
  {
    return 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	e008      	b.n	8001ef6 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f8d3 24b4 	ldr.w	r2, [r3, #1204]	@ 0x4b4
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4413      	add	r3, r2
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	60fb      	str	r3, [r7, #12]

  return ret;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr
 8001f00:	20000208 	.word	0x20000208

08001f04 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	6039      	str	r1, [r7, #0]
 8001f0e:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001f10:	2300      	movs	r3, #0
 8001f12:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8001f14:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <cliArgsIsStr+0x50>)
 8001f16:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f8b3 34b0 	ldrh.w	r3, [r3, #1200]	@ 0x4b0
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d301      	bcc.n	8001f2a <cliArgsIsStr+0x26>
  {
    return 0;
 8001f26:	2300      	movs	r3, #0
 8001f28:	e010      	b.n	8001f4c <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	f8d3 24b4 	ldr.w	r2, [r3, #1204]	@ 0x4b4
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	4413      	add	r3, r2
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4619      	mov	r1, r3
 8001f3a:	6838      	ldr	r0, [r7, #0]
 8001f3c:	f7fe f908 	bl	8000150 <strcmp>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <cliArgsIsStr+0x46>
  {
    ret = true;
 8001f46:	2301      	movs	r3, #1
 8001f48:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3710      	adds	r7, #16
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000208 	.word	0x20000208

08001f58 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <cliKeepLoop+0x28>)
 8001f60:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f000 fb34 	bl	80025d4 <uartAvailable>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <cliKeepLoop+0x1e>
  {
    return true;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e000      	b.n	8001f78 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 8001f76:	2300      	movs	r3, #0
  }
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20000208 	.word	0x20000208

08001f84 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  bool ret = true;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 8001f92:	4b1f      	ldr	r3, [pc, #124]	@ (8002010 <cliAdd+0x8c>)
 8001f94:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	f8b3 336e 	ldrh.w	r3, [r3, #878]	@ 0x36e
 8001f9c:	2b0f      	cmp	r3, #15
 8001f9e:	d901      	bls.n	8001fa4 <cliAdd+0x20>
  {
    return false;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	e030      	b.n	8002006 <cliAdd+0x82>
  }

  index = p_cli->cmd_count;
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	f8b3 336e 	ldrh.w	r3, [r3, #878]	@ 0x36e
 8001faa:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 8001fac:	89fa      	ldrh	r2, [r7, #14]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	f503 735c 	add.w	r3, r3, #880	@ 0x370
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f009 f968 	bl	800b296 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8001fc6:	89fa      	ldrh	r2, [r7, #14]
 8001fc8:	6939      	ldr	r1, [r7, #16]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	f503 7360 	add.w	r3, r3, #896	@ 0x380
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 8001fdc:	89fa      	ldrh	r2, [r7, #14]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	4413      	add	r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	f503 735c 	add.w	r3, r3, #880	@ 0x370
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	4413      	add	r3, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fee2 	bl	8001db8 <cliToUpper>

  p_cli->cmd_count++;
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	f8b3 336e 	ldrh.w	r3, [r3, #878]	@ 0x36e
 8001ffa:	3301      	adds	r3, #1
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	f8a3 236e 	strh.w	r2, [r3, #878]	@ 0x36e

  return ret;
 8002004:	7dfb      	ldrb	r3, [r7, #23]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3718      	adds	r7, #24
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000208 	.word	0x20000208

08002014 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 800201c:	4b15      	ldr	r3, [pc, #84]	@ (8002074 <cliShowList+0x60>)
 800201e:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8002020:	4815      	ldr	r0, [pc, #84]	@ (8002078 <cliShowList+0x64>)
 8002022:	f7ff fea5 	bl	8001d70 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8002026:	4815      	ldr	r0, [pc, #84]	@ (800207c <cliShowList+0x68>)
 8002028:	f7ff fea2 	bl	8001d70 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	e011      	b.n	8002056 <cliShowList+0x42>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	4613      	mov	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4413      	add	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	f503 735c 	add.w	r3, r3, #880	@ 0x370
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	4413      	add	r3, r2
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fe93 	bl	8001d70 <cliPrintf>
    cliPrintf("\r\n");
 800204a:	480b      	ldr	r0, [pc, #44]	@ (8002078 <cliShowList+0x64>)
 800204c:	f7ff fe90 	bl	8001d70 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	3301      	adds	r3, #1
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	f8b3 336e 	ldrh.w	r3, [r3, #878]	@ 0x36e
 800205c:	461a      	mov	r2, r3
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	4293      	cmp	r3, r2
 8002062:	dbe6      	blt.n	8002032 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 8002064:	4806      	ldr	r0, [pc, #24]	@ (8002080 <cliShowList+0x6c>)
 8002066:	f7ff fe83 	bl	8001d70 <cliPrintf>
}
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000208 	.word	0x20000208
 8002078:	0800d3f8 	.word	0x0800d3f8
 800207c:	0800d3fc 	.word	0x0800d3fc
 8002080:	0800d41c 	.word	0x0800d41c

08002084 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08c      	sub	sp, #48	@ 0x30
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 800208c:	2310      	movs	r3, #16
 800208e:	62bb      	str	r3, [r7, #40]	@ 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	881b      	ldrh	r3, [r3, #0]
 8002094:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d103      	bne.n	80020ac <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 80020a4:	4840      	ldr	r0, [pc, #256]	@ (80021a8 <cliMemoryDump+0x124>)
 80020a6:	f7ff fe63 	bl	8001d70 <cliPrintf>
 80020aa:	e07a      	b.n	80021a2 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	dd09      	ble.n	80020c6 <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	3304      	adds	r3, #4
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2200      	movs	r2, #0
 80020ba:	2100      	movs	r1, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	f008 fee9 	bl	800ae94 <strtoul>
 80020c2:	4603      	mov	r3, r0
 80020c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	2200      	movs	r2, #0
 80020cc:	2100      	movs	r1, #0
 80020ce:	4618      	mov	r0, r3
 80020d0:	f008 fee0 	bl	800ae94 <strtoul>
 80020d4:	4603      	mov	r3, r0
 80020d6:	627b      	str	r3, [r7, #36]	@ 0x24
  ascptr = (unsigned int *)addr;
 80020d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020da:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 80020dc:	4833      	ldr	r0, [pc, #204]	@ (80021ac <cliMemoryDump+0x128>)
 80020de:	f7ff fe47 	bl	8001d70 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80020e6:	e058      	b.n	800219a <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 80020e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d104      	bne.n	80020fc <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	4619      	mov	r1, r3
 80020f6:	482e      	ldr	r0, [pc, #184]	@ (80021b0 <cliMemoryDump+0x12c>)
 80020f8:	f7ff fe3a 	bl	8001d70 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 80020fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4619      	mov	r1, r3
 8002102:	482c      	ldr	r0, [pc, #176]	@ (80021b4 <cliMemoryDump+0x130>)
 8002104:	f7ff fe34 	bl	8001d70 <cliPrintf>

    if ((idx%4) == 3)
 8002108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800210a:	425a      	negs	r2, r3
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	f002 0203 	and.w	r2, r2, #3
 8002114:	bf58      	it	pl
 8002116:	4253      	negpl	r3, r2
 8002118:	2b03      	cmp	r3, #3
 800211a:	d138      	bne.n	800218e <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 800211c:	4826      	ldr	r0, [pc, #152]	@ (80021b8 <cliMemoryDump+0x134>)
 800211e:	f7ff fe27 	bl	8001d70 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 8002122:	2300      	movs	r3, #0
 8002124:	623b      	str	r3, [r7, #32]
 8002126:	e02c      	b.n	8002182 <cliMemoryDump+0xfe>
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	e01d      	b.n	8002170 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8002134:	f107 020c 	add.w	r2, r7, #12
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	4413      	add	r3, r2
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b1f      	cmp	r3, #31
 8002140:	d910      	bls.n	8002164 <cliMemoryDump+0xe0>
 8002142:	f107 020c 	add.w	r2, r7, #12
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	4413      	add	r3, r2
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b7e      	cmp	r3, #126	@ 0x7e
 800214e:	d809      	bhi.n	8002164 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8002150:	f107 020c 	add.w	r2, r7, #12
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	4413      	add	r3, r2
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	4619      	mov	r1, r3
 800215c:	4817      	ldr	r0, [pc, #92]	@ (80021bc <cliMemoryDump+0x138>)
 800215e:	f7ff fe07 	bl	8001d70 <cliPrintf>
 8002162:	e002      	b.n	800216a <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8002164:	4816      	ldr	r0, [pc, #88]	@ (80021c0 <cliMemoryDump+0x13c>)
 8002166:	f7ff fe03 	bl	8001d70 <cliPrintf>
        for (i=0;i<4;i++)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3301      	adds	r3, #1
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	2b03      	cmp	r3, #3
 8002174:	ddde      	ble.n	8002134 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	3304      	adds	r3, #4
 800217a:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	3301      	adds	r3, #1
 8002180:	623b      	str	r3, [r7, #32]
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	2b03      	cmp	r3, #3
 8002186:	ddcf      	ble.n	8002128 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8002188:	480e      	ldr	r0, [pc, #56]	@ (80021c4 <cliMemoryDump+0x140>)
 800218a:	f7ff fdf1 	bl	8001d70 <cliPrintf>
    }
    addr++;
 800218e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002190:	3304      	adds	r3, #4
 8002192:	627b      	str	r3, [r7, #36]	@ 0x24
  for (idx = 0; idx<size; idx++)
 8002194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002196:	3301      	adds	r3, #1
 8002198:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800219a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800219c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800219e:	429a      	cmp	r2, r3
 80021a0:	dba2      	blt.n	80020e8 <cliMemoryDump+0x64>
  }
}
 80021a2:	3730      	adds	r7, #48	@ 0x30
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	0800d43c 	.word	0x0800d43c
 80021ac:	0800d450 	.word	0x0800d450
 80021b0:	0800d458 	.word	0x0800d458
 80021b4:	0800d464 	.word	0x0800d464
 80021b8:	0800d46c 	.word	0x0800d46c
 80021bc:	0800d470 	.word	0x0800d470
 80021c0:	0800d474 	.word	0x0800d474
 80021c4:	0800d478 	.word	0x0800d478

080021c8 <ledInit>:
static void cliLed(cli_args_t *args);
#endif


bool ledInit(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0
  bool ret = true;
 80021ce:	2301      	movs	r3, #1
 80021d0:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d2:	f107 0308 	add.w	r3, r7, #8
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	609a      	str	r2, [r3, #8]
 80021de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e0:	4b1c      	ldr	r3, [pc, #112]	@ (8002254 <ledInit+0x8c>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002254 <ledInit+0x8c>)
 80021e6:	f043 0310 	orr.w	r3, r3, #16
 80021ea:	6193      	str	r3, [r2, #24]
 80021ec:	4b19      	ldr	r3, [pc, #100]	@ (8002254 <ledInit+0x8c>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f003 0310 	and.w	r3, r3, #16
 80021f4:	607b      	str	r3, [r7, #4]
 80021f6:	687b      	ldr	r3, [r7, #4]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f8:	2301      	movs	r3, #1
 80021fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002200:	2302      	movs	r3, #2
 8002202:	617b      	str	r3, [r7, #20]

  for (int i=0; i<LED_MAX_CH; i++)
 8002204:	2300      	movs	r3, #0
 8002206:	61fb      	str	r3, [r7, #28]
 8002208:	e017      	b.n	800223a <ledInit+0x72>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 800220a:	4a13      	ldr	r2, [pc, #76]	@ (8002258 <ledInit+0x90>)
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4413      	add	r3, r2
 8002212:	889b      	ldrh	r3, [r3, #4]
 8002214:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8002216:	4a10      	ldr	r2, [pc, #64]	@ (8002258 <ledInit+0x90>)
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800221e:	f107 0208 	add.w	r2, r7, #8
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f001 f8bb 	bl	80033a0 <HAL_GPIO_Init>

    ledOff(i);
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	b2db      	uxtb	r3, r3
 800222e:	4618      	mov	r0, r3
 8002230:	f000 f818 	bl	8002264 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	3301      	adds	r3, #1
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	2b00      	cmp	r3, #0
 800223e:	dde4      	ble.n	800220a <ledInit+0x42>
  }

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 8002240:	4906      	ldr	r1, [pc, #24]	@ (800225c <ledInit+0x94>)
 8002242:	4807      	ldr	r0, [pc, #28]	@ (8002260 <ledInit+0x98>)
 8002244:	f7ff fe9e 	bl	8001f84 <cliAdd>
#endif

  return ret;
 8002248:	7efb      	ldrb	r3, [r7, #27]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3720      	adds	r7, #32
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40021000 	.word	0x40021000
 8002258:	20000008 	.word	0x20000008
 800225c:	080022dd 	.word	0x080022dd
 8002260:	0800d488 	.word	0x0800d488

08002264 <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d111      	bne.n	8002298 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	4a0a      	ldr	r2, [pc, #40]	@ (80022a0 <ledOff+0x3c>)
 8002278:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	4a08      	ldr	r2, [pc, #32]	@ (80022a0 <ledOff+0x3c>)
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	4413      	add	r3, r2
 8002284:	8899      	ldrh	r1, [r3, #4]
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	4a05      	ldr	r2, [pc, #20]	@ (80022a0 <ledOff+0x3c>)
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	4413      	add	r3, r2
 800228e:	79db      	ldrb	r3, [r3, #7]
 8002290:	461a      	mov	r2, r3
 8002292:	f001 fac5 	bl	8003820 <HAL_GPIO_WritePin>
 8002296:	e000      	b.n	800229a <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8002298:	bf00      	nop
}
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20000008 	.word	0x20000008

080022a4 <ledToggle>:

void ledToggle(uint8_t ch)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10d      	bne.n	80022d0 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	4a08      	ldr	r2, [pc, #32]	@ (80022d8 <ledToggle+0x34>)
 80022b8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	4906      	ldr	r1, [pc, #24]	@ (80022d8 <ledToggle+0x34>)
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	440b      	add	r3, r1
 80022c4:	889b      	ldrh	r3, [r3, #4]
 80022c6:	4619      	mov	r1, r3
 80022c8:	4610      	mov	r0, r2
 80022ca:	f001 fac1 	bl	8003850 <HAL_GPIO_TogglePin>
 80022ce:	e000      	b.n	80022d2 <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 80022d0:	bf00      	nop
}
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000008 	.word	0x20000008

080022dc <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80022e4:	2300      	movs	r3, #0
 80022e6:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	881b      	ldrh	r3, [r3, #0]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d133      	bne.n	8002358 <cliLed+0x7c>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	491f      	ldr	r1, [pc, #124]	@ (8002374 <cliLed+0x98>)
 80022f6:	2000      	movs	r0, #0
 80022f8:	4798      	blx	r3
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d02b      	beq.n	8002358 <cliLed+0x7c>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = (uint8_t)args->getData(1);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2001      	movs	r0, #1
 8002306:	4798      	blx	r3
 8002308:	4603      	mov	r3, r0
 800230a:	75bb      	strb	r3, [r7, #22]
    toggle_time = (uint32_t)args->getData(2);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	2002      	movs	r0, #2
 8002312:	4798      	blx	r3
 8002314:	4603      	mov	r3, r0
 8002316:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 8002318:	7dbb      	ldrb	r3, [r7, #22]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <cliLed+0x48>
    {
      led_ch--;
 800231e:	7dbb      	ldrb	r3, [r7, #22]
 8002320:	3b01      	subs	r3, #1
 8002322:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 8002324:	f7fe fd1a 	bl	8000d5c <millis>
 8002328:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 800232a:	e00e      	b.n	800234a <cliLed+0x6e>
    {
      if (millis()-pre_time >= toggle_time)
 800232c:	f7fe fd16 	bl	8000d5c <millis>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	429a      	cmp	r2, r3
 800233a:	d806      	bhi.n	800234a <cliLed+0x6e>
      {
        pre_time = millis();
 800233c:	f7fe fd0e 	bl	8000d5c <millis>
 8002340:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 8002342:	7dbb      	ldrb	r3, [r7, #22]
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff ffad 	bl	80022a4 <ledToggle>
    while(cliKeepLoop())
 800234a:	f7ff fe05 	bl	8001f58 <cliKeepLoop>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1eb      	bne.n	800232c <cliLed+0x50>
      }
    }

    ret = true;
 8002354:	2301      	movs	r3, #1
 8002356:	75fb      	strb	r3, [r7, #23]
  }


  if (ret != true)
 8002358:	7dfb      	ldrb	r3, [r7, #23]
 800235a:	f083 0301 	eor.w	r3, r3, #1
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8002364:	2101      	movs	r1, #1
 8002366:	4804      	ldr	r0, [pc, #16]	@ (8002378 <cliLed+0x9c>)
 8002368:	f7ff fd02 	bl	8001d70 <cliPrintf>
  }
}
 800236c:	bf00      	nop
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	0800d48c 	.word	0x0800d48c
 8002378:	0800d494 	.word	0x0800d494

0800237c <uartInit>:
DMA_HandleTypeDef hdma_usart2_rx;
#endif


bool uartInit(void)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 8002382:	2300      	movs	r3, #0
 8002384:	607b      	str	r3, [r7, #4]
 8002386:	e007      	b.n	8002398 <uartInit+0x1c>
  {
    is_open[i] = false;
 8002388:	4a08      	ldr	r2, [pc, #32]	@ (80023ac <uartInit+0x30>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3301      	adds	r3, #1
 8002396:	607b      	str	r3, [r7, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2b01      	cmp	r3, #1
 800239c:	ddf4      	ble.n	8002388 <uartInit+0xc>
  }

  return true;
 800239e:	2301      	movs	r3, #1
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bc80      	pop	{r7}
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	200006d0 	.word	0x200006d0

080023b0 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	6039      	str	r1, [r7, #0]
 80023ba:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80023bc:	2300      	movs	r3, #0
 80023be:	75fb      	strb	r3, [r7, #23]

  switch(ch)
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d07c      	beq.n	80024c0 <uartOpen+0x110>
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	f300 80e8 	bgt.w	800259c <uartOpen+0x1ec>
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d002      	beq.n	80023d6 <uartOpen+0x26>
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d007      	beq.n	80023e4 <uartOpen+0x34>
 80023d4:	e0e2      	b.n	800259c <uartOpen+0x1ec>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	4a73      	ldr	r2, [pc, #460]	@ (80025a8 <uartOpen+0x1f8>)
 80023da:	2101      	movs	r1, #1
 80023dc:	54d1      	strb	r1, [r2, r3]
      ret = true;
 80023de:	2301      	movs	r3, #1
 80023e0:	75fb      	strb	r3, [r7, #23]
      break;
 80023e2:	e0db      	b.n	800259c <uartOpen+0x1ec>

    case _DEF_UART2:
      #ifdef _USE_UART2
      huart1.Instance         = USART1;
 80023e4:	4b71      	ldr	r3, [pc, #452]	@ (80025ac <uartOpen+0x1fc>)
 80023e6:	4a72      	ldr	r2, [pc, #456]	@ (80025b0 <uartOpen+0x200>)
 80023e8:	601a      	str	r2, [r3, #0]
      huart1.Init.BaudRate    = baud;
 80023ea:	4a70      	ldr	r2, [pc, #448]	@ (80025ac <uartOpen+0x1fc>)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6053      	str	r3, [r2, #4]
      huart1.Init.WordLength  = UART_WORDLENGTH_8B;
 80023f0:	4b6e      	ldr	r3, [pc, #440]	@ (80025ac <uartOpen+0x1fc>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	609a      	str	r2, [r3, #8]
      huart1.Init.StopBits    = UART_STOPBITS_1;
 80023f6:	4b6d      	ldr	r3, [pc, #436]	@ (80025ac <uartOpen+0x1fc>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	60da      	str	r2, [r3, #12]
      huart1.Init.Parity      = UART_PARITY_NONE;
 80023fc:	4b6b      	ldr	r3, [pc, #428]	@ (80025ac <uartOpen+0x1fc>)
 80023fe:	2200      	movs	r2, #0
 8002400:	611a      	str	r2, [r3, #16]
      huart1.Init.Mode        = UART_MODE_TX_RX;
 8002402:	4b6a      	ldr	r3, [pc, #424]	@ (80025ac <uartOpen+0x1fc>)
 8002404:	220c      	movs	r2, #12
 8002406:	615a      	str	r2, [r3, #20]
      huart1.Init.HwFlowCtl   = UART_HWCONTROL_NONE;
 8002408:	4b68      	ldr	r3, [pc, #416]	@ (80025ac <uartOpen+0x1fc>)
 800240a:	2200      	movs	r2, #0
 800240c:	619a      	str	r2, [r3, #24]
      huart1.Init.OverSampling= UART_OVERSAMPLING_16;
 800240e:	4b67      	ldr	r3, [pc, #412]	@ (80025ac <uartOpen+0x1fc>)
 8002410:	2200      	movs	r2, #0
 8002412:	61da      	str	r2, [r3, #28]

      HAL_UART_DeInit(&huart1);
 8002414:	4865      	ldr	r0, [pc, #404]	@ (80025ac <uartOpen+0x1fc>)
 8002416:	f003 faf1 	bl	80059fc <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf[0], 256);
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	011b      	lsls	r3, r3, #4
 800241e:	4a65      	ldr	r2, [pc, #404]	@ (80025b4 <uartOpen+0x204>)
 8002420:	4413      	add	r3, r2
 8002422:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002426:	4964      	ldr	r1, [pc, #400]	@ (80025b8 <uartOpen+0x208>)
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe fe7c 	bl	8001126 <qbufferCreate>

      __HAL_RCC_DMA1_CLK_ENABLE();
 800242e:	4b63      	ldr	r3, [pc, #396]	@ (80025bc <uartOpen+0x20c>)
 8002430:	695b      	ldr	r3, [r3, #20]
 8002432:	4a62      	ldr	r2, [pc, #392]	@ (80025bc <uartOpen+0x20c>)
 8002434:	f043 0301 	orr.w	r3, r3, #1
 8002438:	6153      	str	r3, [r2, #20]
 800243a:	4b60      	ldr	r3, [pc, #384]	@ (80025bc <uartOpen+0x20c>)
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]
      HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002446:	2200      	movs	r2, #0
 8002448:	2100      	movs	r1, #0
 800244a:	200f      	movs	r0, #15
 800244c:	f000 fc65 	bl	8002d1a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8002450:	200f      	movs	r0, #15
 8002452:	f000 fc7e 	bl	8002d52 <HAL_NVIC_EnableIRQ>


      if (HAL_UART_Init(&huart1) != HAL_OK)
 8002456:	4855      	ldr	r0, [pc, #340]	@ (80025ac <uartOpen+0x1fc>)
 8002458:	f003 fa80 	bl	800595c <HAL_UART_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d002      	beq.n	8002468 <uartOpen+0xb8>
      {
        ret = false;
 8002462:	2300      	movs	r3, #0
 8002464:	75fb      	strb	r3, [r7, #23]

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
      #endif
      break;
 8002466:	e099      	b.n	800259c <uartOpen+0x1ec>
        ret = true;
 8002468:	2301      	movs	r3, #1
 800246a:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	4a4e      	ldr	r2, [pc, #312]	@ (80025a8 <uartOpen+0x1f8>)
 8002470:	2101      	movs	r1, #1
 8002472:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart1, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8002474:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002478:	494f      	ldr	r1, [pc, #316]	@ (80025b8 <uartOpen+0x208>)
 800247a:	484c      	ldr	r0, [pc, #304]	@ (80025ac <uartOpen+0x1fc>)
 800247c:	f003 fb73 	bl	8005b66 <HAL_UART_Receive_DMA>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <uartOpen+0xda>
          ret = false;
 8002486:	2300      	movs	r3, #0
 8002488:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	4a49      	ldr	r2, [pc, #292]	@ (80025b4 <uartOpen+0x204>)
 800248e:	011b      	lsls	r3, r3, #4
 8002490:	4413      	add	r3, r2
 8002492:	3308      	adds	r3, #8
 8002494:	6819      	ldr	r1, [r3, #0]
 8002496:	4b4a      	ldr	r3, [pc, #296]	@ (80025c0 <uartOpen+0x210>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	1a8a      	subs	r2, r1, r2
 80024a0:	4944      	ldr	r1, [pc, #272]	@ (80025b4 <uartOpen+0x204>)
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	440b      	add	r3, r1
 80024a6:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 80024a8:	79fa      	ldrb	r2, [r7, #7]
 80024aa:	79fb      	ldrb	r3, [r7, #7]
 80024ac:	4941      	ldr	r1, [pc, #260]	@ (80025b4 <uartOpen+0x204>)
 80024ae:	0112      	lsls	r2, r2, #4
 80024b0:	440a      	add	r2, r1
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	493f      	ldr	r1, [pc, #252]	@ (80025b4 <uartOpen+0x204>)
 80024b6:	011b      	lsls	r3, r3, #4
 80024b8:	440b      	add	r3, r1
 80024ba:	3304      	adds	r3, #4
 80024bc:	601a      	str	r2, [r3, #0]
      break;
 80024be:	e06d      	b.n	800259c <uartOpen+0x1ec>

    case _DEF_UART3:
      #ifdef _USE_UART3
      huart2.Instance = USART2;
 80024c0:	4b40      	ldr	r3, [pc, #256]	@ (80025c4 <uartOpen+0x214>)
 80024c2:	4a41      	ldr	r2, [pc, #260]	@ (80025c8 <uartOpen+0x218>)
 80024c4:	601a      	str	r2, [r3, #0]
      huart2.Init.BaudRate = baud;
 80024c6:	4a3f      	ldr	r2, [pc, #252]	@ (80025c4 <uartOpen+0x214>)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	6053      	str	r3, [r2, #4]
      huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80024cc:	4b3d      	ldr	r3, [pc, #244]	@ (80025c4 <uartOpen+0x214>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
      huart2.Init.StopBits = UART_STOPBITS_1;
 80024d2:	4b3c      	ldr	r3, [pc, #240]	@ (80025c4 <uartOpen+0x214>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	60da      	str	r2, [r3, #12]
      huart2.Init.Parity = UART_PARITY_NONE;
 80024d8:	4b3a      	ldr	r3, [pc, #232]	@ (80025c4 <uartOpen+0x214>)
 80024da:	2200      	movs	r2, #0
 80024dc:	611a      	str	r2, [r3, #16]
      huart2.Init.Mode = UART_MODE_TX_RX;
 80024de:	4b39      	ldr	r3, [pc, #228]	@ (80025c4 <uartOpen+0x214>)
 80024e0:	220c      	movs	r2, #12
 80024e2:	615a      	str	r2, [r3, #20]
      huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024e4:	4b37      	ldr	r3, [pc, #220]	@ (80025c4 <uartOpen+0x214>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	619a      	str	r2, [r3, #24]
      huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024ea:	4b36      	ldr	r3, [pc, #216]	@ (80025c4 <uartOpen+0x214>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	61da      	str	r2, [r3, #28]
      HAL_UART_DeInit(&huart2);
 80024f0:	4834      	ldr	r0, [pc, #208]	@ (80025c4 <uartOpen+0x214>)
 80024f2:	f003 fa83 	bl	80059fc <HAL_UART_DeInit>

      qbufferCreate(&qbuffer[ch], &rx_buf2[0], 256);
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	4a2e      	ldr	r2, [pc, #184]	@ (80025b4 <uartOpen+0x204>)
 80024fc:	4413      	add	r3, r2
 80024fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002502:	4932      	ldr	r1, [pc, #200]	@ (80025cc <uartOpen+0x21c>)
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe fe0e 	bl	8001126 <qbufferCreate>

      __HAL_RCC_DMA1_CLK_ENABLE();
 800250a:	4b2c      	ldr	r3, [pc, #176]	@ (80025bc <uartOpen+0x20c>)
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	4a2b      	ldr	r2, [pc, #172]	@ (80025bc <uartOpen+0x20c>)
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	6153      	str	r3, [r2, #20]
 8002516:	4b29      	ldr	r3, [pc, #164]	@ (80025bc <uartOpen+0x20c>)
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	60fb      	str	r3, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
      HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8002522:	2200      	movs	r2, #0
 8002524:	2100      	movs	r1, #0
 8002526:	2010      	movs	r0, #16
 8002528:	f000 fbf7 	bl	8002d1a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800252c:	2010      	movs	r0, #16
 800252e:	f000 fc10 	bl	8002d52 <HAL_NVIC_EnableIRQ>

      if (HAL_UART_Init(&huart2) != HAL_OK)
 8002532:	4824      	ldr	r0, [pc, #144]	@ (80025c4 <uartOpen+0x214>)
 8002534:	f003 fa12 	bl	800595c <HAL_UART_Init>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d002      	beq.n	8002544 <uartOpen+0x194>
      {
        ret = false;
 800253e:	2300      	movs	r3, #0
 8002540:	75fb      	strb	r3, [r7, #23]

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
      #endif
      break;
 8002542:	e02a      	b.n	800259a <uartOpen+0x1ea>
        ret = true;
 8002544:	2301      	movs	r3, #1
 8002546:	75fb      	strb	r3, [r7, #23]
        is_open[ch] = true;
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	4a17      	ldr	r2, [pc, #92]	@ (80025a8 <uartOpen+0x1f8>)
 800254c:	2101      	movs	r1, #1
 800254e:	54d1      	strb	r1, [r2, r3]
        if(HAL_UART_Receive_DMA(&huart2, (uint8_t *)&rx_buf2[0], 256) != HAL_OK)
 8002550:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002554:	491d      	ldr	r1, [pc, #116]	@ (80025cc <uartOpen+0x21c>)
 8002556:	481b      	ldr	r0, [pc, #108]	@ (80025c4 <uartOpen+0x214>)
 8002558:	f003 fb05 	bl	8005b66 <HAL_UART_Receive_DMA>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <uartOpen+0x1b6>
          ret = false;
 8002562:	2300      	movs	r3, #0
 8002564:	75fb      	strb	r3, [r7, #23]
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR;
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	4a12      	ldr	r2, [pc, #72]	@ (80025b4 <uartOpen+0x204>)
 800256a:	011b      	lsls	r3, r3, #4
 800256c:	4413      	add	r3, r2
 800256e:	3308      	adds	r3, #8
 8002570:	6819      	ldr	r1, [r3, #0]
 8002572:	4b17      	ldr	r3, [pc, #92]	@ (80025d0 <uartOpen+0x220>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	79fb      	ldrb	r3, [r7, #7]
 800257a:	1a8a      	subs	r2, r1, r2
 800257c:	490d      	ldr	r1, [pc, #52]	@ (80025b4 <uartOpen+0x204>)
 800257e:	011b      	lsls	r3, r3, #4
 8002580:	440b      	add	r3, r1
 8002582:	601a      	str	r2, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8002584:	79fa      	ldrb	r2, [r7, #7]
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	490a      	ldr	r1, [pc, #40]	@ (80025b4 <uartOpen+0x204>)
 800258a:	0112      	lsls	r2, r2, #4
 800258c:	440a      	add	r2, r1
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	4908      	ldr	r1, [pc, #32]	@ (80025b4 <uartOpen+0x204>)
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	440b      	add	r3, r1
 8002596:	3304      	adds	r3, #4
 8002598:	601a      	str	r2, [r3, #0]
      break;
 800259a:	bf00      	nop
  }

  return ret;
 800259c:	7dfb      	ldrb	r3, [r7, #23]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	200006d0 	.word	0x200006d0
 80025ac:	200008f4 	.word	0x200008f4
 80025b0:	40013800 	.word	0x40013800
 80025b4:	200006d4 	.word	0x200006d4
 80025b8:	200006f4 	.word	0x200006f4
 80025bc:	40021000 	.word	0x40021000
 80025c0:	20000984 	.word	0x20000984
 80025c4:	2000093c 	.word	0x2000093c
 80025c8:	40004400 	.word	0x40004400
 80025cc:	200007f4 	.word	0x200007f4
 80025d0:	200009c8 	.word	0x200009c8

080025d4 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b084      	sub	sp, #16
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]

  switch(ch)
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d022      	beq.n	800262e <uartAvailable+0x5a>
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	dc38      	bgt.n	800265e <uartAvailable+0x8a>
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <uartAvailable+0x22>
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d004      	beq.n	80025fe <uartAvailable+0x2a>
 80025f4:	e033      	b.n	800265e <uartAvailable+0x8a>
  {
    case _DEF_UART1:
      ret = cdcAvailable();
 80025f6:	f007 fb29 	bl	8009c4c <cdcAvailable>
 80025fa:	60f8      	str	r0, [r7, #12]
      break;
 80025fc:	e02f      	b.n	800265e <uartAvailable+0x8a>

    case _DEF_UART2:
      #ifdef _USE_UART2
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR);
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	4a19      	ldr	r2, [pc, #100]	@ (8002668 <uartAvailable+0x94>)
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	4413      	add	r3, r2
 8002606:	3308      	adds	r3, #8
 8002608:	6819      	ldr	r1, [r3, #0]
 800260a:	4b18      	ldr	r3, [pc, #96]	@ (800266c <uartAvailable+0x98>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	1a8a      	subs	r2, r1, r2
 8002614:	4914      	ldr	r1, [pc, #80]	@ (8002668 <uartAvailable+0x94>)
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	440b      	add	r3, r1
 800261a:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	4a11      	ldr	r2, [pc, #68]	@ (8002668 <uartAvailable+0x94>)
 8002622:	4413      	add	r3, r2
 8002624:	4618      	mov	r0, r3
 8002626:	f7fe fdd4 	bl	80011d2 <qbufferAvailable>
 800262a:	60f8      	str	r0, [r7, #12]
      #endif
      break;
 800262c:	e017      	b.n	800265e <uartAvailable+0x8a>

    case _DEF_UART3:
      #ifdef _USE_UART3
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR);
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	4a0d      	ldr	r2, [pc, #52]	@ (8002668 <uartAvailable+0x94>)
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	4413      	add	r3, r2
 8002636:	3308      	adds	r3, #8
 8002638:	6819      	ldr	r1, [r3, #0]
 800263a:	4b0d      	ldr	r3, [pc, #52]	@ (8002670 <uartAvailable+0x9c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	685a      	ldr	r2, [r3, #4]
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	1a8a      	subs	r2, r1, r2
 8002644:	4908      	ldr	r1, [pc, #32]	@ (8002668 <uartAvailable+0x94>)
 8002646:	011b      	lsls	r3, r3, #4
 8002648:	440b      	add	r3, r1
 800264a:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	4a05      	ldr	r2, [pc, #20]	@ (8002668 <uartAvailable+0x94>)
 8002652:	4413      	add	r3, r2
 8002654:	4618      	mov	r0, r3
 8002656:	f7fe fdbc 	bl	80011d2 <qbufferAvailable>
 800265a:	60f8      	str	r0, [r7, #12]
      #endif
      break;
 800265c:	bf00      	nop
  }

  return ret;
 800265e:	68fb      	ldr	r3, [r7, #12]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	200006d4 	.word	0x200006d4
 800266c:	20000984 	.word	0x20000984
 8002670:	200009c8 	.word	0x200009c8

08002674 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	4603      	mov	r3, r0
 800267c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	2b02      	cmp	r3, #2
 8002686:	d013      	beq.n	80026b0 <uartRead+0x3c>
 8002688:	2b02      	cmp	r3, #2
 800268a:	dc19      	bgt.n	80026c0 <uartRead+0x4c>
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <uartRead+0x22>
 8002690:	2b01      	cmp	r3, #1
 8002692:	d005      	beq.n	80026a0 <uartRead+0x2c>
 8002694:	e014      	b.n	80026c0 <uartRead+0x4c>
  {
    case _DEF_UART1:
      ret = cdcRead();
 8002696:	f007 faf5 	bl	8009c84 <cdcRead>
 800269a:	4603      	mov	r3, r0
 800269c:	73fb      	strb	r3, [r7, #15]
      break;
 800269e:	e00f      	b.n	80026c0 <uartRead+0x4c>

    case _DEF_UART2:
      #ifdef _USE_UART2
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 80026a0:	f107 030f 	add.w	r3, r7, #15
 80026a4:	2201      	movs	r2, #1
 80026a6:	4619      	mov	r1, r3
 80026a8:	4808      	ldr	r0, [pc, #32]	@ (80026cc <uartRead+0x58>)
 80026aa:	f7fe fd56 	bl	800115a <qbufferRead>
      #endif
      break;
 80026ae:	e007      	b.n	80026c0 <uartRead+0x4c>

    case _DEF_UART3:
      #ifdef _USE_UART3
      qbufferRead(&qbuffer[_DEF_UART3], &ret, 1);
 80026b0:	f107 030f 	add.w	r3, r7, #15
 80026b4:	2201      	movs	r2, #1
 80026b6:	4619      	mov	r1, r3
 80026b8:	4805      	ldr	r0, [pc, #20]	@ (80026d0 <uartRead+0x5c>)
 80026ba:	f7fe fd4e 	bl	800115a <qbufferRead>
      #endif
      break;
 80026be:	bf00      	nop
  }

  return ret;
 80026c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	200006e4 	.word	0x200006e4
 80026d0:	200006f4 	.word	0x200006f4

080026d4 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	60b9      	str	r1, [r7, #8]
 80026de:	607a      	str	r2, [r7, #4]
 80026e0:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;

  switch(ch)
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d01b      	beq.n	8002724 <uartWrite+0x50>
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	dc2b      	bgt.n	8002748 <uartWrite+0x74>
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <uartWrite+0x26>
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d006      	beq.n	8002706 <uartWrite+0x32>
 80026f8:	e026      	b.n	8002748 <uartWrite+0x74>
  {
    case _DEF_UART1:
      ret = cdcWrite(p_data, length);
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	68b8      	ldr	r0, [r7, #8]
 80026fe:	f007 fae9 	bl	8009cd4 <cdcWrite>
 8002702:	6178      	str	r0, [r7, #20]
      break;
 8002704:	e020      	b.n	8002748 <uartWrite+0x74>

    case _DEF_UART2:
      #ifdef _USE_UART2
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	b29a      	uxth	r2, r3
 800270a:	2364      	movs	r3, #100	@ 0x64
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	4811      	ldr	r0, [pc, #68]	@ (8002754 <uartWrite+0x80>)
 8002710:	f003 f9a6 	bl	8005a60 <HAL_UART_Transmit>
 8002714:	4603      	mov	r3, r0
 8002716:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8002718:	7cfb      	ldrb	r3, [r7, #19]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d111      	bne.n	8002742 <uartWrite+0x6e>
      {
        ret = length;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	617b      	str	r3, [r7, #20]
      }
      #endif
      break;
 8002722:	e00e      	b.n	8002742 <uartWrite+0x6e>

    case _DEF_UART3:
      #ifdef _USE_UART3
      status = HAL_UART_Transmit(&huart2, p_data, length, 100);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	b29a      	uxth	r2, r3
 8002728:	2364      	movs	r3, #100	@ 0x64
 800272a:	68b9      	ldr	r1, [r7, #8]
 800272c:	480a      	ldr	r0, [pc, #40]	@ (8002758 <uartWrite+0x84>)
 800272e:	f003 f997 	bl	8005a60 <HAL_UART_Transmit>
 8002732:	4603      	mov	r3, r0
 8002734:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8002736:	7cfb      	ldrb	r3, [r7, #19]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d104      	bne.n	8002746 <uartWrite+0x72>
      {
        ret = length;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	617b      	str	r3, [r7, #20]
      }
      #endif
      break;
 8002740:	e001      	b.n	8002746 <uartWrite+0x72>
      break;
 8002742:	bf00      	nop
 8002744:	e000      	b.n	8002748 <uartWrite+0x74>
      break;
 8002746:	bf00      	nop
  }

  return ret;
 8002748:	697b      	ldr	r3, [r7, #20]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200008f4 	.word	0x200008f4
 8002758:	2000093c 	.word	0x2000093c

0800275c <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 800275c:	b40e      	push	{r1, r2, r3}
 800275e:	b580      	push	{r7, lr}
 8002760:	b0c7      	sub	sp, #284	@ 0x11c
 8002762:	af00      	add	r7, sp, #0
 8002764:	4602      	mov	r2, r0
 8002766:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 800276a:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 800276e:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8002770:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 8002774:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002778:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800277c:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 800277e:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8002782:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002786:	f107 0010 	add.w	r0, r7, #16
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8002790:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002794:	f008 fcb8 	bl	800b108 <vsniprintf>
 8002798:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 800279c:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80027a0:	f107 0110 	add.w	r1, r7, #16
 80027a4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80027a8:	f2a3 1311 	subw	r3, r3, #273	@ 0x111
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff ff90 	bl	80026d4 <uartWrite>
 80027b4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

  va_end(args);


  return ret;
 80027b8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80027bc:	4618      	mov	r0, r3
 80027be:	f507 778e 	add.w	r7, r7, #284	@ 0x11c
 80027c2:	46bd      	mov	sp, r7
 80027c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027c8:	b003      	add	sp, #12
 80027ca:	4770      	bx	lr

080027cc <HAL_UART_ErrorCallback>:



#ifdef _USE_UART2
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
  {
  }
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr

080027de <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
    qbufferWrite(&qbuffer[_DEF_UART2], &rx_data[_DEF_UART2], 1);

    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_data[_DEF_UART2], 1);
  }
#endif
}
 80027e6:	bf00      	nop
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bc80      	pop	{r7}
 80027ee:	4770      	bx	lr

080027f0 <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b08a      	sub	sp, #40	@ 0x28
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027f8:	f107 0318 	add.w	r3, r7, #24
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	605a      	str	r2, [r3, #4]
 8002802:	609a      	str	r2, [r3, #8]
 8002804:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a65      	ldr	r2, [pc, #404]	@ (80029a0 <HAL_UART_MspInit+0x1b0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d160      	bne.n	80028d2 <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002810:	4b64      	ldr	r3, [pc, #400]	@ (80029a4 <HAL_UART_MspInit+0x1b4>)
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	4a63      	ldr	r2, [pc, #396]	@ (80029a4 <HAL_UART_MspInit+0x1b4>)
 8002816:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800281a:	6193      	str	r3, [r2, #24]
 800281c:	4b61      	ldr	r3, [pc, #388]	@ (80029a4 <HAL_UART_MspInit+0x1b4>)
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002824:	617b      	str	r3, [r7, #20]
 8002826:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002828:	4b5e      	ldr	r3, [pc, #376]	@ (80029a4 <HAL_UART_MspInit+0x1b4>)
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	4a5d      	ldr	r2, [pc, #372]	@ (80029a4 <HAL_UART_MspInit+0x1b4>)
 800282e:	f043 0304 	orr.w	r3, r3, #4
 8002832:	6193      	str	r3, [r2, #24]
 8002834:	4b5b      	ldr	r3, [pc, #364]	@ (80029a4 <HAL_UART_MspInit+0x1b4>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002840:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002846:	2302      	movs	r3, #2
 8002848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800284a:	2303      	movs	r3, #3
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800284e:	f107 0318 	add.w	r3, r7, #24
 8002852:	4619      	mov	r1, r3
 8002854:	4854      	ldr	r0, [pc, #336]	@ (80029a8 <HAL_UART_MspInit+0x1b8>)
 8002856:	f000 fda3 	bl	80033a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800285a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800285e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002860:	2300      	movs	r3, #0
 8002862:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002864:	2300      	movs	r3, #0
 8002866:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002868:	f107 0318 	add.w	r3, r7, #24
 800286c:	4619      	mov	r1, r3
 800286e:	484e      	ldr	r0, [pc, #312]	@ (80029a8 <HAL_UART_MspInit+0x1b8>)
 8002870:	f000 fd96 	bl	80033a0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8002874:	4b4d      	ldr	r3, [pc, #308]	@ (80029ac <HAL_UART_MspInit+0x1bc>)
 8002876:	4a4e      	ldr	r2, [pc, #312]	@ (80029b0 <HAL_UART_MspInit+0x1c0>)
 8002878:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800287a:	4b4c      	ldr	r3, [pc, #304]	@ (80029ac <HAL_UART_MspInit+0x1bc>)
 800287c:	2200      	movs	r2, #0
 800287e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002880:	4b4a      	ldr	r3, [pc, #296]	@ (80029ac <HAL_UART_MspInit+0x1bc>)
 8002882:	2200      	movs	r2, #0
 8002884:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002886:	4b49      	ldr	r3, [pc, #292]	@ (80029ac <HAL_UART_MspInit+0x1bc>)
 8002888:	2280      	movs	r2, #128	@ 0x80
 800288a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800288c:	4b47      	ldr	r3, [pc, #284]	@ (80029ac <HAL_UART_MspInit+0x1bc>)
 800288e:	2200      	movs	r2, #0
 8002890:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002892:	4b46      	ldr	r3, [pc, #280]	@ (80029ac <HAL_UART_MspInit+0x1bc>)
 8002894:	2200      	movs	r2, #0
 8002896:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002898:	4b44      	ldr	r3, [pc, #272]	@ (80029ac <HAL_UART_MspInit+0x1bc>)
 800289a:	2200      	movs	r2, #0
 800289c:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800289e:	4b43      	ldr	r3, [pc, #268]	@ (80029ac <HAL_UART_MspInit+0x1bc>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80028a4:	4841      	ldr	r0, [pc, #260]	@ (80029ac <HAL_UART_MspInit+0x1bc>)
 80028a6:	f000 fa7d 	bl	8002da4 <HAL_DMA_Init>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d001      	beq.n	80028b4 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 80028b0:	f7fe fab5 	bl	8000e1e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	4a3d      	ldr	r2, [pc, #244]	@ (80029ac <HAL_UART_MspInit+0x1bc>)
 80028b8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80028ba:	4a3c      	ldr	r2, [pc, #240]	@ (80029ac <HAL_UART_MspInit+0x1bc>)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80028c0:	2200      	movs	r2, #0
 80028c2:	2100      	movs	r1, #0
 80028c4:	2025      	movs	r0, #37	@ 0x25
 80028c6:	f000 fa28 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028ca:	2025      	movs	r0, #37	@ 0x25
 80028cc:	f000 fa41 	bl	8002d52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80028d0:	e062      	b.n	8002998 <HAL_UART_MspInit+0x1a8>
  else if(uartHandle->Instance==USART2)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a37      	ldr	r2, [pc, #220]	@ (80029b4 <HAL_UART_MspInit+0x1c4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d15d      	bne.n	8002998 <HAL_UART_MspInit+0x1a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80028dc:	4b31      	ldr	r3, [pc, #196]	@ (80029a4 <HAL_UART_MspInit+0x1b4>)
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	4a30      	ldr	r2, [pc, #192]	@ (80029a4 <HAL_UART_MspInit+0x1b4>)
 80028e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028e6:	61d3      	str	r3, [r2, #28]
 80028e8:	4b2e      	ldr	r3, [pc, #184]	@ (80029a4 <HAL_UART_MspInit+0x1b4>)
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f4:	4b2b      	ldr	r3, [pc, #172]	@ (80029a4 <HAL_UART_MspInit+0x1b4>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	4a2a      	ldr	r2, [pc, #168]	@ (80029a4 <HAL_UART_MspInit+0x1b4>)
 80028fa:	f043 0304 	orr.w	r3, r3, #4
 80028fe:	6193      	str	r3, [r2, #24]
 8002900:	4b28      	ldr	r3, [pc, #160]	@ (80029a4 <HAL_UART_MspInit+0x1b4>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800290c:	2304      	movs	r3, #4
 800290e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002910:	2302      	movs	r3, #2
 8002912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002914:	2303      	movs	r3, #3
 8002916:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002918:	f107 0318 	add.w	r3, r7, #24
 800291c:	4619      	mov	r1, r3
 800291e:	4822      	ldr	r0, [pc, #136]	@ (80029a8 <HAL_UART_MspInit+0x1b8>)
 8002920:	f000 fd3e 	bl	80033a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002924:	2308      	movs	r3, #8
 8002926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002928:	2300      	movs	r3, #0
 800292a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292c:	2300      	movs	r3, #0
 800292e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002930:	f107 0318 	add.w	r3, r7, #24
 8002934:	4619      	mov	r1, r3
 8002936:	481c      	ldr	r0, [pc, #112]	@ (80029a8 <HAL_UART_MspInit+0x1b8>)
 8002938:	f000 fd32 	bl	80033a0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800293c:	4b1e      	ldr	r3, [pc, #120]	@ (80029b8 <HAL_UART_MspInit+0x1c8>)
 800293e:	4a1f      	ldr	r2, [pc, #124]	@ (80029bc <HAL_UART_MspInit+0x1cc>)
 8002940:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002942:	4b1d      	ldr	r3, [pc, #116]	@ (80029b8 <HAL_UART_MspInit+0x1c8>)
 8002944:	2200      	movs	r2, #0
 8002946:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002948:	4b1b      	ldr	r3, [pc, #108]	@ (80029b8 <HAL_UART_MspInit+0x1c8>)
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800294e:	4b1a      	ldr	r3, [pc, #104]	@ (80029b8 <HAL_UART_MspInit+0x1c8>)
 8002950:	2280      	movs	r2, #128	@ 0x80
 8002952:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002954:	4b18      	ldr	r3, [pc, #96]	@ (80029b8 <HAL_UART_MspInit+0x1c8>)
 8002956:	2200      	movs	r2, #0
 8002958:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800295a:	4b17      	ldr	r3, [pc, #92]	@ (80029b8 <HAL_UART_MspInit+0x1c8>)
 800295c:	2200      	movs	r2, #0
 800295e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8002960:	4b15      	ldr	r3, [pc, #84]	@ (80029b8 <HAL_UART_MspInit+0x1c8>)
 8002962:	2200      	movs	r2, #0
 8002964:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002966:	4b14      	ldr	r3, [pc, #80]	@ (80029b8 <HAL_UART_MspInit+0x1c8>)
 8002968:	2200      	movs	r2, #0
 800296a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800296c:	4812      	ldr	r0, [pc, #72]	@ (80029b8 <HAL_UART_MspInit+0x1c8>)
 800296e:	f000 fa19 	bl	8002da4 <HAL_DMA_Init>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d001      	beq.n	800297c <HAL_UART_MspInit+0x18c>
      Error_Handler();
 8002978:	f7fe fa51 	bl	8000e1e <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a0e      	ldr	r2, [pc, #56]	@ (80029b8 <HAL_UART_MspInit+0x1c8>)
 8002980:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002982:	4a0d      	ldr	r2, [pc, #52]	@ (80029b8 <HAL_UART_MspInit+0x1c8>)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6253      	str	r3, [r2, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002988:	2200      	movs	r2, #0
 800298a:	2100      	movs	r1, #0
 800298c:	2026      	movs	r0, #38	@ 0x26
 800298e:	f000 f9c4 	bl	8002d1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002992:	2026      	movs	r0, #38	@ 0x26
 8002994:	f000 f9dd 	bl	8002d52 <HAL_NVIC_EnableIRQ>
}
 8002998:	bf00      	nop
 800299a:	3728      	adds	r7, #40	@ 0x28
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40013800 	.word	0x40013800
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40010800 	.word	0x40010800
 80029ac:	20000984 	.word	0x20000984
 80029b0:	40020058 	.word	0x40020058
 80029b4:	40004400 	.word	0x40004400
 80029b8:	200009c8 	.word	0x200009c8
 80029bc:	4002006c 	.word	0x4002006c

080029c0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a18      	ldr	r2, [pc, #96]	@ (8002a30 <HAL_UART_MspDeInit+0x70>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d113      	bne.n	80029fa <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 80029d2:	4b18      	ldr	r3, [pc, #96]	@ (8002a34 <HAL_UART_MspDeInit+0x74>)
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	4a17      	ldr	r2, [pc, #92]	@ (8002a34 <HAL_UART_MspDeInit+0x74>)
 80029d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029dc:	6193      	str	r3, [r2, #24]

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 80029de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80029e2:	4815      	ldr	r0, [pc, #84]	@ (8002a38 <HAL_UART_MspDeInit+0x78>)
 80029e4:	f000 fe60 	bl	80036a8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 fa33 	bl	8002e58 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 80029f2:	2025      	movs	r0, #37	@ 0x25
 80029f4:	f000 f9bb 	bl	8002d6e <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 80029f8:	e016      	b.n	8002a28 <HAL_UART_MspDeInit+0x68>
  else if(uartHandle->Instance==USART2)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a0f      	ldr	r2, [pc, #60]	@ (8002a3c <HAL_UART_MspDeInit+0x7c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d111      	bne.n	8002a28 <HAL_UART_MspDeInit+0x68>
    __HAL_RCC_USART2_CLK_DISABLE();
 8002a04:	4b0b      	ldr	r3, [pc, #44]	@ (8002a34 <HAL_UART_MspDeInit+0x74>)
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	4a0a      	ldr	r2, [pc, #40]	@ (8002a34 <HAL_UART_MspDeInit+0x74>)
 8002a0a:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002a0e:	61d3      	str	r3, [r2, #28]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8002a10:	210c      	movs	r1, #12
 8002a12:	4809      	ldr	r0, [pc, #36]	@ (8002a38 <HAL_UART_MspDeInit+0x78>)
 8002a14:	f000 fe48 	bl	80036a8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 fa1b 	bl	8002e58 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002a22:	2026      	movs	r0, #38	@ 0x26
 8002a24:	f000 f9a3 	bl	8002d6e <HAL_NVIC_DisableIRQ>
}
 8002a28:	bf00      	nop
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40013800 	.word	0x40013800
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40010800 	.word	0x40010800
 8002a3c:	40004400 	.word	0x40004400

08002a40 <hwInit>:


#include "hw.h"

void hwInit(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  bspInit();
 8002a44:	f7fe f958 	bl	8000cf8 <bspInit>

  ledInit();
 8002a48:	f7ff fbbe 	bl	80021c8 <ledInit>
  cdcInit();
 8002a4c:	f7fe fc5e 	bl	800130c <cdcInit>
  uartInit();
 8002a50:	f7ff fc94 	bl	800237c <uartInit>
  cliInit();
 8002a54:	f7fe fc74 	bl	8001340 <cliInit>
  beaconInit();
 8002a58:	f7fe fbd2 	bl	8001200 <beaconInit>
}
 8002a5c:	bf00      	nop
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a64:	4b08      	ldr	r3, [pc, #32]	@ (8002a88 <HAL_Init+0x28>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a07      	ldr	r2, [pc, #28]	@ (8002a88 <HAL_Init+0x28>)
 8002a6a:	f043 0310 	orr.w	r3, r3, #16
 8002a6e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a70:	2003      	movs	r0, #3
 8002a72:	f000 f947 	bl	8002d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a76:	200f      	movs	r0, #15
 8002a78:	f000 f808 	bl	8002a8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a7c:	f7fe f9d6 	bl	8000e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40022000 	.word	0x40022000

08002a8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a94:	4b12      	ldr	r3, [pc, #72]	@ (8002ae0 <HAL_InitTick+0x54>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4b12      	ldr	r3, [pc, #72]	@ (8002ae4 <HAL_InitTick+0x58>)
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 f96d 	bl	8002d8a <HAL_SYSTICK_Config>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e00e      	b.n	8002ad8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b0f      	cmp	r3, #15
 8002abe:	d80a      	bhi.n	8002ad6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac8:	f000 f927 	bl	8002d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002acc:	4a06      	ldr	r2, [pc, #24]	@ (8002ae8 <HAL_InitTick+0x5c>)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	e000      	b.n	8002ad8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	20000000 	.word	0x20000000
 8002ae4:	20000014 	.word	0x20000014
 8002ae8:	20000010 	.word	0x20000010

08002aec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002af0:	4b05      	ldr	r3, [pc, #20]	@ (8002b08 <HAL_IncTick+0x1c>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	461a      	mov	r2, r3
 8002af6:	4b05      	ldr	r3, [pc, #20]	@ (8002b0c <HAL_IncTick+0x20>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4413      	add	r3, r2
 8002afc:	4a03      	ldr	r2, [pc, #12]	@ (8002b0c <HAL_IncTick+0x20>)
 8002afe:	6013      	str	r3, [r2, #0]
}
 8002b00:	bf00      	nop
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr
 8002b08:	20000014 	.word	0x20000014
 8002b0c:	20000a0c 	.word	0x20000a0c

08002b10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b10:	b480      	push	{r7}
 8002b12:	af00      	add	r7, sp, #0
  return uwTick;
 8002b14:	4b02      	ldr	r3, [pc, #8]	@ (8002b20 <HAL_GetTick+0x10>)
 8002b16:	681b      	ldr	r3, [r3, #0]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bc80      	pop	{r7}
 8002b1e:	4770      	bx	lr
 8002b20:	20000a0c 	.word	0x20000a0c

08002b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b34:	4b0c      	ldr	r3, [pc, #48]	@ (8002b68 <__NVIC_SetPriorityGrouping+0x44>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b40:	4013      	ands	r3, r2
 8002b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b56:	4a04      	ldr	r2, [pc, #16]	@ (8002b68 <__NVIC_SetPriorityGrouping+0x44>)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	60d3      	str	r3, [r2, #12]
}
 8002b5c:	bf00      	nop
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b70:	4b04      	ldr	r3, [pc, #16]	@ (8002b84 <__NVIC_GetPriorityGrouping+0x18>)
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	0a1b      	lsrs	r3, r3, #8
 8002b76:	f003 0307 	and.w	r3, r3, #7
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	4603      	mov	r3, r0
 8002b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	db0b      	blt.n	8002bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	f003 021f 	and.w	r2, r3, #31
 8002ba0:	4906      	ldr	r1, [pc, #24]	@ (8002bbc <__NVIC_EnableIRQ+0x34>)
 8002ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	2001      	movs	r0, #1
 8002baa:	fa00 f202 	lsl.w	r2, r0, r2
 8002bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr
 8002bbc:	e000e100 	.word	0xe000e100

08002bc0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	db12      	blt.n	8002bf8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	f003 021f 	and.w	r2, r3, #31
 8002bd8:	490a      	ldr	r1, [pc, #40]	@ (8002c04 <__NVIC_DisableIRQ+0x44>)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	2001      	movs	r0, #1
 8002be2:	fa00 f202 	lsl.w	r2, r0, r2
 8002be6:	3320      	adds	r3, #32
 8002be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002bec:	f3bf 8f4f 	dsb	sy
}
 8002bf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002bf2:	f3bf 8f6f 	isb	sy
}
 8002bf6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bc80      	pop	{r7}
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	e000e100 	.word	0xe000e100

08002c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	4603      	mov	r3, r0
 8002c10:	6039      	str	r1, [r7, #0]
 8002c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	db0a      	blt.n	8002c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	b2da      	uxtb	r2, r3
 8002c20:	490c      	ldr	r1, [pc, #48]	@ (8002c54 <__NVIC_SetPriority+0x4c>)
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	0112      	lsls	r2, r2, #4
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c30:	e00a      	b.n	8002c48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	b2da      	uxtb	r2, r3
 8002c36:	4908      	ldr	r1, [pc, #32]	@ (8002c58 <__NVIC_SetPriority+0x50>)
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	f003 030f 	and.w	r3, r3, #15
 8002c3e:	3b04      	subs	r3, #4
 8002c40:	0112      	lsls	r2, r2, #4
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	440b      	add	r3, r1
 8002c46:	761a      	strb	r2, [r3, #24]
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	e000e100 	.word	0xe000e100
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b089      	sub	sp, #36	@ 0x24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	60f8      	str	r0, [r7, #12]
 8002c64:	60b9      	str	r1, [r7, #8]
 8002c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f1c3 0307 	rsb	r3, r3, #7
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	bf28      	it	cs
 8002c7a:	2304      	movcs	r3, #4
 8002c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3304      	adds	r3, #4
 8002c82:	2b06      	cmp	r3, #6
 8002c84:	d902      	bls.n	8002c8c <NVIC_EncodePriority+0x30>
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	3b03      	subs	r3, #3
 8002c8a:	e000      	b.n	8002c8e <NVIC_EncodePriority+0x32>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c90:	f04f 32ff 	mov.w	r2, #4294967295
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9a:	43da      	mvns	r2, r3
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	401a      	ands	r2, r3
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cae:	43d9      	mvns	r1, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb4:	4313      	orrs	r3, r2
         );
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3724      	adds	r7, #36	@ 0x24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002cd0:	d301      	bcc.n	8002cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e00f      	b.n	8002cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002d00 <SysTick_Config+0x40>)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cde:	210f      	movs	r1, #15
 8002ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce4:	f7ff ff90 	bl	8002c08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce8:	4b05      	ldr	r3, [pc, #20]	@ (8002d00 <SysTick_Config+0x40>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cee:	4b04      	ldr	r3, [pc, #16]	@ (8002d00 <SysTick_Config+0x40>)
 8002cf0:	2207      	movs	r2, #7
 8002cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	e000e010 	.word	0xe000e010

08002d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff ff09 	bl	8002b24 <__NVIC_SetPriorityGrouping>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b086      	sub	sp, #24
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	4603      	mov	r3, r0
 8002d22:	60b9      	str	r1, [r7, #8]
 8002d24:	607a      	str	r2, [r7, #4]
 8002d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d2c:	f7ff ff1e 	bl	8002b6c <__NVIC_GetPriorityGrouping>
 8002d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	68b9      	ldr	r1, [r7, #8]
 8002d36:	6978      	ldr	r0, [r7, #20]
 8002d38:	f7ff ff90 	bl	8002c5c <NVIC_EncodePriority>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d42:	4611      	mov	r1, r2
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff ff5f 	bl	8002c08 <__NVIC_SetPriority>
}
 8002d4a:	bf00      	nop
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	b082      	sub	sp, #8
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	4603      	mov	r3, r0
 8002d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff ff11 	bl	8002b88 <__NVIC_EnableIRQ>
}
 8002d66:	bf00      	nop
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d6e:	b580      	push	{r7, lr}
 8002d70:	b082      	sub	sp, #8
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	4603      	mov	r3, r0
 8002d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7ff ff1f 	bl	8002bc0 <__NVIC_DisableIRQ>
}
 8002d82:	bf00      	nop
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff ff94 	bl	8002cc0 <SysTick_Config>
 8002d98:	4603      	mov	r3, r0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e043      	b.n	8002e42 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4b22      	ldr	r3, [pc, #136]	@ (8002e4c <HAL_DMA_Init+0xa8>)
 8002dc2:	4413      	add	r3, r2
 8002dc4:	4a22      	ldr	r2, [pc, #136]	@ (8002e50 <HAL_DMA_Init+0xac>)
 8002dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dca:	091b      	lsrs	r3, r3, #4
 8002dcc:	009a      	lsls	r2, r3, #2
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a1f      	ldr	r2, [pc, #124]	@ (8002e54 <HAL_DMA_Init+0xb0>)
 8002dd6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002dee:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002df2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	69db      	ldr	r3, [r3, #28]
 8002e1a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3714      	adds	r7, #20
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bc80      	pop	{r7}
 8002e4a:	4770      	bx	lr
 8002e4c:	bffdfff8 	.word	0xbffdfff8
 8002e50:	cccccccd 	.word	0xcccccccd
 8002e54:	40020000 	.word	0x40020000

08002e58 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e046      	b.n	8002ef8 <HAL_DMA_DeInit+0xa0>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0201 	bic.w	r2, r2, #1
 8002e78:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2200      	movs	r2, #0
 8002e88:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	609a      	str	r2, [r3, #8]

  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2200      	movs	r2, #0
 8002e98:	60da      	str	r2, [r3, #12]
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4b18      	ldr	r3, [pc, #96]	@ (8002f04 <HAL_DMA_DeInit+0xac>)
 8002ea2:	4413      	add	r3, r2
 8002ea4:	4a18      	ldr	r2, [pc, #96]	@ (8002f08 <HAL_DMA_DeInit+0xb0>)
 8002ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eaa:	091b      	lsrs	r3, r3, #4
 8002eac:	009a      	lsls	r2, r3, #2
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a15      	ldr	r2, [pc, #84]	@ (8002f0c <HAL_DMA_DeInit+0xb4>)
 8002eb6:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex));
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec6:	605a      	str	r2, [r3, #4]

  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma->XferHalfCpltCallback = NULL;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferErrorCallback = NULL;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferAbortCallback = NULL;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	bffdfff8 	.word	0xbffdfff8
 8002f08:	cccccccd 	.word	0xcccccccd
 8002f0c:	40020000 	.word	0x40020000

08002f10 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b086      	sub	sp, #24
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
 8002f1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d101      	bne.n	8002f30 <HAL_DMA_Start_IT+0x20>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	e04b      	b.n	8002fc8 <HAL_DMA_Start_IT+0xb8>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d13a      	bne.n	8002fba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2202      	movs	r2, #2
 8002f48:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 0201 	bic.w	r2, r2, #1
 8002f60:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f000 f9eb 	bl	8003344 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d008      	beq.n	8002f88 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f042 020e 	orr.w	r2, r2, #14
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	e00f      	b.n	8002fa8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0204 	bic.w	r2, r2, #4
 8002f96:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 020a 	orr.w	r2, r2, #10
 8002fa6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	e005      	b.n	8002fc6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3718      	adds	r7, #24
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d008      	beq.n	8002ffa <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2204      	movs	r2, #4
 8002fec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e020      	b.n	800303c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 020e 	bic.w	r2, r2, #14
 8003008:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0201 	bic.w	r2, r2, #1
 8003018:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003022:	2101      	movs	r1, #1
 8003024:	fa01 f202 	lsl.w	r2, r1, r2
 8003028:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800303a:	7bfb      	ldrb	r3, [r7, #15]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr
	...

08003048 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d005      	beq.n	800306c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2204      	movs	r2, #4
 8003064:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	73fb      	strb	r3, [r7, #15]
 800306a:	e051      	b.n	8003110 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 020e 	bic.w	r2, r2, #14
 800307a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0201 	bic.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a22      	ldr	r2, [pc, #136]	@ (800311c <HAL_DMA_Abort_IT+0xd4>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d029      	beq.n	80030ea <HAL_DMA_Abort_IT+0xa2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a21      	ldr	r2, [pc, #132]	@ (8003120 <HAL_DMA_Abort_IT+0xd8>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d022      	beq.n	80030e6 <HAL_DMA_Abort_IT+0x9e>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a1f      	ldr	r2, [pc, #124]	@ (8003124 <HAL_DMA_Abort_IT+0xdc>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d01a      	beq.n	80030e0 <HAL_DMA_Abort_IT+0x98>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a1e      	ldr	r2, [pc, #120]	@ (8003128 <HAL_DMA_Abort_IT+0xe0>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d012      	beq.n	80030da <HAL_DMA_Abort_IT+0x92>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a1c      	ldr	r2, [pc, #112]	@ (800312c <HAL_DMA_Abort_IT+0xe4>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d00a      	beq.n	80030d4 <HAL_DMA_Abort_IT+0x8c>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a1b      	ldr	r2, [pc, #108]	@ (8003130 <HAL_DMA_Abort_IT+0xe8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d102      	bne.n	80030ce <HAL_DMA_Abort_IT+0x86>
 80030c8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80030cc:	e00e      	b.n	80030ec <HAL_DMA_Abort_IT+0xa4>
 80030ce:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80030d2:	e00b      	b.n	80030ec <HAL_DMA_Abort_IT+0xa4>
 80030d4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030d8:	e008      	b.n	80030ec <HAL_DMA_Abort_IT+0xa4>
 80030da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80030de:	e005      	b.n	80030ec <HAL_DMA_Abort_IT+0xa4>
 80030e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80030e4:	e002      	b.n	80030ec <HAL_DMA_Abort_IT+0xa4>
 80030e6:	2310      	movs	r3, #16
 80030e8:	e000      	b.n	80030ec <HAL_DMA_Abort_IT+0xa4>
 80030ea:	2301      	movs	r3, #1
 80030ec:	4a11      	ldr	r2, [pc, #68]	@ (8003134 <HAL_DMA_Abort_IT+0xec>)
 80030ee:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	4798      	blx	r3
    } 
  }
  return status;
 8003110:	7bfb      	ldrb	r3, [r7, #15]
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40020008 	.word	0x40020008
 8003120:	4002001c 	.word	0x4002001c
 8003124:	40020030 	.word	0x40020030
 8003128:	40020044 	.word	0x40020044
 800312c:	40020058 	.word	0x40020058
 8003130:	4002006c 	.word	0x4002006c
 8003134:	40020000 	.word	0x40020000

08003138 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003154:	2204      	movs	r2, #4
 8003156:	409a      	lsls	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4013      	ands	r3, r2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d04f      	beq.n	8003200 <HAL_DMA_IRQHandler+0xc8>
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f003 0304 	and.w	r3, r3, #4
 8003166:	2b00      	cmp	r3, #0
 8003168:	d04a      	beq.n	8003200 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b00      	cmp	r3, #0
 8003176:	d107      	bne.n	8003188 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0204 	bic.w	r2, r2, #4
 8003186:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a66      	ldr	r2, [pc, #408]	@ (8003328 <HAL_DMA_IRQHandler+0x1f0>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d029      	beq.n	80031e6 <HAL_DMA_IRQHandler+0xae>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a65      	ldr	r2, [pc, #404]	@ (800332c <HAL_DMA_IRQHandler+0x1f4>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d022      	beq.n	80031e2 <HAL_DMA_IRQHandler+0xaa>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a63      	ldr	r2, [pc, #396]	@ (8003330 <HAL_DMA_IRQHandler+0x1f8>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d01a      	beq.n	80031dc <HAL_DMA_IRQHandler+0xa4>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a62      	ldr	r2, [pc, #392]	@ (8003334 <HAL_DMA_IRQHandler+0x1fc>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d012      	beq.n	80031d6 <HAL_DMA_IRQHandler+0x9e>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a60      	ldr	r2, [pc, #384]	@ (8003338 <HAL_DMA_IRQHandler+0x200>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00a      	beq.n	80031d0 <HAL_DMA_IRQHandler+0x98>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a5f      	ldr	r2, [pc, #380]	@ (800333c <HAL_DMA_IRQHandler+0x204>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d102      	bne.n	80031ca <HAL_DMA_IRQHandler+0x92>
 80031c4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80031c8:	e00e      	b.n	80031e8 <HAL_DMA_IRQHandler+0xb0>
 80031ca:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80031ce:	e00b      	b.n	80031e8 <HAL_DMA_IRQHandler+0xb0>
 80031d0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80031d4:	e008      	b.n	80031e8 <HAL_DMA_IRQHandler+0xb0>
 80031d6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80031da:	e005      	b.n	80031e8 <HAL_DMA_IRQHandler+0xb0>
 80031dc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031e0:	e002      	b.n	80031e8 <HAL_DMA_IRQHandler+0xb0>
 80031e2:	2340      	movs	r3, #64	@ 0x40
 80031e4:	e000      	b.n	80031e8 <HAL_DMA_IRQHandler+0xb0>
 80031e6:	2304      	movs	r3, #4
 80031e8:	4a55      	ldr	r2, [pc, #340]	@ (8003340 <HAL_DMA_IRQHandler+0x208>)
 80031ea:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 8094 	beq.w	800331e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80031fe:	e08e      	b.n	800331e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003204:	2202      	movs	r2, #2
 8003206:	409a      	lsls	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4013      	ands	r3, r2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d056      	beq.n	80032be <HAL_DMA_IRQHandler+0x186>
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d051      	beq.n	80032be <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0320 	and.w	r3, r3, #32
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10b      	bne.n	8003240 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 020a 	bic.w	r2, r2, #10
 8003236:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a38      	ldr	r2, [pc, #224]	@ (8003328 <HAL_DMA_IRQHandler+0x1f0>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d029      	beq.n	800329e <HAL_DMA_IRQHandler+0x166>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a37      	ldr	r2, [pc, #220]	@ (800332c <HAL_DMA_IRQHandler+0x1f4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d022      	beq.n	800329a <HAL_DMA_IRQHandler+0x162>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a35      	ldr	r2, [pc, #212]	@ (8003330 <HAL_DMA_IRQHandler+0x1f8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d01a      	beq.n	8003294 <HAL_DMA_IRQHandler+0x15c>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a34      	ldr	r2, [pc, #208]	@ (8003334 <HAL_DMA_IRQHandler+0x1fc>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d012      	beq.n	800328e <HAL_DMA_IRQHandler+0x156>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a32      	ldr	r2, [pc, #200]	@ (8003338 <HAL_DMA_IRQHandler+0x200>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d00a      	beq.n	8003288 <HAL_DMA_IRQHandler+0x150>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a31      	ldr	r2, [pc, #196]	@ (800333c <HAL_DMA_IRQHandler+0x204>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d102      	bne.n	8003282 <HAL_DMA_IRQHandler+0x14a>
 800327c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003280:	e00e      	b.n	80032a0 <HAL_DMA_IRQHandler+0x168>
 8003282:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003286:	e00b      	b.n	80032a0 <HAL_DMA_IRQHandler+0x168>
 8003288:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800328c:	e008      	b.n	80032a0 <HAL_DMA_IRQHandler+0x168>
 800328e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003292:	e005      	b.n	80032a0 <HAL_DMA_IRQHandler+0x168>
 8003294:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003298:	e002      	b.n	80032a0 <HAL_DMA_IRQHandler+0x168>
 800329a:	2320      	movs	r3, #32
 800329c:	e000      	b.n	80032a0 <HAL_DMA_IRQHandler+0x168>
 800329e:	2302      	movs	r3, #2
 80032a0:	4a27      	ldr	r2, [pc, #156]	@ (8003340 <HAL_DMA_IRQHandler+0x208>)
 80032a2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d034      	beq.n	800331e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80032bc:	e02f      	b.n	800331e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c2:	2208      	movs	r2, #8
 80032c4:	409a      	lsls	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d028      	beq.n	8003320 <HAL_DMA_IRQHandler+0x1e8>
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	f003 0308 	and.w	r3, r3, #8
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d023      	beq.n	8003320 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 020e 	bic.w	r2, r2, #14
 80032e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032f0:	2101      	movs	r1, #1
 80032f2:	fa01 f202 	lsl.w	r2, r1, r2
 80032f6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003312:	2b00      	cmp	r3, #0
 8003314:	d004      	beq.n	8003320 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	4798      	blx	r3
    }
  }
  return;
 800331e:	bf00      	nop
 8003320:	bf00      	nop
}
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40020008 	.word	0x40020008
 800332c:	4002001c 	.word	0x4002001c
 8003330:	40020030 	.word	0x40020030
 8003334:	40020044 	.word	0x40020044
 8003338:	40020058 	.word	0x40020058
 800333c:	4002006c 	.word	0x4002006c
 8003340:	40020000 	.word	0x40020000

08003344 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800335a:	2101      	movs	r1, #1
 800335c:	fa01 f202 	lsl.w	r2, r1, r2
 8003360:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b10      	cmp	r3, #16
 8003370:	d108      	bne.n	8003384 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003382:	e007      	b.n	8003394 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	60da      	str	r2, [r3, #12]
}
 8003394:	bf00      	nop
 8003396:	3714      	adds	r7, #20
 8003398:	46bd      	mov	sp, r7
 800339a:	bc80      	pop	{r7}
 800339c:	4770      	bx	lr
	...

080033a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b08b      	sub	sp, #44	@ 0x2c
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033aa:	2300      	movs	r3, #0
 80033ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80033ae:	2300      	movs	r3, #0
 80033b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033b2:	e169      	b.n	8003688 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80033b4:	2201      	movs	r2, #1
 80033b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	4013      	ands	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	f040 8158 	bne.w	8003682 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	4a9a      	ldr	r2, [pc, #616]	@ (8003640 <HAL_GPIO_Init+0x2a0>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d05e      	beq.n	800349a <HAL_GPIO_Init+0xfa>
 80033dc:	4a98      	ldr	r2, [pc, #608]	@ (8003640 <HAL_GPIO_Init+0x2a0>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d875      	bhi.n	80034ce <HAL_GPIO_Init+0x12e>
 80033e2:	4a98      	ldr	r2, [pc, #608]	@ (8003644 <HAL_GPIO_Init+0x2a4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d058      	beq.n	800349a <HAL_GPIO_Init+0xfa>
 80033e8:	4a96      	ldr	r2, [pc, #600]	@ (8003644 <HAL_GPIO_Init+0x2a4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d86f      	bhi.n	80034ce <HAL_GPIO_Init+0x12e>
 80033ee:	4a96      	ldr	r2, [pc, #600]	@ (8003648 <HAL_GPIO_Init+0x2a8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d052      	beq.n	800349a <HAL_GPIO_Init+0xfa>
 80033f4:	4a94      	ldr	r2, [pc, #592]	@ (8003648 <HAL_GPIO_Init+0x2a8>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d869      	bhi.n	80034ce <HAL_GPIO_Init+0x12e>
 80033fa:	4a94      	ldr	r2, [pc, #592]	@ (800364c <HAL_GPIO_Init+0x2ac>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d04c      	beq.n	800349a <HAL_GPIO_Init+0xfa>
 8003400:	4a92      	ldr	r2, [pc, #584]	@ (800364c <HAL_GPIO_Init+0x2ac>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d863      	bhi.n	80034ce <HAL_GPIO_Init+0x12e>
 8003406:	4a92      	ldr	r2, [pc, #584]	@ (8003650 <HAL_GPIO_Init+0x2b0>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d046      	beq.n	800349a <HAL_GPIO_Init+0xfa>
 800340c:	4a90      	ldr	r2, [pc, #576]	@ (8003650 <HAL_GPIO_Init+0x2b0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d85d      	bhi.n	80034ce <HAL_GPIO_Init+0x12e>
 8003412:	2b12      	cmp	r3, #18
 8003414:	d82a      	bhi.n	800346c <HAL_GPIO_Init+0xcc>
 8003416:	2b12      	cmp	r3, #18
 8003418:	d859      	bhi.n	80034ce <HAL_GPIO_Init+0x12e>
 800341a:	a201      	add	r2, pc, #4	@ (adr r2, 8003420 <HAL_GPIO_Init+0x80>)
 800341c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003420:	0800349b 	.word	0x0800349b
 8003424:	08003475 	.word	0x08003475
 8003428:	08003487 	.word	0x08003487
 800342c:	080034c9 	.word	0x080034c9
 8003430:	080034cf 	.word	0x080034cf
 8003434:	080034cf 	.word	0x080034cf
 8003438:	080034cf 	.word	0x080034cf
 800343c:	080034cf 	.word	0x080034cf
 8003440:	080034cf 	.word	0x080034cf
 8003444:	080034cf 	.word	0x080034cf
 8003448:	080034cf 	.word	0x080034cf
 800344c:	080034cf 	.word	0x080034cf
 8003450:	080034cf 	.word	0x080034cf
 8003454:	080034cf 	.word	0x080034cf
 8003458:	080034cf 	.word	0x080034cf
 800345c:	080034cf 	.word	0x080034cf
 8003460:	080034cf 	.word	0x080034cf
 8003464:	0800347d 	.word	0x0800347d
 8003468:	08003491 	.word	0x08003491
 800346c:	4a79      	ldr	r2, [pc, #484]	@ (8003654 <HAL_GPIO_Init+0x2b4>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d013      	beq.n	800349a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003472:	e02c      	b.n	80034ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	623b      	str	r3, [r7, #32]
          break;
 800347a:	e029      	b.n	80034d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	3304      	adds	r3, #4
 8003482:	623b      	str	r3, [r7, #32]
          break;
 8003484:	e024      	b.n	80034d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	3308      	adds	r3, #8
 800348c:	623b      	str	r3, [r7, #32]
          break;
 800348e:	e01f      	b.n	80034d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	330c      	adds	r3, #12
 8003496:	623b      	str	r3, [r7, #32]
          break;
 8003498:	e01a      	b.n	80034d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d102      	bne.n	80034a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034a2:	2304      	movs	r3, #4
 80034a4:	623b      	str	r3, [r7, #32]
          break;
 80034a6:	e013      	b.n	80034d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d105      	bne.n	80034bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034b0:	2308      	movs	r3, #8
 80034b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69fa      	ldr	r2, [r7, #28]
 80034b8:	611a      	str	r2, [r3, #16]
          break;
 80034ba:	e009      	b.n	80034d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034bc:	2308      	movs	r3, #8
 80034be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	69fa      	ldr	r2, [r7, #28]
 80034c4:	615a      	str	r2, [r3, #20]
          break;
 80034c6:	e003      	b.n	80034d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80034c8:	2300      	movs	r3, #0
 80034ca:	623b      	str	r3, [r7, #32]
          break;
 80034cc:	e000      	b.n	80034d0 <HAL_GPIO_Init+0x130>
          break;
 80034ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	2bff      	cmp	r3, #255	@ 0xff
 80034d4:	d801      	bhi.n	80034da <HAL_GPIO_Init+0x13a>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	e001      	b.n	80034de <HAL_GPIO_Init+0x13e>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	3304      	adds	r3, #4
 80034de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	2bff      	cmp	r3, #255	@ 0xff
 80034e4:	d802      	bhi.n	80034ec <HAL_GPIO_Init+0x14c>
 80034e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	e002      	b.n	80034f2 <HAL_GPIO_Init+0x152>
 80034ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ee:	3b08      	subs	r3, #8
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	210f      	movs	r1, #15
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	401a      	ands	r2, r3
 8003504:	6a39      	ldr	r1, [r7, #32]
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	fa01 f303 	lsl.w	r3, r1, r3
 800350c:	431a      	orrs	r2, r3
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 80b1 	beq.w	8003682 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003520:	4b4d      	ldr	r3, [pc, #308]	@ (8003658 <HAL_GPIO_Init+0x2b8>)
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	4a4c      	ldr	r2, [pc, #304]	@ (8003658 <HAL_GPIO_Init+0x2b8>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	6193      	str	r3, [r2, #24]
 800352c:	4b4a      	ldr	r3, [pc, #296]	@ (8003658 <HAL_GPIO_Init+0x2b8>)
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	f003 0301 	and.w	r3, r3, #1
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003538:	4a48      	ldr	r2, [pc, #288]	@ (800365c <HAL_GPIO_Init+0x2bc>)
 800353a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353c:	089b      	lsrs	r3, r3, #2
 800353e:	3302      	adds	r3, #2
 8003540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003544:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003548:	f003 0303 	and.w	r3, r3, #3
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	220f      	movs	r2, #15
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4013      	ands	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a40      	ldr	r2, [pc, #256]	@ (8003660 <HAL_GPIO_Init+0x2c0>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d013      	beq.n	800358c <HAL_GPIO_Init+0x1ec>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a3f      	ldr	r2, [pc, #252]	@ (8003664 <HAL_GPIO_Init+0x2c4>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00d      	beq.n	8003588 <HAL_GPIO_Init+0x1e8>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a3e      	ldr	r2, [pc, #248]	@ (8003668 <HAL_GPIO_Init+0x2c8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d007      	beq.n	8003584 <HAL_GPIO_Init+0x1e4>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a3d      	ldr	r2, [pc, #244]	@ (800366c <HAL_GPIO_Init+0x2cc>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d101      	bne.n	8003580 <HAL_GPIO_Init+0x1e0>
 800357c:	2303      	movs	r3, #3
 800357e:	e006      	b.n	800358e <HAL_GPIO_Init+0x1ee>
 8003580:	2304      	movs	r3, #4
 8003582:	e004      	b.n	800358e <HAL_GPIO_Init+0x1ee>
 8003584:	2302      	movs	r3, #2
 8003586:	e002      	b.n	800358e <HAL_GPIO_Init+0x1ee>
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <HAL_GPIO_Init+0x1ee>
 800358c:	2300      	movs	r3, #0
 800358e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003590:	f002 0203 	and.w	r2, r2, #3
 8003594:	0092      	lsls	r2, r2, #2
 8003596:	4093      	lsls	r3, r2
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800359e:	492f      	ldr	r1, [pc, #188]	@ (800365c <HAL_GPIO_Init+0x2bc>)
 80035a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a2:	089b      	lsrs	r3, r3, #2
 80035a4:	3302      	adds	r3, #2
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d006      	beq.n	80035c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80035b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003670 <HAL_GPIO_Init+0x2d0>)
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	492c      	ldr	r1, [pc, #176]	@ (8003670 <HAL_GPIO_Init+0x2d0>)
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	608b      	str	r3, [r1, #8]
 80035c4:	e006      	b.n	80035d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80035c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003670 <HAL_GPIO_Init+0x2d0>)
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	43db      	mvns	r3, r3
 80035ce:	4928      	ldr	r1, [pc, #160]	@ (8003670 <HAL_GPIO_Init+0x2d0>)
 80035d0:	4013      	ands	r3, r2
 80035d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d006      	beq.n	80035ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80035e0:	4b23      	ldr	r3, [pc, #140]	@ (8003670 <HAL_GPIO_Init+0x2d0>)
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	4922      	ldr	r1, [pc, #136]	@ (8003670 <HAL_GPIO_Init+0x2d0>)
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	60cb      	str	r3, [r1, #12]
 80035ec:	e006      	b.n	80035fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80035ee:	4b20      	ldr	r3, [pc, #128]	@ (8003670 <HAL_GPIO_Init+0x2d0>)
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	43db      	mvns	r3, r3
 80035f6:	491e      	ldr	r1, [pc, #120]	@ (8003670 <HAL_GPIO_Init+0x2d0>)
 80035f8:	4013      	ands	r3, r2
 80035fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d006      	beq.n	8003616 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003608:	4b19      	ldr	r3, [pc, #100]	@ (8003670 <HAL_GPIO_Init+0x2d0>)
 800360a:	685a      	ldr	r2, [r3, #4]
 800360c:	4918      	ldr	r1, [pc, #96]	@ (8003670 <HAL_GPIO_Init+0x2d0>)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	4313      	orrs	r3, r2
 8003612:	604b      	str	r3, [r1, #4]
 8003614:	e006      	b.n	8003624 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003616:	4b16      	ldr	r3, [pc, #88]	@ (8003670 <HAL_GPIO_Init+0x2d0>)
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	69bb      	ldr	r3, [r7, #24]
 800361c:	43db      	mvns	r3, r3
 800361e:	4914      	ldr	r1, [pc, #80]	@ (8003670 <HAL_GPIO_Init+0x2d0>)
 8003620:	4013      	ands	r3, r2
 8003622:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d021      	beq.n	8003674 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003630:	4b0f      	ldr	r3, [pc, #60]	@ (8003670 <HAL_GPIO_Init+0x2d0>)
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	490e      	ldr	r1, [pc, #56]	@ (8003670 <HAL_GPIO_Init+0x2d0>)
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	4313      	orrs	r3, r2
 800363a:	600b      	str	r3, [r1, #0]
 800363c:	e021      	b.n	8003682 <HAL_GPIO_Init+0x2e2>
 800363e:	bf00      	nop
 8003640:	10320000 	.word	0x10320000
 8003644:	10310000 	.word	0x10310000
 8003648:	10220000 	.word	0x10220000
 800364c:	10210000 	.word	0x10210000
 8003650:	10120000 	.word	0x10120000
 8003654:	10110000 	.word	0x10110000
 8003658:	40021000 	.word	0x40021000
 800365c:	40010000 	.word	0x40010000
 8003660:	40010800 	.word	0x40010800
 8003664:	40010c00 	.word	0x40010c00
 8003668:	40011000 	.word	0x40011000
 800366c:	40011400 	.word	0x40011400
 8003670:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003674:	4b0b      	ldr	r3, [pc, #44]	@ (80036a4 <HAL_GPIO_Init+0x304>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	43db      	mvns	r3, r3
 800367c:	4909      	ldr	r1, [pc, #36]	@ (80036a4 <HAL_GPIO_Init+0x304>)
 800367e:	4013      	ands	r3, r2
 8003680:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003684:	3301      	adds	r3, #1
 8003686:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368e:	fa22 f303 	lsr.w	r3, r2, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	f47f ae8e 	bne.w	80033b4 <HAL_GPIO_Init+0x14>
  }
}
 8003698:	bf00      	nop
 800369a:	bf00      	nop
 800369c:	372c      	adds	r7, #44	@ 0x2c
 800369e:	46bd      	mov	sp, r7
 80036a0:	bc80      	pop	{r7}
 80036a2:	4770      	bx	lr
 80036a4:	40010400 	.word	0x40010400

080036a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b089      	sub	sp, #36	@ 0x24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80036b6:	e09a      	b.n	80037ee <HAL_GPIO_DeInit+0x146>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80036b8:	2201      	movs	r2, #1
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	fa02 f303 	lsl.w	r3, r2, r3
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	4013      	ands	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f000 808d 	beq.w	80037e8 <HAL_GPIO_DeInit+0x140>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80036ce:	4a4e      	ldr	r2, [pc, #312]	@ (8003808 <HAL_GPIO_DeInit+0x160>)
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	089b      	lsrs	r3, r3, #2
 80036d4:	3302      	adds	r3, #2
 80036d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036da:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80036dc:	69fb      	ldr	r3, [r7, #28]
 80036de:	f003 0303 	and.w	r3, r3, #3
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	220f      	movs	r2, #15
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	4013      	ands	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a46      	ldr	r2, [pc, #280]	@ (800380c <HAL_GPIO_DeInit+0x164>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d013      	beq.n	8003720 <HAL_GPIO_DeInit+0x78>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a45      	ldr	r2, [pc, #276]	@ (8003810 <HAL_GPIO_DeInit+0x168>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00d      	beq.n	800371c <HAL_GPIO_DeInit+0x74>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a44      	ldr	r2, [pc, #272]	@ (8003814 <HAL_GPIO_DeInit+0x16c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d007      	beq.n	8003718 <HAL_GPIO_DeInit+0x70>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a43      	ldr	r2, [pc, #268]	@ (8003818 <HAL_GPIO_DeInit+0x170>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d101      	bne.n	8003714 <HAL_GPIO_DeInit+0x6c>
 8003710:	2303      	movs	r3, #3
 8003712:	e006      	b.n	8003722 <HAL_GPIO_DeInit+0x7a>
 8003714:	2304      	movs	r3, #4
 8003716:	e004      	b.n	8003722 <HAL_GPIO_DeInit+0x7a>
 8003718:	2302      	movs	r3, #2
 800371a:	e002      	b.n	8003722 <HAL_GPIO_DeInit+0x7a>
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <HAL_GPIO_DeInit+0x7a>
 8003720:	2300      	movs	r3, #0
 8003722:	69fa      	ldr	r2, [r7, #28]
 8003724:	f002 0203 	and.w	r2, r2, #3
 8003728:	0092      	lsls	r2, r2, #2
 800372a:	4093      	lsls	r3, r2
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	429a      	cmp	r2, r3
 8003730:	d132      	bne.n	8003798 <HAL_GPIO_DeInit+0xf0>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003732:	4b3a      	ldr	r3, [pc, #232]	@ (800381c <HAL_GPIO_DeInit+0x174>)
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	43db      	mvns	r3, r3
 800373a:	4938      	ldr	r1, [pc, #224]	@ (800381c <HAL_GPIO_DeInit+0x174>)
 800373c:	4013      	ands	r3, r2
 800373e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8003740:	4b36      	ldr	r3, [pc, #216]	@ (800381c <HAL_GPIO_DeInit+0x174>)
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	43db      	mvns	r3, r3
 8003748:	4934      	ldr	r1, [pc, #208]	@ (800381c <HAL_GPIO_DeInit+0x174>)
 800374a:	4013      	ands	r3, r2
 800374c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 800374e:	4b33      	ldr	r3, [pc, #204]	@ (800381c <HAL_GPIO_DeInit+0x174>)
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	43db      	mvns	r3, r3
 8003756:	4931      	ldr	r1, [pc, #196]	@ (800381c <HAL_GPIO_DeInit+0x174>)
 8003758:	4013      	ands	r3, r2
 800375a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 800375c:	4b2f      	ldr	r3, [pc, #188]	@ (800381c <HAL_GPIO_DeInit+0x174>)
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	43db      	mvns	r3, r3
 8003764:	492d      	ldr	r1, [pc, #180]	@ (800381c <HAL_GPIO_DeInit+0x174>)
 8003766:	4013      	ands	r3, r2
 8003768:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	f003 0303 	and.w	r3, r3, #3
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	220f      	movs	r2, #15
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 800377a:	4a23      	ldr	r2, [pc, #140]	@ (8003808 <HAL_GPIO_DeInit+0x160>)
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	089b      	lsrs	r3, r3, #2
 8003780:	3302      	adds	r3, #2
 8003782:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	43da      	mvns	r2, r3
 800378a:	481f      	ldr	r0, [pc, #124]	@ (8003808 <HAL_GPIO_DeInit+0x160>)
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	089b      	lsrs	r3, r3, #2
 8003790:	400a      	ands	r2, r1
 8003792:	3302      	adds	r3, #2
 8003794:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	2bff      	cmp	r3, #255	@ 0xff
 800379c:	d801      	bhi.n	80037a2 <HAL_GPIO_DeInit+0xfa>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	e001      	b.n	80037a6 <HAL_GPIO_DeInit+0xfe>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3304      	adds	r3, #4
 80037a6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	2bff      	cmp	r3, #255	@ 0xff
 80037ac:	d802      	bhi.n	80037b4 <HAL_GPIO_DeInit+0x10c>
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	e002      	b.n	80037ba <HAL_GPIO_DeInit+0x112>
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	3b08      	subs	r3, #8
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	210f      	movs	r1, #15
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	fa01 f303 	lsl.w	r3, r1, r3
 80037c8:	43db      	mvns	r3, r3
 80037ca:	401a      	ands	r2, r3
 80037cc:	2104      	movs	r1, #4
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	fa01 f303 	lsl.w	r3, r1, r3
 80037d4:	431a      	orrs	r2, r3
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68da      	ldr	r2, [r3, #12]
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	43db      	mvns	r3, r3
 80037e2:	401a      	ands	r2, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	60da      	str	r2, [r3, #12]
    }

    position++;
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	3301      	adds	r3, #1
 80037ec:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	fa22 f303 	lsr.w	r3, r2, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f47f af5e 	bne.w	80036b8 <HAL_GPIO_DeInit+0x10>
  }
}
 80037fc:	bf00      	nop
 80037fe:	bf00      	nop
 8003800:	3724      	adds	r7, #36	@ 0x24
 8003802:	46bd      	mov	sp, r7
 8003804:	bc80      	pop	{r7}
 8003806:	4770      	bx	lr
 8003808:	40010000 	.word	0x40010000
 800380c:	40010800 	.word	0x40010800
 8003810:	40010c00 	.word	0x40010c00
 8003814:	40011000 	.word	0x40011000
 8003818:	40011400 	.word	0x40011400
 800381c:	40010400 	.word	0x40010400

08003820 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003820:	b480      	push	{r7}
 8003822:	b083      	sub	sp, #12
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	807b      	strh	r3, [r7, #2]
 800382c:	4613      	mov	r3, r2
 800382e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003830:	787b      	ldrb	r3, [r7, #1]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d003      	beq.n	800383e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003836:	887a      	ldrh	r2, [r7, #2]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800383c:	e003      	b.n	8003846 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800383e:	887b      	ldrh	r3, [r7, #2]
 8003840:	041a      	lsls	r2, r3, #16
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	611a      	str	r2, [r3, #16]
}
 8003846:	bf00      	nop
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr

08003850 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003862:	887a      	ldrh	r2, [r7, #2]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	4013      	ands	r3, r2
 8003868:	041a      	lsls	r2, r3, #16
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	43d9      	mvns	r1, r3
 800386e:	887b      	ldrh	r3, [r7, #2]
 8003870:	400b      	ands	r3, r1
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	611a      	str	r2, [r3, #16]
}
 8003878:	bf00      	nop
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	bc80      	pop	{r7}
 8003880:	4770      	bx	lr

08003882 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b088      	sub	sp, #32
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f005 f915 	bl	8008abe <USB_ReadInterrupts>
 8003894:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003896:	69bb      	ldr	r3, [r7, #24]
 8003898:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fabc 	bl	8003e1e <PCD_EP_ISR_Handler>

    return;
 80038a6:	e119      	b.n	8003adc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d013      	beq.n	80038da <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038c4:	b292      	uxth	r2, r2
 80038c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f006 faaf 	bl	8009e2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80038d0:	2100      	movs	r1, #0
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f905 	bl	8003ae2 <HAL_PCD_SetAddress>

    return;
 80038d8:	e100      	b.n	8003adc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d00c      	beq.n	80038fe <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80038f6:	b292      	uxth	r2, r2
 80038f8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 80038fc:	e0ee      	b.n	8003adc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d00c      	beq.n	8003922 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003910:	b29a      	uxth	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800391a:	b292      	uxth	r2, r2
 800391c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003920:	e0dc      	b.n	8003adc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d027      	beq.n	800397c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003934:	b29a      	uxth	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f022 0204 	bic.w	r2, r2, #4
 800393e:	b292      	uxth	r2, r2
 8003940:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800394c:	b29a      	uxth	r2, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 0208 	bic.w	r2, r2, #8
 8003956:	b292      	uxth	r2, r2
 8003958:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f006 fa9f 	bl	8009ea0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800396a:	b29a      	uxth	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003974:	b292      	uxth	r2, r2
 8003976:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 800397a:	e0af      	b.n	8003adc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 8083 	beq.w	8003a8e <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8003988:	2300      	movs	r3, #0
 800398a:	77fb      	strb	r3, [r7, #31]
 800398c:	e010      	b.n	80039b0 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	461a      	mov	r2, r3
 8003994:	7ffb      	ldrb	r3, [r7, #31]
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	441a      	add	r2, r3
 800399a:	7ffb      	ldrb	r3, [r7, #31]
 800399c:	8812      	ldrh	r2, [r2, #0]
 800399e:	b292      	uxth	r2, r2
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	3320      	adds	r3, #32
 80039a4:	443b      	add	r3, r7
 80039a6:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 80039aa:	7ffb      	ldrb	r3, [r7, #31]
 80039ac:	3301      	adds	r3, #1
 80039ae:	77fb      	strb	r3, [r7, #31]
 80039b0:	7ffb      	ldrb	r3, [r7, #31]
 80039b2:	2b07      	cmp	r3, #7
 80039b4:	d9eb      	bls.n	800398e <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80039be:	b29a      	uxth	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 0201 	orr.w	r2, r2, #1
 80039c8:	b292      	uxth	r2, r2
 80039ca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0201 	bic.w	r2, r2, #1
 80039e0:	b292      	uxth	r2, r2
 80039e2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80039e6:	bf00      	nop
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f6      	beq.n	80039e8 <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a0c:	b292      	uxth	r2, r2
 8003a0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8003a12:	2300      	movs	r3, #0
 8003a14:	77fb      	strb	r3, [r7, #31]
 8003a16:	e00f      	b.n	8003a38 <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8003a18:	7ffb      	ldrb	r3, [r7, #31]
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6812      	ldr	r2, [r2, #0]
 8003a1e:	4611      	mov	r1, r2
 8003a20:	7ffa      	ldrb	r2, [r7, #31]
 8003a22:	0092      	lsls	r2, r2, #2
 8003a24:	440a      	add	r2, r1
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	3320      	adds	r3, #32
 8003a2a:	443b      	add	r3, r7
 8003a2c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003a30:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8003a32:	7ffb      	ldrb	r3, [r7, #31]
 8003a34:	3301      	adds	r3, #1
 8003a36:	77fb      	strb	r3, [r7, #31]
 8003a38:	7ffb      	ldrb	r3, [r7, #31]
 8003a3a:	2b07      	cmp	r3, #7
 8003a3c:	d9ec      	bls.n	8003a18 <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f042 0208 	orr.w	r2, r2, #8
 8003a50:	b292      	uxth	r2, r2
 8003a52:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a68:	b292      	uxth	r2, r2
 8003a6a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f042 0204 	orr.w	r2, r2, #4
 8003a80:	b292      	uxth	r2, r2
 8003a82:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f006 f9f0 	bl	8009e6c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003a8c:	e026      	b.n	8003adc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00f      	beq.n	8003ab8 <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003aaa:	b292      	uxth	r2, r2
 8003aac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f006 f9ae 	bl	8009e12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003ab6:	e011      	b.n	8003adc <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003ab8:	69bb      	ldr	r3, [r7, #24]
 8003aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00c      	beq.n	8003adc <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ad4:	b292      	uxth	r2, r2
 8003ad6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8003ada:	bf00      	nop
  }
}
 8003adc:	3720      	adds	r7, #32
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}

08003ae2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003ae2:	b580      	push	{r7, lr}
 8003ae4:	b082      	sub	sp, #8
 8003ae6:	af00      	add	r7, sp, #0
 8003ae8:	6078      	str	r0, [r7, #4]
 8003aea:	460b      	mov	r3, r1
 8003aec:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_PCD_SetAddress+0x1a>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e013      	b.n	8003b24 <HAL_PCD_SetAddress+0x42>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  hpcd->USB_Address = address;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	78fa      	ldrb	r2, [r7, #3]
 8003b08:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	4611      	mov	r1, r2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f004 ffbf 	bl	8008a98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3708      	adds	r7, #8
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}

08003b2c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	4608      	mov	r0, r1
 8003b36:	4611      	mov	r1, r2
 8003b38:	461a      	mov	r2, r3
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	70fb      	strb	r3, [r7, #3]
 8003b3e:	460b      	mov	r3, r1
 8003b40:	803b      	strh	r3, [r7, #0]
 8003b42:	4613      	mov	r3, r2
 8003b44:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	da0e      	bge.n	8003b70 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b52:	78fb      	ldrb	r3, [r7, #3]
 8003b54:	f003 0307 	and.w	r3, r3, #7
 8003b58:	1c5a      	adds	r2, r3, #1
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	00db      	lsls	r3, r3, #3
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	4413      	add	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	705a      	strb	r2, [r3, #1]
 8003b6e:	e00e      	b.n	8003b8e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b70:	78fb      	ldrb	r3, [r7, #3]
 8003b72:	f003 0207 	and.w	r2, r3, #7
 8003b76:	4613      	mov	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	4413      	add	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b8e:	78fb      	ldrb	r3, [r7, #3]
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003b9a:	883a      	ldrh	r2, [r7, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	78ba      	ldrb	r2, [r7, #2]
 8003ba4:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003ba6:	78bb      	ldrb	r3, [r7, #2]
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d102      	bne.n	8003bb2 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d101      	bne.n	8003bc0 <HAL_PCD_EP_Open+0x94>
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	e00e      	b.n	8003bde <HAL_PCD_EP_Open+0xb2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68f9      	ldr	r1, [r7, #12]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f002 fef4 	bl	80069bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return ret;
 8003bdc:	7afb      	ldrb	r3, [r7, #11]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b086      	sub	sp, #24
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	60f8      	str	r0, [r7, #12]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bf6:	7afb      	ldrb	r3, [r7, #11]
 8003bf8:	f003 0207 	and.w	r2, r3, #7
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	683a      	ldr	r2, [r7, #0]
 8003c18:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	2200      	movs	r2, #0
 8003c24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c26:	7afb      	ldrb	r3, [r7, #11]
 8003c28:	f003 0307 	and.w	r3, r3, #7
 8003c2c:	b2da      	uxtb	r2, r3
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6979      	ldr	r1, [r7, #20]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f003 fa7f 	bl	800713c <USB_EPStartXfer>

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	607a      	str	r2, [r7, #4]
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	460b      	mov	r3, r1
 8003c56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c58:	7afb      	ldrb	r3, [r7, #11]
 8003c5a:	f003 0307 	and.w	r3, r3, #7
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	4613      	mov	r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	00db      	lsls	r3, r3, #3
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	2201      	movs	r2, #1
 8003c92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c94:	7afb      	ldrb	r3, [r7, #11]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	b2da      	uxtb	r2, r3
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	6979      	ldr	r1, [r7, #20]
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f003 fa48 	bl	800713c <USB_EPStartXfer>

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b084      	sub	sp, #16
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003cc2:	78fb      	ldrb	r3, [r7, #3]
 8003cc4:	f003 0207 	and.w	r2, r3, #7
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d901      	bls.n	8003cd4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e04c      	b.n	8003d6e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003cd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	da0e      	bge.n	8003cfa <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cdc:	78fb      	ldrb	r3, [r7, #3]
 8003cde:	f003 0307 	and.w	r3, r3, #7
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	4413      	add	r3, r2
 8003cf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	705a      	strb	r2, [r3, #1]
 8003cf8:	e00c      	b.n	8003d14 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	4413      	add	r3, r2
 8003d02:	00db      	lsls	r3, r3, #3
 8003d04:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2201      	movs	r2, #1
 8003d18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d1a:	78fb      	ldrb	r3, [r7, #3]
 8003d1c:	f003 0307 	and.w	r3, r3, #7
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d101      	bne.n	8003d34 <HAL_PCD_EP_SetStall+0x7e>
 8003d30:	2302      	movs	r3, #2
 8003d32:	e01c      	b.n	8003d6e <HAL_PCD_EP_SetStall+0xb8>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68f9      	ldr	r1, [r7, #12]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f004 fdab 	bl	800889e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d48:	78fb      	ldrb	r3, [r7, #3]
 8003d4a:	f003 0307 	and.w	r3, r3, #7
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d108      	bne.n	8003d64 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4610      	mov	r0, r2
 8003d60:	f004 febc 	bl	8008adc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	460b      	mov	r3, r1
 8003d80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d82:	78fb      	ldrb	r3, [r7, #3]
 8003d84:	f003 020f 	and.w	r2, r3, #15
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d901      	bls.n	8003d94 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e040      	b.n	8003e16 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	da0e      	bge.n	8003dba <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d9c:	78fb      	ldrb	r3, [r7, #3]
 8003d9e:	f003 0307 	and.w	r3, r3, #7
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	00db      	lsls	r3, r3, #3
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	4413      	add	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2201      	movs	r2, #1
 8003db6:	705a      	strb	r2, [r3, #1]
 8003db8:	e00e      	b.n	8003dd8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003dba:	78fb      	ldrb	r3, [r7, #3]
 8003dbc:	f003 0207 	and.w	r2, r3, #7
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	4413      	add	r3, r2
 8003dc6:	00db      	lsls	r3, r3, #3
 8003dc8:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	4413      	add	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dde:	78fb      	ldrb	r3, [r7, #3]
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d101      	bne.n	8003df8 <HAL_PCD_EP_ClrStall+0x82>
 8003df4:	2302      	movs	r3, #2
 8003df6:	e00e      	b.n	8003e16 <HAL_PCD_EP_ClrStall+0xa0>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68f9      	ldr	r1, [r7, #12]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f004 fd99 	bl	800893e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f883 22a8 	strb.w	r2, [r3, #680]	@ 0x2a8

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b096      	sub	sp, #88	@ 0x58
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e26:	e3be      	b.n	80045a6 <PCD_EP_ISR_Handler+0x788>
  {
    wIstr = hpcd->Instance->ISTR;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003e30:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003e34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 8003e42:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f040 8178 	bne.w	800413c <PCD_EP_ISR_Handler+0x31e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003e4c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d151      	bne.n	8003efc <PCD_EP_ISR_Handler+0xde>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003e64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e68:	81fb      	strh	r3, [r7, #14]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	89fb      	ldrh	r3, [r7, #14]
 8003e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3328      	adds	r3, #40	@ 0x28
 8003e80:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	00db      	lsls	r3, r3, #3
 8003e94:	4413      	add	r3, r2
 8003e96:	3302      	adds	r3, #2
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6812      	ldr	r2, [r2, #0]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eac:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003eae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb0:	695a      	ldr	r2, [r3, #20]
 8003eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	441a      	add	r2, r3
 8003eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003eba:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003ebc:	2100      	movs	r1, #0
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f005 ff8d 	bl	8009dde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f000 836a 	beq.w	80045a6 <PCD_EP_ISR_Handler+0x788>
 8003ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f040 8365 	bne.w	80045a6 <PCD_EP_ISR_Handler+0x788>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003efa:	e354      	b.n	80045a6 <PCD_EP_ISR_Handler+0x788>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8003f02:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003f0e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8003f12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d034      	beq.n	8003f84 <PCD_EP_ISR_Handler+0x166>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	461a      	mov	r2, r3
 8003f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	3306      	adds	r3, #6
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	6812      	ldr	r2, [r2, #0]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003f42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f44:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6818      	ldr	r0, [r3, #0]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f503 712c 	add.w	r1, r3, #688	@ 0x2b0
 8003f50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f52:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003f54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f56:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003f58:	b29b      	uxth	r3, r3
 8003f5a:	f004 fe0f 	bl	8008b7c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	823b      	strh	r3, [r7, #16]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	8a3a      	ldrh	r2, [r7, #16]
 8003f74:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f78:	b292      	uxth	r2, r2
 8003f7a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f005 ff01 	bl	8009d84 <HAL_PCD_SetupStageCallback>
 8003f82:	e310      	b.n	80045a6 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003f84:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f280 830c 	bge.w	80045a6 <PCD_EP_ISR_Handler+0x788>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	83fb      	strh	r3, [r7, #30]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	8bfa      	ldrh	r2, [r7, #30]
 8003fa4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003fa8:	b292      	uxth	r2, r2
 8003faa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	4413      	add	r3, r2
 8003fc0:	3306      	adds	r3, #6
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6812      	ldr	r2, [r2, #0]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003fd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fd6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003fd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d019      	beq.n	8004014 <PCD_EP_ISR_Handler+0x1f6>
 8003fe0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fe2:	695b      	ldr	r3, [r3, #20]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d015      	beq.n	8004014 <PCD_EP_ISR_Handler+0x1f6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003fee:	6959      	ldr	r1, [r3, #20]
 8003ff0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ff2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003ff4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ff6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	f004 fdbf 	bl	8008b7c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004000:	695a      	ldr	r2, [r3, #20]
 8004002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	441a      	add	r2, r3
 8004008:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800400a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800400c:	2100      	movs	r1, #0
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f005 feca 	bl	8009da8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	881b      	ldrh	r3, [r3, #0]
 800401a:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800401e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004022:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004026:	2b00      	cmp	r3, #0
 8004028:	f040 82bd 	bne.w	80045a6 <PCD_EP_ISR_Handler+0x788>
 800402c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004030:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004034:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004038:	f000 82b5 	beq.w	80045a6 <PCD_EP_ISR_Handler+0x788>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800404a:	b29b      	uxth	r3, r3
 800404c:	461a      	mov	r2, r3
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	4413      	add	r3, r2
 8004052:	61bb      	str	r3, [r7, #24]
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800405a:	617b      	str	r3, [r7, #20]
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	881b      	ldrh	r3, [r3, #0]
 8004060:	b29b      	uxth	r3, r3
 8004062:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004066:	b29a      	uxth	r2, r3
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	801a      	strh	r2, [r3, #0]
 800406c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	2b3e      	cmp	r3, #62	@ 0x3e
 8004072:	d91d      	bls.n	80040b0 <PCD_EP_ISR_Handler+0x292>
 8004074:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	095b      	lsrs	r3, r3, #5
 800407a:	647b      	str	r3, [r7, #68]	@ 0x44
 800407c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	f003 031f 	and.w	r3, r3, #31
 8004084:	2b00      	cmp	r3, #0
 8004086:	d102      	bne.n	800408e <PCD_EP_ISR_Handler+0x270>
 8004088:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800408a:	3b01      	subs	r3, #1
 800408c:	647b      	str	r3, [r7, #68]	@ 0x44
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	881b      	ldrh	r3, [r3, #0]
 8004092:	b29a      	uxth	r2, r3
 8004094:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004096:	b29b      	uxth	r3, r3
 8004098:	029b      	lsls	r3, r3, #10
 800409a:	b29b      	uxth	r3, r3
 800409c:	4313      	orrs	r3, r2
 800409e:	b29b      	uxth	r3, r3
 80040a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	801a      	strh	r2, [r3, #0]
 80040ae:	e026      	b.n	80040fe <PCD_EP_ISR_Handler+0x2e0>
 80040b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040b2:	691b      	ldr	r3, [r3, #16]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10a      	bne.n	80040ce <PCD_EP_ISR_Handler+0x2b0>
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	881b      	ldrh	r3, [r3, #0]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	801a      	strh	r2, [r3, #0]
 80040cc:	e017      	b.n	80040fe <PCD_EP_ISR_Handler+0x2e0>
 80040ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	085b      	lsrs	r3, r3, #1
 80040d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80040d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <PCD_EP_ISR_Handler+0x2ca>
 80040e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040e4:	3301      	adds	r3, #1
 80040e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	029b      	lsls	r3, r3, #10
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	4313      	orrs	r3, r2
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	881b      	ldrh	r3, [r3, #0]
 8004104:	b29b      	uxth	r3, r3
 8004106:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800410a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800410e:	827b      	strh	r3, [r7, #18]
 8004110:	8a7b      	ldrh	r3, [r7, #18]
 8004112:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8004116:	827b      	strh	r3, [r7, #18]
 8004118:	8a7b      	ldrh	r3, [r7, #18]
 800411a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800411e:	827b      	strh	r3, [r7, #18]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	8a7b      	ldrh	r3, [r7, #18]
 8004126:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800412a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800412e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004136:	b29b      	uxth	r3, r3
 8004138:	8013      	strh	r3, [r2, #0]
 800413a:	e234      	b.n	80045a6 <PCD_EP_ISR_Handler+0x788>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	461a      	mov	r2, r3
 8004142:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	881b      	ldrh	r3, [r3, #0]
 800414c:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004150:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8004154:	2b00      	cmp	r3, #0
 8004156:	f280 80fc 	bge.w	8004352 <PCD_EP_ISR_Handler+0x534>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	461a      	mov	r2, r3
 8004160:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	b29a      	uxth	r2, r3
 800416c:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8004170:	4013      	ands	r3, r2
 8004172:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4413      	add	r3, r2
 8004184:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8004188:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800418c:	b292      	uxth	r2, r2
 800418e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004190:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	4413      	add	r3, r2
 80041a4:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80041a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041a8:	7b1b      	ldrb	r3, [r3, #12]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d125      	bne.n	80041fa <PCD_EP_ISR_Handler+0x3dc>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	461a      	mov	r2, r3
 80041ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	4413      	add	r3, r2
 80041c2:	3306      	adds	r3, #6
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6812      	ldr	r2, [r2, #0]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80041d0:	881b      	ldrh	r3, [r3, #0]
 80041d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041d6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80041da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 8092 	beq.w	8004308 <PCD_EP_ISR_Handler+0x4ea>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6818      	ldr	r0, [r3, #0]
 80041e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ea:	6959      	ldr	r1, [r3, #20]
 80041ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ee:	88da      	ldrh	r2, [r3, #6]
 80041f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80041f4:	f004 fcc2 	bl	8008b7c <USB_ReadPMA>
 80041f8:	e086      	b.n	8004308 <PCD_EP_ISR_Handler+0x4ea>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80041fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041fc:	78db      	ldrb	r3, [r3, #3]
 80041fe:	2b02      	cmp	r3, #2
 8004200:	d10a      	bne.n	8004218 <PCD_EP_ISR_Handler+0x3fa>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004202:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004206:	461a      	mov	r2, r3
 8004208:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f9d9 	bl	80045c2 <HAL_PCD_EP_DB_Receive>
 8004210:	4603      	mov	r3, r0
 8004212:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8004216:	e077      	b.n	8004308 <PCD_EP_ISR_Handler+0x4ea>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	461a      	mov	r2, r3
 800421e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	b29b      	uxth	r3, r3
 800422a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800422e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004232:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	461a      	mov	r2, r3
 800423c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	441a      	add	r2, r3
 8004244:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8004248:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800424c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004250:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004254:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8004258:	b29b      	uxth	r3, r3
 800425a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	461a      	mov	r2, r3
 8004262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	b29b      	uxth	r3, r3
 800426e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d024      	beq.n	80042c0 <PCD_EP_ISR_Handler+0x4a2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800427e:	b29b      	uxth	r3, r3
 8004280:	461a      	mov	r2, r3
 8004282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	4413      	add	r3, r2
 800428a:	3302      	adds	r3, #2
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	687a      	ldr	r2, [r7, #4]
 8004290:	6812      	ldr	r2, [r2, #0]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004298:	881b      	ldrh	r3, [r3, #0]
 800429a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800429e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80042a2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d02e      	beq.n	8004308 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042b0:	6959      	ldr	r1, [r3, #20]
 80042b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042b4:	891a      	ldrh	r2, [r3, #8]
 80042b6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80042ba:	f004 fc5f 	bl	8008b7c <USB_ReadPMA>
 80042be:	e023      	b.n	8004308 <PCD_EP_ISR_Handler+0x4ea>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	461a      	mov	r2, r3
 80042cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	4413      	add	r3, r2
 80042d4:	3306      	adds	r3, #6
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	4413      	add	r3, r2
 80042de:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042e8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80042ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d009      	beq.n	8004308 <PCD_EP_ISR_Handler+0x4ea>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6818      	ldr	r0, [r3, #0]
 80042f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042fa:	6959      	ldr	r1, [r3, #20]
 80042fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042fe:	895a      	ldrh	r2, [r3, #10]
 8004300:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004304:	f004 fc3a 	bl	8008b7c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004308:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800430a:	69da      	ldr	r2, [r3, #28]
 800430c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8004310:	441a      	add	r2, r3
 8004312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004314:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004316:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004318:	695a      	ldr	r2, [r3, #20]
 800431a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800431e:	441a      	add	r2, r3
 8004320:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004322:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004324:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d005      	beq.n	8004338 <PCD_EP_ISR_Handler+0x51a>
 800432c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8004330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	429a      	cmp	r2, r3
 8004336:	d206      	bcs.n	8004346 <PCD_EP_ISR_Handler+0x528>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004338:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	4619      	mov	r1, r3
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f005 fd32 	bl	8009da8 <HAL_PCD_DataOutStageCallback>
 8004344:	e005      	b.n	8004352 <PCD_EP_ISR_Handler+0x534>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800434c:	4618      	mov	r0, r3
 800434e:	f002 fef5 	bl	800713c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004352:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 8123 	beq.w	80045a6 <PCD_EP_ISR_Handler+0x788>
      {
        ep = &hpcd->IN_ep[epindex];
 8004360:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	4613      	mov	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4413      	add	r3, r2
 800436c:	00db      	lsls	r3, r3, #3
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	4413      	add	r3, r2
 8004372:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	881b      	ldrh	r3, [r3, #0]
 8004384:	b29b      	uxth	r3, r3
 8004386:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800438a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800438e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	461a      	mov	r2, r3
 8004398:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800439c:	009b      	lsls	r3, r3, #2
 800439e:	441a      	add	r2, r3
 80043a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80043a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80043b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043b2:	78db      	ldrb	r3, [r3, #3]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	f040 80a2 	bne.w	80044fe <PCD_EP_ISR_Handler+0x6e0>
        {
          ep->xfer_len = 0U;
 80043ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043bc:	2200      	movs	r2, #0
 80043be:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80043c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043c2:	7b1b      	ldrb	r3, [r3, #12]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8093 	beq.w	80044f0 <PCD_EP_ISR_Handler+0x6d2>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80043ca:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80043ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d046      	beq.n	8004464 <PCD_EP_ISR_Handler+0x646>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80043d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043d8:	785b      	ldrb	r3, [r3, #1]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d126      	bne.n	800442c <PCD_EP_ISR_Handler+0x60e>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	461a      	mov	r2, r3
 80043f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f2:	4413      	add	r3, r2
 80043f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80043f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	011a      	lsls	r2, r3, #4
 80043fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043fe:	4413      	add	r3, r2
 8004400:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004404:	623b      	str	r3, [r7, #32]
 8004406:	6a3b      	ldr	r3, [r7, #32]
 8004408:	881b      	ldrh	r3, [r3, #0]
 800440a:	b29b      	uxth	r3, r3
 800440c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004410:	b29a      	uxth	r2, r3
 8004412:	6a3b      	ldr	r3, [r7, #32]
 8004414:	801a      	strh	r2, [r3, #0]
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	b29b      	uxth	r3, r3
 800441c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004424:	b29a      	uxth	r2, r3
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	801a      	strh	r2, [r3, #0]
 800442a:	e061      	b.n	80044f0 <PCD_EP_ISR_Handler+0x6d2>
 800442c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800442e:	785b      	ldrb	r3, [r3, #1]
 8004430:	2b01      	cmp	r3, #1
 8004432:	d15d      	bne.n	80044f0 <PCD_EP_ISR_Handler+0x6d2>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004442:	b29b      	uxth	r3, r3
 8004444:	461a      	mov	r2, r3
 8004446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004448:	4413      	add	r3, r2
 800444a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800444c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	011a      	lsls	r2, r3, #4
 8004452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004454:	4413      	add	r3, r2
 8004456:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800445a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800445c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800445e:	2200      	movs	r2, #0
 8004460:	801a      	strh	r2, [r3, #0]
 8004462:	e045      	b.n	80044f0 <PCD_EP_ISR_Handler+0x6d2>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800446a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800446c:	785b      	ldrb	r3, [r3, #1]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d126      	bne.n	80044c0 <PCD_EP_ISR_Handler+0x6a2>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	637b      	str	r3, [r7, #52]	@ 0x34
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004480:	b29b      	uxth	r3, r3
 8004482:	461a      	mov	r2, r3
 8004484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004486:	4413      	add	r3, r2
 8004488:	637b      	str	r3, [r7, #52]	@ 0x34
 800448a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800448c:	781b      	ldrb	r3, [r3, #0]
 800448e:	011a      	lsls	r2, r3, #4
 8004490:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004492:	4413      	add	r3, r2
 8004494:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004498:	633b      	str	r3, [r7, #48]	@ 0x30
 800449a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449c:	881b      	ldrh	r3, [r3, #0]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044a4:	b29a      	uxth	r2, r3
 80044a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a8:	801a      	strh	r2, [r3, #0]
 80044aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044bc:	801a      	strh	r2, [r3, #0]
 80044be:	e017      	b.n	80044f0 <PCD_EP_ISR_Handler+0x6d2>
 80044c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044c2:	785b      	ldrb	r3, [r3, #1]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d113      	bne.n	80044f0 <PCD_EP_ISR_Handler+0x6d2>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	461a      	mov	r2, r3
 80044d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044d6:	4413      	add	r3, r2
 80044d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	011a      	lsls	r2, r3, #4
 80044e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044e2:	4413      	add	r3, r2
 80044e4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80044e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ec:	2200      	movs	r2, #0
 80044ee:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80044f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	4619      	mov	r1, r3
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f005 fc71 	bl	8009dde <HAL_PCD_DataInStageCallback>
 80044fc:	e053      	b.n	80045a6 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80044fe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8004502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004506:	2b00      	cmp	r3, #0
 8004508:	d146      	bne.n	8004598 <PCD_EP_ISR_Handler+0x77a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004512:	b29b      	uxth	r3, r3
 8004514:	461a      	mov	r2, r3
 8004516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	4413      	add	r3, r2
 800451e:	3302      	adds	r3, #2
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	6812      	ldr	r2, [r2, #0]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004532:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8004536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004538:	699a      	ldr	r2, [r3, #24]
 800453a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800453e:	429a      	cmp	r2, r3
 8004540:	d907      	bls.n	8004552 <PCD_EP_ISR_Handler+0x734>
            {
              ep->xfer_len -= TxPctSize;
 8004542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004544:	699a      	ldr	r2, [r3, #24]
 8004546:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800454a:	1ad2      	subs	r2, r2, r3
 800454c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800454e:	619a      	str	r2, [r3, #24]
 8004550:	e002      	b.n	8004558 <PCD_EP_ISR_Handler+0x73a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004554:	2200      	movs	r2, #0
 8004556:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004558:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d106      	bne.n	800456e <PCD_EP_ISR_Handler+0x750>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	4619      	mov	r1, r3
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f005 fc39 	bl	8009dde <HAL_PCD_DataInStageCallback>
 800456c:	e01b      	b.n	80045a6 <PCD_EP_ISR_Handler+0x788>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800456e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004570:	695a      	ldr	r2, [r3, #20]
 8004572:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004576:	441a      	add	r2, r3
 8004578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800457a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800457c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800457e:	69da      	ldr	r2, [r3, #28]
 8004580:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004584:	441a      	add	r2, r3
 8004586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004588:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004590:	4618      	mov	r0, r3
 8004592:	f002 fdd3 	bl	800713c <USB_EPStartXfer>
 8004596:	e006      	b.n	80045a6 <PCD_EP_ISR_Handler+0x788>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004598:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800459c:	461a      	mov	r2, r3
 800459e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	f000 f91b 	bl	80047dc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	b21b      	sxth	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f6ff ac38 	blt.w	8003e28 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3758      	adds	r7, #88	@ 0x58
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b088      	sub	sp, #32
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	4613      	mov	r3, r2
 80045ce:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80045d0:	88fb      	ldrh	r3, [r7, #6]
 80045d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d07e      	beq.n	80046d8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	461a      	mov	r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	00db      	lsls	r3, r3, #3
 80045ec:	4413      	add	r3, r2
 80045ee:	3302      	adds	r3, #2
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	6812      	ldr	r2, [r2, #0]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80045fc:	881b      	ldrh	r3, [r3, #0]
 80045fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004602:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	699a      	ldr	r2, [r3, #24]
 8004608:	8b7b      	ldrh	r3, [r7, #26]
 800460a:	429a      	cmp	r2, r3
 800460c:	d306      	bcc.n	800461c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	699a      	ldr	r2, [r3, #24]
 8004612:	8b7b      	ldrh	r3, [r7, #26]
 8004614:	1ad2      	subs	r2, r2, r3
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	619a      	str	r2, [r3, #24]
 800461a:	e002      	b.n	8004622 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2200      	movs	r2, #0
 8004620:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d123      	bne.n	8004672 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	461a      	mov	r2, r3
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	881b      	ldrh	r3, [r3, #0]
 800463a:	b29b      	uxth	r3, r3
 800463c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004640:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004644:	833b      	strh	r3, [r7, #24]
 8004646:	8b3b      	ldrh	r3, [r7, #24]
 8004648:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800464c:	833b      	strh	r3, [r7, #24]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	441a      	add	r2, r3
 800465c:	8b3b      	ldrh	r3, [r7, #24]
 800465e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004662:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004666:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800466a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800466e:	b29b      	uxth	r3, r3
 8004670:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004672:	88fb      	ldrh	r3, [r7, #6]
 8004674:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004678:	2b00      	cmp	r3, #0
 800467a:	d01f      	beq.n	80046bc <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	461a      	mov	r2, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	4413      	add	r3, r2
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	b29b      	uxth	r3, r3
 800468e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004696:	82fb      	strh	r3, [r7, #22]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	461a      	mov	r2, r3
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	441a      	add	r2, r3
 80046a6:	8afb      	ldrh	r3, [r7, #22]
 80046a8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80046ac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80046b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046b4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80046bc:	8b7b      	ldrh	r3, [r7, #26]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	f000 8087 	beq.w	80047d2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6818      	ldr	r0, [r3, #0]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	6959      	ldr	r1, [r3, #20]
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	891a      	ldrh	r2, [r3, #8]
 80046d0:	8b7b      	ldrh	r3, [r7, #26]
 80046d2:	f004 fa53 	bl	8008b7c <USB_ReadPMA>
 80046d6:	e07c      	b.n	80047d2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	461a      	mov	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	781b      	ldrb	r3, [r3, #0]
 80046e8:	00db      	lsls	r3, r3, #3
 80046ea:	4413      	add	r3, r2
 80046ec:	3306      	adds	r3, #6
 80046ee:	005b      	lsls	r3, r3, #1
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	6812      	ldr	r2, [r2, #0]
 80046f4:	4413      	add	r3, r2
 80046f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004700:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	8b7b      	ldrh	r3, [r7, #26]
 8004708:	429a      	cmp	r2, r3
 800470a:	d306      	bcc.n	800471a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	699a      	ldr	r2, [r3, #24]
 8004710:	8b7b      	ldrh	r3, [r7, #26]
 8004712:	1ad2      	subs	r2, r2, r3
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	619a      	str	r2, [r3, #24]
 8004718:	e002      	b.n	8004720 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2200      	movs	r2, #0
 800471e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	699b      	ldr	r3, [r3, #24]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d123      	bne.n	8004770 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	461a      	mov	r2, r3
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	b29b      	uxth	r3, r3
 800473a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800473e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004742:	83fb      	strh	r3, [r7, #30]
 8004744:	8bfb      	ldrh	r3, [r7, #30]
 8004746:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800474a:	83fb      	strh	r3, [r7, #30]
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	781b      	ldrb	r3, [r3, #0]
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	441a      	add	r2, r3
 800475a:	8bfb      	ldrh	r3, [r7, #30]
 800475c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004760:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004764:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004768:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800476c:	b29b      	uxth	r3, r3
 800476e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004770:	88fb      	ldrh	r3, [r7, #6]
 8004772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004776:	2b00      	cmp	r3, #0
 8004778:	d11f      	bne.n	80047ba <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	461a      	mov	r2, r3
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	4413      	add	r3, r2
 8004788:	881b      	ldrh	r3, [r3, #0]
 800478a:	b29b      	uxth	r3, r3
 800478c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004794:	83bb      	strh	r3, [r7, #28]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	461a      	mov	r2, r3
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	781b      	ldrb	r3, [r3, #0]
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	441a      	add	r2, r3
 80047a4:	8bbb      	ldrh	r3, [r7, #28]
 80047a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80047aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80047ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80047ba:	8b7b      	ldrh	r3, [r7, #26]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d008      	beq.n	80047d2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	6818      	ldr	r0, [r3, #0]
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	6959      	ldr	r1, [r3, #20]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	895a      	ldrh	r2, [r3, #10]
 80047cc:	8b7b      	ldrh	r3, [r7, #26]
 80047ce:	f004 f9d5 	bl	8008b7c <USB_ReadPMA>
    }
  }

  return count;
 80047d2:	8b7b      	ldrh	r3, [r7, #26]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3720      	adds	r7, #32
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b0a4      	sub	sp, #144	@ 0x90
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	4613      	mov	r3, r2
 80047e8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80047ea:	88fb      	ldrh	r3, [r7, #6]
 80047ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 81dd 	beq.w	8004bb0 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80047fe:	b29b      	uxth	r3, r3
 8004800:	461a      	mov	r2, r3
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	4413      	add	r3, r2
 800480a:	3302      	adds	r3, #2
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	6812      	ldr	r2, [r2, #0]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004818:	881b      	ldrh	r3, [r3, #0]
 800481a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800481e:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	699a      	ldr	r2, [r3, #24]
 8004826:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800482a:	429a      	cmp	r2, r3
 800482c:	d907      	bls.n	800483e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004836:	1ad2      	subs	r2, r2, r3
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	619a      	str	r2, [r3, #24]
 800483c:	e002      	b.n	8004844 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2200      	movs	r2, #0
 8004842:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	2b00      	cmp	r3, #0
 800484a:	f040 80b9 	bne.w	80049c0 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	785b      	ldrb	r3, [r3, #1]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d126      	bne.n	80048a4 <HAL_PCD_EP_DB_Transmit+0xc8>
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004864:	b29b      	uxth	r3, r3
 8004866:	461a      	mov	r2, r3
 8004868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800486a:	4413      	add	r3, r2
 800486c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	011a      	lsls	r2, r3, #4
 8004874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004876:	4413      	add	r3, r2
 8004878:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800487c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800487e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004880:	881b      	ldrh	r3, [r3, #0]
 8004882:	b29b      	uxth	r3, r3
 8004884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004888:	b29a      	uxth	r2, r3
 800488a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488c:	801a      	strh	r2, [r3, #0]
 800488e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004890:	881b      	ldrh	r3, [r3, #0]
 8004892:	b29b      	uxth	r3, r3
 8004894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800489c:	b29a      	uxth	r2, r3
 800489e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a0:	801a      	strh	r2, [r3, #0]
 80048a2:	e01a      	b.n	80048da <HAL_PCD_EP_DB_Transmit+0xfe>
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	785b      	ldrb	r3, [r3, #1]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d116      	bne.n	80048da <HAL_PCD_EP_DB_Transmit+0xfe>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	461a      	mov	r2, r3
 80048be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048c0:	4413      	add	r3, r2
 80048c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	011a      	lsls	r2, r3, #4
 80048ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048cc:	4413      	add	r3, r2
 80048ce:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80048d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80048d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048d6:	2200      	movs	r2, #0
 80048d8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	627b      	str	r3, [r7, #36]	@ 0x24
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	785b      	ldrb	r3, [r3, #1]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d126      	bne.n	8004936 <HAL_PCD_EP_DB_Transmit+0x15a>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	61fb      	str	r3, [r7, #28]
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	461a      	mov	r2, r3
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	4413      	add	r3, r2
 80048fe:	61fb      	str	r3, [r7, #28]
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	011a      	lsls	r2, r3, #4
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	4413      	add	r3, r2
 800490a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800490e:	61bb      	str	r3, [r7, #24]
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	881b      	ldrh	r3, [r3, #0]
 8004914:	b29b      	uxth	r3, r3
 8004916:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800491a:	b29a      	uxth	r2, r3
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	801a      	strh	r2, [r3, #0]
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	b29b      	uxth	r3, r3
 8004926:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800492a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800492e:	b29a      	uxth	r2, r3
 8004930:	69bb      	ldr	r3, [r7, #24]
 8004932:	801a      	strh	r2, [r3, #0]
 8004934:	e017      	b.n	8004966 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	785b      	ldrb	r3, [r3, #1]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d113      	bne.n	8004966 <HAL_PCD_EP_DB_Transmit+0x18a>
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004946:	b29b      	uxth	r3, r3
 8004948:	461a      	mov	r2, r3
 800494a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494c:	4413      	add	r3, r2
 800494e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	011a      	lsls	r2, r3, #4
 8004956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004958:	4413      	add	r3, r2
 800495a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800495e:	623b      	str	r3, [r7, #32]
 8004960:	6a3b      	ldr	r3, [r7, #32]
 8004962:	2200      	movs	r2, #0
 8004964:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	4619      	mov	r1, r3
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f005 fa36 	bl	8009dde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004972:	88fb      	ldrh	r3, [r7, #6]
 8004974:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 82fc 	beq.w	8004f76 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	461a      	mov	r2, r3
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	881b      	ldrh	r3, [r3, #0]
 800498e:	b29b      	uxth	r3, r3
 8004990:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004994:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004998:	82fb      	strh	r3, [r7, #22]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	441a      	add	r2, r3
 80049a8:	8afb      	ldrh	r3, [r7, #22]
 80049aa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049ae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80049b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	8013      	strh	r3, [r2, #0]
 80049be:	e2da      	b.n	8004f76 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80049c0:	88fb      	ldrh	r3, [r7, #6]
 80049c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d021      	beq.n	8004a0e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	461a      	mov	r2, r3
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	b29b      	uxth	r3, r3
 80049dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80049e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049e4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	461a      	mov	r2, r3
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	441a      	add	r2, r3
 80049f6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80049fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80049fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004a02:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004a0e:	68bb      	ldr	r3, [r7, #8]
 8004a10:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	f040 82ae 	bne.w	8004f76 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	695a      	ldr	r2, [r3, #20]
 8004a1e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a22:	441a      	add	r2, r3
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	69da      	ldr	r2, [r3, #28]
 8004a2c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a30:	441a      	add	r2, r3
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	6a1a      	ldr	r2, [r3, #32]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d30b      	bcc.n	8004a5a <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	6a1a      	ldr	r2, [r3, #32]
 8004a4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a52:	1ad2      	subs	r2, r2, r3
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	621a      	str	r2, [r3, #32]
 8004a58:	e017      	b.n	8004a8a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d108      	bne.n	8004a74 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8004a62:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004a66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004a72:	e00a      	b.n	8004a8a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2200      	movs	r2, #0
 8004a88:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	785b      	ldrb	r3, [r3, #1]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d165      	bne.n	8004b5e <HAL_PCD_EP_DB_Transmit+0x382>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aa6:	4413      	add	r3, r2
 8004aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	011a      	lsls	r2, r3, #4
 8004ab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac8:	801a      	strh	r2, [r3, #0]
 8004aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ace:	2b3e      	cmp	r3, #62	@ 0x3e
 8004ad0:	d91d      	bls.n	8004b0e <HAL_PCD_EP_DB_Transmit+0x332>
 8004ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ade:	f003 031f 	and.w	r3, r3, #31
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d102      	bne.n	8004aec <HAL_PCD_EP_DB_Transmit+0x310>
 8004ae6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aee:	881b      	ldrh	r3, [r3, #0]
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	029b      	lsls	r3, r3, #10
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	4313      	orrs	r3, r2
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b0a:	801a      	strh	r2, [r3, #0]
 8004b0c:	e044      	b.n	8004b98 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004b0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10a      	bne.n	8004b2c <HAL_PCD_EP_DB_Transmit+0x350>
 8004b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b28:	801a      	strh	r2, [r3, #0]
 8004b2a:	e035      	b.n	8004b98 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004b2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b30:	085b      	lsrs	r3, r3, #1
 8004b32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d002      	beq.n	8004b46 <HAL_PCD_EP_DB_Transmit+0x36a>
 8004b40:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b42:	3301      	adds	r3, #1
 8004b44:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	b29a      	uxth	r2, r3
 8004b4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	029b      	lsls	r3, r3, #10
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	4313      	orrs	r3, r2
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b5a:	801a      	strh	r2, [r3, #0]
 8004b5c:	e01c      	b.n	8004b98 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	785b      	ldrb	r3, [r3, #1]
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d118      	bne.n	8004b98 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	461a      	mov	r2, r3
 8004b78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b7a:	4413      	add	r3, r2
 8004b7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	011a      	lsls	r2, r3, #4
 8004b84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b86:	4413      	add	r3, r2
 8004b88:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004b8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b8e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b96:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6818      	ldr	r0, [r3, #0]
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	6959      	ldr	r1, [r3, #20]
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	891a      	ldrh	r2, [r3, #8]
 8004ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f003 ffa2 	bl	8008af2 <USB_WritePMA>
 8004bae:	e1e2      	b.n	8004f76 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	461a      	mov	r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	3306      	adds	r3, #6
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	6812      	ldr	r2, [r2, #0]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bd8:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	699a      	ldr	r2, [r3, #24]
 8004be0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d307      	bcc.n	8004bf8 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	699a      	ldr	r2, [r3, #24]
 8004bec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004bf0:	1ad2      	subs	r2, r2, r3
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	619a      	str	r2, [r3, #24]
 8004bf6:	e002      	b.n	8004bfe <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f040 80c0 	bne.w	8004d88 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	785b      	ldrb	r3, [r3, #1]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d126      	bne.n	8004c5e <HAL_PCD_EP_DB_Transmit+0x482>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c1e:	b29b      	uxth	r3, r3
 8004c20:	461a      	mov	r2, r3
 8004c22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c24:	4413      	add	r3, r2
 8004c26:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	011a      	lsls	r2, r3, #4
 8004c2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004c30:	4413      	add	r3, r2
 8004c32:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c36:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c3a:	881b      	ldrh	r3, [r3, #0]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c46:	801a      	strh	r2, [r3, #0]
 8004c48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c4a:	881b      	ldrh	r3, [r3, #0]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c56:	b29a      	uxth	r2, r3
 8004c58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c5a:	801a      	strh	r2, [r3, #0]
 8004c5c:	e01a      	b.n	8004c94 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	785b      	ldrb	r3, [r3, #1]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d116      	bne.n	8004c94 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	461a      	mov	r2, r3
 8004c78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c7a:	4413      	add	r3, r2
 8004c7c:	667b      	str	r3, [r7, #100]	@ 0x64
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	011a      	lsls	r2, r3, #4
 8004c84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c86:	4413      	add	r3, r2
 8004c88:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8004c8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c90:	2200      	movs	r2, #0
 8004c92:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	785b      	ldrb	r3, [r3, #1]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d12b      	bne.n	8004cfa <HAL_PCD_EP_DB_Transmit+0x51e>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004cb0:	b29b      	uxth	r3, r3
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cb6:	4413      	add	r3, r2
 8004cb8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	781b      	ldrb	r3, [r3, #0]
 8004cbe:	011a      	lsls	r2, r3, #4
 8004cc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004cc2:	4413      	add	r3, r2
 8004cc4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004cc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ccc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004cd0:	881b      	ldrh	r3, [r3, #0]
 8004cd2:	b29b      	uxth	r3, r3
 8004cd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004cde:	801a      	strh	r2, [r3, #0]
 8004ce0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004ce4:	881b      	ldrh	r3, [r3, #0]
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cf0:	b29a      	uxth	r2, r3
 8004cf2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8004cf6:	801a      	strh	r2, [r3, #0]
 8004cf8:	e017      	b.n	8004d2a <HAL_PCD_EP_DB_Transmit+0x54e>
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	785b      	ldrb	r3, [r3, #1]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d113      	bne.n	8004d2a <HAL_PCD_EP_DB_Transmit+0x54e>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d10:	4413      	add	r3, r2
 8004d12:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	011a      	lsls	r2, r3, #4
 8004d1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d1c:	4413      	add	r3, r2
 8004d1e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004d22:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d24:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d26:	2200      	movs	r2, #0
 8004d28:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	4619      	mov	r1, r3
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f005 f854 	bl	8009dde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004d36:	88fb      	ldrh	r3, [r7, #6]
 8004d38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f040 811a 	bne.w	8004f76 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	881b      	ldrh	r3, [r3, #0]
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d5c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	461a      	mov	r2, r3
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	781b      	ldrb	r3, [r3, #0]
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	441a      	add	r2, r3
 8004d6e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004d72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004d76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004d7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004d7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	8013      	strh	r3, [r2, #0]
 8004d86:	e0f6      	b.n	8004f76 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004d88:	88fb      	ldrh	r3, [r7, #6]
 8004d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d121      	bne.n	8004dd6 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004da8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dac:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	461a      	mov	r2, r3
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	781b      	ldrb	r3, [r3, #0]
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	441a      	add	r2, r3
 8004dbe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004dc2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004dc6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004dca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	f040 80ca 	bne.w	8004f76 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	695a      	ldr	r2, [r3, #20]
 8004de6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004dea:	441a      	add	r2, r3
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	69da      	ldr	r2, [r3, #28]
 8004df4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004df8:	441a      	add	r2, r3
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	6a1a      	ldr	r2, [r3, #32]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d30b      	bcc.n	8004e22 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	6a1a      	ldr	r2, [r3, #32]
 8004e16:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e1a:	1ad2      	subs	r2, r2, r3
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	621a      	str	r2, [r3, #32]
 8004e20:	e017      	b.n	8004e52 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d108      	bne.n	8004e3c <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004e2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004e2e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004e3a:	e00a      	b.n	8004e52 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	2200      	movs	r2, #0
 8004e48:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	785b      	ldrb	r3, [r3, #1]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d165      	bne.n	8004f2c <HAL_PCD_EP_DB_Transmit+0x750>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	461a      	mov	r2, r3
 8004e72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e74:	4413      	add	r3, r2
 8004e76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	011a      	lsls	r2, r3, #4
 8004e7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e80:	4413      	add	r3, r2
 8004e82:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004e86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004e96:	801a      	strh	r2, [r3, #0]
 8004e98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004e9c:	2b3e      	cmp	r3, #62	@ 0x3e
 8004e9e:	d91d      	bls.n	8004edc <HAL_PCD_EP_DB_Transmit+0x700>
 8004ea0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ea4:	095b      	lsrs	r3, r3, #5
 8004ea6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d102      	bne.n	8004eba <HAL_PCD_EP_DB_Transmit+0x6de>
 8004eb4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004eba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ebc:	881b      	ldrh	r3, [r3, #0]
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	029b      	lsls	r3, r3, #10
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ed0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ed8:	801a      	strh	r2, [r3, #0]
 8004eda:	e041      	b.n	8004f60 <HAL_PCD_EP_DB_Transmit+0x784>
 8004edc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10a      	bne.n	8004efa <HAL_PCD_EP_DB_Transmit+0x71e>
 8004ee4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ee6:	881b      	ldrh	r3, [r3, #0]
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ef2:	b29a      	uxth	r2, r3
 8004ef4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ef6:	801a      	strh	r2, [r3, #0]
 8004ef8:	e032      	b.n	8004f60 <HAL_PCD_EP_DB_Transmit+0x784>
 8004efa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004efe:	085b      	lsrs	r3, r3, #1
 8004f00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f02:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <HAL_PCD_EP_DB_Transmit+0x738>
 8004f0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f10:	3301      	adds	r3, #1
 8004f12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004f14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	029b      	lsls	r3, r3, #10
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	4313      	orrs	r3, r2
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004f28:	801a      	strh	r2, [r3, #0]
 8004f2a:	e019      	b.n	8004f60 <HAL_PCD_EP_DB_Transmit+0x784>
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	785b      	ldrb	r3, [r3, #1]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d115      	bne.n	8004f60 <HAL_PCD_EP_DB_Transmit+0x784>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f42:	4413      	add	r3, r2
 8004f44:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	011a      	lsls	r2, r3, #4
 8004f4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f4e:	4413      	add	r3, r2
 8004f50:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004f54:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f5e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6818      	ldr	r0, [r3, #0]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	6959      	ldr	r1, [r3, #20]
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	895a      	ldrh	r2, [r3, #10]
 8004f6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	f003 fdbe 	bl	8008af2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	4413      	add	r3, r2
 8004f84:	881b      	ldrh	r3, [r3, #0]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f90:	82bb      	strh	r3, [r7, #20]
 8004f92:	8abb      	ldrh	r3, [r7, #20]
 8004f94:	f083 0310 	eor.w	r3, r3, #16
 8004f98:	82bb      	strh	r3, [r7, #20]
 8004f9a:	8abb      	ldrh	r3, [r7, #20]
 8004f9c:	f083 0320 	eor.w	r3, r3, #32
 8004fa0:	82bb      	strh	r3, [r7, #20]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	441a      	add	r2, r3
 8004fb0:	8abb      	ldrh	r3, [r7, #20]
 8004fb2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004fb6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8004fba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3790      	adds	r7, #144	@ 0x90
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b086      	sub	sp, #24
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e272      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f000 8087 	beq.w	80050fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ff0:	4b92      	ldr	r3, [pc, #584]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f003 030c 	and.w	r3, r3, #12
 8004ff8:	2b04      	cmp	r3, #4
 8004ffa:	d00c      	beq.n	8005016 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004ffc:	4b8f      	ldr	r3, [pc, #572]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f003 030c 	and.w	r3, r3, #12
 8005004:	2b08      	cmp	r3, #8
 8005006:	d112      	bne.n	800502e <HAL_RCC_OscConfig+0x5e>
 8005008:	4b8c      	ldr	r3, [pc, #560]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005014:	d10b      	bne.n	800502e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005016:	4b89      	ldr	r3, [pc, #548]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d06c      	beq.n	80050fc <HAL_RCC_OscConfig+0x12c>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d168      	bne.n	80050fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e24c      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005036:	d106      	bne.n	8005046 <HAL_RCC_OscConfig+0x76>
 8005038:	4b80      	ldr	r3, [pc, #512]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a7f      	ldr	r2, [pc, #508]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 800503e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	e02e      	b.n	80050a4 <HAL_RCC_OscConfig+0xd4>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10c      	bne.n	8005068 <HAL_RCC_OscConfig+0x98>
 800504e:	4b7b      	ldr	r3, [pc, #492]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a7a      	ldr	r2, [pc, #488]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005054:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005058:	6013      	str	r3, [r2, #0]
 800505a:	4b78      	ldr	r3, [pc, #480]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a77      	ldr	r2, [pc, #476]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005060:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	e01d      	b.n	80050a4 <HAL_RCC_OscConfig+0xd4>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005070:	d10c      	bne.n	800508c <HAL_RCC_OscConfig+0xbc>
 8005072:	4b72      	ldr	r3, [pc, #456]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a71      	ldr	r2, [pc, #452]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005078:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	4b6f      	ldr	r3, [pc, #444]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a6e      	ldr	r2, [pc, #440]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005084:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	e00b      	b.n	80050a4 <HAL_RCC_OscConfig+0xd4>
 800508c:	4b6b      	ldr	r3, [pc, #428]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a6a      	ldr	r2, [pc, #424]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005092:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005096:	6013      	str	r3, [r2, #0]
 8005098:	4b68      	ldr	r3, [pc, #416]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a67      	ldr	r2, [pc, #412]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 800509e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80050a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d013      	beq.n	80050d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ac:	f7fd fd30 	bl	8002b10 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050b4:	f7fd fd2c 	bl	8002b10 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b64      	cmp	r3, #100	@ 0x64
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e200      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050c6:	4b5d      	ldr	r3, [pc, #372]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0f0      	beq.n	80050b4 <HAL_RCC_OscConfig+0xe4>
 80050d2:	e014      	b.n	80050fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d4:	f7fd fd1c 	bl	8002b10 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050da:	e008      	b.n	80050ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050dc:	f7fd fd18 	bl	8002b10 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b64      	cmp	r3, #100	@ 0x64
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e1ec      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050ee:	4b53      	ldr	r3, [pc, #332]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d1f0      	bne.n	80050dc <HAL_RCC_OscConfig+0x10c>
 80050fa:	e000      	b.n	80050fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d063      	beq.n	80051d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800510a:	4b4c      	ldr	r3, [pc, #304]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f003 030c 	and.w	r3, r3, #12
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00b      	beq.n	800512e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005116:	4b49      	ldr	r3, [pc, #292]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f003 030c 	and.w	r3, r3, #12
 800511e:	2b08      	cmp	r3, #8
 8005120:	d11c      	bne.n	800515c <HAL_RCC_OscConfig+0x18c>
 8005122:	4b46      	ldr	r3, [pc, #280]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d116      	bne.n	800515c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800512e:	4b43      	ldr	r3, [pc, #268]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d005      	beq.n	8005146 <HAL_RCC_OscConfig+0x176>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	2b01      	cmp	r3, #1
 8005140:	d001      	beq.n	8005146 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e1c0      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005146:	4b3d      	ldr	r3, [pc, #244]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	00db      	lsls	r3, r3, #3
 8005154:	4939      	ldr	r1, [pc, #228]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005156:	4313      	orrs	r3, r2
 8005158:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800515a:	e03a      	b.n	80051d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d020      	beq.n	80051a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005164:	4b36      	ldr	r3, [pc, #216]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 8005166:	2201      	movs	r2, #1
 8005168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516a:	f7fd fcd1 	bl	8002b10 <HAL_GetTick>
 800516e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005170:	e008      	b.n	8005184 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005172:	f7fd fccd 	bl	8002b10 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	2b02      	cmp	r3, #2
 800517e:	d901      	bls.n	8005184 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005180:	2303      	movs	r3, #3
 8005182:	e1a1      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005184:	4b2d      	ldr	r3, [pc, #180]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d0f0      	beq.n	8005172 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005190:	4b2a      	ldr	r3, [pc, #168]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	4927      	ldr	r1, [pc, #156]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	600b      	str	r3, [r1, #0]
 80051a4:	e015      	b.n	80051d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80051a6:	4b26      	ldr	r3, [pc, #152]	@ (8005240 <HAL_RCC_OscConfig+0x270>)
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ac:	f7fd fcb0 	bl	8002b10 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051b2:	e008      	b.n	80051c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051b4:	f7fd fcac 	bl	8002b10 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e180      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80051c6:	4b1d      	ldr	r3, [pc, #116]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f003 0302 	and.w	r3, r3, #2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1f0      	bne.n	80051b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0308 	and.w	r3, r3, #8
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d03a      	beq.n	8005254 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d019      	beq.n	800521a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80051e6:	4b17      	ldr	r3, [pc, #92]	@ (8005244 <HAL_RCC_OscConfig+0x274>)
 80051e8:	2201      	movs	r2, #1
 80051ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ec:	f7fd fc90 	bl	8002b10 <HAL_GetTick>
 80051f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051f2:	e008      	b.n	8005206 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051f4:	f7fd fc8c 	bl	8002b10 <HAL_GetTick>
 80051f8:	4602      	mov	r2, r0
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e160      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005206:	4b0d      	ldr	r3, [pc, #52]	@ (800523c <HAL_RCC_OscConfig+0x26c>)
 8005208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d0f0      	beq.n	80051f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8005212:	2001      	movs	r0, #1
 8005214:	f000 face 	bl	80057b4 <RCC_Delay>
 8005218:	e01c      	b.n	8005254 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800521a:	4b0a      	ldr	r3, [pc, #40]	@ (8005244 <HAL_RCC_OscConfig+0x274>)
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005220:	f7fd fc76 	bl	8002b10 <HAL_GetTick>
 8005224:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005226:	e00f      	b.n	8005248 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005228:	f7fd fc72 	bl	8002b10 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d908      	bls.n	8005248 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e146      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
 800523a:	bf00      	nop
 800523c:	40021000 	.word	0x40021000
 8005240:	42420000 	.word	0x42420000
 8005244:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005248:	4b92      	ldr	r3, [pc, #584]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 800524a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d1e9      	bne.n	8005228 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 0304 	and.w	r3, r3, #4
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 80a6 	beq.w	80053ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005262:	2300      	movs	r3, #0
 8005264:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005266:	4b8b      	ldr	r3, [pc, #556]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10d      	bne.n	800528e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005272:	4b88      	ldr	r3, [pc, #544]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	4a87      	ldr	r2, [pc, #540]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005278:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800527c:	61d3      	str	r3, [r2, #28]
 800527e:	4b85      	ldr	r3, [pc, #532]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005286:	60bb      	str	r3, [r7, #8]
 8005288:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800528a:	2301      	movs	r3, #1
 800528c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800528e:	4b82      	ldr	r3, [pc, #520]	@ (8005498 <HAL_RCC_OscConfig+0x4c8>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005296:	2b00      	cmp	r3, #0
 8005298:	d118      	bne.n	80052cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800529a:	4b7f      	ldr	r3, [pc, #508]	@ (8005498 <HAL_RCC_OscConfig+0x4c8>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a7e      	ldr	r2, [pc, #504]	@ (8005498 <HAL_RCC_OscConfig+0x4c8>)
 80052a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052a6:	f7fd fc33 	bl	8002b10 <HAL_GetTick>
 80052aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052ac:	e008      	b.n	80052c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052ae:	f7fd fc2f 	bl	8002b10 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b64      	cmp	r3, #100	@ 0x64
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e103      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052c0:	4b75      	ldr	r3, [pc, #468]	@ (8005498 <HAL_RCC_OscConfig+0x4c8>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d0f0      	beq.n	80052ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d106      	bne.n	80052e2 <HAL_RCC_OscConfig+0x312>
 80052d4:	4b6f      	ldr	r3, [pc, #444]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	4a6e      	ldr	r2, [pc, #440]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 80052da:	f043 0301 	orr.w	r3, r3, #1
 80052de:	6213      	str	r3, [r2, #32]
 80052e0:	e02d      	b.n	800533e <HAL_RCC_OscConfig+0x36e>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10c      	bne.n	8005304 <HAL_RCC_OscConfig+0x334>
 80052ea:	4b6a      	ldr	r3, [pc, #424]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	4a69      	ldr	r2, [pc, #420]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 80052f0:	f023 0301 	bic.w	r3, r3, #1
 80052f4:	6213      	str	r3, [r2, #32]
 80052f6:	4b67      	ldr	r3, [pc, #412]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	4a66      	ldr	r2, [pc, #408]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 80052fc:	f023 0304 	bic.w	r3, r3, #4
 8005300:	6213      	str	r3, [r2, #32]
 8005302:	e01c      	b.n	800533e <HAL_RCC_OscConfig+0x36e>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	2b05      	cmp	r3, #5
 800530a:	d10c      	bne.n	8005326 <HAL_RCC_OscConfig+0x356>
 800530c:	4b61      	ldr	r3, [pc, #388]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	4a60      	ldr	r2, [pc, #384]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005312:	f043 0304 	orr.w	r3, r3, #4
 8005316:	6213      	str	r3, [r2, #32]
 8005318:	4b5e      	ldr	r3, [pc, #376]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	4a5d      	ldr	r2, [pc, #372]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 800531e:	f043 0301 	orr.w	r3, r3, #1
 8005322:	6213      	str	r3, [r2, #32]
 8005324:	e00b      	b.n	800533e <HAL_RCC_OscConfig+0x36e>
 8005326:	4b5b      	ldr	r3, [pc, #364]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	4a5a      	ldr	r2, [pc, #360]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 800532c:	f023 0301 	bic.w	r3, r3, #1
 8005330:	6213      	str	r3, [r2, #32]
 8005332:	4b58      	ldr	r3, [pc, #352]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005334:	6a1b      	ldr	r3, [r3, #32]
 8005336:	4a57      	ldr	r2, [pc, #348]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005338:	f023 0304 	bic.w	r3, r3, #4
 800533c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d015      	beq.n	8005372 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005346:	f7fd fbe3 	bl	8002b10 <HAL_GetTick>
 800534a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800534c:	e00a      	b.n	8005364 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800534e:	f7fd fbdf 	bl	8002b10 <HAL_GetTick>
 8005352:	4602      	mov	r2, r0
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	1ad3      	subs	r3, r2, r3
 8005358:	f241 3288 	movw	r2, #5000	@ 0x1388
 800535c:	4293      	cmp	r3, r2
 800535e:	d901      	bls.n	8005364 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005360:	2303      	movs	r3, #3
 8005362:	e0b1      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005364:	4b4b      	ldr	r3, [pc, #300]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	f003 0302 	and.w	r3, r3, #2
 800536c:	2b00      	cmp	r3, #0
 800536e:	d0ee      	beq.n	800534e <HAL_RCC_OscConfig+0x37e>
 8005370:	e014      	b.n	800539c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005372:	f7fd fbcd 	bl	8002b10 <HAL_GetTick>
 8005376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005378:	e00a      	b.n	8005390 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800537a:	f7fd fbc9 	bl	8002b10 <HAL_GetTick>
 800537e:	4602      	mov	r2, r0
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005388:	4293      	cmp	r3, r2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e09b      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005390:	4b40      	ldr	r3, [pc, #256]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1ee      	bne.n	800537a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800539c:	7dfb      	ldrb	r3, [r7, #23]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d105      	bne.n	80053ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053a2:	4b3c      	ldr	r3, [pc, #240]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 80053a4:	69db      	ldr	r3, [r3, #28]
 80053a6:	4a3b      	ldr	r2, [pc, #236]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 80053a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80053ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f000 8087 	beq.w	80054c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053b8:	4b36      	ldr	r3, [pc, #216]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f003 030c 	and.w	r3, r3, #12
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d061      	beq.n	8005488 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	69db      	ldr	r3, [r3, #28]
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d146      	bne.n	800545a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053cc:	4b33      	ldr	r3, [pc, #204]	@ (800549c <HAL_RCC_OscConfig+0x4cc>)
 80053ce:	2200      	movs	r2, #0
 80053d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053d2:	f7fd fb9d 	bl	8002b10 <HAL_GetTick>
 80053d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053d8:	e008      	b.n	80053ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053da:	f7fd fb99 	bl	8002b10 <HAL_GetTick>
 80053de:	4602      	mov	r2, r0
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	1ad3      	subs	r3, r2, r3
 80053e4:	2b02      	cmp	r3, #2
 80053e6:	d901      	bls.n	80053ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80053e8:	2303      	movs	r3, #3
 80053ea:	e06d      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80053ec:	4b29      	ldr	r3, [pc, #164]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d1f0      	bne.n	80053da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005400:	d108      	bne.n	8005414 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005402:	4b24      	ldr	r3, [pc, #144]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	4921      	ldr	r1, [pc, #132]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005410:	4313      	orrs	r3, r2
 8005412:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005414:	4b1f      	ldr	r3, [pc, #124]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a19      	ldr	r1, [r3, #32]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005424:	430b      	orrs	r3, r1
 8005426:	491b      	ldr	r1, [pc, #108]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 8005428:	4313      	orrs	r3, r2
 800542a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800542c:	4b1b      	ldr	r3, [pc, #108]	@ (800549c <HAL_RCC_OscConfig+0x4cc>)
 800542e:	2201      	movs	r2, #1
 8005430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005432:	f7fd fb6d 	bl	8002b10 <HAL_GetTick>
 8005436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005438:	e008      	b.n	800544c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800543a:	f7fd fb69 	bl	8002b10 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e03d      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800544c:	4b11      	ldr	r3, [pc, #68]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0f0      	beq.n	800543a <HAL_RCC_OscConfig+0x46a>
 8005458:	e035      	b.n	80054c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800545a:	4b10      	ldr	r3, [pc, #64]	@ (800549c <HAL_RCC_OscConfig+0x4cc>)
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005460:	f7fd fb56 	bl	8002b10 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005468:	f7fd fb52 	bl	8002b10 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e026      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800547a:	4b06      	ldr	r3, [pc, #24]	@ (8005494 <HAL_RCC_OscConfig+0x4c4>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1f0      	bne.n	8005468 <HAL_RCC_OscConfig+0x498>
 8005486:	e01e      	b.n	80054c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	69db      	ldr	r3, [r3, #28]
 800548c:	2b01      	cmp	r3, #1
 800548e:	d107      	bne.n	80054a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e019      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
 8005494:	40021000 	.word	0x40021000
 8005498:	40007000 	.word	0x40007000
 800549c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80054a0:	4b0b      	ldr	r3, [pc, #44]	@ (80054d0 <HAL_RCC_OscConfig+0x500>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d106      	bne.n	80054c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054be:	429a      	cmp	r2, r3
 80054c0:	d001      	beq.n	80054c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e000      	b.n	80054c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40021000 	.word	0x40021000

080054d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	e0d0      	b.n	800568a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054e8:	4b6a      	ldr	r3, [pc, #424]	@ (8005694 <HAL_RCC_ClockConfig+0x1c0>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0307 	and.w	r3, r3, #7
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d910      	bls.n	8005518 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054f6:	4b67      	ldr	r3, [pc, #412]	@ (8005694 <HAL_RCC_ClockConfig+0x1c0>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f023 0207 	bic.w	r2, r3, #7
 80054fe:	4965      	ldr	r1, [pc, #404]	@ (8005694 <HAL_RCC_ClockConfig+0x1c0>)
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	4313      	orrs	r3, r2
 8005504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005506:	4b63      	ldr	r3, [pc, #396]	@ (8005694 <HAL_RCC_ClockConfig+0x1c0>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0307 	and.w	r3, r3, #7
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	429a      	cmp	r2, r3
 8005512:	d001      	beq.n	8005518 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e0b8      	b.n	800568a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d020      	beq.n	8005566 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0304 	and.w	r3, r3, #4
 800552c:	2b00      	cmp	r3, #0
 800552e:	d005      	beq.n	800553c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005530:	4b59      	ldr	r3, [pc, #356]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	4a58      	ldr	r2, [pc, #352]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 8005536:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800553a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0308 	and.w	r3, r3, #8
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005548:	4b53      	ldr	r3, [pc, #332]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	4a52      	ldr	r2, [pc, #328]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 800554e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005552:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005554:	4b50      	ldr	r3, [pc, #320]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	494d      	ldr	r1, [pc, #308]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 8005562:	4313      	orrs	r3, r2
 8005564:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0301 	and.w	r3, r3, #1
 800556e:	2b00      	cmp	r3, #0
 8005570:	d040      	beq.n	80055f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d107      	bne.n	800558a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800557a:	4b47      	ldr	r3, [pc, #284]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d115      	bne.n	80055b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e07f      	b.n	800568a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b02      	cmp	r3, #2
 8005590:	d107      	bne.n	80055a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005592:	4b41      	ldr	r3, [pc, #260]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d109      	bne.n	80055b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e073      	b.n	800568a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80055a2:	4b3d      	ldr	r3, [pc, #244]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e06b      	b.n	800568a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80055b2:	4b39      	ldr	r3, [pc, #228]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f023 0203 	bic.w	r2, r3, #3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	4936      	ldr	r1, [pc, #216]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80055c4:	f7fd faa4 	bl	8002b10 <HAL_GetTick>
 80055c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055ca:	e00a      	b.n	80055e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055cc:	f7fd faa0 	bl	8002b10 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055da:	4293      	cmp	r3, r2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e053      	b.n	800568a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e2:	4b2d      	ldr	r3, [pc, #180]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f003 020c 	and.w	r2, r3, #12
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d1eb      	bne.n	80055cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055f4:	4b27      	ldr	r3, [pc, #156]	@ (8005694 <HAL_RCC_ClockConfig+0x1c0>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d210      	bcs.n	8005624 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005602:	4b24      	ldr	r3, [pc, #144]	@ (8005694 <HAL_RCC_ClockConfig+0x1c0>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f023 0207 	bic.w	r2, r3, #7
 800560a:	4922      	ldr	r1, [pc, #136]	@ (8005694 <HAL_RCC_ClockConfig+0x1c0>)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	4313      	orrs	r3, r2
 8005610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005612:	4b20      	ldr	r3, [pc, #128]	@ (8005694 <HAL_RCC_ClockConfig+0x1c0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d001      	beq.n	8005624 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e032      	b.n	800568a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f003 0304 	and.w	r3, r3, #4
 800562c:	2b00      	cmp	r3, #0
 800562e:	d008      	beq.n	8005642 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005630:	4b19      	ldr	r3, [pc, #100]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	4916      	ldr	r1, [pc, #88]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 800563e:	4313      	orrs	r3, r2
 8005640:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0308 	and.w	r3, r3, #8
 800564a:	2b00      	cmp	r3, #0
 800564c:	d009      	beq.n	8005662 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800564e:	4b12      	ldr	r3, [pc, #72]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	490e      	ldr	r1, [pc, #56]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 800565e:	4313      	orrs	r3, r2
 8005660:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005662:	f000 f821 	bl	80056a8 <HAL_RCC_GetSysClockFreq>
 8005666:	4602      	mov	r2, r0
 8005668:	4b0b      	ldr	r3, [pc, #44]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	091b      	lsrs	r3, r3, #4
 800566e:	f003 030f 	and.w	r3, r3, #15
 8005672:	490a      	ldr	r1, [pc, #40]	@ (800569c <HAL_RCC_ClockConfig+0x1c8>)
 8005674:	5ccb      	ldrb	r3, [r1, r3]
 8005676:	fa22 f303 	lsr.w	r3, r2, r3
 800567a:	4a09      	ldr	r2, [pc, #36]	@ (80056a0 <HAL_RCC_ClockConfig+0x1cc>)
 800567c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800567e:	4b09      	ldr	r3, [pc, #36]	@ (80056a4 <HAL_RCC_ClockConfig+0x1d0>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4618      	mov	r0, r3
 8005684:	f7fd fa02 	bl	8002a8c <HAL_InitTick>

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	40022000 	.word	0x40022000
 8005698:	40021000 	.word	0x40021000
 800569c:	0800d4b4 	.word	0x0800d4b4
 80056a0:	20000000 	.word	0x20000000
 80056a4:	20000010 	.word	0x20000010

080056a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80056ae:	2300      	movs	r3, #0
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	2300      	movs	r3, #0
 80056b4:	60bb      	str	r3, [r7, #8]
 80056b6:	2300      	movs	r3, #0
 80056b8:	617b      	str	r3, [r7, #20]
 80056ba:	2300      	movs	r3, #0
 80056bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80056be:	2300      	movs	r3, #0
 80056c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80056c2:	4b1e      	ldr	r3, [pc, #120]	@ (800573c <HAL_RCC_GetSysClockFreq+0x94>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f003 030c 	and.w	r3, r3, #12
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d002      	beq.n	80056d8 <HAL_RCC_GetSysClockFreq+0x30>
 80056d2:	2b08      	cmp	r3, #8
 80056d4:	d003      	beq.n	80056de <HAL_RCC_GetSysClockFreq+0x36>
 80056d6:	e027      	b.n	8005728 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056d8:	4b19      	ldr	r3, [pc, #100]	@ (8005740 <HAL_RCC_GetSysClockFreq+0x98>)
 80056da:	613b      	str	r3, [r7, #16]
      break;
 80056dc:	e027      	b.n	800572e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	0c9b      	lsrs	r3, r3, #18
 80056e2:	f003 030f 	and.w	r3, r3, #15
 80056e6:	4a17      	ldr	r2, [pc, #92]	@ (8005744 <HAL_RCC_GetSysClockFreq+0x9c>)
 80056e8:	5cd3      	ldrb	r3, [r2, r3]
 80056ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d010      	beq.n	8005718 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80056f6:	4b11      	ldr	r3, [pc, #68]	@ (800573c <HAL_RCC_GetSysClockFreq+0x94>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	0c5b      	lsrs	r3, r3, #17
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	4a11      	ldr	r2, [pc, #68]	@ (8005748 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005702:	5cd3      	ldrb	r3, [r2, r3]
 8005704:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a0d      	ldr	r2, [pc, #52]	@ (8005740 <HAL_RCC_GetSysClockFreq+0x98>)
 800570a:	fb03 f202 	mul.w	r2, r3, r2
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	fbb2 f3f3 	udiv	r3, r2, r3
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	e004      	b.n	8005722 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a0c      	ldr	r2, [pc, #48]	@ (800574c <HAL_RCC_GetSysClockFreq+0xa4>)
 800571c:	fb02 f303 	mul.w	r3, r2, r3
 8005720:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	613b      	str	r3, [r7, #16]
      break;
 8005726:	e002      	b.n	800572e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005728:	4b05      	ldr	r3, [pc, #20]	@ (8005740 <HAL_RCC_GetSysClockFreq+0x98>)
 800572a:	613b      	str	r3, [r7, #16]
      break;
 800572c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800572e:	693b      	ldr	r3, [r7, #16]
}
 8005730:	4618      	mov	r0, r3
 8005732:	371c      	adds	r7, #28
 8005734:	46bd      	mov	sp, r7
 8005736:	bc80      	pop	{r7}
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	40021000 	.word	0x40021000
 8005740:	007a1200 	.word	0x007a1200
 8005744:	0800d4cc 	.word	0x0800d4cc
 8005748:	0800d4dc 	.word	0x0800d4dc
 800574c:	003d0900 	.word	0x003d0900

08005750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005750:	b480      	push	{r7}
 8005752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005754:	4b02      	ldr	r3, [pc, #8]	@ (8005760 <HAL_RCC_GetHCLKFreq+0x10>)
 8005756:	681b      	ldr	r3, [r3, #0]
}
 8005758:	4618      	mov	r0, r3
 800575a:	46bd      	mov	sp, r7
 800575c:	bc80      	pop	{r7}
 800575e:	4770      	bx	lr
 8005760:	20000000 	.word	0x20000000

08005764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005768:	f7ff fff2 	bl	8005750 <HAL_RCC_GetHCLKFreq>
 800576c:	4602      	mov	r2, r0
 800576e:	4b05      	ldr	r3, [pc, #20]	@ (8005784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	0a1b      	lsrs	r3, r3, #8
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	4903      	ldr	r1, [pc, #12]	@ (8005788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800577a:	5ccb      	ldrb	r3, [r1, r3]
 800577c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005780:	4618      	mov	r0, r3
 8005782:	bd80      	pop	{r7, pc}
 8005784:	40021000 	.word	0x40021000
 8005788:	0800d4c4 	.word	0x0800d4c4

0800578c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005790:	f7ff ffde 	bl	8005750 <HAL_RCC_GetHCLKFreq>
 8005794:	4602      	mov	r2, r0
 8005796:	4b05      	ldr	r3, [pc, #20]	@ (80057ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	0adb      	lsrs	r3, r3, #11
 800579c:	f003 0307 	and.w	r3, r3, #7
 80057a0:	4903      	ldr	r1, [pc, #12]	@ (80057b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057a2:	5ccb      	ldrb	r3, [r1, r3]
 80057a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	40021000 	.word	0x40021000
 80057b0:	0800d4c4 	.word	0x0800d4c4

080057b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80057bc:	4b0a      	ldr	r3, [pc, #40]	@ (80057e8 <RCC_Delay+0x34>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a0a      	ldr	r2, [pc, #40]	@ (80057ec <RCC_Delay+0x38>)
 80057c2:	fba2 2303 	umull	r2, r3, r2, r3
 80057c6:	0a5b      	lsrs	r3, r3, #9
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	fb02 f303 	mul.w	r3, r2, r3
 80057ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80057d0:	bf00      	nop
  }
  while (Delay --);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	1e5a      	subs	r2, r3, #1
 80057d6:	60fa      	str	r2, [r7, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1f9      	bne.n	80057d0 <RCC_Delay+0x1c>
}
 80057dc:	bf00      	nop
 80057de:	bf00      	nop
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bc80      	pop	{r7}
 80057e6:	4770      	bx	lr
 80057e8:	20000000 	.word	0x20000000
 80057ec:	10624dd3 	.word	0x10624dd3

080057f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	613b      	str	r3, [r7, #16]
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	d07d      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800580c:	2300      	movs	r3, #0
 800580e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005810:	4b4f      	ldr	r3, [pc, #316]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005812:	69db      	ldr	r3, [r3, #28]
 8005814:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10d      	bne.n	8005838 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800581c:	4b4c      	ldr	r3, [pc, #304]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800581e:	69db      	ldr	r3, [r3, #28]
 8005820:	4a4b      	ldr	r2, [pc, #300]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005822:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005826:	61d3      	str	r3, [r2, #28]
 8005828:	4b49      	ldr	r3, [pc, #292]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800582a:	69db      	ldr	r3, [r3, #28]
 800582c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005830:	60bb      	str	r3, [r7, #8]
 8005832:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005834:	2301      	movs	r3, #1
 8005836:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005838:	4b46      	ldr	r3, [pc, #280]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005840:	2b00      	cmp	r3, #0
 8005842:	d118      	bne.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005844:	4b43      	ldr	r3, [pc, #268]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a42      	ldr	r2, [pc, #264]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800584a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800584e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005850:	f7fd f95e 	bl	8002b10 <HAL_GetTick>
 8005854:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005856:	e008      	b.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005858:	f7fd f95a 	bl	8002b10 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	2b64      	cmp	r3, #100	@ 0x64
 8005864:	d901      	bls.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005866:	2303      	movs	r3, #3
 8005868:	e06d      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800586a:	4b3a      	ldr	r3, [pc, #232]	@ (8005954 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0f0      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005876:	4b36      	ldr	r3, [pc, #216]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800587e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d02e      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	429a      	cmp	r2, r3
 8005892:	d027      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005894:	4b2e      	ldr	r3, [pc, #184]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800589c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800589e:	4b2e      	ldr	r3, [pc, #184]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058a0:	2201      	movs	r2, #1
 80058a2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058a4:	4b2c      	ldr	r3, [pc, #176]	@ (8005958 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80058aa:	4a29      	ldr	r2, [pc, #164]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d014      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ba:	f7fd f929 	bl	8002b10 <HAL_GetTick>
 80058be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058c0:	e00a      	b.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058c2:	f7fd f925 	bl	8002b10 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d901      	bls.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e036      	b.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80058d8:	4b1d      	ldr	r3, [pc, #116]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	f003 0302 	and.w	r3, r3, #2
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d0ee      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058e4:	4b1a      	ldr	r3, [pc, #104]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	4917      	ldr	r1, [pc, #92]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058f2:	4313      	orrs	r3, r2
 80058f4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80058f6:	7dfb      	ldrb	r3, [r7, #23]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d105      	bne.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058fc:	4b14      	ldr	r3, [pc, #80]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	4a13      	ldr	r2, [pc, #76]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005902:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005906:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	2b00      	cmp	r3, #0
 8005912:	d008      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005914:	4b0e      	ldr	r3, [pc, #56]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005916:	685b      	ldr	r3, [r3, #4]
 8005918:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	490b      	ldr	r1, [pc, #44]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005922:	4313      	orrs	r3, r2
 8005924:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0310 	and.w	r3, r3, #16
 800592e:	2b00      	cmp	r3, #0
 8005930:	d008      	beq.n	8005944 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005932:	4b07      	ldr	r3, [pc, #28]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	4904      	ldr	r1, [pc, #16]	@ (8005950 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005940:	4313      	orrs	r3, r2
 8005942:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005944:	2300      	movs	r3, #0
}
 8005946:	4618      	mov	r0, r3
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	40021000 	.word	0x40021000
 8005954:	40007000 	.word	0x40007000
 8005958:	42420440 	.word	0x42420440

0800595c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e042      	b.n	80059f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d106      	bne.n	8005988 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7fc ff34 	bl	80027f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2224      	movs	r2, #36	@ 0x24
 800598c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68da      	ldr	r2, [r3, #12]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800599e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 ff7d 	bl	80068a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	695a      	ldr	r2, [r3, #20]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80059d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2220      	movs	r2, #32
 80059e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2220      	movs	r2, #32
 80059e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e024      	b.n	8005a58 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2224      	movs	r2, #36	@ 0x24
 8005a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68da      	ldr	r2, [r3, #12]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a24:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fc ffca 	bl	80029c0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b08a      	sub	sp, #40	@ 0x28
 8005a64:	af02      	add	r7, sp, #8
 8005a66:	60f8      	str	r0, [r7, #12]
 8005a68:	60b9      	str	r1, [r7, #8]
 8005a6a:	603b      	str	r3, [r7, #0]
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b20      	cmp	r3, #32
 8005a7e:	d16d      	bne.n	8005b5c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <HAL_UART_Transmit+0x2c>
 8005a86:	88fb      	ldrh	r3, [r7, #6]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d101      	bne.n	8005a90 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e066      	b.n	8005b5e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	2200      	movs	r2, #0
 8005a94:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2221      	movs	r2, #33	@ 0x21
 8005a9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a9e:	f7fd f837 	bl	8002b10 <HAL_GetTick>
 8005aa2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	88fa      	ldrh	r2, [r7, #6]
 8005aa8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	88fa      	ldrh	r2, [r7, #6]
 8005aae:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ab8:	d108      	bne.n	8005acc <HAL_UART_Transmit+0x6c>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d104      	bne.n	8005acc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	61bb      	str	r3, [r7, #24]
 8005aca:	e003      	b.n	8005ad4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ad4:	e02a      	b.n	8005b2c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2200      	movs	r2, #0
 8005ade:	2180      	movs	r1, #128	@ 0x80
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f000 fc12 	bl	800630a <UART_WaitOnFlagUntilTimeout>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005aec:	2303      	movs	r3, #3
 8005aee:	e036      	b.n	8005b5e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10b      	bne.n	8005b0e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	881b      	ldrh	r3, [r3, #0]
 8005afa:	461a      	mov	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b04:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	3302      	adds	r3, #2
 8005b0a:	61bb      	str	r3, [r7, #24]
 8005b0c:	e007      	b.n	8005b1e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	781a      	ldrb	r2, [r3, #0]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1cf      	bne.n	8005ad6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	2140      	movs	r1, #64	@ 0x40
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 fbe2 	bl	800630a <UART_WaitOnFlagUntilTimeout>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e006      	b.n	8005b5e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2220      	movs	r2, #32
 8005b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	e000      	b.n	8005b5e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005b5c:	2302      	movs	r3, #2
  }
}
 8005b5e:	4618      	mov	r0, r3
 8005b60:	3720      	adds	r7, #32
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}

08005b66 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b084      	sub	sp, #16
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	60f8      	str	r0, [r7, #12]
 8005b6e:	60b9      	str	r1, [r7, #8]
 8005b70:	4613      	mov	r3, r2
 8005b72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	d112      	bne.n	8005ba6 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d002      	beq.n	8005b8c <HAL_UART_Receive_DMA+0x26>
 8005b86:	88fb      	ldrh	r3, [r7, #6]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d101      	bne.n	8005b90 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e00b      	b.n	8005ba8 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005b96:	88fb      	ldrh	r3, [r7, #6]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	68b9      	ldr	r1, [r7, #8]
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 fc23 	bl	80063e8 <UART_Start_Receive_DMA>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	e000      	b.n	8005ba8 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005ba6:	2302      	movs	r3, #2
  }
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3710      	adds	r7, #16
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b0ba      	sub	sp, #232	@ 0xe8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	68db      	ldr	r3, [r3, #12]
 8005bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005bee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10f      	bne.n	8005c16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bfa:	f003 0320 	and.w	r3, r3, #32
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d009      	beq.n	8005c16 <HAL_UART_IRQHandler+0x66>
 8005c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c06:	f003 0320 	and.w	r3, r3, #32
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fd88 	bl	8006724 <UART_Receive_IT>
      return;
 8005c14:	e25b      	b.n	80060ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 80de 	beq.w	8005ddc <HAL_UART_IRQHandler+0x22c>
 8005c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c24:	f003 0301 	and.w	r3, r3, #1
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d106      	bne.n	8005c3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c30:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f000 80d1 	beq.w	8005ddc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c3e:	f003 0301 	and.w	r3, r3, #1
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00b      	beq.n	8005c5e <HAL_UART_IRQHandler+0xae>
 8005c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d005      	beq.n	8005c5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c56:	f043 0201 	orr.w	r2, r3, #1
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c62:	f003 0304 	and.w	r3, r3, #4
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d00b      	beq.n	8005c82 <HAL_UART_IRQHandler+0xd2>
 8005c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c6e:	f003 0301 	and.w	r3, r3, #1
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d005      	beq.n	8005c82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c7a:	f043 0202 	orr.w	r2, r3, #2
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00b      	beq.n	8005ca6 <HAL_UART_IRQHandler+0xf6>
 8005c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d005      	beq.n	8005ca6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c9e:	f043 0204 	orr.w	r2, r3, #4
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005caa:	f003 0308 	and.w	r3, r3, #8
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d011      	beq.n	8005cd6 <HAL_UART_IRQHandler+0x126>
 8005cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cb6:	f003 0320 	and.w	r3, r3, #32
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d105      	bne.n	8005cca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d005      	beq.n	8005cd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cce:	f043 0208 	orr.w	r2, r3, #8
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	f000 81f2 	beq.w	80060c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ce4:	f003 0320 	and.w	r3, r3, #32
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d008      	beq.n	8005cfe <HAL_UART_IRQHandler+0x14e>
 8005cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005cf0:	f003 0320 	and.w	r3, r3, #32
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d002      	beq.n	8005cfe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 fd13 	bl	8006724 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	bf14      	ite	ne
 8005d0c:	2301      	movne	r3, #1
 8005d0e:	2300      	moveq	r3, #0
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1a:	f003 0308 	and.w	r3, r3, #8
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d103      	bne.n	8005d2a <HAL_UART_IRQHandler+0x17a>
 8005d22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d04f      	beq.n	8005dca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f000 fc1d 	bl	800656a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	695b      	ldr	r3, [r3, #20]
 8005d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d041      	beq.n	8005dc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3314      	adds	r3, #20
 8005d44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005d4c:	e853 3f00 	ldrex	r3, [r3]
 8005d50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005d54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005d58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	3314      	adds	r3, #20
 8005d66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005d6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005d76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005d7a:	e841 2300 	strex	r3, r2, [r1]
 8005d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005d82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1d9      	bne.n	8005d3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d013      	beq.n	8005dba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d96:	4a7e      	ldr	r2, [pc, #504]	@ (8005f90 <HAL_UART_IRQHandler+0x3e0>)
 8005d98:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fd f952 	bl	8003048 <HAL_DMA_Abort_IT>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d016      	beq.n	8005dd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005db4:	4610      	mov	r0, r2
 8005db6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db8:	e00e      	b.n	8005dd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f7fc fd06 	bl	80027cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc0:	e00a      	b.n	8005dd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7fc fd02 	bl	80027cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc8:	e006      	b.n	8005dd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f7fc fcfe 	bl	80027cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005dd6:	e175      	b.n	80060c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd8:	bf00      	nop
    return;
 8005dda:	e173      	b.n	80060c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	f040 814f 	bne.w	8006084 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dea:	f003 0310 	and.w	r3, r3, #16
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f000 8148 	beq.w	8006084 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005df8:	f003 0310 	and.w	r3, r3, #16
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	f000 8141 	beq.w	8006084 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e02:	2300      	movs	r3, #0
 8005e04:	60bb      	str	r3, [r7, #8]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	60bb      	str	r3, [r7, #8]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	60bb      	str	r3, [r7, #8]
 8005e16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 80b6 	beq.w	8005f94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	f000 8145 	beq.w	80060c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005e42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e46:	429a      	cmp	r2, r3
 8005e48:	f080 813e 	bcs.w	80060c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005e52:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	f000 8088 	beq.w	8005f70 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	330c      	adds	r3, #12
 8005e66:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005e6e:	e853 3f00 	ldrex	r3, [r3]
 8005e72:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005e76:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005e7a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005e7e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	330c      	adds	r3, #12
 8005e88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005e8c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e90:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e94:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005e98:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005e9c:	e841 2300 	strex	r3, r2, [r1]
 8005ea0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005ea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1d9      	bne.n	8005e60 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3314      	adds	r3, #20
 8005eb2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005eb6:	e853 3f00 	ldrex	r3, [r3]
 8005eba:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005ebc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005ebe:	f023 0301 	bic.w	r3, r3, #1
 8005ec2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3314      	adds	r3, #20
 8005ecc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005ed0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005ed4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005ed8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005edc:	e841 2300 	strex	r3, r2, [r1]
 8005ee0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005ee2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d1e1      	bne.n	8005eac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3314      	adds	r3, #20
 8005eee:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ef2:	e853 3f00 	ldrex	r3, [r3]
 8005ef6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005ef8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005efa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005efe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3314      	adds	r3, #20
 8005f08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005f0c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005f0e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f10:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005f12:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005f14:	e841 2300 	strex	r3, r2, [r1]
 8005f18:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005f1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1e3      	bne.n	8005ee8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2220      	movs	r2, #32
 8005f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	330c      	adds	r3, #12
 8005f34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f38:	e853 3f00 	ldrex	r3, [r3]
 8005f3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005f3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f40:	f023 0310 	bic.w	r3, r3, #16
 8005f44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	330c      	adds	r3, #12
 8005f4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005f52:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005f54:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f5a:	e841 2300 	strex	r3, r2, [r1]
 8005f5e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1e3      	bne.n	8005f2e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fd f830 	bl	8002fd0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	4619      	mov	r1, r3
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f8b6 	bl	80060f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f8c:	e09c      	b.n	80060c8 <HAL_UART_IRQHandler+0x518>
 8005f8e:	bf00      	nop
 8005f90:	0800662f 	.word	0x0800662f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	f000 808e 	beq.w	80060cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005fb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	f000 8089 	beq.w	80060cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	330c      	adds	r3, #12
 8005fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc4:	e853 3f00 	ldrex	r3, [r3]
 8005fc8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005fd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	330c      	adds	r3, #12
 8005fda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005fde:	647a      	str	r2, [r7, #68]	@ 0x44
 8005fe0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fe4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fe6:	e841 2300 	strex	r3, r2, [r1]
 8005fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1e3      	bne.n	8005fba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3314      	adds	r3, #20
 8005ff8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffc:	e853 3f00 	ldrex	r3, [r3]
 8006000:	623b      	str	r3, [r7, #32]
   return(result);
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	f023 0301 	bic.w	r3, r3, #1
 8006008:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	3314      	adds	r3, #20
 8006012:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006016:	633a      	str	r2, [r7, #48]	@ 0x30
 8006018:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800601a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800601c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800601e:	e841 2300 	strex	r3, r2, [r1]
 8006022:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006026:	2b00      	cmp	r3, #0
 8006028:	d1e3      	bne.n	8005ff2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2220      	movs	r2, #32
 800602e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	330c      	adds	r3, #12
 800603e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	e853 3f00 	ldrex	r3, [r3]
 8006046:	60fb      	str	r3, [r7, #12]
   return(result);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	f023 0310 	bic.w	r3, r3, #16
 800604e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	330c      	adds	r3, #12
 8006058:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800605c:	61fa      	str	r2, [r7, #28]
 800605e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006060:	69b9      	ldr	r1, [r7, #24]
 8006062:	69fa      	ldr	r2, [r7, #28]
 8006064:	e841 2300 	strex	r3, r2, [r1]
 8006068:	617b      	str	r3, [r7, #20]
   return(result);
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1e3      	bne.n	8006038 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006076:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800607a:	4619      	mov	r1, r3
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 f83b 	bl	80060f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006082:	e023      	b.n	80060cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006088:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800608c:	2b00      	cmp	r3, #0
 800608e:	d009      	beq.n	80060a4 <HAL_UART_IRQHandler+0x4f4>
 8006090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006094:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006098:	2b00      	cmp	r3, #0
 800609a:	d003      	beq.n	80060a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 fada 	bl	8006656 <UART_Transmit_IT>
    return;
 80060a2:	e014      	b.n	80060ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00e      	beq.n	80060ce <HAL_UART_IRQHandler+0x51e>
 80060b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d008      	beq.n	80060ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 fb19 	bl	80066f4 <UART_EndTransmit_IT>
    return;
 80060c2:	e004      	b.n	80060ce <HAL_UART_IRQHandler+0x51e>
    return;
 80060c4:	bf00      	nop
 80060c6:	e002      	b.n	80060ce <HAL_UART_IRQHandler+0x51e>
      return;
 80060c8:	bf00      	nop
 80060ca:	e000      	b.n	80060ce <HAL_UART_IRQHandler+0x51e>
      return;
 80060cc:	bf00      	nop
  }
}
 80060ce:	37e8      	adds	r7, #232	@ 0xe8
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	bc80      	pop	{r7}
 80060e4:	4770      	bx	lr

080060e6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80060ee:	bf00      	nop
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bc80      	pop	{r7}
 80060f6:	4770      	bx	lr

080060f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	460b      	mov	r3, r1
 8006102:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	bc80      	pop	{r7}
 800610c:	4770      	bx	lr

0800610e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b09c      	sub	sp, #112	@ 0x70
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0320 	and.w	r3, r3, #32
 8006126:	2b00      	cmp	r3, #0
 8006128:	d172      	bne.n	8006210 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800612a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800612c:	2200      	movs	r2, #0
 800612e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006130:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	330c      	adds	r3, #12
 8006136:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006138:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800613a:	e853 3f00 	ldrex	r3, [r3]
 800613e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006140:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006142:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006146:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006148:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	330c      	adds	r3, #12
 800614e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006150:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006152:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006154:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006156:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006158:	e841 2300 	strex	r3, r2, [r1]
 800615c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800615e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1e5      	bne.n	8006130 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006164:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3314      	adds	r3, #20
 800616a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800616e:	e853 3f00 	ldrex	r3, [r3]
 8006172:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006176:	f023 0301 	bic.w	r3, r3, #1
 800617a:	667b      	str	r3, [r7, #100]	@ 0x64
 800617c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	3314      	adds	r3, #20
 8006182:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006184:	647a      	str	r2, [r7, #68]	@ 0x44
 8006186:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006188:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800618a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800618c:	e841 2300 	strex	r3, r2, [r1]
 8006190:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006194:	2b00      	cmp	r3, #0
 8006196:	d1e5      	bne.n	8006164 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006198:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3314      	adds	r3, #20
 800619e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a2:	e853 3f00 	ldrex	r3, [r3]
 80061a6:	623b      	str	r3, [r7, #32]
   return(result);
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80061b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3314      	adds	r3, #20
 80061b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80061b8:	633a      	str	r2, [r7, #48]	@ 0x30
 80061ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061bc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061c0:	e841 2300 	strex	r3, r2, [r1]
 80061c4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80061c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d1e5      	bne.n	8006198 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80061cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061ce:	2220      	movs	r2, #32
 80061d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d119      	bne.n	8006210 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	330c      	adds	r3, #12
 80061e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	e853 3f00 	ldrex	r3, [r3]
 80061ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f023 0310 	bic.w	r3, r3, #16
 80061f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	330c      	adds	r3, #12
 80061fa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80061fc:	61fa      	str	r2, [r7, #28]
 80061fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006200:	69b9      	ldr	r1, [r7, #24]
 8006202:	69fa      	ldr	r2, [r7, #28]
 8006204:	e841 2300 	strex	r3, r2, [r1]
 8006208:	617b      	str	r3, [r7, #20]
   return(result);
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1e5      	bne.n	80061dc <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006210:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006212:	2200      	movs	r2, #0
 8006214:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006216:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800621a:	2b01      	cmp	r3, #1
 800621c:	d106      	bne.n	800622c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800621e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006220:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006222:	4619      	mov	r1, r3
 8006224:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006226:	f7ff ff67 	bl	80060f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800622a:	e002      	b.n	8006232 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800622c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800622e:	f7fc fad6 	bl	80027de <HAL_UART_RxCpltCallback>
}
 8006232:	bf00      	nop
 8006234:	3770      	adds	r7, #112	@ 0x70
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b084      	sub	sp, #16
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006246:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2201      	movs	r2, #1
 800624c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006252:	2b01      	cmp	r3, #1
 8006254:	d108      	bne.n	8006268 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800625a:	085b      	lsrs	r3, r3, #1
 800625c:	b29b      	uxth	r3, r3
 800625e:	4619      	mov	r1, r3
 8006260:	68f8      	ldr	r0, [r7, #12]
 8006262:	f7ff ff49 	bl	80060f8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006266:	e002      	b.n	800626e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f7ff ff3c 	bl	80060e6 <HAL_UART_RxHalfCpltCallback>
}
 800626e:	bf00      	nop
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800627e:	2300      	movs	r3, #0
 8006280:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006286:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	695b      	ldr	r3, [r3, #20]
 800628e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006292:	2b00      	cmp	r3, #0
 8006294:	bf14      	ite	ne
 8006296:	2301      	movne	r3, #1
 8006298:	2300      	moveq	r3, #0
 800629a:	b2db      	uxtb	r3, r3
 800629c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b21      	cmp	r3, #33	@ 0x21
 80062a8:	d108      	bne.n	80062bc <UART_DMAError+0x46>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d005      	beq.n	80062bc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	2200      	movs	r2, #0
 80062b4:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80062b6:	68b8      	ldr	r0, [r7, #8]
 80062b8:	f000 f930 	bl	800651c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	695b      	ldr	r3, [r3, #20]
 80062c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	bf14      	ite	ne
 80062ca:	2301      	movne	r3, #1
 80062cc:	2300      	moveq	r3, #0
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b22      	cmp	r3, #34	@ 0x22
 80062dc:	d108      	bne.n	80062f0 <UART_DMAError+0x7a>
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d005      	beq.n	80062f0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	2200      	movs	r2, #0
 80062e8:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80062ea:	68b8      	ldr	r0, [r7, #8]
 80062ec:	f000 f93d 	bl	800656a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f4:	f043 0210 	orr.w	r2, r3, #16
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062fc:	68b8      	ldr	r0, [r7, #8]
 80062fe:	f7fc fa65 	bl	80027cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006302:	bf00      	nop
 8006304:	3710      	adds	r7, #16
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}

0800630a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800630a:	b580      	push	{r7, lr}
 800630c:	b090      	sub	sp, #64	@ 0x40
 800630e:	af00      	add	r7, sp, #0
 8006310:	60f8      	str	r0, [r7, #12]
 8006312:	60b9      	str	r1, [r7, #8]
 8006314:	603b      	str	r3, [r7, #0]
 8006316:	4613      	mov	r3, r2
 8006318:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800631a:	e050      	b.n	80063be <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800631c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800631e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006322:	d04c      	beq.n	80063be <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006324:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006326:	2b00      	cmp	r3, #0
 8006328:	d007      	beq.n	800633a <UART_WaitOnFlagUntilTimeout+0x30>
 800632a:	f7fc fbf1 	bl	8002b10 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006336:	429a      	cmp	r2, r3
 8006338:	d241      	bcs.n	80063be <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	330c      	adds	r3, #12
 8006340:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006344:	e853 3f00 	ldrex	r3, [r3]
 8006348:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800634a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006350:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	330c      	adds	r3, #12
 8006358:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800635a:	637a      	str	r2, [r7, #52]	@ 0x34
 800635c:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006360:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006362:	e841 2300 	strex	r3, r2, [r1]
 8006366:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1e5      	bne.n	800633a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	3314      	adds	r3, #20
 8006374:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	e853 3f00 	ldrex	r3, [r3]
 800637c:	613b      	str	r3, [r7, #16]
   return(result);
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f023 0301 	bic.w	r3, r3, #1
 8006384:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3314      	adds	r3, #20
 800638c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800638e:	623a      	str	r2, [r7, #32]
 8006390:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006392:	69f9      	ldr	r1, [r7, #28]
 8006394:	6a3a      	ldr	r2, [r7, #32]
 8006396:	e841 2300 	strex	r3, r2, [r1]
 800639a:	61bb      	str	r3, [r7, #24]
   return(result);
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d1e5      	bne.n	800636e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2220      	movs	r2, #32
 80063ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e00f      	b.n	80063de <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	4013      	ands	r3, r2
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	bf0c      	ite	eq
 80063ce:	2301      	moveq	r3, #1
 80063d0:	2300      	movne	r3, #0
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	461a      	mov	r2, r3
 80063d6:	79fb      	ldrb	r3, [r7, #7]
 80063d8:	429a      	cmp	r2, r3
 80063da:	d09f      	beq.n	800631c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063dc:	2300      	movs	r3, #0
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3740      	adds	r7, #64	@ 0x40
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
	...

080063e8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b098      	sub	sp, #96	@ 0x60
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	4613      	mov	r3, r2
 80063f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	88fa      	ldrh	r2, [r7, #6]
 8006400:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2200      	movs	r2, #0
 8006406:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2222      	movs	r2, #34	@ 0x22
 800640c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006414:	4a3e      	ldr	r2, [pc, #248]	@ (8006510 <UART_Start_Receive_DMA+0x128>)
 8006416:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800641c:	4a3d      	ldr	r2, [pc, #244]	@ (8006514 <UART_Start_Receive_DMA+0x12c>)
 800641e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006424:	4a3c      	ldr	r2, [pc, #240]	@ (8006518 <UART_Start_Receive_DMA+0x130>)
 8006426:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800642c:	2200      	movs	r2, #0
 800642e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006430:	f107 0308 	add.w	r3, r7, #8
 8006434:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	3304      	adds	r3, #4
 8006440:	4619      	mov	r1, r3
 8006442:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	88fb      	ldrh	r3, [r7, #6]
 8006448:	f7fc fd62 	bl	8002f10 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800644c:	2300      	movs	r3, #0
 800644e:	613b      	str	r3, [r7, #16]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	613b      	str	r3, [r7, #16]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	613b      	str	r3, [r7, #16]
 8006460:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	691b      	ldr	r3, [r3, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d019      	beq.n	800649e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	330c      	adds	r3, #12
 8006470:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006474:	e853 3f00 	ldrex	r3, [r3]
 8006478:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800647a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800647c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006480:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	330c      	adds	r3, #12
 8006488:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800648a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800648c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006490:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006492:	e841 2300 	strex	r3, r2, [r1]
 8006496:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006498:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1e5      	bne.n	800646a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3314      	adds	r3, #20
 80064a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a8:	e853 3f00 	ldrex	r3, [r3]
 80064ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80064ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b0:	f043 0301 	orr.w	r3, r3, #1
 80064b4:	657b      	str	r3, [r7, #84]	@ 0x54
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3314      	adds	r3, #20
 80064bc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80064be:	63ba      	str	r2, [r7, #56]	@ 0x38
 80064c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80064c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80064cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e5      	bne.n	800649e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	3314      	adds	r3, #20
 80064d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	e853 3f00 	ldrex	r3, [r3]
 80064e0:	617b      	str	r3, [r7, #20]
   return(result);
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	3314      	adds	r3, #20
 80064f0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80064f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80064f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f6:	6a39      	ldr	r1, [r7, #32]
 80064f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064fa:	e841 2300 	strex	r3, r2, [r1]
 80064fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1e5      	bne.n	80064d2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3760      	adds	r7, #96	@ 0x60
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	0800610f 	.word	0x0800610f
 8006514:	0800623b 	.word	0x0800623b
 8006518:	08006277 	.word	0x08006277

0800651c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800651c:	b480      	push	{r7}
 800651e:	b089      	sub	sp, #36	@ 0x24
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	330c      	adds	r3, #12
 800652a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	e853 3f00 	ldrex	r3, [r3]
 8006532:	60bb      	str	r3, [r7, #8]
   return(result);
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800653a:	61fb      	str	r3, [r7, #28]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	330c      	adds	r3, #12
 8006542:	69fa      	ldr	r2, [r7, #28]
 8006544:	61ba      	str	r2, [r7, #24]
 8006546:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006548:	6979      	ldr	r1, [r7, #20]
 800654a:	69ba      	ldr	r2, [r7, #24]
 800654c:	e841 2300 	strex	r3, r2, [r1]
 8006550:	613b      	str	r3, [r7, #16]
   return(result);
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d1e5      	bne.n	8006524 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2220      	movs	r2, #32
 800655c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006560:	bf00      	nop
 8006562:	3724      	adds	r7, #36	@ 0x24
 8006564:	46bd      	mov	sp, r7
 8006566:	bc80      	pop	{r7}
 8006568:	4770      	bx	lr

0800656a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800656a:	b480      	push	{r7}
 800656c:	b095      	sub	sp, #84	@ 0x54
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	330c      	adds	r3, #12
 8006578:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006584:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006588:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	330c      	adds	r3, #12
 8006590:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006592:	643a      	str	r2, [r7, #64]	@ 0x40
 8006594:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006598:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e5      	bne.n	8006572 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3314      	adds	r3, #20
 80065ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	f023 0301 	bic.w	r3, r3, #1
 80065bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3314      	adds	r3, #20
 80065c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065ce:	e841 2300 	strex	r3, r2, [r1]
 80065d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1e5      	bne.n	80065a6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d119      	bne.n	8006616 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	330c      	adds	r3, #12
 80065e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	e853 3f00 	ldrex	r3, [r3]
 80065f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f023 0310 	bic.w	r3, r3, #16
 80065f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	330c      	adds	r3, #12
 8006600:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006602:	61ba      	str	r2, [r7, #24]
 8006604:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006606:	6979      	ldr	r1, [r7, #20]
 8006608:	69ba      	ldr	r2, [r7, #24]
 800660a:	e841 2300 	strex	r3, r2, [r1]
 800660e:	613b      	str	r3, [r7, #16]
   return(result);
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1e5      	bne.n	80065e2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2220      	movs	r2, #32
 800661a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006624:	bf00      	nop
 8006626:	3754      	adds	r7, #84	@ 0x54
 8006628:	46bd      	mov	sp, r7
 800662a:	bc80      	pop	{r7}
 800662c:	4770      	bx	lr

0800662e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b084      	sub	sp, #16
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f7fc f8bf 	bl	80027cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800664e:	bf00      	nop
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006656:	b480      	push	{r7}
 8006658:	b085      	sub	sp, #20
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006664:	b2db      	uxtb	r3, r3
 8006666:	2b21      	cmp	r3, #33	@ 0x21
 8006668:	d13e      	bne.n	80066e8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006672:	d114      	bne.n	800669e <UART_Transmit_IT+0x48>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d110      	bne.n	800669e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	881b      	ldrh	r3, [r3, #0]
 8006686:	461a      	mov	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006690:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	1c9a      	adds	r2, r3, #2
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	621a      	str	r2, [r3, #32]
 800669c:	e008      	b.n	80066b0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a1b      	ldr	r3, [r3, #32]
 80066a2:	1c59      	adds	r1, r3, #1
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6211      	str	r1, [r2, #32]
 80066a8:	781a      	ldrb	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	3b01      	subs	r3, #1
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	4619      	mov	r1, r3
 80066be:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10f      	bne.n	80066e4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	68da      	ldr	r2, [r3, #12]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066d2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68da      	ldr	r2, [r3, #12]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066e2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066e4:	2300      	movs	r3, #0
 80066e6:	e000      	b.n	80066ea <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066e8:	2302      	movs	r3, #2
  }
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3714      	adds	r7, #20
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bc80      	pop	{r7}
 80066f2:	4770      	bx	lr

080066f4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b082      	sub	sp, #8
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	68da      	ldr	r2, [r3, #12]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800670a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2220      	movs	r2, #32
 8006710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7ff fcdd 	bl	80060d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800671a:	2300      	movs	r3, #0
}
 800671c:	4618      	mov	r0, r3
 800671e:	3708      	adds	r7, #8
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b08c      	sub	sp, #48	@ 0x30
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b22      	cmp	r3, #34	@ 0x22
 8006736:	f040 80ae 	bne.w	8006896 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006742:	d117      	bne.n	8006774 <UART_Receive_IT+0x50>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d113      	bne.n	8006774 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800674c:	2300      	movs	r3, #0
 800674e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006754:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	b29b      	uxth	r3, r3
 800675e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006762:	b29a      	uxth	r2, r3
 8006764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006766:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800676c:	1c9a      	adds	r2, r3, #2
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	629a      	str	r2, [r3, #40]	@ 0x28
 8006772:	e026      	b.n	80067c2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006778:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800677a:	2300      	movs	r3, #0
 800677c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006786:	d007      	beq.n	8006798 <UART_Receive_IT+0x74>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	689b      	ldr	r3, [r3, #8]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d10a      	bne.n	80067a6 <UART_Receive_IT+0x82>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d106      	bne.n	80067a6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	b2da      	uxtb	r2, r3
 80067a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a2:	701a      	strb	r2, [r3, #0]
 80067a4:	e008      	b.n	80067b8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067b2:	b2da      	uxtb	r2, r3
 80067b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067bc:	1c5a      	adds	r2, r3, #1
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	3b01      	subs	r3, #1
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	4619      	mov	r1, r3
 80067d0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d15d      	bne.n	8006892 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	68da      	ldr	r2, [r3, #12]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	f022 0220 	bic.w	r2, r2, #32
 80067e4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68da      	ldr	r2, [r3, #12]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80067f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	695a      	ldr	r2, [r3, #20]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 0201 	bic.w	r2, r2, #1
 8006804:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2220      	movs	r2, #32
 800680a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2200      	movs	r2, #0
 8006812:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006818:	2b01      	cmp	r3, #1
 800681a:	d135      	bne.n	8006888 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	330c      	adds	r3, #12
 8006828:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	e853 3f00 	ldrex	r3, [r3]
 8006830:	613b      	str	r3, [r7, #16]
   return(result);
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f023 0310 	bic.w	r3, r3, #16
 8006838:	627b      	str	r3, [r7, #36]	@ 0x24
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	330c      	adds	r3, #12
 8006840:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006842:	623a      	str	r2, [r7, #32]
 8006844:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006846:	69f9      	ldr	r1, [r7, #28]
 8006848:	6a3a      	ldr	r2, [r7, #32]
 800684a:	e841 2300 	strex	r3, r2, [r1]
 800684e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d1e5      	bne.n	8006822 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f003 0310 	and.w	r3, r3, #16
 8006860:	2b10      	cmp	r3, #16
 8006862:	d10a      	bne.n	800687a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006864:	2300      	movs	r3, #0
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	60fb      	str	r3, [r7, #12]
 8006878:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800687e:	4619      	mov	r1, r3
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f7ff fc39 	bl	80060f8 <HAL_UARTEx_RxEventCallback>
 8006886:	e002      	b.n	800688e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f7fb ffa8 	bl	80027de <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	e002      	b.n	8006898 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006892:	2300      	movs	r3, #0
 8006894:	e000      	b.n	8006898 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006896:	2302      	movs	r3, #2
  }
}
 8006898:	4618      	mov	r0, r3
 800689a:	3730      	adds	r7, #48	@ 0x30
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	691b      	ldr	r3, [r3, #16]
 80068ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	68da      	ldr	r2, [r3, #12]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	430a      	orrs	r2, r1
 80068bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	689a      	ldr	r2, [r3, #8]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	691b      	ldr	r3, [r3, #16]
 80068c6:	431a      	orrs	r2, r3
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80068da:	f023 030c 	bic.w	r3, r3, #12
 80068de:	687a      	ldr	r2, [r7, #4]
 80068e0:	6812      	ldr	r2, [r2, #0]
 80068e2:	68b9      	ldr	r1, [r7, #8]
 80068e4:	430b      	orrs	r3, r1
 80068e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	699a      	ldr	r2, [r3, #24]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a2c      	ldr	r2, [pc, #176]	@ (80069b4 <UART_SetConfig+0x114>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d103      	bne.n	8006910 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006908:	f7fe ff40 	bl	800578c <HAL_RCC_GetPCLK2Freq>
 800690c:	60f8      	str	r0, [r7, #12]
 800690e:	e002      	b.n	8006916 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006910:	f7fe ff28 	bl	8005764 <HAL_RCC_GetPCLK1Freq>
 8006914:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	4613      	mov	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	4413      	add	r3, r2
 800691e:	009a      	lsls	r2, r3, #2
 8006920:	441a      	add	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	fbb2 f3f3 	udiv	r3, r2, r3
 800692c:	4a22      	ldr	r2, [pc, #136]	@ (80069b8 <UART_SetConfig+0x118>)
 800692e:	fba2 2303 	umull	r2, r3, r2, r3
 8006932:	095b      	lsrs	r3, r3, #5
 8006934:	0119      	lsls	r1, r3, #4
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	4613      	mov	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	009a      	lsls	r2, r3, #2
 8006940:	441a      	add	r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	fbb2 f2f3 	udiv	r2, r2, r3
 800694c:	4b1a      	ldr	r3, [pc, #104]	@ (80069b8 <UART_SetConfig+0x118>)
 800694e:	fba3 0302 	umull	r0, r3, r3, r2
 8006952:	095b      	lsrs	r3, r3, #5
 8006954:	2064      	movs	r0, #100	@ 0x64
 8006956:	fb00 f303 	mul.w	r3, r0, r3
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	011b      	lsls	r3, r3, #4
 800695e:	3332      	adds	r3, #50	@ 0x32
 8006960:	4a15      	ldr	r2, [pc, #84]	@ (80069b8 <UART_SetConfig+0x118>)
 8006962:	fba2 2303 	umull	r2, r3, r2, r3
 8006966:	095b      	lsrs	r3, r3, #5
 8006968:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800696c:	4419      	add	r1, r3
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	4613      	mov	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4413      	add	r3, r2
 8006976:	009a      	lsls	r2, r3, #2
 8006978:	441a      	add	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	fbb2 f2f3 	udiv	r2, r2, r3
 8006984:	4b0c      	ldr	r3, [pc, #48]	@ (80069b8 <UART_SetConfig+0x118>)
 8006986:	fba3 0302 	umull	r0, r3, r3, r2
 800698a:	095b      	lsrs	r3, r3, #5
 800698c:	2064      	movs	r0, #100	@ 0x64
 800698e:	fb00 f303 	mul.w	r3, r0, r3
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	011b      	lsls	r3, r3, #4
 8006996:	3332      	adds	r3, #50	@ 0x32
 8006998:	4a07      	ldr	r2, [pc, #28]	@ (80069b8 <UART_SetConfig+0x118>)
 800699a:	fba2 2303 	umull	r2, r3, r2, r3
 800699e:	095b      	lsrs	r3, r3, #5
 80069a0:	f003 020f 	and.w	r2, r3, #15
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	440a      	add	r2, r1
 80069aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80069ac:	bf00      	nop
 80069ae:	3710      	adds	r7, #16
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	40013800 	.word	0x40013800
 80069b8:	51eb851f 	.word	0x51eb851f

080069bc <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80069bc:	b480      	push	{r7}
 80069be:	b09d      	sub	sp, #116	@ 0x74
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	881b      	ldrh	r3, [r3, #0]
 80069d8:	b29b      	uxth	r3, r3
 80069da:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 80069de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069e2:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	78db      	ldrb	r3, [r3, #3]
 80069ea:	2b03      	cmp	r3, #3
 80069ec:	d81f      	bhi.n	8006a2e <USB_ActivateEndpoint+0x72>
 80069ee:	a201      	add	r2, pc, #4	@ (adr r2, 80069f4 <USB_ActivateEndpoint+0x38>)
 80069f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f4:	08006a05 	.word	0x08006a05
 80069f8:	08006a21 	.word	0x08006a21
 80069fc:	08006a37 	.word	0x08006a37
 8006a00:	08006a13 	.word	0x08006a13
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006a04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006a08:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a0c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006a10:	e012      	b.n	8006a38 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006a12:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006a16:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006a1a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006a1e:	e00b      	b.n	8006a38 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006a20:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006a24:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006a28:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006a2c:	e004      	b.n	8006a38 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006a34:	e000      	b.n	8006a38 <USB_ActivateEndpoint+0x7c>
      break;
 8006a36:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006a38:	687a      	ldr	r2, [r7, #4]
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	781b      	ldrb	r3, [r3, #0]
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	441a      	add	r2, r3
 8006a42:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006a46:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a4a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006a5a:	687a      	ldr	r2, [r7, #4]
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	781b      	ldrb	r3, [r3, #0]
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	881b      	ldrh	r3, [r3, #0]
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006a6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a70:	b29b      	uxth	r3, r3
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	7812      	ldrb	r2, [r2, #0]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	441a      	add	r2, r3
 8006a86:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006a8a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006a8e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006a92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	7b1b      	ldrb	r3, [r3, #12]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	f040 8178 	bne.w	8006d98 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	785b      	ldrb	r3, [r3, #1]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 8084 	beq.w	8006bba <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	61bb      	str	r3, [r7, #24]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006abc:	b29b      	uxth	r3, r3
 8006abe:	461a      	mov	r2, r3
 8006ac0:	69bb      	ldr	r3, [r7, #24]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	61bb      	str	r3, [r7, #24]
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	781b      	ldrb	r3, [r3, #0]
 8006aca:	011a      	lsls	r2, r3, #4
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	4413      	add	r3, r2
 8006ad0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ad4:	617b      	str	r3, [r7, #20]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	88db      	ldrh	r3, [r3, #6]
 8006ada:	085b      	lsrs	r3, r3, #1
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	005b      	lsls	r3, r3, #1
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	4413      	add	r3, r2
 8006af0:	881b      	ldrh	r3, [r3, #0]
 8006af2:	827b      	strh	r3, [r7, #18]
 8006af4:	8a7b      	ldrh	r3, [r7, #18]
 8006af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d01b      	beq.n	8006b36 <USB_ActivateEndpoint+0x17a>
 8006afe:	687a      	ldr	r2, [r7, #4]
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	009b      	lsls	r3, r3, #2
 8006b06:	4413      	add	r3, r2
 8006b08:	881b      	ldrh	r3, [r3, #0]
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b14:	823b      	strh	r3, [r7, #16]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	441a      	add	r2, r3
 8006b20:	8a3b      	ldrh	r3, [r7, #16]
 8006b22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b2e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	78db      	ldrb	r3, [r3, #3]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d020      	beq.n	8006b80 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	009b      	lsls	r3, r3, #2
 8006b46:	4413      	add	r3, r2
 8006b48:	881b      	ldrh	r3, [r3, #0]
 8006b4a:	b29b      	uxth	r3, r3
 8006b4c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b54:	81bb      	strh	r3, [r7, #12]
 8006b56:	89bb      	ldrh	r3, [r7, #12]
 8006b58:	f083 0320 	eor.w	r3, r3, #32
 8006b5c:	81bb      	strh	r3, [r7, #12]
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	441a      	add	r2, r3
 8006b68:	89bb      	ldrh	r3, [r7, #12]
 8006b6a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006b6e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006b72:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	8013      	strh	r3, [r2, #0]
 8006b7e:	e2d5      	b.n	800712c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	881b      	ldrh	r3, [r3, #0]
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006b92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b96:	81fb      	strh	r3, [r7, #14]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	441a      	add	r2, r3
 8006ba2:	89fb      	ldrh	r3, [r7, #14]
 8006ba4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ba8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006bac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006bb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	8013      	strh	r3, [r2, #0]
 8006bb8:	e2b8      	b.n	800712c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	461a      	mov	r2, r3
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bca:	4413      	add	r3, r2
 8006bcc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	011a      	lsls	r2, r3, #4
 8006bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd6:	4413      	add	r3, r2
 8006bd8:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	88db      	ldrh	r3, [r3, #6]
 8006be2:	085b      	lsrs	r3, r3, #1
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	005b      	lsls	r3, r3, #1
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bec:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bfe:	4413      	add	r3, r2
 8006c00:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	011a      	lsls	r2, r3, #4
 8006c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0a:	4413      	add	r3, r2
 8006c0c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006c10:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c14:	881b      	ldrh	r3, [r3, #0]
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c1c:	b29a      	uxth	r2, r3
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c20:	801a      	strh	r2, [r3, #0]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	691b      	ldr	r3, [r3, #16]
 8006c26:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c28:	d91d      	bls.n	8006c66 <USB_ActivateEndpoint+0x2aa>
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	095b      	lsrs	r3, r3, #5
 8006c30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	691b      	ldr	r3, [r3, #16]
 8006c36:	f003 031f 	and.w	r3, r3, #31
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d102      	bne.n	8006c44 <USB_ActivateEndpoint+0x288>
 8006c3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c40:	3b01      	subs	r3, #1
 8006c42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c46:	881b      	ldrh	r3, [r3, #0]
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	029b      	lsls	r3, r3, #10
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	4313      	orrs	r3, r2
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c5a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c62:	801a      	strh	r2, [r3, #0]
 8006c64:	e026      	b.n	8006cb4 <USB_ActivateEndpoint+0x2f8>
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d10a      	bne.n	8006c84 <USB_ActivateEndpoint+0x2c8>
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c70:	881b      	ldrh	r3, [r3, #0]
 8006c72:	b29b      	uxth	r3, r3
 8006c74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c80:	801a      	strh	r2, [r3, #0]
 8006c82:	e017      	b.n	8006cb4 <USB_ActivateEndpoint+0x2f8>
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	691b      	ldr	r3, [r3, #16]
 8006c88:	085b      	lsrs	r3, r3, #1
 8006c8a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	691b      	ldr	r3, [r3, #16]
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d002      	beq.n	8006c9e <USB_ActivateEndpoint+0x2e2>
 8006c98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca0:	881b      	ldrh	r3, [r3, #0]
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	029b      	lsls	r3, r3, #10
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	4313      	orrs	r3, r2
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cb2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	881b      	ldrh	r3, [r3, #0]
 8006cc0:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006cc2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006cc4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d01b      	beq.n	8006d04 <USB_ActivateEndpoint+0x348>
 8006ccc:	687a      	ldr	r2, [r7, #4]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	781b      	ldrb	r3, [r3, #0]
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	881b      	ldrh	r3, [r3, #0]
 8006cd8:	b29b      	uxth	r3, r3
 8006cda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006cde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ce2:	843b      	strh	r3, [r7, #32]
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	441a      	add	r2, r3
 8006cee:	8c3b      	ldrh	r3, [r7, #32]
 8006cf0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006cf4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006cf8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006cfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d124      	bne.n	8006d56 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	009b      	lsls	r3, r3, #2
 8006d14:	4413      	add	r3, r2
 8006d16:	881b      	ldrh	r3, [r3, #0]
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d22:	83bb      	strh	r3, [r7, #28]
 8006d24:	8bbb      	ldrh	r3, [r7, #28]
 8006d26:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006d2a:	83bb      	strh	r3, [r7, #28]
 8006d2c:	8bbb      	ldrh	r3, [r7, #28]
 8006d2e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006d32:	83bb      	strh	r3, [r7, #28]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	009b      	lsls	r3, r3, #2
 8006d3c:	441a      	add	r2, r3
 8006d3e:	8bbb      	ldrh	r3, [r7, #28]
 8006d40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d50:	b29b      	uxth	r3, r3
 8006d52:	8013      	strh	r3, [r2, #0]
 8006d54:	e1ea      	b.n	800712c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	781b      	ldrb	r3, [r3, #0]
 8006d5c:	009b      	lsls	r3, r3, #2
 8006d5e:	4413      	add	r3, r2
 8006d60:	881b      	ldrh	r3, [r3, #0]
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006d68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d6c:	83fb      	strh	r3, [r7, #30]
 8006d6e:	8bfb      	ldrh	r3, [r7, #30]
 8006d70:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006d74:	83fb      	strh	r3, [r7, #30]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	441a      	add	r2, r3
 8006d80:	8bfb      	ldrh	r3, [r7, #30]
 8006d82:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006d86:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006d8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	8013      	strh	r3, [r2, #0]
 8006d96:	e1c9      	b.n	800712c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	78db      	ldrb	r3, [r3, #3]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d11e      	bne.n	8006dde <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4413      	add	r3, r2
 8006daa:	881b      	ldrh	r3, [r3, #0]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006db6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	441a      	add	r2, r3
 8006dc4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006dc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006dcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006dd0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006dd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dd8:	b29b      	uxth	r3, r3
 8006dda:	8013      	strh	r3, [r2, #0]
 8006ddc:	e01d      	b.n	8006e1a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8006dde:	687a      	ldr	r2, [r7, #4]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	781b      	ldrb	r3, [r3, #0]
 8006de4:	009b      	lsls	r3, r3, #2
 8006de6:	4413      	add	r3, r2
 8006de8:	881b      	ldrh	r3, [r3, #0]
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006df0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006df4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	441a      	add	r2, r3
 8006e02:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8006e06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e24:	b29b      	uxth	r3, r3
 8006e26:	461a      	mov	r2, r3
 8006e28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e2a:	4413      	add	r3, r2
 8006e2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	011a      	lsls	r2, r3, #4
 8006e34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	891b      	ldrh	r3, [r3, #8]
 8006e42:	085b      	lsrs	r3, r3, #1
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	005b      	lsls	r3, r3, #1
 8006e48:	b29a      	uxth	r2, r3
 8006e4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006e4c:	801a      	strh	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e5e:	4413      	add	r3, r2
 8006e60:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	011a      	lsls	r2, r3, #4
 8006e68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e6a:	4413      	add	r3, r2
 8006e6c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8006e70:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	895b      	ldrh	r3, [r3, #10]
 8006e76:	085b      	lsrs	r3, r3, #1
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	005b      	lsls	r3, r3, #1
 8006e7c:	b29a      	uxth	r2, r3
 8006e7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e80:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	785b      	ldrb	r3, [r3, #1]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f040 8093 	bne.w	8006fb2 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006e8c:	687a      	ldr	r2, [r7, #4]
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8006e9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006ea0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d01b      	beq.n	8006ee0 <USB_ActivateEndpoint+0x524>
 8006ea8:	687a      	ldr	r2, [r7, #4]
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	881b      	ldrh	r3, [r3, #0]
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006eba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ebe:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	441a      	add	r2, r3
 8006eca:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006ecc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ed0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ed4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006ed8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006eee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006ef0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d01b      	beq.n	8006f30 <USB_ActivateEndpoint+0x574>
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	881b      	ldrh	r3, [r3, #0]
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f0e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	441a      	add	r2, r3
 8006f1a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006f1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f28:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	781b      	ldrb	r3, [r3, #0]
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	881b      	ldrh	r3, [r3, #0]
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006f42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f46:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006f48:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006f4a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006f4e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006f50:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006f52:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006f56:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	441a      	add	r2, r3
 8006f62:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006f64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4413      	add	r3, r2
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f8e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	441a      	add	r2, r3
 8006f9a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006f9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fa0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fa4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	8013      	strh	r3, [r2, #0]
 8006fb0:	e0bc      	b.n	800712c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	881b      	ldrh	r3, [r3, #0]
 8006fbe:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006fc2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006fc6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d01d      	beq.n	800700a <USB_ActivateEndpoint+0x64e>
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	009b      	lsls	r3, r3, #2
 8006fd6:	4413      	add	r3, r2
 8006fd8:	881b      	ldrh	r3, [r3, #0]
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fe0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fe4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	781b      	ldrb	r3, [r3, #0]
 8006fee:	009b      	lsls	r3, r3, #2
 8006ff0:	441a      	add	r2, r3
 8006ff2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006ff6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ffa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ffe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007006:	b29b      	uxth	r3, r3
 8007008:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	881b      	ldrh	r3, [r3, #0]
 8007016:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800701a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800701e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007022:	2b00      	cmp	r3, #0
 8007024:	d01d      	beq.n	8007062 <USB_ActivateEndpoint+0x6a6>
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	881b      	ldrh	r3, [r3, #0]
 8007032:	b29b      	uxth	r3, r3
 8007034:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007038:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800703c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	441a      	add	r2, r3
 800704a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800704e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007052:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007056:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800705a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800705e:	b29b      	uxth	r3, r3
 8007060:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	78db      	ldrb	r3, [r3, #3]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d024      	beq.n	80070b4 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	4413      	add	r3, r2
 8007074:	881b      	ldrh	r3, [r3, #0]
 8007076:	b29b      	uxth	r3, r3
 8007078:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800707c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007080:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007084:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8007088:	f083 0320 	eor.w	r3, r3, #32
 800708c:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	441a      	add	r2, r3
 800709a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800709e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	8013      	strh	r3, [r2, #0]
 80070b2:	e01d      	b.n	80070f0 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	4413      	add	r3, r2
 80070be:	881b      	ldrh	r3, [r3, #0]
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80070c6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070ca:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	009b      	lsls	r3, r3, #2
 80070d6:	441a      	add	r2, r3
 80070d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80070dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80070e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80070e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	781b      	ldrb	r3, [r3, #0]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4413      	add	r3, r2
 80070fa:	881b      	ldrh	r3, [r3, #0]
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007106:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	781b      	ldrb	r3, [r3, #0]
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	441a      	add	r2, r3
 8007114:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007118:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800711c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007128:	b29b      	uxth	r3, r3
 800712a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800712c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8007130:	4618      	mov	r0, r3
 8007132:	3774      	adds	r7, #116	@ 0x74
 8007134:	46bd      	mov	sp, r7
 8007136:	bc80      	pop	{r7}
 8007138:	4770      	bx	lr
 800713a:	bf00      	nop

0800713c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b0c2      	sub	sp, #264	@ 0x108
 8007140:	af00      	add	r7, sp, #0
 8007142:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007146:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800714a:	6018      	str	r0, [r3, #0]
 800714c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007150:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007154:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007156:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800715a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	785b      	ldrb	r3, [r3, #1]
 8007162:	2b01      	cmp	r3, #1
 8007164:	f040 86b7 	bne.w	8007ed6 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007168:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800716c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	699a      	ldr	r2, [r3, #24]
 8007174:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007178:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	691b      	ldr	r3, [r3, #16]
 8007180:	429a      	cmp	r2, r3
 8007182:	d908      	bls.n	8007196 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007184:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007188:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007194:	e007      	b.n	80071a6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800719a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	699b      	ldr	r3, [r3, #24]
 80071a2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80071a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	7b1b      	ldrb	r3, [r3, #12]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d13a      	bne.n	800722c <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80071b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6959      	ldr	r1, [r3, #20]
 80071c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	88da      	ldrh	r2, [r3, #6]
 80071ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80071d8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80071dc:	6800      	ldr	r0, [r0, #0]
 80071de:	f001 fc88 	bl	8008af2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80071e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	613b      	str	r3, [r7, #16]
 80071ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	461a      	mov	r2, r3
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	4413      	add	r3, r2
 8007204:	613b      	str	r3, [r7, #16]
 8007206:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800720a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	011a      	lsls	r2, r3, #4
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	4413      	add	r3, r2
 8007218:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800721c:	60fb      	str	r3, [r7, #12]
 800721e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007222:	b29a      	uxth	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	801a      	strh	r2, [r3, #0]
 8007228:	f000 be1f 	b.w	8007e6a <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800722c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007230:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	78db      	ldrb	r3, [r3, #3]
 8007238:	2b02      	cmp	r3, #2
 800723a:	f040 8462 	bne.w	8007b02 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800723e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007242:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6a1a      	ldr	r2, [r3, #32]
 800724a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	429a      	cmp	r2, r3
 8007258:	f240 83df 	bls.w	8007a1a <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800725c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007260:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800726a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	881b      	ldrh	r3, [r3, #0]
 8007278:	b29b      	uxth	r3, r3
 800727a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800727e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007282:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007286:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007294:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	009b      	lsls	r3, r3, #2
 800729e:	441a      	add	r2, r3
 80072a0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80072a4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80072a8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80072ac:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80072b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80072b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6a1a      	ldr	r2, [r3, #32]
 80072c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072c8:	1ad2      	subs	r2, r2, r3
 80072ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80072d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072de:	681a      	ldr	r2, [r3, #0]
 80072e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	4413      	add	r3, r2
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 81c7 	beq.w	800768c <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80072fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007302:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	633b      	str	r3, [r7, #48]	@ 0x30
 800730a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800730e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	785b      	ldrb	r3, [r3, #1]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d177      	bne.n	800740a <USB_EPStartXfer+0x2ce>
 800731a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800731e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007326:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007334:	b29b      	uxth	r3, r3
 8007336:	461a      	mov	r2, r3
 8007338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800733a:	4413      	add	r3, r2
 800733c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800733e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007342:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	011a      	lsls	r2, r3, #4
 800734c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800734e:	4413      	add	r3, r2
 8007350:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007354:	627b      	str	r3, [r7, #36]	@ 0x24
 8007356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007358:	881b      	ldrh	r3, [r3, #0]
 800735a:	b29b      	uxth	r3, r3
 800735c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007360:	b29a      	uxth	r2, r3
 8007362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007364:	801a      	strh	r2, [r3, #0]
 8007366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800736a:	2b3e      	cmp	r3, #62	@ 0x3e
 800736c:	d921      	bls.n	80073b2 <USB_EPStartXfer+0x276>
 800736e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007372:	095b      	lsrs	r3, r3, #5
 8007374:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800737c:	f003 031f 	and.w	r3, r3, #31
 8007380:	2b00      	cmp	r3, #0
 8007382:	d104      	bne.n	800738e <USB_EPStartXfer+0x252>
 8007384:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007388:	3b01      	subs	r3, #1
 800738a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800738e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007390:	881b      	ldrh	r3, [r3, #0]
 8007392:	b29a      	uxth	r2, r3
 8007394:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007398:	b29b      	uxth	r3, r3
 800739a:	029b      	lsls	r3, r3, #10
 800739c:	b29b      	uxth	r3, r3
 800739e:	4313      	orrs	r3, r2
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073aa:	b29a      	uxth	r2, r3
 80073ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ae:	801a      	strh	r2, [r3, #0]
 80073b0:	e050      	b.n	8007454 <USB_EPStartXfer+0x318>
 80073b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d10a      	bne.n	80073d0 <USB_EPStartXfer+0x294>
 80073ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073bc:	881b      	ldrh	r3, [r3, #0]
 80073be:	b29b      	uxth	r3, r3
 80073c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073cc:	801a      	strh	r2, [r3, #0]
 80073ce:	e041      	b.n	8007454 <USB_EPStartXfer+0x318>
 80073d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073d4:	085b      	lsrs	r3, r3, #1
 80073d6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80073da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073de:	f003 0301 	and.w	r3, r3, #1
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d004      	beq.n	80073f0 <USB_EPStartXfer+0x2b4>
 80073e6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80073ea:	3301      	adds	r3, #1
 80073ec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80073f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f2:	881b      	ldrh	r3, [r3, #0]
 80073f4:	b29a      	uxth	r2, r3
 80073f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	029b      	lsls	r3, r3, #10
 80073fe:	b29b      	uxth	r3, r3
 8007400:	4313      	orrs	r3, r2
 8007402:	b29a      	uxth	r2, r3
 8007404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007406:	801a      	strh	r2, [r3, #0]
 8007408:	e024      	b.n	8007454 <USB_EPStartXfer+0x318>
 800740a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800740e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	785b      	ldrb	r3, [r3, #1]
 8007416:	2b01      	cmp	r3, #1
 8007418:	d11c      	bne.n	8007454 <USB_EPStartXfer+0x318>
 800741a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800741e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007428:	b29b      	uxth	r3, r3
 800742a:	461a      	mov	r2, r3
 800742c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800742e:	4413      	add	r3, r2
 8007430:	633b      	str	r3, [r7, #48]	@ 0x30
 8007432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	011a      	lsls	r2, r3, #4
 8007440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007442:	4413      	add	r3, r2
 8007444:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007448:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800744a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800744e:	b29a      	uxth	r2, r3
 8007450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007452:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007454:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007458:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	895b      	ldrh	r3, [r3, #10]
 8007460:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6959      	ldr	r1, [r3, #20]
 8007470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007474:	b29b      	uxth	r3, r3
 8007476:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800747a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800747e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007482:	6800      	ldr	r0, [r0, #0]
 8007484:	f001 fb35 	bl	8008af2 <USB_WritePMA>
            ep->xfer_buff += len;
 8007488:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800748c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	695a      	ldr	r2, [r3, #20]
 8007494:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007498:	441a      	add	r2, r3
 800749a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80074a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6a1a      	ldr	r2, [r3, #32]
 80074b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	691b      	ldr	r3, [r3, #16]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d90f      	bls.n	80074e2 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80074c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	6a1a      	ldr	r2, [r3, #32]
 80074ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074d2:	1ad2      	subs	r2, r2, r3
 80074d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	621a      	str	r2, [r3, #32]
 80074e0:	e00e      	b.n	8007500 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80074e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	6a1b      	ldr	r3, [r3, #32]
 80074ee:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80074f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2200      	movs	r2, #0
 80074fe:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007500:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007504:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	785b      	ldrb	r3, [r3, #1]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d177      	bne.n	8007600 <USB_EPStartXfer+0x4c4>
 8007510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007514:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	61bb      	str	r3, [r7, #24]
 800751c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007520:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800752a:	b29b      	uxth	r3, r3
 800752c:	461a      	mov	r2, r3
 800752e:	69bb      	ldr	r3, [r7, #24]
 8007530:	4413      	add	r3, r2
 8007532:	61bb      	str	r3, [r7, #24]
 8007534:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007538:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	011a      	lsls	r2, r3, #4
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	4413      	add	r3, r2
 8007546:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800754a:	617b      	str	r3, [r7, #20]
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	b29b      	uxth	r3, r3
 8007552:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007556:	b29a      	uxth	r2, r3
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	801a      	strh	r2, [r3, #0]
 800755c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007560:	2b3e      	cmp	r3, #62	@ 0x3e
 8007562:	d921      	bls.n	80075a8 <USB_EPStartXfer+0x46c>
 8007564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007568:	095b      	lsrs	r3, r3, #5
 800756a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800756e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007572:	f003 031f 	and.w	r3, r3, #31
 8007576:	2b00      	cmp	r3, #0
 8007578:	d104      	bne.n	8007584 <USB_EPStartXfer+0x448>
 800757a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800757e:	3b01      	subs	r3, #1
 8007580:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	881b      	ldrh	r3, [r3, #0]
 8007588:	b29a      	uxth	r2, r3
 800758a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800758e:	b29b      	uxth	r3, r3
 8007590:	029b      	lsls	r3, r3, #10
 8007592:	b29b      	uxth	r3, r3
 8007594:	4313      	orrs	r3, r2
 8007596:	b29b      	uxth	r3, r3
 8007598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800759c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075a0:	b29a      	uxth	r2, r3
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	801a      	strh	r2, [r3, #0]
 80075a6:	e056      	b.n	8007656 <USB_EPStartXfer+0x51a>
 80075a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10a      	bne.n	80075c6 <USB_EPStartXfer+0x48a>
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	881b      	ldrh	r3, [r3, #0]
 80075b4:	b29b      	uxth	r3, r3
 80075b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075be:	b29a      	uxth	r2, r3
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	801a      	strh	r2, [r3, #0]
 80075c4:	e047      	b.n	8007656 <USB_EPStartXfer+0x51a>
 80075c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075ca:	085b      	lsrs	r3, r3, #1
 80075cc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80075d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80075d4:	f003 0301 	and.w	r3, r3, #1
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d004      	beq.n	80075e6 <USB_EPStartXfer+0x4aa>
 80075dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075e0:	3301      	adds	r3, #1
 80075e2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	029b      	lsls	r3, r3, #10
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	4313      	orrs	r3, r2
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	697b      	ldr	r3, [r7, #20]
 80075fc:	801a      	strh	r2, [r3, #0]
 80075fe:	e02a      	b.n	8007656 <USB_EPStartXfer+0x51a>
 8007600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007604:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	785b      	ldrb	r3, [r3, #1]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d122      	bne.n	8007656 <USB_EPStartXfer+0x51a>
 8007610:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007614:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	623b      	str	r3, [r7, #32]
 800761c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007620:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800762a:	b29b      	uxth	r3, r3
 800762c:	461a      	mov	r2, r3
 800762e:	6a3b      	ldr	r3, [r7, #32]
 8007630:	4413      	add	r3, r2
 8007632:	623b      	str	r3, [r7, #32]
 8007634:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007638:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	011a      	lsls	r2, r3, #4
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	4413      	add	r3, r2
 8007646:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800764a:	61fb      	str	r3, [r7, #28]
 800764c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007650:	b29a      	uxth	r2, r3
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800765a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	891b      	ldrh	r3, [r3, #8]
 8007662:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800766a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	6959      	ldr	r1, [r3, #20]
 8007672:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007676:	b29b      	uxth	r3, r3
 8007678:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800767c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007680:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007684:	6800      	ldr	r0, [r0, #0]
 8007686:	f001 fa34 	bl	8008af2 <USB_WritePMA>
 800768a:	e3ee      	b.n	8007e6a <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800768c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007690:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	785b      	ldrb	r3, [r3, #1]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d177      	bne.n	800778c <USB_EPStartXfer+0x650>
 800769c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	461a      	mov	r2, r3
 80076ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076bc:	4413      	add	r3, r2
 80076be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	011a      	lsls	r2, r3, #4
 80076ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80076d0:	4413      	add	r3, r2
 80076d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80076d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80076d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076da:	881b      	ldrh	r3, [r3, #0]
 80076dc:	b29b      	uxth	r3, r3
 80076de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80076e6:	801a      	strh	r2, [r3, #0]
 80076e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80076ee:	d921      	bls.n	8007734 <USB_EPStartXfer+0x5f8>
 80076f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076f4:	095b      	lsrs	r3, r3, #5
 80076f6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80076fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80076fe:	f003 031f 	and.w	r3, r3, #31
 8007702:	2b00      	cmp	r3, #0
 8007704:	d104      	bne.n	8007710 <USB_EPStartXfer+0x5d4>
 8007706:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800770a:	3b01      	subs	r3, #1
 800770c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007712:	881b      	ldrh	r3, [r3, #0]
 8007714:	b29a      	uxth	r2, r3
 8007716:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800771a:	b29b      	uxth	r3, r3
 800771c:	029b      	lsls	r3, r3, #10
 800771e:	b29b      	uxth	r3, r3
 8007720:	4313      	orrs	r3, r2
 8007722:	b29b      	uxth	r3, r3
 8007724:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007728:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800772c:	b29a      	uxth	r2, r3
 800772e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007730:	801a      	strh	r2, [r3, #0]
 8007732:	e056      	b.n	80077e2 <USB_EPStartXfer+0x6a6>
 8007734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007738:	2b00      	cmp	r3, #0
 800773a:	d10a      	bne.n	8007752 <USB_EPStartXfer+0x616>
 800773c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800773e:	881b      	ldrh	r3, [r3, #0]
 8007740:	b29b      	uxth	r3, r3
 8007742:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007746:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800774a:	b29a      	uxth	r2, r3
 800774c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800774e:	801a      	strh	r2, [r3, #0]
 8007750:	e047      	b.n	80077e2 <USB_EPStartXfer+0x6a6>
 8007752:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007756:	085b      	lsrs	r3, r3, #1
 8007758:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800775c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b00      	cmp	r3, #0
 8007766:	d004      	beq.n	8007772 <USB_EPStartXfer+0x636>
 8007768:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800776c:	3301      	adds	r3, #1
 800776e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007772:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	b29a      	uxth	r2, r3
 8007778:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800777c:	b29b      	uxth	r3, r3
 800777e:	029b      	lsls	r3, r3, #10
 8007780:	b29b      	uxth	r3, r3
 8007782:	4313      	orrs	r3, r2
 8007784:	b29a      	uxth	r2, r3
 8007786:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007788:	801a      	strh	r2, [r3, #0]
 800778a:	e02a      	b.n	80077e2 <USB_EPStartXfer+0x6a6>
 800778c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007790:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	785b      	ldrb	r3, [r3, #1]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d122      	bne.n	80077e2 <USB_EPStartXfer+0x6a6>
 800779c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80077a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	461a      	mov	r2, r3
 80077ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077bc:	4413      	add	r3, r2
 80077be:	653b      	str	r3, [r7, #80]	@ 0x50
 80077c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	011a      	lsls	r2, r3, #4
 80077ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077d0:	4413      	add	r3, r2
 80077d2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80077d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80077d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80077dc:	b29a      	uxth	r2, r3
 80077de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80077e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	891b      	ldrh	r3, [r3, #8]
 80077ee:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80077f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6959      	ldr	r1, [r3, #20]
 80077fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007802:	b29b      	uxth	r3, r3
 8007804:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007808:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800780c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007810:	6800      	ldr	r0, [r0, #0]
 8007812:	f001 f96e 	bl	8008af2 <USB_WritePMA>
            ep->xfer_buff += len;
 8007816:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800781a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	695a      	ldr	r2, [r3, #20]
 8007822:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007826:	441a      	add	r2, r3
 8007828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007838:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	6a1a      	ldr	r2, [r3, #32]
 8007840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	429a      	cmp	r2, r3
 800784e:	d90f      	bls.n	8007870 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8007850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007854:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6a1a      	ldr	r2, [r3, #32]
 800785c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007860:	1ad2      	subs	r2, r2, r3
 8007862:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007866:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	621a      	str	r2, [r3, #32]
 800786e:	e00e      	b.n	800788e <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8007870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	6a1b      	ldr	r3, [r3, #32]
 800787c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007880:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007884:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2200      	movs	r2, #0
 800788c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800788e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007892:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	643b      	str	r3, [r7, #64]	@ 0x40
 800789a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800789e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	785b      	ldrb	r3, [r3, #1]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d177      	bne.n	800799a <USB_EPStartXfer+0x85e>
 80078aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80078b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	461a      	mov	r2, r3
 80078c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ca:	4413      	add	r3, r2
 80078cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80078ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	011a      	lsls	r2, r3, #4
 80078dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078de:	4413      	add	r3, r2
 80078e0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80078e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80078e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f4:	801a      	strh	r2, [r3, #0]
 80078f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80078fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80078fc:	d921      	bls.n	8007942 <USB_EPStartXfer+0x806>
 80078fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007902:	095b      	lsrs	r3, r3, #5
 8007904:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800790c:	f003 031f 	and.w	r3, r3, #31
 8007910:	2b00      	cmp	r3, #0
 8007912:	d104      	bne.n	800791e <USB_EPStartXfer+0x7e2>
 8007914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007918:	3b01      	subs	r3, #1
 800791a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800791e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	b29a      	uxth	r2, r3
 8007924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007928:	b29b      	uxth	r3, r3
 800792a:	029b      	lsls	r3, r3, #10
 800792c:	b29b      	uxth	r3, r3
 800792e:	4313      	orrs	r3, r2
 8007930:	b29b      	uxth	r3, r3
 8007932:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007936:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800793a:	b29a      	uxth	r2, r3
 800793c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800793e:	801a      	strh	r2, [r3, #0]
 8007940:	e050      	b.n	80079e4 <USB_EPStartXfer+0x8a8>
 8007942:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10a      	bne.n	8007960 <USB_EPStartXfer+0x824>
 800794a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800794c:	881b      	ldrh	r3, [r3, #0]
 800794e:	b29b      	uxth	r3, r3
 8007950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007958:	b29a      	uxth	r2, r3
 800795a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800795c:	801a      	strh	r2, [r3, #0]
 800795e:	e041      	b.n	80079e4 <USB_EPStartXfer+0x8a8>
 8007960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007964:	085b      	lsrs	r3, r3, #1
 8007966:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800796a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b00      	cmp	r3, #0
 8007974:	d004      	beq.n	8007980 <USB_EPStartXfer+0x844>
 8007976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800797a:	3301      	adds	r3, #1
 800797c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8007980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	b29a      	uxth	r2, r3
 8007986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800798a:	b29b      	uxth	r3, r3
 800798c:	029b      	lsls	r3, r3, #10
 800798e:	b29b      	uxth	r3, r3
 8007990:	4313      	orrs	r3, r2
 8007992:	b29a      	uxth	r2, r3
 8007994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007996:	801a      	strh	r2, [r3, #0]
 8007998:	e024      	b.n	80079e4 <USB_EPStartXfer+0x8a8>
 800799a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800799e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	785b      	ldrb	r3, [r3, #1]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d11c      	bne.n	80079e4 <USB_EPStartXfer+0x8a8>
 80079aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	461a      	mov	r2, r3
 80079bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079be:	4413      	add	r3, r2
 80079c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80079c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	011a      	lsls	r2, r3, #4
 80079d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079d2:	4413      	add	r3, r2
 80079d4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80079d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079de:	b29a      	uxth	r2, r3
 80079e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80079e2:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80079e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	895b      	ldrh	r3, [r3, #10]
 80079f0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80079f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6959      	ldr	r1, [r3, #20]
 8007a00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007a0a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007a0e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007a12:	6800      	ldr	r0, [r0, #0]
 8007a14:	f001 f86d 	bl	8008af2 <USB_WritePMA>
 8007a18:	e227      	b.n	8007e6a <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8007a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	6a1b      	ldr	r3, [r3, #32]
 8007a26:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8007a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a32:	681a      	ldr	r2, [r3, #0]
 8007a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007a4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a50:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8007a54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a58:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	441a      	add	r2, r3
 8007a6e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8007a72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007a76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007a7a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007a86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007aa6:	4413      	add	r3, r2
 8007aa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007aaa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	011a      	lsls	r2, r3, #4
 8007ab8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007aba:	4413      	add	r3, r2
 8007abc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007ac0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ac6:	b29a      	uxth	r2, r3
 8007ac8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007aca:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007acc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	891b      	ldrh	r3, [r3, #8]
 8007ad8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007adc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	6959      	ldr	r1, [r3, #20]
 8007ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007af2:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007af6:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007afa:	6800      	ldr	r0, [r0, #0]
 8007afc:	f000 fff9 	bl	8008af2 <USB_WritePMA>
 8007b00:	e1b3      	b.n	8007e6a <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007b02:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b06:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6a1a      	ldr	r2, [r3, #32]
 8007b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b12:	1ad2      	subs	r2, r2, r3
 8007b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007b20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	781b      	ldrb	r3, [r3, #0]
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	4413      	add	r3, r2
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f000 80c6 	beq.w	8007cd4 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b48:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	785b      	ldrb	r3, [r3, #1]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d177      	bne.n	8007c54 <USB_EPStartXfer+0xb18>
 8007b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	461a      	mov	r2, r3
 8007b82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b84:	4413      	add	r3, r2
 8007b86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	781b      	ldrb	r3, [r3, #0]
 8007b94:	011a      	lsls	r2, r3, #4
 8007b96:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007b98:	4413      	add	r3, r2
 8007b9a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007b9e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007ba0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ba2:	881b      	ldrh	r3, [r3, #0]
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007baa:	b29a      	uxth	r2, r3
 8007bac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bae:	801a      	strh	r2, [r3, #0]
 8007bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bb4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007bb6:	d921      	bls.n	8007bfc <USB_EPStartXfer+0xac0>
 8007bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bbc:	095b      	lsrs	r3, r3, #5
 8007bbe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007bc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc6:	f003 031f 	and.w	r3, r3, #31
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d104      	bne.n	8007bd8 <USB_EPStartXfer+0xa9c>
 8007bce:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007bd2:	3b01      	subs	r3, #1
 8007bd4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007bd8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bda:	881b      	ldrh	r3, [r3, #0]
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	029b      	lsls	r3, r3, #10
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	4313      	orrs	r3, r2
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bf8:	801a      	strh	r2, [r3, #0]
 8007bfa:	e050      	b.n	8007c9e <USB_EPStartXfer+0xb62>
 8007bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10a      	bne.n	8007c1a <USB_EPStartXfer+0xade>
 8007c04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c06:	881b      	ldrh	r3, [r3, #0]
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c16:	801a      	strh	r2, [r3, #0]
 8007c18:	e041      	b.n	8007c9e <USB_EPStartXfer+0xb62>
 8007c1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c1e:	085b      	lsrs	r3, r3, #1
 8007c20:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c28:	f003 0301 	and.w	r3, r3, #1
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d004      	beq.n	8007c3a <USB_EPStartXfer+0xafe>
 8007c30:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007c34:	3301      	adds	r3, #1
 8007c36:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007c3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	b29a      	uxth	r2, r3
 8007c40:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007c44:	b29b      	uxth	r3, r3
 8007c46:	029b      	lsls	r3, r3, #10
 8007c48:	b29b      	uxth	r3, r3
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c50:	801a      	strh	r2, [r3, #0]
 8007c52:	e024      	b.n	8007c9e <USB_EPStartXfer+0xb62>
 8007c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	785b      	ldrb	r3, [r3, #1]
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d11c      	bne.n	8007c9e <USB_EPStartXfer+0xb62>
 8007c64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	461a      	mov	r2, r3
 8007c76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c78:	4413      	add	r3, r2
 8007c7a:	673b      	str	r3, [r7, #112]	@ 0x70
 8007c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	011a      	lsls	r2, r3, #4
 8007c8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c92:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c9c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007c9e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	895b      	ldrh	r3, [r3, #10]
 8007caa:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6959      	ldr	r1, [r3, #20]
 8007cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007cc4:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007cc8:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007ccc:	6800      	ldr	r0, [r0, #0]
 8007cce:	f000 ff10 	bl	8008af2 <USB_WritePMA>
 8007cd2:	e0ca      	b.n	8007e6a <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	785b      	ldrb	r3, [r3, #1]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d177      	bne.n	8007dd4 <USB_EPStartXfer+0xc98>
 8007ce4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	461a      	mov	r2, r3
 8007d02:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007d04:	4413      	add	r3, r2
 8007d06:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	781b      	ldrb	r3, [r3, #0]
 8007d14:	011a      	lsls	r2, r3, #4
 8007d16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007d18:	4413      	add	r3, r2
 8007d1a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d22:	881b      	ldrh	r3, [r3, #0]
 8007d24:	b29b      	uxth	r3, r3
 8007d26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d2e:	801a      	strh	r2, [r3, #0]
 8007d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d34:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d36:	d921      	bls.n	8007d7c <USB_EPStartXfer+0xc40>
 8007d38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d3c:	095b      	lsrs	r3, r3, #5
 8007d3e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d46:	f003 031f 	and.w	r3, r3, #31
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d104      	bne.n	8007d58 <USB_EPStartXfer+0xc1c>
 8007d4e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d52:	3b01      	subs	r3, #1
 8007d54:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007d58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d5a:	881b      	ldrh	r3, [r3, #0]
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007d62:	b29b      	uxth	r3, r3
 8007d64:	029b      	lsls	r3, r3, #10
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	4313      	orrs	r3, r2
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d78:	801a      	strh	r2, [r3, #0]
 8007d7a:	e05c      	b.n	8007e36 <USB_EPStartXfer+0xcfa>
 8007d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10a      	bne.n	8007d9a <USB_EPStartXfer+0xc5e>
 8007d84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d86:	881b      	ldrh	r3, [r3, #0]
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007d8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007d96:	801a      	strh	r2, [r3, #0]
 8007d98:	e04d      	b.n	8007e36 <USB_EPStartXfer+0xcfa>
 8007d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d9e:	085b      	lsrs	r3, r3, #1
 8007da0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007da4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d004      	beq.n	8007dba <USB_EPStartXfer+0xc7e>
 8007db0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007db4:	3301      	adds	r3, #1
 8007db6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007dba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	029b      	lsls	r3, r3, #10
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007dd0:	801a      	strh	r2, [r3, #0]
 8007dd2:	e030      	b.n	8007e36 <USB_EPStartXfer+0xcfa>
 8007dd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	785b      	ldrb	r3, [r3, #1]
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d128      	bne.n	8007e36 <USB_EPStartXfer+0xcfa>
 8007de4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007de8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007df2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007df6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e00:	b29b      	uxth	r3, r3
 8007e02:	461a      	mov	r2, r3
 8007e04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e08:	4413      	add	r3, r2
 8007e0a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007e0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	011a      	lsls	r2, r3, #4
 8007e1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007e20:	4413      	add	r3, r2
 8007e22:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007e34:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007e36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e3a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	891b      	ldrh	r3, [r3, #8]
 8007e42:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6959      	ldr	r1, [r3, #20]
 8007e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007e5c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007e60:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007e64:	6800      	ldr	r0, [r0, #0]
 8007e66:	f000 fe44 	bl	8008af2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007e6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e6e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e72:	681a      	ldr	r2, [r3, #0]
 8007e74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	4413      	add	r3, r2
 8007e84:	881b      	ldrh	r3, [r3, #0]
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e90:	817b      	strh	r3, [r7, #10]
 8007e92:	897b      	ldrh	r3, [r7, #10]
 8007e94:	f083 0310 	eor.w	r3, r3, #16
 8007e98:	817b      	strh	r3, [r7, #10]
 8007e9a:	897b      	ldrh	r3, [r7, #10]
 8007e9c:	f083 0320 	eor.w	r3, r3, #32
 8007ea0:	817b      	strh	r3, [r7, #10]
 8007ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	441a      	add	r2, r3
 8007ebc:	897b      	ldrh	r3, [r7, #10]
 8007ebe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ec2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ec6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007eca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	8013      	strh	r3, [r2, #0]
 8007ed2:	f000 bcde 	b.w	8008892 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007ed6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	7b1b      	ldrb	r3, [r3, #12]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	f040 80bb 	bne.w	800805e <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	699a      	ldr	r2, [r3, #24]
 8007ef4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ef8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	691b      	ldr	r3, [r3, #16]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d917      	bls.n	8007f34 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	691b      	ldr	r3, [r3, #16]
 8007f10:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007f14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	699a      	ldr	r2, [r3, #24]
 8007f20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f24:	1ad2      	subs	r2, r2, r3
 8007f26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	619a      	str	r2, [r3, #24]
 8007f32:	e00e      	b.n	8007f52 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	2200      	movs	r2, #0
 8007f50:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007f52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f56:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f64:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	461a      	mov	r2, r3
 8007f72:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f76:	4413      	add	r3, r2
 8007f78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	011a      	lsls	r2, r3, #4
 8007f8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007f8e:	4413      	add	r3, r2
 8007f90:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007f94:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007f98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007f9c:	881b      	ldrh	r3, [r3, #0]
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007fa4:	b29a      	uxth	r2, r3
 8007fa6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007faa:	801a      	strh	r2, [r3, #0]
 8007fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb0:	2b3e      	cmp	r3, #62	@ 0x3e
 8007fb2:	d924      	bls.n	8007ffe <USB_EPStartXfer+0xec2>
 8007fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fb8:	095b      	lsrs	r3, r3, #5
 8007fba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007fbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc2:	f003 031f 	and.w	r3, r3, #31
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d104      	bne.n	8007fd4 <USB_EPStartXfer+0xe98>
 8007fca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007fce:	3b01      	subs	r3, #1
 8007fd0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007fd4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007fd8:	881b      	ldrh	r3, [r3, #0]
 8007fda:	b29a      	uxth	r2, r3
 8007fdc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	029b      	lsls	r3, r3, #10
 8007fe4:	b29b      	uxth	r3, r3
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	b29b      	uxth	r3, r3
 8007fea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007fee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ff8:	801a      	strh	r2, [r3, #0]
 8007ffa:	f000 bc10 	b.w	800881e <USB_EPStartXfer+0x16e2>
 8007ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008002:	2b00      	cmp	r3, #0
 8008004:	d10c      	bne.n	8008020 <USB_EPStartXfer+0xee4>
 8008006:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800800a:	881b      	ldrh	r3, [r3, #0]
 800800c:	b29b      	uxth	r3, r3
 800800e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008012:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008016:	b29a      	uxth	r2, r3
 8008018:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800801c:	801a      	strh	r2, [r3, #0]
 800801e:	e3fe      	b.n	800881e <USB_EPStartXfer+0x16e2>
 8008020:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008024:	085b      	lsrs	r3, r3, #1
 8008026:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800802a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800802e:	f003 0301 	and.w	r3, r3, #1
 8008032:	2b00      	cmp	r3, #0
 8008034:	d004      	beq.n	8008040 <USB_EPStartXfer+0xf04>
 8008036:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800803a:	3301      	adds	r3, #1
 800803c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008040:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008044:	881b      	ldrh	r3, [r3, #0]
 8008046:	b29a      	uxth	r2, r3
 8008048:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800804c:	b29b      	uxth	r3, r3
 800804e:	029b      	lsls	r3, r3, #10
 8008050:	b29b      	uxth	r3, r3
 8008052:	4313      	orrs	r3, r2
 8008054:	b29a      	uxth	r2, r3
 8008056:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800805a:	801a      	strh	r2, [r3, #0]
 800805c:	e3df      	b.n	800881e <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800805e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008062:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	78db      	ldrb	r3, [r3, #3]
 800806a:	2b02      	cmp	r3, #2
 800806c:	f040 8218 	bne.w	80084a0 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008070:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008074:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	785b      	ldrb	r3, [r3, #1]
 800807c:	2b00      	cmp	r3, #0
 800807e:	f040 809d 	bne.w	80081bc <USB_EPStartXfer+0x1080>
 8008082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008086:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008090:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008094:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800809e:	b29b      	uxth	r3, r3
 80080a0:	461a      	mov	r2, r3
 80080a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080a6:	4413      	add	r3, r2
 80080a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80080ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	011a      	lsls	r2, r3, #4
 80080ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80080be:	4413      	add	r3, r2
 80080c0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80080c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80080c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080cc:	881b      	ldrh	r3, [r3, #0]
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80080da:	801a      	strh	r2, [r3, #0]
 80080dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80080ea:	d92b      	bls.n	8008144 <USB_EPStartXfer+0x1008>
 80080ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	095b      	lsrs	r3, r3, #5
 80080fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80080fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008102:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	691b      	ldr	r3, [r3, #16]
 800810a:	f003 031f 	and.w	r3, r3, #31
 800810e:	2b00      	cmp	r3, #0
 8008110:	d104      	bne.n	800811c <USB_EPStartXfer+0xfe0>
 8008112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008116:	3b01      	subs	r3, #1
 8008118:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800811c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008120:	881b      	ldrh	r3, [r3, #0]
 8008122:	b29a      	uxth	r2, r3
 8008124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008128:	b29b      	uxth	r3, r3
 800812a:	029b      	lsls	r3, r3, #10
 800812c:	b29b      	uxth	r3, r3
 800812e:	4313      	orrs	r3, r2
 8008130:	b29b      	uxth	r3, r3
 8008132:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008136:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800813a:	b29a      	uxth	r2, r3
 800813c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008140:	801a      	strh	r2, [r3, #0]
 8008142:	e070      	b.n	8008226 <USB_EPStartXfer+0x10ea>
 8008144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	691b      	ldr	r3, [r3, #16]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d10c      	bne.n	800816e <USB_EPStartXfer+0x1032>
 8008154:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008158:	881b      	ldrh	r3, [r3, #0]
 800815a:	b29b      	uxth	r3, r3
 800815c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008160:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008164:	b29a      	uxth	r2, r3
 8008166:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800816a:	801a      	strh	r2, [r3, #0]
 800816c:	e05b      	b.n	8008226 <USB_EPStartXfer+0x10ea>
 800816e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	085b      	lsrs	r3, r3, #1
 800817c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008180:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008184:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	691b      	ldr	r3, [r3, #16]
 800818c:	f003 0301 	and.w	r3, r3, #1
 8008190:	2b00      	cmp	r3, #0
 8008192:	d004      	beq.n	800819e <USB_EPStartXfer+0x1062>
 8008194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008198:	3301      	adds	r3, #1
 800819a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800819e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081a2:	881b      	ldrh	r3, [r3, #0]
 80081a4:	b29a      	uxth	r2, r3
 80081a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	029b      	lsls	r3, r3, #10
 80081ae:	b29b      	uxth	r3, r3
 80081b0:	4313      	orrs	r3, r2
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081b8:	801a      	strh	r2, [r3, #0]
 80081ba:	e034      	b.n	8008226 <USB_EPStartXfer+0x10ea>
 80081bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	785b      	ldrb	r3, [r3, #1]
 80081c8:	2b01      	cmp	r3, #1
 80081ca:	d12c      	bne.n	8008226 <USB_EPStartXfer+0x10ea>
 80081cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80081da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081e8:	b29b      	uxth	r3, r3
 80081ea:	461a      	mov	r2, r3
 80081ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80081f0:	4413      	add	r3, r2
 80081f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80081f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	011a      	lsls	r2, r3, #4
 8008204:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008208:	4413      	add	r3, r2
 800820a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800820e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	b29a      	uxth	r2, r3
 8008220:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008224:	801a      	strh	r2, [r3, #0]
 8008226:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800822a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008234:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008238:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	785b      	ldrb	r3, [r3, #1]
 8008240:	2b00      	cmp	r3, #0
 8008242:	f040 809d 	bne.w	8008380 <USB_EPStartXfer+0x1244>
 8008246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800824a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008254:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008258:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008262:	b29b      	uxth	r3, r3
 8008264:	461a      	mov	r2, r3
 8008266:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800826a:	4413      	add	r3, r2
 800826c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008270:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008274:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	011a      	lsls	r2, r3, #4
 800827e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008282:	4413      	add	r3, r2
 8008284:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008288:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800828c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008290:	881b      	ldrh	r3, [r3, #0]
 8008292:	b29b      	uxth	r3, r3
 8008294:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008298:	b29a      	uxth	r2, r3
 800829a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800829e:	801a      	strh	r2, [r3, #0]
 80082a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	691b      	ldr	r3, [r3, #16]
 80082ac:	2b3e      	cmp	r3, #62	@ 0x3e
 80082ae:	d92b      	bls.n	8008308 <USB_EPStartXfer+0x11cc>
 80082b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	691b      	ldr	r3, [r3, #16]
 80082bc:	095b      	lsrs	r3, r3, #5
 80082be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80082c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	691b      	ldr	r3, [r3, #16]
 80082ce:	f003 031f 	and.w	r3, r3, #31
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d104      	bne.n	80082e0 <USB_EPStartXfer+0x11a4>
 80082d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082da:	3b01      	subs	r3, #1
 80082dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80082e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80082e4:	881b      	ldrh	r3, [r3, #0]
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	029b      	lsls	r3, r3, #10
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	4313      	orrs	r3, r2
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082fe:	b29a      	uxth	r2, r3
 8008300:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008304:	801a      	strh	r2, [r3, #0]
 8008306:	e069      	b.n	80083dc <USB_EPStartXfer+0x12a0>
 8008308:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800830c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	691b      	ldr	r3, [r3, #16]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10c      	bne.n	8008332 <USB_EPStartXfer+0x11f6>
 8008318:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800831c:	881b      	ldrh	r3, [r3, #0]
 800831e:	b29b      	uxth	r3, r3
 8008320:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008324:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008328:	b29a      	uxth	r2, r3
 800832a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800832e:	801a      	strh	r2, [r3, #0]
 8008330:	e054      	b.n	80083dc <USB_EPStartXfer+0x12a0>
 8008332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008336:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	085b      	lsrs	r3, r3, #1
 8008340:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008344:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008348:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	691b      	ldr	r3, [r3, #16]
 8008350:	f003 0301 	and.w	r3, r3, #1
 8008354:	2b00      	cmp	r3, #0
 8008356:	d004      	beq.n	8008362 <USB_EPStartXfer+0x1226>
 8008358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800835c:	3301      	adds	r3, #1
 800835e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008362:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008366:	881b      	ldrh	r3, [r3, #0]
 8008368:	b29a      	uxth	r2, r3
 800836a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800836e:	b29b      	uxth	r3, r3
 8008370:	029b      	lsls	r3, r3, #10
 8008372:	b29b      	uxth	r3, r3
 8008374:	4313      	orrs	r3, r2
 8008376:	b29a      	uxth	r2, r3
 8008378:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800837c:	801a      	strh	r2, [r3, #0]
 800837e:	e02d      	b.n	80083dc <USB_EPStartXfer+0x12a0>
 8008380:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008384:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	785b      	ldrb	r3, [r3, #1]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d125      	bne.n	80083dc <USB_EPStartXfer+0x12a0>
 8008390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008394:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800839e:	b29b      	uxth	r3, r3
 80083a0:	461a      	mov	r2, r3
 80083a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80083a6:	4413      	add	r3, r2
 80083a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80083ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	011a      	lsls	r2, r3, #4
 80083ba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80083be:	4413      	add	r3, r2
 80083c0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80083c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80083c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	691b      	ldr	r3, [r3, #16]
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80083da:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80083dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	69db      	ldr	r3, [r3, #28]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 8218 	beq.w	800881e <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80083ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80083f6:	681a      	ldr	r2, [r3, #0]
 80083f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80083fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	881b      	ldrh	r3, [r3, #0]
 800840a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800840e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008412:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008416:	2b00      	cmp	r3, #0
 8008418:	d005      	beq.n	8008426 <USB_EPStartXfer+0x12ea>
 800841a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800841e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10d      	bne.n	8008442 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008426:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800842a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800842e:	2b00      	cmp	r3, #0
 8008430:	f040 81f5 	bne.w	800881e <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008434:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800843c:	2b00      	cmp	r3, #0
 800843e:	f040 81ee 	bne.w	800881e <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008446:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008450:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	009b      	lsls	r3, r3, #2
 800845a:	4413      	add	r3, r2
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	b29b      	uxth	r3, r3
 8008460:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008464:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008468:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800846c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008470:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800847a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	441a      	add	r2, r3
 8008486:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800848a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800848e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008492:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008496:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800849a:	b29b      	uxth	r3, r3
 800849c:	8013      	strh	r3, [r2, #0]
 800849e:	e1be      	b.n	800881e <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80084a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	78db      	ldrb	r3, [r3, #3]
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	f040 81b4 	bne.w	800881a <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80084b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	699a      	ldr	r2, [r3, #24]
 80084be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	691b      	ldr	r3, [r3, #16]
 80084ca:	429a      	cmp	r2, r3
 80084cc:	d917      	bls.n	80084fe <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80084ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80084de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	699a      	ldr	r2, [r3, #24]
 80084ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084ee:	1ad2      	subs	r2, r2, r3
 80084f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	619a      	str	r2, [r3, #24]
 80084fc:	e00e      	b.n	800851c <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 80084fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008502:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 800850e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008512:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2200      	movs	r2, #0
 800851a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800851c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008520:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	785b      	ldrb	r3, [r3, #1]
 8008528:	2b00      	cmp	r3, #0
 800852a:	f040 8085 	bne.w	8008638 <USB_EPStartXfer+0x14fc>
 800852e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008532:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800853c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008540:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800854a:	b29b      	uxth	r3, r3
 800854c:	461a      	mov	r2, r3
 800854e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008552:	4413      	add	r3, r2
 8008554:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008558:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800855c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	011a      	lsls	r2, r3, #4
 8008566:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800856a:	4413      	add	r3, r2
 800856c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008570:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008574:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008578:	881b      	ldrh	r3, [r3, #0]
 800857a:	b29b      	uxth	r3, r3
 800857c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008580:	b29a      	uxth	r2, r3
 8008582:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008586:	801a      	strh	r2, [r3, #0]
 8008588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800858c:	2b3e      	cmp	r3, #62	@ 0x3e
 800858e:	d923      	bls.n	80085d8 <USB_EPStartXfer+0x149c>
 8008590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008594:	095b      	lsrs	r3, r3, #5
 8008596:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800859a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800859e:	f003 031f 	and.w	r3, r3, #31
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d104      	bne.n	80085b0 <USB_EPStartXfer+0x1474>
 80085a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085aa:	3b01      	subs	r3, #1
 80085ac:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80085b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80085bc:	b29b      	uxth	r3, r3
 80085be:	029b      	lsls	r3, r3, #10
 80085c0:	b29b      	uxth	r3, r3
 80085c2:	4313      	orrs	r3, r2
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085ce:	b29a      	uxth	r2, r3
 80085d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085d4:	801a      	strh	r2, [r3, #0]
 80085d6:	e060      	b.n	800869a <USB_EPStartXfer+0x155e>
 80085d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d10c      	bne.n	80085fa <USB_EPStartXfer+0x14be>
 80085e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085e4:	881b      	ldrh	r3, [r3, #0]
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085f0:	b29a      	uxth	r2, r3
 80085f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80085f6:	801a      	strh	r2, [r3, #0]
 80085f8:	e04f      	b.n	800869a <USB_EPStartXfer+0x155e>
 80085fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085fe:	085b      	lsrs	r3, r3, #1
 8008600:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008604:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008608:	f003 0301 	and.w	r3, r3, #1
 800860c:	2b00      	cmp	r3, #0
 800860e:	d004      	beq.n	800861a <USB_EPStartXfer+0x14de>
 8008610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008614:	3301      	adds	r3, #1
 8008616:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800861a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800861e:	881b      	ldrh	r3, [r3, #0]
 8008620:	b29a      	uxth	r2, r3
 8008622:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008626:	b29b      	uxth	r3, r3
 8008628:	029b      	lsls	r3, r3, #10
 800862a:	b29b      	uxth	r3, r3
 800862c:	4313      	orrs	r3, r2
 800862e:	b29a      	uxth	r2, r3
 8008630:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008634:	801a      	strh	r2, [r3, #0]
 8008636:	e030      	b.n	800869a <USB_EPStartXfer+0x155e>
 8008638:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800863c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	785b      	ldrb	r3, [r3, #1]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d128      	bne.n	800869a <USB_EPStartXfer+0x155e>
 8008648:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800864c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800865a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008664:	b29b      	uxth	r3, r3
 8008666:	461a      	mov	r2, r3
 8008668:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800866c:	4413      	add	r3, r2
 800866e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008676:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	011a      	lsls	r2, r3, #4
 8008680:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008684:	4413      	add	r3, r2
 8008686:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800868a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800868e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008692:	b29a      	uxth	r2, r3
 8008694:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008698:	801a      	strh	r2, [r3, #0]
 800869a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800869e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80086a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	785b      	ldrb	r3, [r3, #1]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f040 8085 	bne.w	80087c4 <USB_EPStartXfer+0x1688>
 80086ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80086c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086cc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	461a      	mov	r2, r3
 80086da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80086de:	4413      	add	r3, r2
 80086e0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80086e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	011a      	lsls	r2, r3, #4
 80086f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80086f6:	4413      	add	r3, r2
 80086f8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80086fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008700:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008704:	881b      	ldrh	r3, [r3, #0]
 8008706:	b29b      	uxth	r3, r3
 8008708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800870c:	b29a      	uxth	r2, r3
 800870e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008712:	801a      	strh	r2, [r3, #0]
 8008714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008718:	2b3e      	cmp	r3, #62	@ 0x3e
 800871a:	d923      	bls.n	8008764 <USB_EPStartXfer+0x1628>
 800871c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008720:	095b      	lsrs	r3, r3, #5
 8008722:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008726:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800872a:	f003 031f 	and.w	r3, r3, #31
 800872e:	2b00      	cmp	r3, #0
 8008730:	d104      	bne.n	800873c <USB_EPStartXfer+0x1600>
 8008732:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008736:	3b01      	subs	r3, #1
 8008738:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800873c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008740:	881b      	ldrh	r3, [r3, #0]
 8008742:	b29a      	uxth	r2, r3
 8008744:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008748:	b29b      	uxth	r3, r3
 800874a:	029b      	lsls	r3, r3, #10
 800874c:	b29b      	uxth	r3, r3
 800874e:	4313      	orrs	r3, r2
 8008750:	b29b      	uxth	r3, r3
 8008752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800875a:	b29a      	uxth	r2, r3
 800875c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008760:	801a      	strh	r2, [r3, #0]
 8008762:	e05c      	b.n	800881e <USB_EPStartXfer+0x16e2>
 8008764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10c      	bne.n	8008786 <USB_EPStartXfer+0x164a>
 800876c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008770:	881b      	ldrh	r3, [r3, #0]
 8008772:	b29b      	uxth	r3, r3
 8008774:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008778:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800877c:	b29a      	uxth	r2, r3
 800877e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008782:	801a      	strh	r2, [r3, #0]
 8008784:	e04b      	b.n	800881e <USB_EPStartXfer+0x16e2>
 8008786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800878a:	085b      	lsrs	r3, r3, #1
 800878c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008794:	f003 0301 	and.w	r3, r3, #1
 8008798:	2b00      	cmp	r3, #0
 800879a:	d004      	beq.n	80087a6 <USB_EPStartXfer+0x166a>
 800879c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087a0:	3301      	adds	r3, #1
 80087a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80087a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087aa:	881b      	ldrh	r3, [r3, #0]
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	029b      	lsls	r3, r3, #10
 80087b6:	b29b      	uxth	r3, r3
 80087b8:	4313      	orrs	r3, r2
 80087ba:	b29a      	uxth	r2, r3
 80087bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80087c0:	801a      	strh	r2, [r3, #0]
 80087c2:	e02c      	b.n	800881e <USB_EPStartXfer+0x16e2>
 80087c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	785b      	ldrb	r3, [r3, #1]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d124      	bne.n	800881e <USB_EPStartXfer+0x16e2>
 80087d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	461a      	mov	r2, r3
 80087e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80087ea:	4413      	add	r3, r2
 80087ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80087f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80087f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	011a      	lsls	r2, r3, #4
 80087fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008802:	4413      	add	r3, r2
 8008804:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008808:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800880c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008810:	b29a      	uxth	r2, r3
 8008812:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008816:	801a      	strh	r2, [r3, #0]
 8008818:	e001      	b.n	800881e <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	e03a      	b.n	8008894 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800881e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008822:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800882c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	009b      	lsls	r3, r3, #2
 8008836:	4413      	add	r3, r2
 8008838:	881b      	ldrh	r3, [r3, #0]
 800883a:	b29b      	uxth	r3, r3
 800883c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008840:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008844:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008848:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800884c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008850:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008854:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008858:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800885c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8008860:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008864:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008868:	681a      	ldr	r2, [r3, #0]
 800886a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800886e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	441a      	add	r2, r3
 800887a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800887e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008882:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008886:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800888a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800888e:	b29b      	uxth	r3, r3
 8008890:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}

0800889e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800889e:	b480      	push	{r7}
 80088a0:	b085      	sub	sp, #20
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	785b      	ldrb	r3, [r3, #1]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d020      	beq.n	80088f2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	881b      	ldrh	r3, [r3, #0]
 80088bc:	b29b      	uxth	r3, r3
 80088be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80088c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80088c6:	81bb      	strh	r3, [r7, #12]
 80088c8:	89bb      	ldrh	r3, [r7, #12]
 80088ca:	f083 0310 	eor.w	r3, r3, #16
 80088ce:	81bb      	strh	r3, [r7, #12]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	009b      	lsls	r3, r3, #2
 80088d8:	441a      	add	r2, r3
 80088da:	89bb      	ldrh	r3, [r7, #12]
 80088dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80088e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80088e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80088e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80088ec:	b29b      	uxth	r3, r3
 80088ee:	8013      	strh	r3, [r2, #0]
 80088f0:	e01f      	b.n	8008932 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	781b      	ldrb	r3, [r3, #0]
 80088f8:	009b      	lsls	r3, r3, #2
 80088fa:	4413      	add	r3, r2
 80088fc:	881b      	ldrh	r3, [r3, #0]
 80088fe:	b29b      	uxth	r3, r3
 8008900:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008908:	81fb      	strh	r3, [r7, #14]
 800890a:	89fb      	ldrh	r3, [r7, #14]
 800890c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008910:	81fb      	strh	r3, [r7, #14]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	441a      	add	r2, r3
 800891c:	89fb      	ldrh	r3, [r7, #14]
 800891e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008922:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008926:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800892a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800892e:	b29b      	uxth	r3, r3
 8008930:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3714      	adds	r7, #20
 8008938:	46bd      	mov	sp, r7
 800893a:	bc80      	pop	{r7}
 800893c:	4770      	bx	lr

0800893e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800893e:	b480      	push	{r7}
 8008940:	b087      	sub	sp, #28
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	7b1b      	ldrb	r3, [r3, #12]
 800894c:	2b00      	cmp	r3, #0
 800894e:	f040 809d 	bne.w	8008a8c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	785b      	ldrb	r3, [r3, #1]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d04c      	beq.n	80089f4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800895a:	687a      	ldr	r2, [r7, #4]
 800895c:	683b      	ldr	r3, [r7, #0]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	4413      	add	r3, r2
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	823b      	strh	r3, [r7, #16]
 8008968:	8a3b      	ldrh	r3, [r7, #16]
 800896a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800896e:	2b00      	cmp	r3, #0
 8008970:	d01b      	beq.n	80089aa <USB_EPClearStall+0x6c>
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	781b      	ldrb	r3, [r3, #0]
 8008978:	009b      	lsls	r3, r3, #2
 800897a:	4413      	add	r3, r2
 800897c:	881b      	ldrh	r3, [r3, #0]
 800897e:	b29b      	uxth	r3, r3
 8008980:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008984:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008988:	81fb      	strh	r3, [r7, #14]
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	009b      	lsls	r3, r3, #2
 8008992:	441a      	add	r2, r3
 8008994:	89fb      	ldrh	r3, [r7, #14]
 8008996:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800899a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800899e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089a2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	78db      	ldrb	r3, [r3, #3]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d06c      	beq.n	8008a8c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	4413      	add	r3, r2
 80089bc:	881b      	ldrh	r3, [r3, #0]
 80089be:	b29b      	uxth	r3, r3
 80089c0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80089c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089c8:	81bb      	strh	r3, [r7, #12]
 80089ca:	89bb      	ldrh	r3, [r7, #12]
 80089cc:	f083 0320 	eor.w	r3, r3, #32
 80089d0:	81bb      	strh	r3, [r7, #12]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	781b      	ldrb	r3, [r3, #0]
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	441a      	add	r2, r3
 80089dc:	89bb      	ldrh	r3, [r7, #12]
 80089de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80089e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80089e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	8013      	strh	r3, [r2, #0]
 80089f2:	e04b      	b.n	8008a8c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089f4:	687a      	ldr	r2, [r7, #4]
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	781b      	ldrb	r3, [r3, #0]
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4413      	add	r3, r2
 80089fe:	881b      	ldrh	r3, [r3, #0]
 8008a00:	82fb      	strh	r3, [r7, #22]
 8008a02:	8afb      	ldrh	r3, [r7, #22]
 8008a04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d01b      	beq.n	8008a44 <USB_EPClearStall+0x106>
 8008a0c:	687a      	ldr	r2, [r7, #4]
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	009b      	lsls	r3, r3, #2
 8008a14:	4413      	add	r3, r2
 8008a16:	881b      	ldrh	r3, [r3, #0]
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a22:	82bb      	strh	r3, [r7, #20]
 8008a24:	687a      	ldr	r2, [r7, #4]
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	781b      	ldrb	r3, [r3, #0]
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	441a      	add	r2, r3
 8008a2e:	8abb      	ldrh	r3, [r7, #20]
 8008a30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a38:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008a3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	781b      	ldrb	r3, [r3, #0]
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	4413      	add	r3, r2
 8008a4e:	881b      	ldrh	r3, [r3, #0]
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008a56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a5a:	827b      	strh	r3, [r7, #18]
 8008a5c:	8a7b      	ldrh	r3, [r7, #18]
 8008a5e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8008a62:	827b      	strh	r3, [r7, #18]
 8008a64:	8a7b      	ldrh	r3, [r7, #18]
 8008a66:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8008a6a:	827b      	strh	r3, [r7, #18]
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	441a      	add	r2, r3
 8008a76:	8a7b      	ldrh	r3, [r7, #18]
 8008a78:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008a7c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008a80:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a84:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a88:	b29b      	uxth	r3, r3
 8008a8a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	371c      	adds	r7, #28
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bc80      	pop	{r7}
 8008a96:	4770      	bx	lr

08008a98 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8008aa4:	78fb      	ldrb	r3, [r7, #3]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d103      	bne.n	8008ab2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2280      	movs	r2, #128	@ 0x80
 8008aae:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bc80      	pop	{r7}
 8008abc:	4770      	bx	lr

08008abe <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	b085      	sub	sp, #20
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bc80      	pop	{r7}
 8008ada:	4770      	bx	lr

08008adc <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
 8008ae4:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bc80      	pop	{r7}
 8008af0:	4770      	bx	lr

08008af2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008af2:	b480      	push	{r7}
 8008af4:	b08b      	sub	sp, #44	@ 0x2c
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	60f8      	str	r0, [r7, #12]
 8008afa:	60b9      	str	r1, [r7, #8]
 8008afc:	4611      	mov	r1, r2
 8008afe:	461a      	mov	r2, r3
 8008b00:	460b      	mov	r3, r1
 8008b02:	80fb      	strh	r3, [r7, #6]
 8008b04:	4613      	mov	r3, r2
 8008b06:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008b08:	88bb      	ldrh	r3, [r7, #4]
 8008b0a:	3301      	adds	r3, #1
 8008b0c:	085b      	lsrs	r3, r3, #1
 8008b0e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008b18:	88fb      	ldrh	r3, [r7, #6]
 8008b1a:	005a      	lsls	r2, r3, #1
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008b24:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b2a:	e01e      	b.n	8008b6a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008b32:	69fb      	ldr	r3, [r7, #28]
 8008b34:	3301      	adds	r3, #1
 8008b36:	781b      	ldrb	r3, [r3, #0]
 8008b38:	021b      	lsls	r3, r3, #8
 8008b3a:	b21a      	sxth	r2, r3
 8008b3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	b21b      	sxth	r3, r3
 8008b44:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8008b46:	6a3b      	ldr	r3, [r7, #32]
 8008b48:	8a7a      	ldrh	r2, [r7, #18]
 8008b4a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008b4c:	6a3b      	ldr	r3, [r7, #32]
 8008b4e:	3302      	adds	r3, #2
 8008b50:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008b52:	6a3b      	ldr	r3, [r7, #32]
 8008b54:	3302      	adds	r3, #2
 8008b56:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	3301      	adds	r3, #1
 8008b62:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b66:	3b01      	subs	r3, #1
 8008b68:	627b      	str	r3, [r7, #36]	@ 0x24
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1dd      	bne.n	8008b2c <USB_WritePMA+0x3a>
  }
}
 8008b70:	bf00      	nop
 8008b72:	bf00      	nop
 8008b74:	372c      	adds	r7, #44	@ 0x2c
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bc80      	pop	{r7}
 8008b7a:	4770      	bx	lr

08008b7c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b08b      	sub	sp, #44	@ 0x2c
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	60f8      	str	r0, [r7, #12]
 8008b84:	60b9      	str	r1, [r7, #8]
 8008b86:	4611      	mov	r1, r2
 8008b88:	461a      	mov	r2, r3
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	80fb      	strh	r3, [r7, #6]
 8008b8e:	4613      	mov	r3, r2
 8008b90:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008b92:	88bb      	ldrh	r3, [r7, #4]
 8008b94:	085b      	lsrs	r3, r3, #1
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008b9e:	68bb      	ldr	r3, [r7, #8]
 8008ba0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008ba2:	88fb      	ldrh	r3, [r7, #6]
 8008ba4:	005a      	lsls	r2, r3, #1
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008bae:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bb4:	e01b      	b.n	8008bee <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008bb6:	6a3b      	ldr	r3, [r7, #32]
 8008bb8:	881b      	ldrh	r3, [r3, #0]
 8008bba:	b29b      	uxth	r3, r3
 8008bbc:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008bbe:	6a3b      	ldr	r3, [r7, #32]
 8008bc0:	3302      	adds	r3, #2
 8008bc2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	b2da      	uxtb	r2, r3
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008bcc:	69fb      	ldr	r3, [r7, #28]
 8008bce:	3301      	adds	r3, #1
 8008bd0:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	0a1b      	lsrs	r3, r3, #8
 8008bd6:	b2da      	uxtb	r2, r3
 8008bd8:	69fb      	ldr	r3, [r7, #28]
 8008bda:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	3301      	adds	r3, #1
 8008be0:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008be2:	6a3b      	ldr	r3, [r7, #32]
 8008be4:	3302      	adds	r3, #2
 8008be6:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bea:	3b01      	subs	r3, #1
 8008bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8008bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d1e0      	bne.n	8008bb6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008bf4:	88bb      	ldrh	r3, [r7, #4]
 8008bf6:	f003 0301 	and.w	r3, r3, #1
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d007      	beq.n	8008c10 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008c00:	6a3b      	ldr	r3, [r7, #32]
 8008c02:	881b      	ldrh	r3, [r3, #0]
 8008c04:	b29b      	uxth	r3, r3
 8008c06:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	701a      	strb	r2, [r3, #0]
  }
}
 8008c10:	bf00      	nop
 8008c12:	372c      	adds	r7, #44	@ 0x2c
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bc80      	pop	{r7}
 8008c18:	4770      	bx	lr

08008c1a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8008c1a:	b480      	push	{r7}
 8008c1c:	b087      	sub	sp, #28
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	60f8      	str	r0, [r7, #12]
 8008c22:	60b9      	str	r1, [r7, #8]
 8008c24:	4613      	mov	r3, r2
 8008c26:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c2e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008c38:	88fa      	ldrh	r2, [r7, #6]
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 8008c40:	2300      	movs	r3, #0
}
 8008c42:	4618      	mov	r0, r3
 8008c44:	371c      	adds	r7, #28
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bc80      	pop	{r7}
 8008c4a:	4770      	bx	lr

08008c4c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d01c      	beq.n	8008ca0 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d115      	bne.n	8008c9c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	2181      	movs	r1, #129	@ 0x81
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f001 f9c1 	bl	800a01a <USBD_LL_Transmit>

      return USBD_OK;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	e002      	b.n	8008ca2 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e000      	b.n	8008ca2 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8008ca0:	2302      	movs	r3, #2
  }
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008caa:	b480      	push	{r7}
 8008cac:	b083      	sub	sp, #12
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008cb2:	2300      	movs	r3, #0
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	370c      	adds	r7, #12
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bc80      	pop	{r7}
 8008cbc:	4770      	bx	lr

08008cbe <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008cbe:	b580      	push	{r7, lr}
 8008cc0:	b084      	sub	sp, #16
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	6078      	str	r0, [r7, #4]
 8008cc6:	460b      	mov	r3, r1
 8008cc8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008cca:	2302      	movs	r3, #2
 8008ccc:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00c      	beq.n	8008cf2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	78fa      	ldrb	r2, [r7, #3]
 8008ce2:	4611      	mov	r1, r2
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	4798      	blx	r3
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d101      	bne.n	8008cf2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3710      	adds	r7, #16
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	460b      	mov	r3, r1
 8008d06:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008d0e:	685b      	ldr	r3, [r3, #4]
 8008d10:	78fa      	ldrb	r2, [r7, #3]
 8008d12:	4611      	mov	r1, r2
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	4798      	blx	r3

  return USBD_OK;
 8008d18:	2300      	movs	r3, #0
}
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	3708      	adds	r7, #8
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bd80      	pop	{r7, pc}

08008d22 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008d22:	b580      	push	{r7, lr}
 8008d24:	b082      	sub	sp, #8
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008d32:	6839      	ldr	r1, [r7, #0]
 8008d34:	4618      	mov	r0, r3
 8008d36:	f000 fed8 	bl	8009aea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008d48:	461a      	mov	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008d56:	f003 031f 	and.w	r3, r3, #31
 8008d5a:	2b02      	cmp	r3, #2
 8008d5c:	d016      	beq.n	8008d8c <USBD_LL_SetupStage+0x6a>
 8008d5e:	2b02      	cmp	r3, #2
 8008d60:	d81c      	bhi.n	8008d9c <USBD_LL_SetupStage+0x7a>
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d002      	beq.n	8008d6c <USBD_LL_SetupStage+0x4a>
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d008      	beq.n	8008d7c <USBD_LL_SetupStage+0x5a>
 8008d6a:	e017      	b.n	8008d9c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008d72:	4619      	mov	r1, r3
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 f9cb 	bl	8009110 <USBD_StdDevReq>
      break;
 8008d7a:	e01a      	b.n	8008db2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008d82:	4619      	mov	r1, r3
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 fa2d 	bl	80091e4 <USBD_StdItfReq>
      break;
 8008d8a:	e012      	b.n	8008db2 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008d92:	4619      	mov	r1, r3
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 fa6d 	bl	8009274 <USBD_StdEPReq>
      break;
 8008d9a:	e00a      	b.n	8008db2 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008da2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	4619      	mov	r1, r3
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f001 f8ac 	bl	8009f08 <USBD_LL_StallEP>
      break;
 8008db0:	bf00      	nop
  }

  return USBD_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3708      	adds	r7, #8
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	607a      	str	r2, [r7, #4]
 8008dc8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008dca:	7afb      	ldrb	r3, [r7, #11]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d14b      	bne.n	8008e68 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008dd6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	d134      	bne.n	8008e4c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	68da      	ldr	r2, [r3, #12]
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	691b      	ldr	r3, [r3, #16]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d919      	bls.n	8008e22 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	68da      	ldr	r2, [r3, #12]
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	1ad2      	subs	r2, r2, r3
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008dfc:	697b      	ldr	r3, [r7, #20]
 8008dfe:	68da      	ldr	r2, [r3, #12]
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008e04:	429a      	cmp	r2, r3
 8008e06:	d203      	bcs.n	8008e10 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008e0c:	b29b      	uxth	r3, r3
 8008e0e:	e002      	b.n	8008e16 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008e10:	697b      	ldr	r3, [r7, #20]
 8008e12:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	461a      	mov	r2, r3
 8008e18:	6879      	ldr	r1, [r7, #4]
 8008e1a:	68f8      	ldr	r0, [r7, #12]
 8008e1c:	f000 fedd 	bl	8009bda <USBD_CtlContinueRx>
 8008e20:	e038      	b.n	8008e94 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00a      	beq.n	8008e44 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008e34:	2b03      	cmp	r3, #3
 8008e36:	d105      	bne.n	8008e44 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e3e:	691b      	ldr	r3, [r3, #16]
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f000 feda 	bl	8009bfe <USBD_CtlSendStatus>
 8008e4a:	e023      	b.n	8008e94 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008e52:	2b05      	cmp	r3, #5
 8008e54:	d11e      	bne.n	8008e94 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8008e5e:	2100      	movs	r1, #0
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f001 f851 	bl	8009f08 <USBD_LL_StallEP>
 8008e66:	e015      	b.n	8008e94 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00d      	beq.n	8008e90 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	d108      	bne.n	8008e90 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	7afa      	ldrb	r2, [r7, #11]
 8008e88:	4611      	mov	r1, r2
 8008e8a:	68f8      	ldr	r0, [r7, #12]
 8008e8c:	4798      	blx	r3
 8008e8e:	e001      	b.n	8008e94 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008e90:	2302      	movs	r3, #2
 8008e92:	e000      	b.n	8008e96 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3718      	adds	r7, #24
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b086      	sub	sp, #24
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	60f8      	str	r0, [r7, #12]
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	607a      	str	r2, [r7, #4]
 8008eaa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008eac:	7afb      	ldrb	r3, [r7, #11]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d17f      	bne.n	8008fb2 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	3314      	adds	r3, #20
 8008eb6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ebe:	2b02      	cmp	r3, #2
 8008ec0:	d15c      	bne.n	8008f7c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	68da      	ldr	r2, [r3, #12]
 8008ec6:	697b      	ldr	r3, [r7, #20]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	d915      	bls.n	8008efa <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	68da      	ldr	r2, [r3, #12]
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	691b      	ldr	r3, [r3, #16]
 8008ed6:	1ad2      	subs	r2, r2, r3
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	6879      	ldr	r1, [r7, #4]
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f000 fe65 	bl	8009bb6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008eec:	2300      	movs	r3, #0
 8008eee:	2200      	movs	r2, #0
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f001 f8b4 	bl	800a060 <USBD_LL_PrepareReceive>
 8008ef8:	e04e      	b.n	8008f98 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	689b      	ldr	r3, [r3, #8]
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	6912      	ldr	r2, [r2, #16]
 8008f02:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f06:	fb01 f202 	mul.w	r2, r1, r2
 8008f0a:	1a9b      	subs	r3, r3, r2
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d11c      	bne.n	8008f4a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	689a      	ldr	r2, [r3, #8]
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d316      	bcc.n	8008f4a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	689a      	ldr	r2, [r3, #8]
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d20f      	bcs.n	8008f4a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	2100      	movs	r1, #0
 8008f2e:	68f8      	ldr	r0, [r7, #12]
 8008f30:	f000 fe41 	bl	8009bb6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2200      	movs	r2, #0
 8008f38:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	2200      	movs	r2, #0
 8008f40:	2100      	movs	r1, #0
 8008f42:	68f8      	ldr	r0, [r7, #12]
 8008f44:	f001 f88c 	bl	800a060 <USBD_LL_PrepareReceive>
 8008f48:	e026      	b.n	8008f98 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d00a      	beq.n	8008f6c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008f5c:	2b03      	cmp	r3, #3
 8008f5e:	d105      	bne.n	8008f6c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008f6c:	2180      	movs	r1, #128	@ 0x80
 8008f6e:	68f8      	ldr	r0, [r7, #12]
 8008f70:	f000 ffca 	bl	8009f08 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f000 fe55 	bl	8009c24 <USBD_CtlReceiveStatus>
 8008f7a:	e00d      	b.n	8008f98 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008f82:	2b04      	cmp	r3, #4
 8008f84:	d004      	beq.n	8008f90 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d103      	bne.n	8008f98 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008f90:	2180      	movs	r1, #128	@ 0x80
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f000 ffb8 	bl	8009f08 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d11d      	bne.n	8008fde <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f7ff fe81 	bl	8008caa <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2200      	movs	r2, #0
 8008fac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008fb0:	e015      	b.n	8008fde <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fb8:	695b      	ldr	r3, [r3, #20]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00d      	beq.n	8008fda <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008fc4:	2b03      	cmp	r3, #3
 8008fc6:	d108      	bne.n	8008fda <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008fce:	695b      	ldr	r3, [r3, #20]
 8008fd0:	7afa      	ldrb	r2, [r7, #11]
 8008fd2:	4611      	mov	r1, r2
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	4798      	blx	r3
 8008fd8:	e001      	b.n	8008fde <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008fda:	2302      	movs	r3, #2
 8008fdc:	e000      	b.n	8008fe0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3718      	adds	r7, #24
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b082      	sub	sp, #8
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ff0:	2340      	movs	r3, #64	@ 0x40
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	2100      	movs	r1, #0
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 ff60 	bl	8009ebc <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2240      	movs	r2, #64	@ 0x40
 8009008:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800900c:	2340      	movs	r3, #64	@ 0x40
 800900e:	2200      	movs	r2, #0
 8009010:	2180      	movs	r1, #128	@ 0x80
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 ff52 	bl	8009ebc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2240      	movs	r2, #64	@ 0x40
 8009022:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2200      	movs	r2, #0
 8009038:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009048:	2b00      	cmp	r3, #0
 800904a:	d009      	beq.n	8009060 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	687a      	ldr	r2, [r7, #4]
 8009056:	6852      	ldr	r2, [r2, #4]
 8009058:	b2d2      	uxtb	r2, r2
 800905a:	4611      	mov	r1, r2
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	4798      	blx	r3
  }

  return USBD_OK;
 8009060:	2300      	movs	r3, #0
}
 8009062:	4618      	mov	r0, r3
 8009064:	3708      	adds	r7, #8
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800906a:	b480      	push	{r7}
 800906c:	b083      	sub	sp, #12
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
 8009072:	460b      	mov	r3, r1
 8009074:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	78fa      	ldrb	r2, [r7, #3]
 800907a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	370c      	adds	r7, #12
 8009082:	46bd      	mov	sp, r7
 8009084:	bc80      	pop	{r7}
 8009086:	4770      	bx	lr

08009088 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2204      	movs	r2, #4
 80090a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	370c      	adds	r7, #12
 80090aa:	46bd      	mov	sp, r7
 80090ac:	bc80      	pop	{r7}
 80090ae:	4770      	bx	lr

080090b0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090be:	2b04      	cmp	r3, #4
 80090c0:	d105      	bne.n	80090ce <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bc80      	pop	{r7}
 80090d8:	4770      	bx	lr

080090da <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80090da:	b580      	push	{r7, lr}
 80090dc:	b082      	sub	sp, #8
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80090e8:	2b03      	cmp	r3, #3
 80090ea:	d10b      	bne.n	8009104 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090f2:	69db      	ldr	r3, [r3, #28]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d005      	beq.n	8009104 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090fe:	69db      	ldr	r3, [r3, #28]
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3708      	adds	r7, #8
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
	...

08009110 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800911a:	2300      	movs	r3, #0
 800911c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	781b      	ldrb	r3, [r3, #0]
 8009122:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009126:	2b40      	cmp	r3, #64	@ 0x40
 8009128:	d005      	beq.n	8009136 <USBD_StdDevReq+0x26>
 800912a:	2b40      	cmp	r3, #64	@ 0x40
 800912c:	d84f      	bhi.n	80091ce <USBD_StdDevReq+0xbe>
 800912e:	2b00      	cmp	r3, #0
 8009130:	d009      	beq.n	8009146 <USBD_StdDevReq+0x36>
 8009132:	2b20      	cmp	r3, #32
 8009134:	d14b      	bne.n	80091ce <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	6839      	ldr	r1, [r7, #0]
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	4798      	blx	r3
      break;
 8009144:	e048      	b.n	80091d8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	785b      	ldrb	r3, [r3, #1]
 800914a:	2b09      	cmp	r3, #9
 800914c:	d839      	bhi.n	80091c2 <USBD_StdDevReq+0xb2>
 800914e:	a201      	add	r2, pc, #4	@ (adr r2, 8009154 <USBD_StdDevReq+0x44>)
 8009150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009154:	080091a5 	.word	0x080091a5
 8009158:	080091b9 	.word	0x080091b9
 800915c:	080091c3 	.word	0x080091c3
 8009160:	080091af 	.word	0x080091af
 8009164:	080091c3 	.word	0x080091c3
 8009168:	08009187 	.word	0x08009187
 800916c:	0800917d 	.word	0x0800917d
 8009170:	080091c3 	.word	0x080091c3
 8009174:	0800919b 	.word	0x0800919b
 8009178:	08009191 	.word	0x08009191
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800917c:	6839      	ldr	r1, [r7, #0]
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f9dc 	bl	800953c <USBD_GetDescriptor>
          break;
 8009184:	e022      	b.n	80091cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fb3f 	bl	800980c <USBD_SetAddress>
          break;
 800918e:	e01d      	b.n	80091cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 fb7e 	bl	8009894 <USBD_SetConfig>
          break;
 8009198:	e018      	b.n	80091cc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800919a:	6839      	ldr	r1, [r7, #0]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fc07 	bl	80099b0 <USBD_GetConfig>
          break;
 80091a2:	e013      	b.n	80091cc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fc37 	bl	8009a1a <USBD_GetStatus>
          break;
 80091ac:	e00e      	b.n	80091cc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80091ae:	6839      	ldr	r1, [r7, #0]
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fc65 	bl	8009a80 <USBD_SetFeature>
          break;
 80091b6:	e009      	b.n	80091cc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80091b8:	6839      	ldr	r1, [r7, #0]
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fc74 	bl	8009aa8 <USBD_ClrFeature>
          break;
 80091c0:	e004      	b.n	80091cc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80091c2:	6839      	ldr	r1, [r7, #0]
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fcc9 	bl	8009b5c <USBD_CtlError>
          break;
 80091ca:	bf00      	nop
      }
      break;
 80091cc:	e004      	b.n	80091d8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80091ce:	6839      	ldr	r1, [r7, #0]
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fcc3 	bl	8009b5c <USBD_CtlError>
      break;
 80091d6:	bf00      	nop
  }

  return ret;
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop

080091e4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	781b      	ldrb	r3, [r3, #0]
 80091f6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80091fa:	2b40      	cmp	r3, #64	@ 0x40
 80091fc:	d005      	beq.n	800920a <USBD_StdItfReq+0x26>
 80091fe:	2b40      	cmp	r3, #64	@ 0x40
 8009200:	d82e      	bhi.n	8009260 <USBD_StdItfReq+0x7c>
 8009202:	2b00      	cmp	r3, #0
 8009204:	d001      	beq.n	800920a <USBD_StdItfReq+0x26>
 8009206:	2b20      	cmp	r3, #32
 8009208:	d12a      	bne.n	8009260 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009210:	3b01      	subs	r3, #1
 8009212:	2b02      	cmp	r3, #2
 8009214:	d81d      	bhi.n	8009252 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	889b      	ldrh	r3, [r3, #4]
 800921a:	b2db      	uxtb	r3, r3
 800921c:	2b01      	cmp	r3, #1
 800921e:	d813      	bhi.n	8009248 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009226:	689b      	ldr	r3, [r3, #8]
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	4798      	blx	r3
 800922e:	4603      	mov	r3, r0
 8009230:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009232:	683b      	ldr	r3, [r7, #0]
 8009234:	88db      	ldrh	r3, [r3, #6]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d110      	bne.n	800925c <USBD_StdItfReq+0x78>
 800923a:	7bfb      	ldrb	r3, [r7, #15]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d10d      	bne.n	800925c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 fcdc 	bl	8009bfe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009246:	e009      	b.n	800925c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8009248:	6839      	ldr	r1, [r7, #0]
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fc86 	bl	8009b5c <USBD_CtlError>
          break;
 8009250:	e004      	b.n	800925c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fc81 	bl	8009b5c <USBD_CtlError>
          break;
 800925a:	e000      	b.n	800925e <USBD_StdItfReq+0x7a>
          break;
 800925c:	bf00      	nop
      }
      break;
 800925e:	e004      	b.n	800926a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8009260:	6839      	ldr	r1, [r7, #0]
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fc7a 	bl	8009b5c <USBD_CtlError>
      break;
 8009268:	bf00      	nop
  }

  return USBD_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3710      	adds	r7, #16
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b084      	sub	sp, #16
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800927e:	2300      	movs	r3, #0
 8009280:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	889b      	ldrh	r3, [r3, #4]
 8009286:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009290:	2b40      	cmp	r3, #64	@ 0x40
 8009292:	d007      	beq.n	80092a4 <USBD_StdEPReq+0x30>
 8009294:	2b40      	cmp	r3, #64	@ 0x40
 8009296:	f200 8146 	bhi.w	8009526 <USBD_StdEPReq+0x2b2>
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00a      	beq.n	80092b4 <USBD_StdEPReq+0x40>
 800929e:	2b20      	cmp	r3, #32
 80092a0:	f040 8141 	bne.w	8009526 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092aa:	689b      	ldr	r3, [r3, #8]
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	4798      	blx	r3
      break;
 80092b2:	e13d      	b.n	8009530 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	781b      	ldrb	r3, [r3, #0]
 80092b8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092bc:	2b20      	cmp	r3, #32
 80092be:	d10a      	bne.n	80092d6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	6839      	ldr	r1, [r7, #0]
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	4798      	blx	r3
 80092ce:	4603      	mov	r3, r0
 80092d0:	73fb      	strb	r3, [r7, #15]

        return ret;
 80092d2:	7bfb      	ldrb	r3, [r7, #15]
 80092d4:	e12d      	b.n	8009532 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	785b      	ldrb	r3, [r3, #1]
 80092da:	2b03      	cmp	r3, #3
 80092dc:	d007      	beq.n	80092ee <USBD_StdEPReq+0x7a>
 80092de:	2b03      	cmp	r3, #3
 80092e0:	f300 811b 	bgt.w	800951a <USBD_StdEPReq+0x2a6>
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d072      	beq.n	80093ce <USBD_StdEPReq+0x15a>
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d03a      	beq.n	8009362 <USBD_StdEPReq+0xee>
 80092ec:	e115      	b.n	800951a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092f4:	2b02      	cmp	r3, #2
 80092f6:	d002      	beq.n	80092fe <USBD_StdEPReq+0x8a>
 80092f8:	2b03      	cmp	r3, #3
 80092fa:	d015      	beq.n	8009328 <USBD_StdEPReq+0xb4>
 80092fc:	e02b      	b.n	8009356 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80092fe:	7bbb      	ldrb	r3, [r7, #14]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d00c      	beq.n	800931e <USBD_StdEPReq+0xaa>
 8009304:	7bbb      	ldrb	r3, [r7, #14]
 8009306:	2b80      	cmp	r3, #128	@ 0x80
 8009308:	d009      	beq.n	800931e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800930a:	7bbb      	ldrb	r3, [r7, #14]
 800930c:	4619      	mov	r1, r3
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 fdfa 	bl	8009f08 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009314:	2180      	movs	r1, #128	@ 0x80
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fdf6 	bl	8009f08 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800931c:	e020      	b.n	8009360 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fc1b 	bl	8009b5c <USBD_CtlError>
              break;
 8009326:	e01b      	b.n	8009360 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	885b      	ldrh	r3, [r3, #2]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10e      	bne.n	800934e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8009330:	7bbb      	ldrb	r3, [r7, #14]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00b      	beq.n	800934e <USBD_StdEPReq+0xda>
 8009336:	7bbb      	ldrb	r3, [r7, #14]
 8009338:	2b80      	cmp	r3, #128	@ 0x80
 800933a:	d008      	beq.n	800934e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	88db      	ldrh	r3, [r3, #6]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d104      	bne.n	800934e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8009344:	7bbb      	ldrb	r3, [r7, #14]
 8009346:	4619      	mov	r1, r3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fddd 	bl	8009f08 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f000 fc55 	bl	8009bfe <USBD_CtlSendStatus>

              break;
 8009354:	e004      	b.n	8009360 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8009356:	6839      	ldr	r1, [r7, #0]
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fbff 	bl	8009b5c <USBD_CtlError>
              break;
 800935e:	bf00      	nop
          }
          break;
 8009360:	e0e0      	b.n	8009524 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009368:	2b02      	cmp	r3, #2
 800936a:	d002      	beq.n	8009372 <USBD_StdEPReq+0xfe>
 800936c:	2b03      	cmp	r3, #3
 800936e:	d015      	beq.n	800939c <USBD_StdEPReq+0x128>
 8009370:	e026      	b.n	80093c0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009372:	7bbb      	ldrb	r3, [r7, #14]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00c      	beq.n	8009392 <USBD_StdEPReq+0x11e>
 8009378:	7bbb      	ldrb	r3, [r7, #14]
 800937a:	2b80      	cmp	r3, #128	@ 0x80
 800937c:	d009      	beq.n	8009392 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800937e:	7bbb      	ldrb	r3, [r7, #14]
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 fdc0 	bl	8009f08 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8009388:	2180      	movs	r1, #128	@ 0x80
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 fdbc 	bl	8009f08 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009390:	e01c      	b.n	80093cc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 fbe1 	bl	8009b5c <USBD_CtlError>
              break;
 800939a:	e017      	b.n	80093cc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	885b      	ldrh	r3, [r3, #2]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d112      	bne.n	80093ca <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80093a4:	7bbb      	ldrb	r3, [r7, #14]
 80093a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d004      	beq.n	80093b8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80093ae:	7bbb      	ldrb	r3, [r7, #14]
 80093b0:	4619      	mov	r1, r3
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 fdc7 	bl	8009f46 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 fc20 	bl	8009bfe <USBD_CtlSendStatus>
              }
              break;
 80093be:	e004      	b.n	80093ca <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80093c0:	6839      	ldr	r1, [r7, #0]
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f000 fbca 	bl	8009b5c <USBD_CtlError>
              break;
 80093c8:	e000      	b.n	80093cc <USBD_StdEPReq+0x158>
              break;
 80093ca:	bf00      	nop
          }
          break;
 80093cc:	e0aa      	b.n	8009524 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d002      	beq.n	80093de <USBD_StdEPReq+0x16a>
 80093d8:	2b03      	cmp	r3, #3
 80093da:	d032      	beq.n	8009442 <USBD_StdEPReq+0x1ce>
 80093dc:	e097      	b.n	800950e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093de:	7bbb      	ldrb	r3, [r7, #14]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d007      	beq.n	80093f4 <USBD_StdEPReq+0x180>
 80093e4:	7bbb      	ldrb	r3, [r7, #14]
 80093e6:	2b80      	cmp	r3, #128	@ 0x80
 80093e8:	d004      	beq.n	80093f4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80093ea:	6839      	ldr	r1, [r7, #0]
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 fbb5 	bl	8009b5c <USBD_CtlError>
                break;
 80093f2:	e091      	b.n	8009518 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80093f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	da0b      	bge.n	8009414 <USBD_StdEPReq+0x1a0>
 80093fc:	7bbb      	ldrb	r3, [r7, #14]
 80093fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009402:	4613      	mov	r3, r2
 8009404:	009b      	lsls	r3, r3, #2
 8009406:	4413      	add	r3, r2
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	3310      	adds	r3, #16
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	4413      	add	r3, r2
 8009410:	3304      	adds	r3, #4
 8009412:	e00b      	b.n	800942c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009414:	7bbb      	ldrb	r3, [r7, #14]
 8009416:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800941a:	4613      	mov	r3, r2
 800941c:	009b      	lsls	r3, r3, #2
 800941e:	4413      	add	r3, r2
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009426:	687a      	ldr	r2, [r7, #4]
 8009428:	4413      	add	r3, r2
 800942a:	3304      	adds	r3, #4
 800942c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	2200      	movs	r2, #0
 8009432:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	2202      	movs	r2, #2
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fb9f 	bl	8009b7e <USBD_CtlSendData>
              break;
 8009440:	e06a      	b.n	8009518 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009442:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009446:	2b00      	cmp	r3, #0
 8009448:	da11      	bge.n	800946e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800944a:	7bbb      	ldrb	r3, [r7, #14]
 800944c:	f003 020f 	and.w	r2, r3, #15
 8009450:	6879      	ldr	r1, [r7, #4]
 8009452:	4613      	mov	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4413      	add	r3, r2
 8009458:	009b      	lsls	r3, r3, #2
 800945a:	440b      	add	r3, r1
 800945c:	3318      	adds	r3, #24
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d117      	bne.n	8009494 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8009464:	6839      	ldr	r1, [r7, #0]
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 fb78 	bl	8009b5c <USBD_CtlError>
                  break;
 800946c:	e054      	b.n	8009518 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800946e:	7bbb      	ldrb	r3, [r7, #14]
 8009470:	f003 020f 	and.w	r2, r3, #15
 8009474:	6879      	ldr	r1, [r7, #4]
 8009476:	4613      	mov	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	440b      	add	r3, r1
 8009480:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d104      	bne.n	8009494 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800948a:	6839      	ldr	r1, [r7, #0]
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 fb65 	bl	8009b5c <USBD_CtlError>
                  break;
 8009492:	e041      	b.n	8009518 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009494:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009498:	2b00      	cmp	r3, #0
 800949a:	da0b      	bge.n	80094b4 <USBD_StdEPReq+0x240>
 800949c:	7bbb      	ldrb	r3, [r7, #14]
 800949e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80094a2:	4613      	mov	r3, r2
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4413      	add	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	3310      	adds	r3, #16
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	4413      	add	r3, r2
 80094b0:	3304      	adds	r3, #4
 80094b2:	e00b      	b.n	80094cc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80094b4:	7bbb      	ldrb	r3, [r7, #14]
 80094b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094ba:	4613      	mov	r3, r2
 80094bc:	009b      	lsls	r3, r3, #2
 80094be:	4413      	add	r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80094c6:	687a      	ldr	r2, [r7, #4]
 80094c8:	4413      	add	r3, r2
 80094ca:	3304      	adds	r3, #4
 80094cc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80094ce:	7bbb      	ldrb	r3, [r7, #14]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d002      	beq.n	80094da <USBD_StdEPReq+0x266>
 80094d4:	7bbb      	ldrb	r3, [r7, #14]
 80094d6:	2b80      	cmp	r3, #128	@ 0x80
 80094d8:	d103      	bne.n	80094e2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	2200      	movs	r2, #0
 80094de:	601a      	str	r2, [r3, #0]
 80094e0:	e00e      	b.n	8009500 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80094e2:	7bbb      	ldrb	r3, [r7, #14]
 80094e4:	4619      	mov	r1, r3
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 fd4c 	bl	8009f84 <USBD_LL_IsStallEP>
 80094ec:	4603      	mov	r3, r0
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d003      	beq.n	80094fa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	2201      	movs	r2, #1
 80094f6:	601a      	str	r2, [r3, #0]
 80094f8:	e002      	b.n	8009500 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	2200      	movs	r2, #0
 80094fe:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	2202      	movs	r2, #2
 8009504:	4619      	mov	r1, r3
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	f000 fb39 	bl	8009b7e <USBD_CtlSendData>
              break;
 800950c:	e004      	b.n	8009518 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800950e:	6839      	ldr	r1, [r7, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fb23 	bl	8009b5c <USBD_CtlError>
              break;
 8009516:	bf00      	nop
          }
          break;
 8009518:	e004      	b.n	8009524 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800951a:	6839      	ldr	r1, [r7, #0]
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fb1d 	bl	8009b5c <USBD_CtlError>
          break;
 8009522:	bf00      	nop
      }
      break;
 8009524:	e004      	b.n	8009530 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8009526:	6839      	ldr	r1, [r7, #0]
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f000 fb17 	bl	8009b5c <USBD_CtlError>
      break;
 800952e:	bf00      	nop
  }

  return ret;
 8009530:	7bfb      	ldrb	r3, [r7, #15]
}
 8009532:	4618      	mov	r0, r3
 8009534:	3710      	adds	r7, #16
 8009536:	46bd      	mov	sp, r7
 8009538:	bd80      	pop	{r7, pc}
	...

0800953c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
 8009544:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009546:	2300      	movs	r3, #0
 8009548:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800954a:	2300      	movs	r3, #0
 800954c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800954e:	2300      	movs	r3, #0
 8009550:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	885b      	ldrh	r3, [r3, #2]
 8009556:	0a1b      	lsrs	r3, r3, #8
 8009558:	b29b      	uxth	r3, r3
 800955a:	3b01      	subs	r3, #1
 800955c:	2b06      	cmp	r3, #6
 800955e:	f200 8128 	bhi.w	80097b2 <USBD_GetDescriptor+0x276>
 8009562:	a201      	add	r2, pc, #4	@ (adr r2, 8009568 <USBD_GetDescriptor+0x2c>)
 8009564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009568:	08009585 	.word	0x08009585
 800956c:	0800959d 	.word	0x0800959d
 8009570:	080095dd 	.word	0x080095dd
 8009574:	080097b3 	.word	0x080097b3
 8009578:	080097b3 	.word	0x080097b3
 800957c:	08009753 	.word	0x08009753
 8009580:	0800977f 	.word	0x0800977f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	687a      	ldr	r2, [r7, #4]
 800958e:	7c12      	ldrb	r2, [r2, #16]
 8009590:	f107 0108 	add.w	r1, r7, #8
 8009594:	4610      	mov	r0, r2
 8009596:	4798      	blx	r3
 8009598:	60f8      	str	r0, [r7, #12]
      break;
 800959a:	e112      	b.n	80097c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	7c1b      	ldrb	r3, [r3, #16]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d10d      	bne.n	80095c0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ac:	f107 0208 	add.w	r2, r7, #8
 80095b0:	4610      	mov	r0, r2
 80095b2:	4798      	blx	r3
 80095b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	3301      	adds	r3, #1
 80095ba:	2202      	movs	r2, #2
 80095bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80095be:	e100      	b.n	80097c2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80095c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c8:	f107 0208 	add.w	r2, r7, #8
 80095cc:	4610      	mov	r0, r2
 80095ce:	4798      	blx	r3
 80095d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	3301      	adds	r3, #1
 80095d6:	2202      	movs	r2, #2
 80095d8:	701a      	strb	r2, [r3, #0]
      break;
 80095da:	e0f2      	b.n	80097c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	885b      	ldrh	r3, [r3, #2]
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	2b05      	cmp	r3, #5
 80095e4:	f200 80ac 	bhi.w	8009740 <USBD_GetDescriptor+0x204>
 80095e8:	a201      	add	r2, pc, #4	@ (adr r2, 80095f0 <USBD_GetDescriptor+0xb4>)
 80095ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095ee:	bf00      	nop
 80095f0:	08009609 	.word	0x08009609
 80095f4:	0800963d 	.word	0x0800963d
 80095f8:	08009671 	.word	0x08009671
 80095fc:	080096a5 	.word	0x080096a5
 8009600:	080096d9 	.word	0x080096d9
 8009604:	0800970d 	.word	0x0800970d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800960e:	685b      	ldr	r3, [r3, #4]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d00b      	beq.n	800962c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	7c12      	ldrb	r2, [r2, #16]
 8009620:	f107 0108 	add.w	r1, r7, #8
 8009624:	4610      	mov	r0, r2
 8009626:	4798      	blx	r3
 8009628:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800962a:	e091      	b.n	8009750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800962c:	6839      	ldr	r1, [r7, #0]
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f000 fa94 	bl	8009b5c <USBD_CtlError>
            err++;
 8009634:	7afb      	ldrb	r3, [r7, #11]
 8009636:	3301      	adds	r3, #1
 8009638:	72fb      	strb	r3, [r7, #11]
          break;
 800963a:	e089      	b.n	8009750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d00b      	beq.n	8009660 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	7c12      	ldrb	r2, [r2, #16]
 8009654:	f107 0108 	add.w	r1, r7, #8
 8009658:	4610      	mov	r0, r2
 800965a:	4798      	blx	r3
 800965c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800965e:	e077      	b.n	8009750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009660:	6839      	ldr	r1, [r7, #0]
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f000 fa7a 	bl	8009b5c <USBD_CtlError>
            err++;
 8009668:	7afb      	ldrb	r3, [r7, #11]
 800966a:	3301      	adds	r3, #1
 800966c:	72fb      	strb	r3, [r7, #11]
          break;
 800966e:	e06f      	b.n	8009750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009676:	68db      	ldr	r3, [r3, #12]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d00b      	beq.n	8009694 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	7c12      	ldrb	r2, [r2, #16]
 8009688:	f107 0108 	add.w	r1, r7, #8
 800968c:	4610      	mov	r0, r2
 800968e:	4798      	blx	r3
 8009690:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009692:	e05d      	b.n	8009750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009694:	6839      	ldr	r1, [r7, #0]
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 fa60 	bl	8009b5c <USBD_CtlError>
            err++;
 800969c:	7afb      	ldrb	r3, [r7, #11]
 800969e:	3301      	adds	r3, #1
 80096a0:	72fb      	strb	r3, [r7, #11]
          break;
 80096a2:	e055      	b.n	8009750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80096aa:	691b      	ldr	r3, [r3, #16]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d00b      	beq.n	80096c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80096b6:	691b      	ldr	r3, [r3, #16]
 80096b8:	687a      	ldr	r2, [r7, #4]
 80096ba:	7c12      	ldrb	r2, [r2, #16]
 80096bc:	f107 0108 	add.w	r1, r7, #8
 80096c0:	4610      	mov	r0, r2
 80096c2:	4798      	blx	r3
 80096c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096c6:	e043      	b.n	8009750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096c8:	6839      	ldr	r1, [r7, #0]
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fa46 	bl	8009b5c <USBD_CtlError>
            err++;
 80096d0:	7afb      	ldrb	r3, [r7, #11]
 80096d2:	3301      	adds	r3, #1
 80096d4:	72fb      	strb	r3, [r7, #11]
          break;
 80096d6:	e03b      	b.n	8009750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80096de:	695b      	ldr	r3, [r3, #20]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d00b      	beq.n	80096fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80096ea:	695b      	ldr	r3, [r3, #20]
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	7c12      	ldrb	r2, [r2, #16]
 80096f0:	f107 0108 	add.w	r1, r7, #8
 80096f4:	4610      	mov	r0, r2
 80096f6:	4798      	blx	r3
 80096f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096fa:	e029      	b.n	8009750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096fc:	6839      	ldr	r1, [r7, #0]
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 fa2c 	bl	8009b5c <USBD_CtlError>
            err++;
 8009704:	7afb      	ldrb	r3, [r7, #11]
 8009706:	3301      	adds	r3, #1
 8009708:	72fb      	strb	r3, [r7, #11]
          break;
 800970a:	e021      	b.n	8009750 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	2b00      	cmp	r3, #0
 8009716:	d00b      	beq.n	8009730 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800971e:	699b      	ldr	r3, [r3, #24]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	7c12      	ldrb	r2, [r2, #16]
 8009724:	f107 0108 	add.w	r1, r7, #8
 8009728:	4610      	mov	r0, r2
 800972a:	4798      	blx	r3
 800972c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800972e:	e00f      	b.n	8009750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009730:	6839      	ldr	r1, [r7, #0]
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 fa12 	bl	8009b5c <USBD_CtlError>
            err++;
 8009738:	7afb      	ldrb	r3, [r7, #11]
 800973a:	3301      	adds	r3, #1
 800973c:	72fb      	strb	r3, [r7, #11]
          break;
 800973e:	e007      	b.n	8009750 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009740:	6839      	ldr	r1, [r7, #0]
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 fa0a 	bl	8009b5c <USBD_CtlError>
          err++;
 8009748:	7afb      	ldrb	r3, [r7, #11]
 800974a:	3301      	adds	r3, #1
 800974c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800974e:	e038      	b.n	80097c2 <USBD_GetDescriptor+0x286>
 8009750:	e037      	b.n	80097c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	7c1b      	ldrb	r3, [r3, #16]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d109      	bne.n	800976e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009762:	f107 0208 	add.w	r2, r7, #8
 8009766:	4610      	mov	r0, r2
 8009768:	4798      	blx	r3
 800976a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800976c:	e029      	b.n	80097c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 f9f3 	bl	8009b5c <USBD_CtlError>
        err++;
 8009776:	7afb      	ldrb	r3, [r7, #11]
 8009778:	3301      	adds	r3, #1
 800977a:	72fb      	strb	r3, [r7, #11]
      break;
 800977c:	e021      	b.n	80097c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	7c1b      	ldrb	r3, [r3, #16]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d10d      	bne.n	80097a2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800978c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800978e:	f107 0208 	add.w	r2, r7, #8
 8009792:	4610      	mov	r0, r2
 8009794:	4798      	blx	r3
 8009796:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	3301      	adds	r3, #1
 800979c:	2207      	movs	r2, #7
 800979e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097a0:	e00f      	b.n	80097c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80097a2:	6839      	ldr	r1, [r7, #0]
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f000 f9d9 	bl	8009b5c <USBD_CtlError>
        err++;
 80097aa:	7afb      	ldrb	r3, [r7, #11]
 80097ac:	3301      	adds	r3, #1
 80097ae:	72fb      	strb	r3, [r7, #11]
      break;
 80097b0:	e007      	b.n	80097c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80097b2:	6839      	ldr	r1, [r7, #0]
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 f9d1 	bl	8009b5c <USBD_CtlError>
      err++;
 80097ba:	7afb      	ldrb	r3, [r7, #11]
 80097bc:	3301      	adds	r3, #1
 80097be:	72fb      	strb	r3, [r7, #11]
      break;
 80097c0:	bf00      	nop
  }

  if (err != 0U)
 80097c2:	7afb      	ldrb	r3, [r7, #11]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d11c      	bne.n	8009802 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80097c8:	893b      	ldrh	r3, [r7, #8]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d011      	beq.n	80097f2 <USBD_GetDescriptor+0x2b6>
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	88db      	ldrh	r3, [r3, #6]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00d      	beq.n	80097f2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	88da      	ldrh	r2, [r3, #6]
 80097da:	893b      	ldrh	r3, [r7, #8]
 80097dc:	4293      	cmp	r3, r2
 80097de:	bf28      	it	cs
 80097e0:	4613      	movcs	r3, r2
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80097e6:	893b      	ldrh	r3, [r7, #8]
 80097e8:	461a      	mov	r2, r3
 80097ea:	68f9      	ldr	r1, [r7, #12]
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 f9c6 	bl	8009b7e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	88db      	ldrh	r3, [r3, #6]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d104      	bne.n	8009804 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f9ff 	bl	8009bfe <USBD_CtlSendStatus>
 8009800:	e000      	b.n	8009804 <USBD_GetDescriptor+0x2c8>
    return;
 8009802:	bf00      	nop
    }
  }
}
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop

0800980c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009816:	683b      	ldr	r3, [r7, #0]
 8009818:	889b      	ldrh	r3, [r3, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d130      	bne.n	8009880 <USBD_SetAddress+0x74>
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	88db      	ldrh	r3, [r3, #6]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d12c      	bne.n	8009880 <USBD_SetAddress+0x74>
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	885b      	ldrh	r3, [r3, #2]
 800982a:	2b7f      	cmp	r3, #127	@ 0x7f
 800982c:	d828      	bhi.n	8009880 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	885b      	ldrh	r3, [r3, #2]
 8009832:	b2db      	uxtb	r3, r3
 8009834:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009838:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009840:	2b03      	cmp	r3, #3
 8009842:	d104      	bne.n	800984e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 f988 	bl	8009b5c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800984c:	e01d      	b.n	800988a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	7bfa      	ldrb	r2, [r7, #15]
 8009852:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009856:	7bfb      	ldrb	r3, [r7, #15]
 8009858:	4619      	mov	r1, r3
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 fbbe 	bl	8009fdc <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 f9cc 	bl	8009bfe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009866:	7bfb      	ldrb	r3, [r7, #15]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d004      	beq.n	8009876 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2202      	movs	r2, #2
 8009870:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009874:	e009      	b.n	800988a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2201      	movs	r2, #1
 800987a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800987e:	e004      	b.n	800988a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009880:	6839      	ldr	r1, [r7, #0]
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 f96a 	bl	8009b5c <USBD_CtlError>
  }
}
 8009888:	bf00      	nop
 800988a:	bf00      	nop
 800988c:	3710      	adds	r7, #16
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}
	...

08009894 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b082      	sub	sp, #8
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	885b      	ldrh	r3, [r3, #2]
 80098a2:	b2da      	uxtb	r2, r3
 80098a4:	4b41      	ldr	r3, [pc, #260]	@ (80099ac <USBD_SetConfig+0x118>)
 80098a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80098a8:	4b40      	ldr	r3, [pc, #256]	@ (80099ac <USBD_SetConfig+0x118>)
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d904      	bls.n	80098ba <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80098b0:	6839      	ldr	r1, [r7, #0]
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 f952 	bl	8009b5c <USBD_CtlError>
 80098b8:	e075      	b.n	80099a6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	d002      	beq.n	80098ca <USBD_SetConfig+0x36>
 80098c4:	2b03      	cmp	r3, #3
 80098c6:	d023      	beq.n	8009910 <USBD_SetConfig+0x7c>
 80098c8:	e062      	b.n	8009990 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80098ca:	4b38      	ldr	r3, [pc, #224]	@ (80099ac <USBD_SetConfig+0x118>)
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d01a      	beq.n	8009908 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80098d2:	4b36      	ldr	r3, [pc, #216]	@ (80099ac <USBD_SetConfig+0x118>)
 80098d4:	781b      	ldrb	r3, [r3, #0]
 80098d6:	461a      	mov	r2, r3
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2203      	movs	r2, #3
 80098e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80098e4:	4b31      	ldr	r3, [pc, #196]	@ (80099ac <USBD_SetConfig+0x118>)
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	4619      	mov	r1, r3
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f7ff f9e7 	bl	8008cbe <USBD_SetClassConfig>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b02      	cmp	r3, #2
 80098f4:	d104      	bne.n	8009900 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80098f6:	6839      	ldr	r1, [r7, #0]
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 f92f 	bl	8009b5c <USBD_CtlError>
            return;
 80098fe:	e052      	b.n	80099a6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009900:	6878      	ldr	r0, [r7, #4]
 8009902:	f000 f97c 	bl	8009bfe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009906:	e04e      	b.n	80099a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009908:	6878      	ldr	r0, [r7, #4]
 800990a:	f000 f978 	bl	8009bfe <USBD_CtlSendStatus>
        break;
 800990e:	e04a      	b.n	80099a6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009910:	4b26      	ldr	r3, [pc, #152]	@ (80099ac <USBD_SetConfig+0x118>)
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d112      	bne.n	800993e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2202      	movs	r2, #2
 800991c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009920:	4b22      	ldr	r3, [pc, #136]	@ (80099ac <USBD_SetConfig+0x118>)
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	461a      	mov	r2, r3
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800992a:	4b20      	ldr	r3, [pc, #128]	@ (80099ac <USBD_SetConfig+0x118>)
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	4619      	mov	r1, r3
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f7ff f9e3 	bl	8008cfc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 f961 	bl	8009bfe <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800993c:	e033      	b.n	80099a6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800993e:	4b1b      	ldr	r3, [pc, #108]	@ (80099ac <USBD_SetConfig+0x118>)
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	461a      	mov	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	429a      	cmp	r2, r3
 800994a:	d01d      	beq.n	8009988 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	685b      	ldr	r3, [r3, #4]
 8009950:	b2db      	uxtb	r3, r3
 8009952:	4619      	mov	r1, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f7ff f9d1 	bl	8008cfc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800995a:	4b14      	ldr	r3, [pc, #80]	@ (80099ac <USBD_SetConfig+0x118>)
 800995c:	781b      	ldrb	r3, [r3, #0]
 800995e:	461a      	mov	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009964:	4b11      	ldr	r3, [pc, #68]	@ (80099ac <USBD_SetConfig+0x118>)
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	4619      	mov	r1, r3
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f7ff f9a7 	bl	8008cbe <USBD_SetClassConfig>
 8009970:	4603      	mov	r3, r0
 8009972:	2b02      	cmp	r3, #2
 8009974:	d104      	bne.n	8009980 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009976:	6839      	ldr	r1, [r7, #0]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f8ef 	bl	8009b5c <USBD_CtlError>
            return;
 800997e:	e012      	b.n	80099a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f000 f93c 	bl	8009bfe <USBD_CtlSendStatus>
        break;
 8009986:	e00e      	b.n	80099a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f938 	bl	8009bfe <USBD_CtlSendStatus>
        break;
 800998e:	e00a      	b.n	80099a6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009990:	6839      	ldr	r1, [r7, #0]
 8009992:	6878      	ldr	r0, [r7, #4]
 8009994:	f000 f8e2 	bl	8009b5c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009998:	4b04      	ldr	r3, [pc, #16]	@ (80099ac <USBD_SetConfig+0x118>)
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	4619      	mov	r1, r3
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7ff f9ac 	bl	8008cfc <USBD_ClrClassConfig>
        break;
 80099a4:	bf00      	nop
    }
  }
}
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	20000a10 	.word	0x20000a10

080099b0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	88db      	ldrh	r3, [r3, #6]
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d004      	beq.n	80099cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80099c2:	6839      	ldr	r1, [r7, #0]
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f000 f8c9 	bl	8009b5c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80099ca:	e022      	b.n	8009a12 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099d2:	2b02      	cmp	r3, #2
 80099d4:	dc02      	bgt.n	80099dc <USBD_GetConfig+0x2c>
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	dc03      	bgt.n	80099e2 <USBD_GetConfig+0x32>
 80099da:	e015      	b.n	8009a08 <USBD_GetConfig+0x58>
 80099dc:	2b03      	cmp	r3, #3
 80099de:	d00b      	beq.n	80099f8 <USBD_GetConfig+0x48>
 80099e0:	e012      	b.n	8009a08 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	2200      	movs	r2, #0
 80099e6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	3308      	adds	r3, #8
 80099ec:	2201      	movs	r2, #1
 80099ee:	4619      	mov	r1, r3
 80099f0:	6878      	ldr	r0, [r7, #4]
 80099f2:	f000 f8c4 	bl	8009b7e <USBD_CtlSendData>
        break;
 80099f6:	e00c      	b.n	8009a12 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	3304      	adds	r3, #4
 80099fc:	2201      	movs	r2, #1
 80099fe:	4619      	mov	r1, r3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f000 f8bc 	bl	8009b7e <USBD_CtlSendData>
        break;
 8009a06:	e004      	b.n	8009a12 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009a08:	6839      	ldr	r1, [r7, #0]
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f8a6 	bl	8009b5c <USBD_CtlError>
        break;
 8009a10:	bf00      	nop
}
 8009a12:	bf00      	nop
 8009a14:	3708      	adds	r7, #8
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b082      	sub	sp, #8
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
 8009a22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a2a:	3b01      	subs	r3, #1
 8009a2c:	2b02      	cmp	r3, #2
 8009a2e:	d81e      	bhi.n	8009a6e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	88db      	ldrh	r3, [r3, #6]
 8009a34:	2b02      	cmp	r3, #2
 8009a36:	d004      	beq.n	8009a42 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009a38:	6839      	ldr	r1, [r7, #0]
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f88e 	bl	8009b5c <USBD_CtlError>
        break;
 8009a40:	e01a      	b.n	8009a78 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2201      	movs	r2, #1
 8009a46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d005      	beq.n	8009a5e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	f043 0202 	orr.w	r2, r3, #2
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	330c      	adds	r3, #12
 8009a62:	2202      	movs	r2, #2
 8009a64:	4619      	mov	r1, r3
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f000 f889 	bl	8009b7e <USBD_CtlSendData>
      break;
 8009a6c:	e004      	b.n	8009a78 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009a6e:	6839      	ldr	r1, [r7, #0]
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 f873 	bl	8009b5c <USBD_CtlError>
      break;
 8009a76:	bf00      	nop
  }
}
 8009a78:	bf00      	nop
 8009a7a:	3708      	adds	r7, #8
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	885b      	ldrh	r3, [r3, #2]
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d106      	bne.n	8009aa0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2201      	movs	r2, #1
 8009a96:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 f8af 	bl	8009bfe <USBD_CtlSendStatus>
  }
}
 8009aa0:	bf00      	nop
 8009aa2:	3708      	adds	r7, #8
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}

08009aa8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	d80b      	bhi.n	8009ad6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	885b      	ldrh	r3, [r3, #2]
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d10c      	bne.n	8009ae0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2200      	movs	r2, #0
 8009aca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f895 	bl	8009bfe <USBD_CtlSendStatus>
      }
      break;
 8009ad4:	e004      	b.n	8009ae0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009ad6:	6839      	ldr	r1, [r7, #0]
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 f83f 	bl	8009b5c <USBD_CtlError>
      break;
 8009ade:	e000      	b.n	8009ae2 <USBD_ClrFeature+0x3a>
      break;
 8009ae0:	bf00      	nop
  }
}
 8009ae2:	bf00      	nop
 8009ae4:	3708      	adds	r7, #8
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bd80      	pop	{r7, pc}

08009aea <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009aea:	b480      	push	{r7}
 8009aec:	b083      	sub	sp, #12
 8009aee:	af00      	add	r7, sp, #0
 8009af0:	6078      	str	r0, [r7, #4]
 8009af2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	781a      	ldrb	r2, [r3, #0]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	785a      	ldrb	r2, [r3, #1]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	3302      	adds	r3, #2
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	3303      	adds	r3, #3
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	021b      	lsls	r3, r3, #8
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	4413      	add	r3, r2
 8009b18:	b29a      	uxth	r2, r3
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	3304      	adds	r3, #4
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	461a      	mov	r2, r3
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	3305      	adds	r3, #5
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	021b      	lsls	r3, r3, #8
 8009b2e:	b29b      	uxth	r3, r3
 8009b30:	4413      	add	r3, r2
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	3306      	adds	r3, #6
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	3307      	adds	r3, #7
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	021b      	lsls	r3, r3, #8
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	4413      	add	r3, r2
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	80da      	strh	r2, [r3, #6]

}
 8009b52:	bf00      	nop
 8009b54:	370c      	adds	r7, #12
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bc80      	pop	{r7}
 8009b5a:	4770      	bx	lr

08009b5c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
 8009b64:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009b66:	2180      	movs	r1, #128	@ 0x80
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f000 f9cd 	bl	8009f08 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009b6e:	2100      	movs	r1, #0
 8009b70:	6878      	ldr	r0, [r7, #4]
 8009b72:	f000 f9c9 	bl	8009f08 <USBD_LL_StallEP>
}
 8009b76:	bf00      	nop
 8009b78:	3708      	adds	r7, #8
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}

08009b7e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009b7e:	b580      	push	{r7, lr}
 8009b80:	b084      	sub	sp, #16
 8009b82:	af00      	add	r7, sp, #0
 8009b84:	60f8      	str	r0, [r7, #12]
 8009b86:	60b9      	str	r1, [r7, #8]
 8009b88:	4613      	mov	r3, r2
 8009b8a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	2202      	movs	r2, #2
 8009b90:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009b94:	88fa      	ldrh	r2, [r7, #6]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009b9a:	88fa      	ldrh	r2, [r7, #6]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ba0:	88fb      	ldrh	r3, [r7, #6]
 8009ba2:	68ba      	ldr	r2, [r7, #8]
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	68f8      	ldr	r0, [r7, #12]
 8009ba8:	f000 fa37 	bl	800a01a <USBD_LL_Transmit>

  return USBD_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3710      	adds	r7, #16
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b084      	sub	sp, #16
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	60f8      	str	r0, [r7, #12]
 8009bbe:	60b9      	str	r1, [r7, #8]
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009bc4:	88fb      	ldrh	r3, [r7, #6]
 8009bc6:	68ba      	ldr	r2, [r7, #8]
 8009bc8:	2100      	movs	r1, #0
 8009bca:	68f8      	ldr	r0, [r7, #12]
 8009bcc:	f000 fa25 	bl	800a01a <USBD_LL_Transmit>

  return USBD_OK;
 8009bd0:	2300      	movs	r3, #0
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3710      	adds	r7, #16
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b084      	sub	sp, #16
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	60f8      	str	r0, [r7, #12]
 8009be2:	60b9      	str	r1, [r7, #8]
 8009be4:	4613      	mov	r3, r2
 8009be6:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009be8:	88fb      	ldrh	r3, [r7, #6]
 8009bea:	68ba      	ldr	r2, [r7, #8]
 8009bec:	2100      	movs	r1, #0
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f000 fa36 	bl	800a060 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009bf4:	2300      	movs	r3, #0
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}

08009bfe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009bfe:	b580      	push	{r7, lr}
 8009c00:	b082      	sub	sp, #8
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	2204      	movs	r2, #4
 8009c0a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009c0e:	2300      	movs	r3, #0
 8009c10:	2200      	movs	r2, #0
 8009c12:	2100      	movs	r1, #0
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fa00 	bl	800a01a <USBD_LL_Transmit>

  return USBD_OK;
 8009c1a:	2300      	movs	r3, #0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2205      	movs	r2, #5
 8009c30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009c34:	2300      	movs	r3, #0
 8009c36:	2200      	movs	r2, #0
 8009c38:	2100      	movs	r1, #0
 8009c3a:	6878      	ldr	r0, [r7, #4]
 8009c3c:	f000 fa10 	bl	800a060 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	3708      	adds	r7, #8
 8009c46:	46bd      	mov	sp, r7
 8009c48:	bd80      	pop	{r7, pc}
	...

08009c4c <cdcAvailable>:
uint8_t  rx_buf[1024];
bool     rx_full = false;


uint32_t cdcAvailable(void)
{
 8009c4c:	b480      	push	{r7}
 8009c4e:	b083      	sub	sp, #12
 8009c50:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 8009c52:	4b09      	ldr	r3, [pc, #36]	@ (8009c78 <cdcAvailable+0x2c>)
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	4b09      	ldr	r3, [pc, #36]	@ (8009c7c <cdcAvailable+0x30>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	4a08      	ldr	r2, [pc, #32]	@ (8009c80 <cdcAvailable+0x34>)
 8009c5e:	6812      	ldr	r2, [r2, #0]
 8009c60:	fbb3 f1f2 	udiv	r1, r3, r2
 8009c64:	fb01 f202 	mul.w	r2, r1, r2
 8009c68:	1a9b      	subs	r3, r3, r2
 8009c6a:	607b      	str	r3, [r7, #4]

  return ret;
 8009c6c:	687b      	ldr	r3, [r7, #4]
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	370c      	adds	r7, #12
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bc80      	pop	{r7}
 8009c76:	4770      	bx	lr
 8009c78:	20000cd8 	.word	0x20000cd8
 8009c7c:	20000cdc 	.word	0x20000cdc
 8009c80:	20000018 	.word	0x20000018

08009c84 <cdcRead>:

uint8_t cdcRead(void)
{
 8009c84:	b480      	push	{r7}
 8009c86:	b083      	sub	sp, #12
 8009c88:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 8009c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8009cc4 <cdcRead+0x40>)
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	4a0e      	ldr	r2, [pc, #56]	@ (8009cc8 <cdcRead+0x44>)
 8009c90:	5cd3      	ldrb	r3, [r2, r3]
 8009c92:	71fb      	strb	r3, [r7, #7]

  if (rx_out != rx_in)
 8009c94:	4b0b      	ldr	r3, [pc, #44]	@ (8009cc4 <cdcRead+0x40>)
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	4b0c      	ldr	r3, [pc, #48]	@ (8009ccc <cdcRead+0x48>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d00b      	beq.n	8009cb8 <cdcRead+0x34>
  {
    rx_out = (rx_out + 1) % rx_len;
 8009ca0:	4b08      	ldr	r3, [pc, #32]	@ (8009cc4 <cdcRead+0x40>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	3301      	adds	r3, #1
 8009ca6:	4a0a      	ldr	r2, [pc, #40]	@ (8009cd0 <cdcRead+0x4c>)
 8009ca8:	6812      	ldr	r2, [r2, #0]
 8009caa:	fbb3 f1f2 	udiv	r1, r3, r2
 8009cae:	fb01 f202 	mul.w	r2, r1, r2
 8009cb2:	1a9b      	subs	r3, r3, r2
 8009cb4:	4a03      	ldr	r2, [pc, #12]	@ (8009cc4 <cdcRead+0x40>)
 8009cb6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009cb8:	79fb      	ldrb	r3, [r7, #7]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	370c      	adds	r7, #12
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bc80      	pop	{r7}
 8009cc2:	4770      	bx	lr
 8009cc4:	20000cdc 	.word	0x20000cdc
 8009cc8:	20000ce0 	.word	0x20000ce0
 8009ccc:	20000cd8 	.word	0x20000cd8
 8009cd0:	20000018 	.word	0x20000018

08009cd4 <cdcWrite>:
    rx_in = next_rx_in;
  }
}

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
 8009cdc:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  if (cdcIsInit() != true)
 8009cde:	f7f7 fb25 	bl	800132c <cdcIsInit>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	f083 0301 	eor.w	r3, r3, #1
 8009ce8:	b2db      	uxtb	r3, r3
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d001      	beq.n	8009cf2 <cdcWrite+0x1e>
  {
    return 0;
 8009cee:	2300      	movs	r3, #0
 8009cf0:	e01e      	b.n	8009d30 <cdcWrite+0x5c>
  }

  pre_time = millis();
 8009cf2:	f7f7 f833 	bl	8000d5c <millis>
 8009cf6:	60f8      	str	r0, [r7, #12]
  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 f81a 	bl	8009d38 <CDC_Transmit_FS>
 8009d04:	4603      	mov	r3, r0
 8009d06:	72fb      	strb	r3, [r7, #11]

    if (ret == USBD_OK)
 8009d08:	7afb      	ldrb	r3, [r7, #11]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d101      	bne.n	8009d12 <cdcWrite+0x3e>
    {
      return length;
 8009d0e:	683b      	ldr	r3, [r7, #0]
 8009d10:	e00e      	b.n	8009d30 <cdcWrite+0x5c>
    }
    else if (ret == USBD_FAIL)
 8009d12:	7afb      	ldrb	r3, [r7, #11]
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	d101      	bne.n	8009d1c <cdcWrite+0x48>
    {
      return 0;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	e009      	b.n	8009d30 <cdcWrite+0x5c>
    }

    if (millis()-pre_time >= 100)
 8009d1c:	f7f7 f81e 	bl	8000d5c <millis>
 8009d20:	4602      	mov	r2, r0
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	1ad3      	subs	r3, r2, r3
 8009d26:	2b63      	cmp	r3, #99	@ 0x63
 8009d28:	d800      	bhi.n	8009d2c <cdcWrite+0x58>
    ret = CDC_Transmit_FS(p_data, length);
 8009d2a:	e7e5      	b.n	8009cf8 <cdcWrite+0x24>
    {
      break;
 8009d2c:	bf00      	nop
    }
  }

  return 0;
 8009d2e:	2300      	movs	r3, #0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	460b      	mov	r3, r1
 8009d42:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009d44:	2300      	movs	r3, #0
 8009d46:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009d48:	4b0d      	ldr	r3, [pc, #52]	@ (8009d80 <CDC_Transmit_FS+0x48>)
 8009d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009d4e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d001      	beq.n	8009d5e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	e00b      	b.n	8009d76 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009d5e:	887b      	ldrh	r3, [r7, #2]
 8009d60:	461a      	mov	r2, r3
 8009d62:	6879      	ldr	r1, [r7, #4]
 8009d64:	4806      	ldr	r0, [pc, #24]	@ (8009d80 <CDC_Transmit_FS+0x48>)
 8009d66:	f7fe ff58 	bl	8008c1a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009d6a:	4805      	ldr	r0, [pc, #20]	@ (8009d80 <CDC_Transmit_FS+0x48>)
 8009d6c:	f7fe ff6e 	bl	8008c4c <USBD_CDC_TransmitPacket>
 8009d70:	4603      	mov	r3, r0
 8009d72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	20000a14 	.word	0x20000a14

08009d84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b082      	sub	sp, #8
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 22ec 	ldr.w	r2, [r3, #748]	@ 0x2ec
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f503 732c 	add.w	r3, r3, #688	@ 0x2b0
 8009d98:	4619      	mov	r1, r3
 8009d9a:	4610      	mov	r0, r2
 8009d9c:	f7fe ffc1 	bl	8008d22 <USBD_LL_SetupStage>
}
 8009da0:	bf00      	nop
 8009da2:	3708      	adds	r7, #8
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b082      	sub	sp, #8
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	460b      	mov	r3, r1
 8009db2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 8009dba:	78fa      	ldrb	r2, [r7, #3]
 8009dbc:	6879      	ldr	r1, [r7, #4]
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	4413      	add	r3, r2
 8009dc4:	00db      	lsls	r3, r3, #3
 8009dc6:	440b      	add	r3, r1
 8009dc8:	f503 73be 	add.w	r3, r3, #380	@ 0x17c
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	78fb      	ldrb	r3, [r7, #3]
 8009dd0:	4619      	mov	r1, r3
 8009dd2:	f7fe fff3 	bl	8008dbc <USBD_LL_DataOutStage>
}
 8009dd6:	bf00      	nop
 8009dd8:	3708      	adds	r7, #8
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b082      	sub	sp, #8
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
 8009de6:	460b      	mov	r3, r1
 8009de8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 02ec 	ldr.w	r0, [r3, #748]	@ 0x2ec
 8009df0:	78fa      	ldrb	r2, [r7, #3]
 8009df2:	6879      	ldr	r1, [r7, #4]
 8009df4:	4613      	mov	r3, r2
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	4413      	add	r3, r2
 8009dfa:	00db      	lsls	r3, r3, #3
 8009dfc:	440b      	add	r3, r1
 8009dfe:	333c      	adds	r3, #60	@ 0x3c
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	78fb      	ldrb	r3, [r7, #3]
 8009e04:	4619      	mov	r1, r3
 8009e06:	f7ff f84a 	bl	8008e9e <USBD_LL_DataInStage>
}
 8009e0a:	bf00      	nop
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b082      	sub	sp, #8
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8009e20:	4618      	mov	r0, r3
 8009e22:	f7ff f95a 	bl	80090da <USBD_LL_SOF>
}
 8009e26:	bf00      	nop
 8009e28:	3708      	adds	r7, #8
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b084      	sub	sp, #16
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e36:	2301      	movs	r3, #1
 8009e38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	689b      	ldr	r3, [r3, #8]
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d001      	beq.n	8009e46 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009e42:	f7f6 ffec 	bl	8000e1e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8009e4c:	7bfa      	ldrb	r2, [r7, #15]
 8009e4e:	4611      	mov	r1, r2
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7ff f90a 	bl	800906a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f7ff f8c3 	bl	8008fe8 <USBD_LL_Reset>
}
 8009e62:	bf00      	nop
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
	...

08009e6c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	f7ff f904 	bl	8009088 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	699b      	ldr	r3, [r3, #24]
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d005      	beq.n	8009e94 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e88:	4b04      	ldr	r3, [pc, #16]	@ (8009e9c <HAL_PCD_SuspendCallback+0x30>)
 8009e8a:	691b      	ldr	r3, [r3, #16]
 8009e8c:	4a03      	ldr	r2, [pc, #12]	@ (8009e9c <HAL_PCD_SuspendCallback+0x30>)
 8009e8e:	f043 0306 	orr.w	r3, r3, #6
 8009e92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009e94:	bf00      	nop
 8009e96:	3708      	adds	r7, #8
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	e000ed00 	.word	0xe000ed00

08009ea0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b082      	sub	sp, #8
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 32ec 	ldr.w	r3, [r3, #748]	@ 0x2ec
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7ff f8fe 	bl	80090b0 <USBD_LL_Resume>
}
 8009eb4:	bf00      	nop
 8009eb6:	3708      	adds	r7, #8
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	4608      	mov	r0, r1
 8009ec6:	4611      	mov	r1, r2
 8009ec8:	461a      	mov	r2, r3
 8009eca:	4603      	mov	r3, r0
 8009ecc:	70fb      	strb	r3, [r7, #3]
 8009ece:	460b      	mov	r3, r1
 8009ed0:	70bb      	strb	r3, [r7, #2]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eda:	2300      	movs	r3, #0
 8009edc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009ee4:	78bb      	ldrb	r3, [r7, #2]
 8009ee6:	883a      	ldrh	r2, [r7, #0]
 8009ee8:	78f9      	ldrb	r1, [r7, #3]
 8009eea:	f7f9 fe1f 	bl	8003b2c <HAL_PCD_EP_Open>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ef2:	7bfb      	ldrb	r3, [r7, #15]
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	f000 f8d7 	bl	800a0a8 <USBD_Get_USB_Status>
 8009efa:	4603      	mov	r3, r0
 8009efc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009efe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3710      	adds	r7, #16
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f08:	b580      	push	{r7, lr}
 8009f0a:	b084      	sub	sp, #16
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
 8009f10:	460b      	mov	r3, r1
 8009f12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f14:	2300      	movs	r3, #0
 8009f16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f22:	78fa      	ldrb	r2, [r7, #3]
 8009f24:	4611      	mov	r1, r2
 8009f26:	4618      	mov	r0, r3
 8009f28:	f7f9 fec5 	bl	8003cb6 <HAL_PCD_EP_SetStall>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f30:	7bfb      	ldrb	r3, [r7, #15]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 f8b8 	bl	800a0a8 <USBD_Get_USB_Status>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f3e:	4618      	mov	r0, r3
 8009f40:	3710      	adds	r7, #16
 8009f42:	46bd      	mov	sp, r7
 8009f44:	bd80      	pop	{r7, pc}

08009f46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f46:	b580      	push	{r7, lr}
 8009f48:	b084      	sub	sp, #16
 8009f4a:	af00      	add	r7, sp, #0
 8009f4c:	6078      	str	r0, [r7, #4]
 8009f4e:	460b      	mov	r3, r1
 8009f50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f52:	2300      	movs	r3, #0
 8009f54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f56:	2300      	movs	r3, #0
 8009f58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f60:	78fa      	ldrb	r2, [r7, #3]
 8009f62:	4611      	mov	r1, r2
 8009f64:	4618      	mov	r0, r3
 8009f66:	f7f9 ff06 	bl	8003d76 <HAL_PCD_EP_ClrStall>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f6e:	7bfb      	ldrb	r3, [r7, #15]
 8009f70:	4618      	mov	r0, r3
 8009f72:	f000 f899 	bl	800a0a8 <USBD_Get_USB_Status>
 8009f76:	4603      	mov	r3, r0
 8009f78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3710      	adds	r7, #16
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd80      	pop	{r7, pc}

08009f84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	460b      	mov	r3, r1
 8009f8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009f96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009f98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	da0c      	bge.n	8009fba <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009fa0:	78fb      	ldrb	r3, [r7, #3]
 8009fa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fa6:	68f9      	ldr	r1, [r7, #12]
 8009fa8:	1c5a      	adds	r2, r3, #1
 8009faa:	4613      	mov	r3, r2
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4413      	add	r3, r2
 8009fb0:	00db      	lsls	r3, r3, #3
 8009fb2:	440b      	add	r3, r1
 8009fb4:	3302      	adds	r3, #2
 8009fb6:	781b      	ldrb	r3, [r3, #0]
 8009fb8:	e00b      	b.n	8009fd2 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009fba:	78fb      	ldrb	r3, [r7, #3]
 8009fbc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009fc0:	68f9      	ldr	r1, [r7, #12]
 8009fc2:	4613      	mov	r3, r2
 8009fc4:	009b      	lsls	r3, r3, #2
 8009fc6:	4413      	add	r3, r2
 8009fc8:	00db      	lsls	r3, r3, #3
 8009fca:	440b      	add	r3, r1
 8009fcc:	f503 73b5 	add.w	r3, r3, #362	@ 0x16a
 8009fd0:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3714      	adds	r7, #20
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bc80      	pop	{r7}
 8009fda:	4770      	bx	lr

08009fdc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fec:	2300      	movs	r3, #0
 8009fee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ff6:	78fa      	ldrb	r2, [r7, #3]
 8009ff8:	4611      	mov	r1, r2
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7f9 fd71 	bl	8003ae2 <HAL_PCD_SetAddress>
 800a000:	4603      	mov	r3, r0
 800a002:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a004:	7bfb      	ldrb	r3, [r7, #15]
 800a006:	4618      	mov	r0, r3
 800a008:	f000 f84e 	bl	800a0a8 <USBD_Get_USB_Status>
 800a00c:	4603      	mov	r3, r0
 800a00e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a010:	7bbb      	ldrb	r3, [r7, #14]
}
 800a012:	4618      	mov	r0, r3
 800a014:	3710      	adds	r7, #16
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}

0800a01a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b086      	sub	sp, #24
 800a01e:	af00      	add	r7, sp, #0
 800a020:	60f8      	str	r0, [r7, #12]
 800a022:	607a      	str	r2, [r7, #4]
 800a024:	461a      	mov	r2, r3
 800a026:	460b      	mov	r3, r1
 800a028:	72fb      	strb	r3, [r7, #11]
 800a02a:	4613      	mov	r3, r2
 800a02c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a02e:	2300      	movs	r3, #0
 800a030:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a032:	2300      	movs	r3, #0
 800a034:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a03c:	893b      	ldrh	r3, [r7, #8]
 800a03e:	7af9      	ldrb	r1, [r7, #11]
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	f7f9 fe01 	bl	8003c48 <HAL_PCD_EP_Transmit>
 800a046:	4603      	mov	r3, r0
 800a048:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a04a:	7dfb      	ldrb	r3, [r7, #23]
 800a04c:	4618      	mov	r0, r3
 800a04e:	f000 f82b 	bl	800a0a8 <USBD_Get_USB_Status>
 800a052:	4603      	mov	r3, r0
 800a054:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a056:	7dbb      	ldrb	r3, [r7, #22]
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3718      	adds	r7, #24
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b086      	sub	sp, #24
 800a064:	af00      	add	r7, sp, #0
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	607a      	str	r2, [r7, #4]
 800a06a:	461a      	mov	r2, r3
 800a06c:	460b      	mov	r3, r1
 800a06e:	72fb      	strb	r3, [r7, #11]
 800a070:	4613      	mov	r3, r2
 800a072:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a074:	2300      	movs	r3, #0
 800a076:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a078:	2300      	movs	r3, #0
 800a07a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800a082:	893b      	ldrh	r3, [r7, #8]
 800a084:	7af9      	ldrb	r1, [r7, #11]
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	f7f9 fdad 	bl	8003be6 <HAL_PCD_EP_Receive>
 800a08c:	4603      	mov	r3, r0
 800a08e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a090:	7dfb      	ldrb	r3, [r7, #23]
 800a092:	4618      	mov	r0, r3
 800a094:	f000 f808 	bl	800a0a8 <USBD_Get_USB_Status>
 800a098:	4603      	mov	r3, r0
 800a09a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a09c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a09e:	4618      	mov	r0, r3
 800a0a0:	3718      	adds	r7, #24
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}
	...

0800a0a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b085      	sub	sp, #20
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a0b6:	79fb      	ldrb	r3, [r7, #7]
 800a0b8:	2b03      	cmp	r3, #3
 800a0ba:	d817      	bhi.n	800a0ec <USBD_Get_USB_Status+0x44>
 800a0bc:	a201      	add	r2, pc, #4	@ (adr r2, 800a0c4 <USBD_Get_USB_Status+0x1c>)
 800a0be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c2:	bf00      	nop
 800a0c4:	0800a0d5 	.word	0x0800a0d5
 800a0c8:	0800a0db 	.word	0x0800a0db
 800a0cc:	0800a0e1 	.word	0x0800a0e1
 800a0d0:	0800a0e7 	.word	0x0800a0e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	73fb      	strb	r3, [r7, #15]
    break;
 800a0d8:	e00b      	b.n	800a0f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a0da:	2302      	movs	r3, #2
 800a0dc:	73fb      	strb	r3, [r7, #15]
    break;
 800a0de:	e008      	b.n	800a0f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a0e0:	2301      	movs	r3, #1
 800a0e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a0e4:	e005      	b.n	800a0f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a0e6:	2302      	movs	r3, #2
 800a0e8:	73fb      	strb	r3, [r7, #15]
    break;
 800a0ea:	e002      	b.n	800a0f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a0ec:	2302      	movs	r3, #2
 800a0ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a0f0:	bf00      	nop
  }
  return usb_status;
 800a0f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3714      	adds	r7, #20
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bc80      	pop	{r7}
 800a0fc:	4770      	bx	lr
 800a0fe:	bf00      	nop

0800a100 <main>:


#include "main.h"

int main(void)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	af00      	add	r7, sp, #0
  hwInit();
 800a104:	f7f8 fc9c 	bl	8002a40 <hwInit>
  apInit();
 800a108:	f7f6 fdca 	bl	8000ca0 <apInit>

  apMain();
 800a10c:	f7f6 fdd6 	bl	8000cbc <apMain>
 800a110:	2300      	movs	r3, #0
}
 800a112:	4618      	mov	r0, r3
 800a114:	bd80      	pop	{r7, pc}

0800a116 <sulp>:
 800a116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a11a:	460f      	mov	r7, r1
 800a11c:	4690      	mov	r8, r2
 800a11e:	f002 f88f 	bl	800c240 <__ulp>
 800a122:	4604      	mov	r4, r0
 800a124:	460d      	mov	r5, r1
 800a126:	f1b8 0f00 	cmp.w	r8, #0
 800a12a:	d011      	beq.n	800a150 <sulp+0x3a>
 800a12c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a130:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a134:	2b00      	cmp	r3, #0
 800a136:	dd0b      	ble.n	800a150 <sulp+0x3a>
 800a138:	2400      	movs	r4, #0
 800a13a:	051b      	lsls	r3, r3, #20
 800a13c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800a140:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800a144:	4622      	mov	r2, r4
 800a146:	462b      	mov	r3, r5
 800a148:	f7f6 f9c8 	bl	80004dc <__aeabi_dmul>
 800a14c:	4604      	mov	r4, r0
 800a14e:	460d      	mov	r5, r1
 800a150:	4620      	mov	r0, r4
 800a152:	4629      	mov	r1, r5
 800a154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a158 <_strtod_l>:
 800a158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a15c:	b09f      	sub	sp, #124	@ 0x7c
 800a15e:	9217      	str	r2, [sp, #92]	@ 0x5c
 800a160:	2200      	movs	r2, #0
 800a162:	460c      	mov	r4, r1
 800a164:	921a      	str	r2, [sp, #104]	@ 0x68
 800a166:	f04f 0a00 	mov.w	sl, #0
 800a16a:	f04f 0b00 	mov.w	fp, #0
 800a16e:	460a      	mov	r2, r1
 800a170:	9005      	str	r0, [sp, #20]
 800a172:	9219      	str	r2, [sp, #100]	@ 0x64
 800a174:	7811      	ldrb	r1, [r2, #0]
 800a176:	292b      	cmp	r1, #43	@ 0x2b
 800a178:	d048      	beq.n	800a20c <_strtod_l+0xb4>
 800a17a:	d836      	bhi.n	800a1ea <_strtod_l+0x92>
 800a17c:	290d      	cmp	r1, #13
 800a17e:	d830      	bhi.n	800a1e2 <_strtod_l+0x8a>
 800a180:	2908      	cmp	r1, #8
 800a182:	d830      	bhi.n	800a1e6 <_strtod_l+0x8e>
 800a184:	2900      	cmp	r1, #0
 800a186:	d039      	beq.n	800a1fc <_strtod_l+0xa4>
 800a188:	2200      	movs	r2, #0
 800a18a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800a18c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800a18e:	782a      	ldrb	r2, [r5, #0]
 800a190:	2a30      	cmp	r2, #48	@ 0x30
 800a192:	f040 80b1 	bne.w	800a2f8 <_strtod_l+0x1a0>
 800a196:	786a      	ldrb	r2, [r5, #1]
 800a198:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a19c:	2a58      	cmp	r2, #88	@ 0x58
 800a19e:	d16c      	bne.n	800a27a <_strtod_l+0x122>
 800a1a0:	9302      	str	r3, [sp, #8]
 800a1a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1a4:	4a8e      	ldr	r2, [pc, #568]	@ (800a3e0 <_strtod_l+0x288>)
 800a1a6:	9301      	str	r3, [sp, #4]
 800a1a8:	ab1a      	add	r3, sp, #104	@ 0x68
 800a1aa:	9300      	str	r3, [sp, #0]
 800a1ac:	9805      	ldr	r0, [sp, #20]
 800a1ae:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a1b0:	a919      	add	r1, sp, #100	@ 0x64
 800a1b2:	f001 f941 	bl	800b438 <__gethex>
 800a1b6:	f010 060f 	ands.w	r6, r0, #15
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	d005      	beq.n	800a1ca <_strtod_l+0x72>
 800a1be:	2e06      	cmp	r6, #6
 800a1c0:	d126      	bne.n	800a210 <_strtod_l+0xb8>
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	3501      	adds	r5, #1
 800a1c6:	9519      	str	r5, [sp, #100]	@ 0x64
 800a1c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a1ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	f040 8584 	bne.w	800acda <_strtod_l+0xb82>
 800a1d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a1d4:	b1bb      	cbz	r3, 800a206 <_strtod_l+0xae>
 800a1d6:	4650      	mov	r0, sl
 800a1d8:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 800a1dc:	b01f      	add	sp, #124	@ 0x7c
 800a1de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1e2:	2920      	cmp	r1, #32
 800a1e4:	d1d0      	bne.n	800a188 <_strtod_l+0x30>
 800a1e6:	3201      	adds	r2, #1
 800a1e8:	e7c3      	b.n	800a172 <_strtod_l+0x1a>
 800a1ea:	292d      	cmp	r1, #45	@ 0x2d
 800a1ec:	d1cc      	bne.n	800a188 <_strtod_l+0x30>
 800a1ee:	2101      	movs	r1, #1
 800a1f0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a1f2:	1c51      	adds	r1, r2, #1
 800a1f4:	9119      	str	r1, [sp, #100]	@ 0x64
 800a1f6:	7852      	ldrb	r2, [r2, #1]
 800a1f8:	2a00      	cmp	r2, #0
 800a1fa:	d1c7      	bne.n	800a18c <_strtod_l+0x34>
 800a1fc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800a1fe:	9419      	str	r4, [sp, #100]	@ 0x64
 800a200:	2b00      	cmp	r3, #0
 800a202:	f040 8568 	bne.w	800acd6 <_strtod_l+0xb7e>
 800a206:	4650      	mov	r0, sl
 800a208:	4659      	mov	r1, fp
 800a20a:	e7e7      	b.n	800a1dc <_strtod_l+0x84>
 800a20c:	2100      	movs	r1, #0
 800a20e:	e7ef      	b.n	800a1f0 <_strtod_l+0x98>
 800a210:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a212:	b13a      	cbz	r2, 800a224 <_strtod_l+0xcc>
 800a214:	2135      	movs	r1, #53	@ 0x35
 800a216:	a81c      	add	r0, sp, #112	@ 0x70
 800a218:	f002 f902 	bl	800c420 <__copybits>
 800a21c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a21e:	9805      	ldr	r0, [sp, #20]
 800a220:	f001 fcdc 	bl	800bbdc <_Bfree>
 800a224:	3e01      	subs	r6, #1
 800a226:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800a228:	2e04      	cmp	r6, #4
 800a22a:	d806      	bhi.n	800a23a <_strtod_l+0xe2>
 800a22c:	e8df f006 	tbb	[pc, r6]
 800a230:	201d0314 	.word	0x201d0314
 800a234:	14          	.byte	0x14
 800a235:	00          	.byte	0x00
 800a236:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800a23a:	05e1      	lsls	r1, r4, #23
 800a23c:	bf48      	it	mi
 800a23e:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800a242:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a246:	0d1b      	lsrs	r3, r3, #20
 800a248:	051b      	lsls	r3, r3, #20
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d1bd      	bne.n	800a1ca <_strtod_l+0x72>
 800a24e:	f000 fff5 	bl	800b23c <__errno>
 800a252:	2322      	movs	r3, #34	@ 0x22
 800a254:	6003      	str	r3, [r0, #0]
 800a256:	e7b8      	b.n	800a1ca <_strtod_l+0x72>
 800a258:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800a25c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800a260:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800a264:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a268:	e7e7      	b.n	800a23a <_strtod_l+0xe2>
 800a26a:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800a3e4 <_strtod_l+0x28c>
 800a26e:	e7e4      	b.n	800a23a <_strtod_l+0xe2>
 800a270:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800a274:	f04f 3aff 	mov.w	sl, #4294967295
 800a278:	e7df      	b.n	800a23a <_strtod_l+0xe2>
 800a27a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a27c:	1c5a      	adds	r2, r3, #1
 800a27e:	9219      	str	r2, [sp, #100]	@ 0x64
 800a280:	785b      	ldrb	r3, [r3, #1]
 800a282:	2b30      	cmp	r3, #48	@ 0x30
 800a284:	d0f9      	beq.n	800a27a <_strtod_l+0x122>
 800a286:	2b00      	cmp	r3, #0
 800a288:	d09f      	beq.n	800a1ca <_strtod_l+0x72>
 800a28a:	2301      	movs	r3, #1
 800a28c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a28e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a290:	220a      	movs	r2, #10
 800a292:	930c      	str	r3, [sp, #48]	@ 0x30
 800a294:	2300      	movs	r3, #0
 800a296:	461f      	mov	r7, r3
 800a298:	9308      	str	r3, [sp, #32]
 800a29a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a29c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800a29e:	7805      	ldrb	r5, [r0, #0]
 800a2a0:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800a2a4:	b2d9      	uxtb	r1, r3
 800a2a6:	2909      	cmp	r1, #9
 800a2a8:	d928      	bls.n	800a2fc <_strtod_l+0x1a4>
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	494e      	ldr	r1, [pc, #312]	@ (800a3e8 <_strtod_l+0x290>)
 800a2ae:	f000 ff41 	bl	800b134 <strncmp>
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d032      	beq.n	800a31c <_strtod_l+0x1c4>
 800a2b6:	2000      	movs	r0, #0
 800a2b8:	462a      	mov	r2, r5
 800a2ba:	4681      	mov	r9, r0
 800a2bc:	463d      	mov	r5, r7
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2a65      	cmp	r2, #101	@ 0x65
 800a2c2:	d001      	beq.n	800a2c8 <_strtod_l+0x170>
 800a2c4:	2a45      	cmp	r2, #69	@ 0x45
 800a2c6:	d114      	bne.n	800a2f2 <_strtod_l+0x19a>
 800a2c8:	b91d      	cbnz	r5, 800a2d2 <_strtod_l+0x17a>
 800a2ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2cc:	4302      	orrs	r2, r0
 800a2ce:	d095      	beq.n	800a1fc <_strtod_l+0xa4>
 800a2d0:	2500      	movs	r5, #0
 800a2d2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800a2d4:	1c62      	adds	r2, r4, #1
 800a2d6:	9219      	str	r2, [sp, #100]	@ 0x64
 800a2d8:	7862      	ldrb	r2, [r4, #1]
 800a2da:	2a2b      	cmp	r2, #43	@ 0x2b
 800a2dc:	d077      	beq.n	800a3ce <_strtod_l+0x276>
 800a2de:	2a2d      	cmp	r2, #45	@ 0x2d
 800a2e0:	d07b      	beq.n	800a3da <_strtod_l+0x282>
 800a2e2:	f04f 0c00 	mov.w	ip, #0
 800a2e6:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800a2ea:	2909      	cmp	r1, #9
 800a2ec:	f240 8082 	bls.w	800a3f4 <_strtod_l+0x29c>
 800a2f0:	9419      	str	r4, [sp, #100]	@ 0x64
 800a2f2:	f04f 0800 	mov.w	r8, #0
 800a2f6:	e0a2      	b.n	800a43e <_strtod_l+0x2e6>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	e7c7      	b.n	800a28c <_strtod_l+0x134>
 800a2fc:	2f08      	cmp	r7, #8
 800a2fe:	bfd5      	itete	le
 800a300:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800a302:	9908      	ldrgt	r1, [sp, #32]
 800a304:	fb02 3301 	mlale	r3, r2, r1, r3
 800a308:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a30c:	f100 0001 	add.w	r0, r0, #1
 800a310:	bfd4      	ite	le
 800a312:	930a      	strle	r3, [sp, #40]	@ 0x28
 800a314:	9308      	strgt	r3, [sp, #32]
 800a316:	3701      	adds	r7, #1
 800a318:	9019      	str	r0, [sp, #100]	@ 0x64
 800a31a:	e7bf      	b.n	800a29c <_strtod_l+0x144>
 800a31c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a31e:	1c5a      	adds	r2, r3, #1
 800a320:	9219      	str	r2, [sp, #100]	@ 0x64
 800a322:	785a      	ldrb	r2, [r3, #1]
 800a324:	b37f      	cbz	r7, 800a386 <_strtod_l+0x22e>
 800a326:	4681      	mov	r9, r0
 800a328:	463d      	mov	r5, r7
 800a32a:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800a32e:	2b09      	cmp	r3, #9
 800a330:	d912      	bls.n	800a358 <_strtod_l+0x200>
 800a332:	2301      	movs	r3, #1
 800a334:	e7c4      	b.n	800a2c0 <_strtod_l+0x168>
 800a336:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a338:	3001      	adds	r0, #1
 800a33a:	1c5a      	adds	r2, r3, #1
 800a33c:	9219      	str	r2, [sp, #100]	@ 0x64
 800a33e:	785a      	ldrb	r2, [r3, #1]
 800a340:	2a30      	cmp	r2, #48	@ 0x30
 800a342:	d0f8      	beq.n	800a336 <_strtod_l+0x1de>
 800a344:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800a348:	2b08      	cmp	r3, #8
 800a34a:	f200 84cb 	bhi.w	800ace4 <_strtod_l+0xb8c>
 800a34e:	4681      	mov	r9, r0
 800a350:	2000      	movs	r0, #0
 800a352:	4605      	mov	r5, r0
 800a354:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a356:	930c      	str	r3, [sp, #48]	@ 0x30
 800a358:	3a30      	subs	r2, #48	@ 0x30
 800a35a:	f100 0301 	add.w	r3, r0, #1
 800a35e:	d02a      	beq.n	800a3b6 <_strtod_l+0x25e>
 800a360:	4499      	add	r9, r3
 800a362:	210a      	movs	r1, #10
 800a364:	462b      	mov	r3, r5
 800a366:	eb00 0c05 	add.w	ip, r0, r5
 800a36a:	4563      	cmp	r3, ip
 800a36c:	d10d      	bne.n	800a38a <_strtod_l+0x232>
 800a36e:	1c69      	adds	r1, r5, #1
 800a370:	4401      	add	r1, r0
 800a372:	4428      	add	r0, r5
 800a374:	2808      	cmp	r0, #8
 800a376:	dc16      	bgt.n	800a3a6 <_strtod_l+0x24e>
 800a378:	230a      	movs	r3, #10
 800a37a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a37c:	fb03 2300 	mla	r3, r3, r0, r2
 800a380:	930a      	str	r3, [sp, #40]	@ 0x28
 800a382:	2300      	movs	r3, #0
 800a384:	e018      	b.n	800a3b8 <_strtod_l+0x260>
 800a386:	4638      	mov	r0, r7
 800a388:	e7da      	b.n	800a340 <_strtod_l+0x1e8>
 800a38a:	2b08      	cmp	r3, #8
 800a38c:	f103 0301 	add.w	r3, r3, #1
 800a390:	dc03      	bgt.n	800a39a <_strtod_l+0x242>
 800a392:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a394:	434e      	muls	r6, r1
 800a396:	960a      	str	r6, [sp, #40]	@ 0x28
 800a398:	e7e7      	b.n	800a36a <_strtod_l+0x212>
 800a39a:	2b10      	cmp	r3, #16
 800a39c:	bfde      	ittt	le
 800a39e:	9e08      	ldrle	r6, [sp, #32]
 800a3a0:	434e      	mulle	r6, r1
 800a3a2:	9608      	strle	r6, [sp, #32]
 800a3a4:	e7e1      	b.n	800a36a <_strtod_l+0x212>
 800a3a6:	280f      	cmp	r0, #15
 800a3a8:	dceb      	bgt.n	800a382 <_strtod_l+0x22a>
 800a3aa:	230a      	movs	r3, #10
 800a3ac:	9808      	ldr	r0, [sp, #32]
 800a3ae:	fb03 2300 	mla	r3, r3, r0, r2
 800a3b2:	9308      	str	r3, [sp, #32]
 800a3b4:	e7e5      	b.n	800a382 <_strtod_l+0x22a>
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a3ba:	460d      	mov	r5, r1
 800a3bc:	1c50      	adds	r0, r2, #1
 800a3be:	9019      	str	r0, [sp, #100]	@ 0x64
 800a3c0:	7852      	ldrb	r2, [r2, #1]
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	e7b1      	b.n	800a32a <_strtod_l+0x1d2>
 800a3c6:	f04f 0900 	mov.w	r9, #0
 800a3ca:	2301      	movs	r3, #1
 800a3cc:	e77d      	b.n	800a2ca <_strtod_l+0x172>
 800a3ce:	f04f 0c00 	mov.w	ip, #0
 800a3d2:	1ca2      	adds	r2, r4, #2
 800a3d4:	9219      	str	r2, [sp, #100]	@ 0x64
 800a3d6:	78a2      	ldrb	r2, [r4, #2]
 800a3d8:	e785      	b.n	800a2e6 <_strtod_l+0x18e>
 800a3da:	f04f 0c01 	mov.w	ip, #1
 800a3de:	e7f8      	b.n	800a3d2 <_strtod_l+0x27a>
 800a3e0:	0800d500 	.word	0x0800d500
 800a3e4:	7ff00000 	.word	0x7ff00000
 800a3e8:	0800d4de 	.word	0x0800d4de
 800a3ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a3ee:	1c51      	adds	r1, r2, #1
 800a3f0:	9119      	str	r1, [sp, #100]	@ 0x64
 800a3f2:	7852      	ldrb	r2, [r2, #1]
 800a3f4:	2a30      	cmp	r2, #48	@ 0x30
 800a3f6:	d0f9      	beq.n	800a3ec <_strtod_l+0x294>
 800a3f8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800a3fc:	2908      	cmp	r1, #8
 800a3fe:	f63f af78 	bhi.w	800a2f2 <_strtod_l+0x19a>
 800a402:	f04f 080a 	mov.w	r8, #10
 800a406:	3a30      	subs	r2, #48	@ 0x30
 800a408:	920e      	str	r2, [sp, #56]	@ 0x38
 800a40a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a40c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800a40e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800a410:	1c56      	adds	r6, r2, #1
 800a412:	9619      	str	r6, [sp, #100]	@ 0x64
 800a414:	7852      	ldrb	r2, [r2, #1]
 800a416:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800a41a:	f1be 0f09 	cmp.w	lr, #9
 800a41e:	d939      	bls.n	800a494 <_strtod_l+0x33c>
 800a420:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800a422:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800a426:	1a76      	subs	r6, r6, r1
 800a428:	2e08      	cmp	r6, #8
 800a42a:	dc03      	bgt.n	800a434 <_strtod_l+0x2dc>
 800a42c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a42e:	4588      	cmp	r8, r1
 800a430:	bfa8      	it	ge
 800a432:	4688      	movge	r8, r1
 800a434:	f1bc 0f00 	cmp.w	ip, #0
 800a438:	d001      	beq.n	800a43e <_strtod_l+0x2e6>
 800a43a:	f1c8 0800 	rsb	r8, r8, #0
 800a43e:	2d00      	cmp	r5, #0
 800a440:	d14e      	bne.n	800a4e0 <_strtod_l+0x388>
 800a442:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a444:	4308      	orrs	r0, r1
 800a446:	f47f aec0 	bne.w	800a1ca <_strtod_l+0x72>
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	f47f aed6 	bne.w	800a1fc <_strtod_l+0xa4>
 800a450:	2a69      	cmp	r2, #105	@ 0x69
 800a452:	d028      	beq.n	800a4a6 <_strtod_l+0x34e>
 800a454:	dc25      	bgt.n	800a4a2 <_strtod_l+0x34a>
 800a456:	2a49      	cmp	r2, #73	@ 0x49
 800a458:	d025      	beq.n	800a4a6 <_strtod_l+0x34e>
 800a45a:	2a4e      	cmp	r2, #78	@ 0x4e
 800a45c:	f47f aece 	bne.w	800a1fc <_strtod_l+0xa4>
 800a460:	499a      	ldr	r1, [pc, #616]	@ (800a6cc <_strtod_l+0x574>)
 800a462:	a819      	add	r0, sp, #100	@ 0x64
 800a464:	f001 fa0a 	bl	800b87c <__match>
 800a468:	2800      	cmp	r0, #0
 800a46a:	f43f aec7 	beq.w	800a1fc <_strtod_l+0xa4>
 800a46e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	2b28      	cmp	r3, #40	@ 0x28
 800a474:	d12e      	bne.n	800a4d4 <_strtod_l+0x37c>
 800a476:	4996      	ldr	r1, [pc, #600]	@ (800a6d0 <_strtod_l+0x578>)
 800a478:	aa1c      	add	r2, sp, #112	@ 0x70
 800a47a:	a819      	add	r0, sp, #100	@ 0x64
 800a47c:	f001 fa12 	bl	800b8a4 <__hexnan>
 800a480:	2805      	cmp	r0, #5
 800a482:	d127      	bne.n	800a4d4 <_strtod_l+0x37c>
 800a484:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a486:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800a48a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800a48e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800a492:	e69a      	b.n	800a1ca <_strtod_l+0x72>
 800a494:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800a496:	fb08 2101 	mla	r1, r8, r1, r2
 800a49a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800a49e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a4a0:	e7b5      	b.n	800a40e <_strtod_l+0x2b6>
 800a4a2:	2a6e      	cmp	r2, #110	@ 0x6e
 800a4a4:	e7da      	b.n	800a45c <_strtod_l+0x304>
 800a4a6:	498b      	ldr	r1, [pc, #556]	@ (800a6d4 <_strtod_l+0x57c>)
 800a4a8:	a819      	add	r0, sp, #100	@ 0x64
 800a4aa:	f001 f9e7 	bl	800b87c <__match>
 800a4ae:	2800      	cmp	r0, #0
 800a4b0:	f43f aea4 	beq.w	800a1fc <_strtod_l+0xa4>
 800a4b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4b6:	4988      	ldr	r1, [pc, #544]	@ (800a6d8 <_strtod_l+0x580>)
 800a4b8:	3b01      	subs	r3, #1
 800a4ba:	a819      	add	r0, sp, #100	@ 0x64
 800a4bc:	9319      	str	r3, [sp, #100]	@ 0x64
 800a4be:	f001 f9dd 	bl	800b87c <__match>
 800a4c2:	b910      	cbnz	r0, 800a4ca <_strtod_l+0x372>
 800a4c4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	9319      	str	r3, [sp, #100]	@ 0x64
 800a4ca:	f04f 0a00 	mov.w	sl, #0
 800a4ce:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 800a6dc <_strtod_l+0x584>
 800a4d2:	e67a      	b.n	800a1ca <_strtod_l+0x72>
 800a4d4:	4882      	ldr	r0, [pc, #520]	@ (800a6e0 <_strtod_l+0x588>)
 800a4d6:	f000 fef5 	bl	800b2c4 <nan>
 800a4da:	4682      	mov	sl, r0
 800a4dc:	468b      	mov	fp, r1
 800a4de:	e674      	b.n	800a1ca <_strtod_l+0x72>
 800a4e0:	eba8 0309 	sub.w	r3, r8, r9
 800a4e4:	2f00      	cmp	r7, #0
 800a4e6:	bf08      	it	eq
 800a4e8:	462f      	moveq	r7, r5
 800a4ea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800a4ec:	2d10      	cmp	r5, #16
 800a4ee:	462c      	mov	r4, r5
 800a4f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4f2:	bfa8      	it	ge
 800a4f4:	2410      	movge	r4, #16
 800a4f6:	f7f5 ff77 	bl	80003e8 <__aeabi_ui2d>
 800a4fa:	2d09      	cmp	r5, #9
 800a4fc:	4682      	mov	sl, r0
 800a4fe:	468b      	mov	fp, r1
 800a500:	dc11      	bgt.n	800a526 <_strtod_l+0x3ce>
 800a502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a504:	2b00      	cmp	r3, #0
 800a506:	f43f ae60 	beq.w	800a1ca <_strtod_l+0x72>
 800a50a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a50c:	dd76      	ble.n	800a5fc <_strtod_l+0x4a4>
 800a50e:	2b16      	cmp	r3, #22
 800a510:	dc5d      	bgt.n	800a5ce <_strtod_l+0x476>
 800a512:	4974      	ldr	r1, [pc, #464]	@ (800a6e4 <_strtod_l+0x58c>)
 800a514:	4652      	mov	r2, sl
 800a516:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a51a:	465b      	mov	r3, fp
 800a51c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a520:	f7f5 ffdc 	bl	80004dc <__aeabi_dmul>
 800a524:	e7d9      	b.n	800a4da <_strtod_l+0x382>
 800a526:	4b6f      	ldr	r3, [pc, #444]	@ (800a6e4 <_strtod_l+0x58c>)
 800a528:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a52c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800a530:	f7f5 ffd4 	bl	80004dc <__aeabi_dmul>
 800a534:	4682      	mov	sl, r0
 800a536:	9808      	ldr	r0, [sp, #32]
 800a538:	468b      	mov	fp, r1
 800a53a:	f7f5 ff55 	bl	80003e8 <__aeabi_ui2d>
 800a53e:	4602      	mov	r2, r0
 800a540:	460b      	mov	r3, r1
 800a542:	4650      	mov	r0, sl
 800a544:	4659      	mov	r1, fp
 800a546:	f7f5 fe13 	bl	8000170 <__adddf3>
 800a54a:	2d0f      	cmp	r5, #15
 800a54c:	4682      	mov	sl, r0
 800a54e:	468b      	mov	fp, r1
 800a550:	ddd7      	ble.n	800a502 <_strtod_l+0x3aa>
 800a552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a554:	1b2c      	subs	r4, r5, r4
 800a556:	441c      	add	r4, r3
 800a558:	2c00      	cmp	r4, #0
 800a55a:	f340 8096 	ble.w	800a68a <_strtod_l+0x532>
 800a55e:	f014 030f 	ands.w	r3, r4, #15
 800a562:	d00a      	beq.n	800a57a <_strtod_l+0x422>
 800a564:	495f      	ldr	r1, [pc, #380]	@ (800a6e4 <_strtod_l+0x58c>)
 800a566:	4652      	mov	r2, sl
 800a568:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a56c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a570:	465b      	mov	r3, fp
 800a572:	f7f5 ffb3 	bl	80004dc <__aeabi_dmul>
 800a576:	4682      	mov	sl, r0
 800a578:	468b      	mov	fp, r1
 800a57a:	f034 040f 	bics.w	r4, r4, #15
 800a57e:	d073      	beq.n	800a668 <_strtod_l+0x510>
 800a580:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800a584:	dd48      	ble.n	800a618 <_strtod_l+0x4c0>
 800a586:	2400      	movs	r4, #0
 800a588:	46a0      	mov	r8, r4
 800a58a:	46a1      	mov	r9, r4
 800a58c:	940a      	str	r4, [sp, #40]	@ 0x28
 800a58e:	2322      	movs	r3, #34	@ 0x22
 800a590:	f04f 0a00 	mov.w	sl, #0
 800a594:	9a05      	ldr	r2, [sp, #20]
 800a596:	f8df b144 	ldr.w	fp, [pc, #324]	@ 800a6dc <_strtod_l+0x584>
 800a59a:	6013      	str	r3, [r2, #0]
 800a59c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f43f ae13 	beq.w	800a1ca <_strtod_l+0x72>
 800a5a4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a5a6:	9805      	ldr	r0, [sp, #20]
 800a5a8:	f001 fb18 	bl	800bbdc <_Bfree>
 800a5ac:	4649      	mov	r1, r9
 800a5ae:	9805      	ldr	r0, [sp, #20]
 800a5b0:	f001 fb14 	bl	800bbdc <_Bfree>
 800a5b4:	4641      	mov	r1, r8
 800a5b6:	9805      	ldr	r0, [sp, #20]
 800a5b8:	f001 fb10 	bl	800bbdc <_Bfree>
 800a5bc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a5be:	9805      	ldr	r0, [sp, #20]
 800a5c0:	f001 fb0c 	bl	800bbdc <_Bfree>
 800a5c4:	4621      	mov	r1, r4
 800a5c6:	9805      	ldr	r0, [sp, #20]
 800a5c8:	f001 fb08 	bl	800bbdc <_Bfree>
 800a5cc:	e5fd      	b.n	800a1ca <_strtod_l+0x72>
 800a5ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5d0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	dbbc      	blt.n	800a552 <_strtod_l+0x3fa>
 800a5d8:	4c42      	ldr	r4, [pc, #264]	@ (800a6e4 <_strtod_l+0x58c>)
 800a5da:	f1c5 050f 	rsb	r5, r5, #15
 800a5de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a5e2:	4652      	mov	r2, sl
 800a5e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5e8:	465b      	mov	r3, fp
 800a5ea:	f7f5 ff77 	bl	80004dc <__aeabi_dmul>
 800a5ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a5f0:	1b5d      	subs	r5, r3, r5
 800a5f2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a5f6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a5fa:	e791      	b.n	800a520 <_strtod_l+0x3c8>
 800a5fc:	3316      	adds	r3, #22
 800a5fe:	dba8      	blt.n	800a552 <_strtod_l+0x3fa>
 800a600:	4b38      	ldr	r3, [pc, #224]	@ (800a6e4 <_strtod_l+0x58c>)
 800a602:	eba9 0808 	sub.w	r8, r9, r8
 800a606:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800a60a:	4650      	mov	r0, sl
 800a60c:	e9d8 2300 	ldrd	r2, r3, [r8]
 800a610:	4659      	mov	r1, fp
 800a612:	f7f6 f88d 	bl	8000730 <__aeabi_ddiv>
 800a616:	e760      	b.n	800a4da <_strtod_l+0x382>
 800a618:	4b33      	ldr	r3, [pc, #204]	@ (800a6e8 <_strtod_l+0x590>)
 800a61a:	4650      	mov	r0, sl
 800a61c:	9308      	str	r3, [sp, #32]
 800a61e:	2300      	movs	r3, #0
 800a620:	4659      	mov	r1, fp
 800a622:	461e      	mov	r6, r3
 800a624:	1124      	asrs	r4, r4, #4
 800a626:	2c01      	cmp	r4, #1
 800a628:	dc21      	bgt.n	800a66e <_strtod_l+0x516>
 800a62a:	b10b      	cbz	r3, 800a630 <_strtod_l+0x4d8>
 800a62c:	4682      	mov	sl, r0
 800a62e:	468b      	mov	fp, r1
 800a630:	492d      	ldr	r1, [pc, #180]	@ (800a6e8 <_strtod_l+0x590>)
 800a632:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800a636:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800a63a:	4652      	mov	r2, sl
 800a63c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a640:	465b      	mov	r3, fp
 800a642:	f7f5 ff4b 	bl	80004dc <__aeabi_dmul>
 800a646:	4b25      	ldr	r3, [pc, #148]	@ (800a6dc <_strtod_l+0x584>)
 800a648:	460a      	mov	r2, r1
 800a64a:	400b      	ands	r3, r1
 800a64c:	4927      	ldr	r1, [pc, #156]	@ (800a6ec <_strtod_l+0x594>)
 800a64e:	4682      	mov	sl, r0
 800a650:	428b      	cmp	r3, r1
 800a652:	d898      	bhi.n	800a586 <_strtod_l+0x42e>
 800a654:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800a658:	428b      	cmp	r3, r1
 800a65a:	bf86      	itte	hi
 800a65c:	f04f 3aff 	movhi.w	sl, #4294967295
 800a660:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800a6f0 <_strtod_l+0x598>
 800a664:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800a668:	2300      	movs	r3, #0
 800a66a:	9308      	str	r3, [sp, #32]
 800a66c:	e07a      	b.n	800a764 <_strtod_l+0x60c>
 800a66e:	07e2      	lsls	r2, r4, #31
 800a670:	d505      	bpl.n	800a67e <_strtod_l+0x526>
 800a672:	9b08      	ldr	r3, [sp, #32]
 800a674:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a678:	f7f5 ff30 	bl	80004dc <__aeabi_dmul>
 800a67c:	2301      	movs	r3, #1
 800a67e:	9a08      	ldr	r2, [sp, #32]
 800a680:	3601      	adds	r6, #1
 800a682:	3208      	adds	r2, #8
 800a684:	1064      	asrs	r4, r4, #1
 800a686:	9208      	str	r2, [sp, #32]
 800a688:	e7cd      	b.n	800a626 <_strtod_l+0x4ce>
 800a68a:	d0ed      	beq.n	800a668 <_strtod_l+0x510>
 800a68c:	4264      	negs	r4, r4
 800a68e:	f014 020f 	ands.w	r2, r4, #15
 800a692:	d00a      	beq.n	800a6aa <_strtod_l+0x552>
 800a694:	4b13      	ldr	r3, [pc, #76]	@ (800a6e4 <_strtod_l+0x58c>)
 800a696:	4650      	mov	r0, sl
 800a698:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a69c:	4659      	mov	r1, fp
 800a69e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6a2:	f7f6 f845 	bl	8000730 <__aeabi_ddiv>
 800a6a6:	4682      	mov	sl, r0
 800a6a8:	468b      	mov	fp, r1
 800a6aa:	1124      	asrs	r4, r4, #4
 800a6ac:	d0dc      	beq.n	800a668 <_strtod_l+0x510>
 800a6ae:	2c1f      	cmp	r4, #31
 800a6b0:	dd20      	ble.n	800a6f4 <_strtod_l+0x59c>
 800a6b2:	2400      	movs	r4, #0
 800a6b4:	46a0      	mov	r8, r4
 800a6b6:	46a1      	mov	r9, r4
 800a6b8:	940a      	str	r4, [sp, #40]	@ 0x28
 800a6ba:	2322      	movs	r3, #34	@ 0x22
 800a6bc:	9a05      	ldr	r2, [sp, #20]
 800a6be:	f04f 0a00 	mov.w	sl, #0
 800a6c2:	f04f 0b00 	mov.w	fp, #0
 800a6c6:	6013      	str	r3, [r2, #0]
 800a6c8:	e768      	b.n	800a59c <_strtod_l+0x444>
 800a6ca:	bf00      	nop
 800a6cc:	0800d4e9 	.word	0x0800d4e9
 800a6d0:	0800d4ec 	.word	0x0800d4ec
 800a6d4:	0800d4e0 	.word	0x0800d4e0
 800a6d8:	0800d4e3 	.word	0x0800d4e3
 800a6dc:	7ff00000 	.word	0x7ff00000
 800a6e0:	0800d896 	.word	0x0800d896
 800a6e4:	0800d760 	.word	0x0800d760
 800a6e8:	0800d738 	.word	0x0800d738
 800a6ec:	7ca00000 	.word	0x7ca00000
 800a6f0:	7fefffff 	.word	0x7fefffff
 800a6f4:	f014 0310 	ands.w	r3, r4, #16
 800a6f8:	bf18      	it	ne
 800a6fa:	236a      	movne	r3, #106	@ 0x6a
 800a6fc:	4650      	mov	r0, sl
 800a6fe:	9308      	str	r3, [sp, #32]
 800a700:	4659      	mov	r1, fp
 800a702:	2300      	movs	r3, #0
 800a704:	4ea9      	ldr	r6, [pc, #676]	@ (800a9ac <_strtod_l+0x854>)
 800a706:	07e2      	lsls	r2, r4, #31
 800a708:	d504      	bpl.n	800a714 <_strtod_l+0x5bc>
 800a70a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a70e:	f7f5 fee5 	bl	80004dc <__aeabi_dmul>
 800a712:	2301      	movs	r3, #1
 800a714:	1064      	asrs	r4, r4, #1
 800a716:	f106 0608 	add.w	r6, r6, #8
 800a71a:	d1f4      	bne.n	800a706 <_strtod_l+0x5ae>
 800a71c:	b10b      	cbz	r3, 800a722 <_strtod_l+0x5ca>
 800a71e:	4682      	mov	sl, r0
 800a720:	468b      	mov	fp, r1
 800a722:	9b08      	ldr	r3, [sp, #32]
 800a724:	b1b3      	cbz	r3, 800a754 <_strtod_l+0x5fc>
 800a726:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a72a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800a72e:	2b00      	cmp	r3, #0
 800a730:	4659      	mov	r1, fp
 800a732:	dd0f      	ble.n	800a754 <_strtod_l+0x5fc>
 800a734:	2b1f      	cmp	r3, #31
 800a736:	dd57      	ble.n	800a7e8 <_strtod_l+0x690>
 800a738:	2b34      	cmp	r3, #52	@ 0x34
 800a73a:	bfd8      	it	le
 800a73c:	f04f 33ff 	movle.w	r3, #4294967295
 800a740:	f04f 0a00 	mov.w	sl, #0
 800a744:	bfcf      	iteee	gt
 800a746:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800a74a:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800a74e:	4093      	lslle	r3, r2
 800a750:	ea03 0b01 	andle.w	fp, r3, r1
 800a754:	2200      	movs	r2, #0
 800a756:	2300      	movs	r3, #0
 800a758:	4650      	mov	r0, sl
 800a75a:	4659      	mov	r1, fp
 800a75c:	f7f6 f926 	bl	80009ac <__aeabi_dcmpeq>
 800a760:	2800      	cmp	r0, #0
 800a762:	d1a6      	bne.n	800a6b2 <_strtod_l+0x55a>
 800a764:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a766:	463a      	mov	r2, r7
 800a768:	9300      	str	r3, [sp, #0]
 800a76a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a76c:	462b      	mov	r3, r5
 800a76e:	9805      	ldr	r0, [sp, #20]
 800a770:	f001 fa9c 	bl	800bcac <__s2b>
 800a774:	900a      	str	r0, [sp, #40]	@ 0x28
 800a776:	2800      	cmp	r0, #0
 800a778:	f43f af05 	beq.w	800a586 <_strtod_l+0x42e>
 800a77c:	2400      	movs	r4, #0
 800a77e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a780:	eba9 0308 	sub.w	r3, r9, r8
 800a784:	2a00      	cmp	r2, #0
 800a786:	bfa8      	it	ge
 800a788:	2300      	movge	r3, #0
 800a78a:	46a0      	mov	r8, r4
 800a78c:	9312      	str	r3, [sp, #72]	@ 0x48
 800a78e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a792:	9316      	str	r3, [sp, #88]	@ 0x58
 800a794:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a796:	9805      	ldr	r0, [sp, #20]
 800a798:	6859      	ldr	r1, [r3, #4]
 800a79a:	f001 f9df 	bl	800bb5c <_Balloc>
 800a79e:	4681      	mov	r9, r0
 800a7a0:	2800      	cmp	r0, #0
 800a7a2:	f43f aef4 	beq.w	800a58e <_strtod_l+0x436>
 800a7a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a7a8:	300c      	adds	r0, #12
 800a7aa:	691a      	ldr	r2, [r3, #16]
 800a7ac:	f103 010c 	add.w	r1, r3, #12
 800a7b0:	3202      	adds	r2, #2
 800a7b2:	0092      	lsls	r2, r2, #2
 800a7b4:	f000 fd77 	bl	800b2a6 <memcpy>
 800a7b8:	ab1c      	add	r3, sp, #112	@ 0x70
 800a7ba:	9301      	str	r3, [sp, #4]
 800a7bc:	ab1b      	add	r3, sp, #108	@ 0x6c
 800a7be:	9300      	str	r3, [sp, #0]
 800a7c0:	4652      	mov	r2, sl
 800a7c2:	465b      	mov	r3, fp
 800a7c4:	9805      	ldr	r0, [sp, #20]
 800a7c6:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a7ca:	f001 fda1 	bl	800c310 <__d2b>
 800a7ce:	901a      	str	r0, [sp, #104]	@ 0x68
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	f43f aedc 	beq.w	800a58e <_strtod_l+0x436>
 800a7d6:	2101      	movs	r1, #1
 800a7d8:	9805      	ldr	r0, [sp, #20]
 800a7da:	f001 fafd 	bl	800bdd8 <__i2b>
 800a7de:	4680      	mov	r8, r0
 800a7e0:	b948      	cbnz	r0, 800a7f6 <_strtod_l+0x69e>
 800a7e2:	f04f 0800 	mov.w	r8, #0
 800a7e6:	e6d2      	b.n	800a58e <_strtod_l+0x436>
 800a7e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a7f0:	ea03 0a0a 	and.w	sl, r3, sl
 800a7f4:	e7ae      	b.n	800a754 <_strtod_l+0x5fc>
 800a7f6:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a7f8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a7fa:	2d00      	cmp	r5, #0
 800a7fc:	bfab      	itete	ge
 800a7fe:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a800:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a802:	18ef      	addge	r7, r5, r3
 800a804:	1b5e      	sublt	r6, r3, r5
 800a806:	9b08      	ldr	r3, [sp, #32]
 800a808:	bfa8      	it	ge
 800a80a:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a80c:	eba5 0503 	sub.w	r5, r5, r3
 800a810:	4415      	add	r5, r2
 800a812:	4b67      	ldr	r3, [pc, #412]	@ (800a9b0 <_strtod_l+0x858>)
 800a814:	f105 35ff 	add.w	r5, r5, #4294967295
 800a818:	bfb8      	it	lt
 800a81a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a81c:	429d      	cmp	r5, r3
 800a81e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a822:	da50      	bge.n	800a8c6 <_strtod_l+0x76e>
 800a824:	1b5b      	subs	r3, r3, r5
 800a826:	2b1f      	cmp	r3, #31
 800a828:	f04f 0101 	mov.w	r1, #1
 800a82c:	eba2 0203 	sub.w	r2, r2, r3
 800a830:	dc3d      	bgt.n	800a8ae <_strtod_l+0x756>
 800a832:	fa01 f303 	lsl.w	r3, r1, r3
 800a836:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a838:	2300      	movs	r3, #0
 800a83a:	9310      	str	r3, [sp, #64]	@ 0x40
 800a83c:	18bd      	adds	r5, r7, r2
 800a83e:	9b08      	ldr	r3, [sp, #32]
 800a840:	42af      	cmp	r7, r5
 800a842:	4416      	add	r6, r2
 800a844:	441e      	add	r6, r3
 800a846:	463b      	mov	r3, r7
 800a848:	bfa8      	it	ge
 800a84a:	462b      	movge	r3, r5
 800a84c:	42b3      	cmp	r3, r6
 800a84e:	bfa8      	it	ge
 800a850:	4633      	movge	r3, r6
 800a852:	2b00      	cmp	r3, #0
 800a854:	bfc2      	ittt	gt
 800a856:	1aed      	subgt	r5, r5, r3
 800a858:	1af6      	subgt	r6, r6, r3
 800a85a:	1aff      	subgt	r7, r7, r3
 800a85c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a85e:	2b00      	cmp	r3, #0
 800a860:	dd16      	ble.n	800a890 <_strtod_l+0x738>
 800a862:	4641      	mov	r1, r8
 800a864:	461a      	mov	r2, r3
 800a866:	9805      	ldr	r0, [sp, #20]
 800a868:	f001 fb74 	bl	800bf54 <__pow5mult>
 800a86c:	4680      	mov	r8, r0
 800a86e:	2800      	cmp	r0, #0
 800a870:	d0b7      	beq.n	800a7e2 <_strtod_l+0x68a>
 800a872:	4601      	mov	r1, r0
 800a874:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a876:	9805      	ldr	r0, [sp, #20]
 800a878:	f001 fac4 	bl	800be04 <__multiply>
 800a87c:	900e      	str	r0, [sp, #56]	@ 0x38
 800a87e:	2800      	cmp	r0, #0
 800a880:	f43f ae85 	beq.w	800a58e <_strtod_l+0x436>
 800a884:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a886:	9805      	ldr	r0, [sp, #20]
 800a888:	f001 f9a8 	bl	800bbdc <_Bfree>
 800a88c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a88e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a890:	2d00      	cmp	r5, #0
 800a892:	dc1d      	bgt.n	800a8d0 <_strtod_l+0x778>
 800a894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a896:	2b00      	cmp	r3, #0
 800a898:	dd23      	ble.n	800a8e2 <_strtod_l+0x78a>
 800a89a:	4649      	mov	r1, r9
 800a89c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a89e:	9805      	ldr	r0, [sp, #20]
 800a8a0:	f001 fb58 	bl	800bf54 <__pow5mult>
 800a8a4:	4681      	mov	r9, r0
 800a8a6:	b9e0      	cbnz	r0, 800a8e2 <_strtod_l+0x78a>
 800a8a8:	f04f 0900 	mov.w	r9, #0
 800a8ac:	e66f      	b.n	800a58e <_strtod_l+0x436>
 800a8ae:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a8b2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a8b6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a8ba:	35e2      	adds	r5, #226	@ 0xe2
 800a8bc:	fa01 f305 	lsl.w	r3, r1, r5
 800a8c0:	9310      	str	r3, [sp, #64]	@ 0x40
 800a8c2:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a8c4:	e7ba      	b.n	800a83c <_strtod_l+0x6e4>
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	9310      	str	r3, [sp, #64]	@ 0x40
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a8ce:	e7b5      	b.n	800a83c <_strtod_l+0x6e4>
 800a8d0:	462a      	mov	r2, r5
 800a8d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a8d4:	9805      	ldr	r0, [sp, #20]
 800a8d6:	f001 fb97 	bl	800c008 <__lshift>
 800a8da:	901a      	str	r0, [sp, #104]	@ 0x68
 800a8dc:	2800      	cmp	r0, #0
 800a8de:	d1d9      	bne.n	800a894 <_strtod_l+0x73c>
 800a8e0:	e655      	b.n	800a58e <_strtod_l+0x436>
 800a8e2:	2e00      	cmp	r6, #0
 800a8e4:	dd07      	ble.n	800a8f6 <_strtod_l+0x79e>
 800a8e6:	4649      	mov	r1, r9
 800a8e8:	4632      	mov	r2, r6
 800a8ea:	9805      	ldr	r0, [sp, #20]
 800a8ec:	f001 fb8c 	bl	800c008 <__lshift>
 800a8f0:	4681      	mov	r9, r0
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	d0d8      	beq.n	800a8a8 <_strtod_l+0x750>
 800a8f6:	2f00      	cmp	r7, #0
 800a8f8:	dd08      	ble.n	800a90c <_strtod_l+0x7b4>
 800a8fa:	4641      	mov	r1, r8
 800a8fc:	463a      	mov	r2, r7
 800a8fe:	9805      	ldr	r0, [sp, #20]
 800a900:	f001 fb82 	bl	800c008 <__lshift>
 800a904:	4680      	mov	r8, r0
 800a906:	2800      	cmp	r0, #0
 800a908:	f43f ae41 	beq.w	800a58e <_strtod_l+0x436>
 800a90c:	464a      	mov	r2, r9
 800a90e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a910:	9805      	ldr	r0, [sp, #20]
 800a912:	f001 fc01 	bl	800c118 <__mdiff>
 800a916:	4604      	mov	r4, r0
 800a918:	2800      	cmp	r0, #0
 800a91a:	f43f ae38 	beq.w	800a58e <_strtod_l+0x436>
 800a91e:	68c3      	ldr	r3, [r0, #12]
 800a920:	4641      	mov	r1, r8
 800a922:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a924:	2300      	movs	r3, #0
 800a926:	60c3      	str	r3, [r0, #12]
 800a928:	f001 fbda 	bl	800c0e0 <__mcmp>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	da45      	bge.n	800a9bc <_strtod_l+0x864>
 800a930:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a932:	ea53 030a 	orrs.w	r3, r3, sl
 800a936:	d16b      	bne.n	800aa10 <_strtod_l+0x8b8>
 800a938:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d167      	bne.n	800aa10 <_strtod_l+0x8b8>
 800a940:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a944:	0d1b      	lsrs	r3, r3, #20
 800a946:	051b      	lsls	r3, r3, #20
 800a948:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a94c:	d960      	bls.n	800aa10 <_strtod_l+0x8b8>
 800a94e:	6963      	ldr	r3, [r4, #20]
 800a950:	b913      	cbnz	r3, 800a958 <_strtod_l+0x800>
 800a952:	6923      	ldr	r3, [r4, #16]
 800a954:	2b01      	cmp	r3, #1
 800a956:	dd5b      	ble.n	800aa10 <_strtod_l+0x8b8>
 800a958:	4621      	mov	r1, r4
 800a95a:	2201      	movs	r2, #1
 800a95c:	9805      	ldr	r0, [sp, #20]
 800a95e:	f001 fb53 	bl	800c008 <__lshift>
 800a962:	4641      	mov	r1, r8
 800a964:	4604      	mov	r4, r0
 800a966:	f001 fbbb 	bl	800c0e0 <__mcmp>
 800a96a:	2800      	cmp	r0, #0
 800a96c:	dd50      	ble.n	800aa10 <_strtod_l+0x8b8>
 800a96e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a972:	9a08      	ldr	r2, [sp, #32]
 800a974:	0d1b      	lsrs	r3, r3, #20
 800a976:	051b      	lsls	r3, r3, #20
 800a978:	2a00      	cmp	r2, #0
 800a97a:	d06a      	beq.n	800aa52 <_strtod_l+0x8fa>
 800a97c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a980:	d867      	bhi.n	800aa52 <_strtod_l+0x8fa>
 800a982:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a986:	f67f ae98 	bls.w	800a6ba <_strtod_l+0x562>
 800a98a:	4650      	mov	r0, sl
 800a98c:	4659      	mov	r1, fp
 800a98e:	4b09      	ldr	r3, [pc, #36]	@ (800a9b4 <_strtod_l+0x85c>)
 800a990:	2200      	movs	r2, #0
 800a992:	f7f5 fda3 	bl	80004dc <__aeabi_dmul>
 800a996:	4b08      	ldr	r3, [pc, #32]	@ (800a9b8 <_strtod_l+0x860>)
 800a998:	4682      	mov	sl, r0
 800a99a:	400b      	ands	r3, r1
 800a99c:	468b      	mov	fp, r1
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	f47f ae00 	bne.w	800a5a4 <_strtod_l+0x44c>
 800a9a4:	2322      	movs	r3, #34	@ 0x22
 800a9a6:	9a05      	ldr	r2, [sp, #20]
 800a9a8:	6013      	str	r3, [r2, #0]
 800a9aa:	e5fb      	b.n	800a5a4 <_strtod_l+0x44c>
 800a9ac:	0800d518 	.word	0x0800d518
 800a9b0:	fffffc02 	.word	0xfffffc02
 800a9b4:	39500000 	.word	0x39500000
 800a9b8:	7ff00000 	.word	0x7ff00000
 800a9bc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800a9c0:	d165      	bne.n	800aa8e <_strtod_l+0x936>
 800a9c2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a9c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a9c8:	b35a      	cbz	r2, 800aa22 <_strtod_l+0x8ca>
 800a9ca:	4a99      	ldr	r2, [pc, #612]	@ (800ac30 <_strtod_l+0xad8>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d12b      	bne.n	800aa28 <_strtod_l+0x8d0>
 800a9d0:	9b08      	ldr	r3, [sp, #32]
 800a9d2:	4651      	mov	r1, sl
 800a9d4:	b303      	cbz	r3, 800aa18 <_strtod_l+0x8c0>
 800a9d6:	465a      	mov	r2, fp
 800a9d8:	4b96      	ldr	r3, [pc, #600]	@ (800ac34 <_strtod_l+0xadc>)
 800a9da:	4013      	ands	r3, r2
 800a9dc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a9e0:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e4:	d81b      	bhi.n	800aa1e <_strtod_l+0x8c6>
 800a9e6:	0d1b      	lsrs	r3, r3, #20
 800a9e8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a9ec:	fa02 f303 	lsl.w	r3, r2, r3
 800a9f0:	4299      	cmp	r1, r3
 800a9f2:	d119      	bne.n	800aa28 <_strtod_l+0x8d0>
 800a9f4:	4b90      	ldr	r3, [pc, #576]	@ (800ac38 <_strtod_l+0xae0>)
 800a9f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d102      	bne.n	800aa02 <_strtod_l+0x8aa>
 800a9fc:	3101      	adds	r1, #1
 800a9fe:	f43f adc6 	beq.w	800a58e <_strtod_l+0x436>
 800aa02:	f04f 0a00 	mov.w	sl, #0
 800aa06:	4b8b      	ldr	r3, [pc, #556]	@ (800ac34 <_strtod_l+0xadc>)
 800aa08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa0a:	401a      	ands	r2, r3
 800aa0c:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800aa10:	9b08      	ldr	r3, [sp, #32]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d1b9      	bne.n	800a98a <_strtod_l+0x832>
 800aa16:	e5c5      	b.n	800a5a4 <_strtod_l+0x44c>
 800aa18:	f04f 33ff 	mov.w	r3, #4294967295
 800aa1c:	e7e8      	b.n	800a9f0 <_strtod_l+0x898>
 800aa1e:	4613      	mov	r3, r2
 800aa20:	e7e6      	b.n	800a9f0 <_strtod_l+0x898>
 800aa22:	ea53 030a 	orrs.w	r3, r3, sl
 800aa26:	d0a2      	beq.n	800a96e <_strtod_l+0x816>
 800aa28:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800aa2a:	b1db      	cbz	r3, 800aa64 <_strtod_l+0x90c>
 800aa2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800aa2e:	4213      	tst	r3, r2
 800aa30:	d0ee      	beq.n	800aa10 <_strtod_l+0x8b8>
 800aa32:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aa34:	4650      	mov	r0, sl
 800aa36:	4659      	mov	r1, fp
 800aa38:	9a08      	ldr	r2, [sp, #32]
 800aa3a:	b1bb      	cbz	r3, 800aa6c <_strtod_l+0x914>
 800aa3c:	f7ff fb6b 	bl	800a116 <sulp>
 800aa40:	4602      	mov	r2, r0
 800aa42:	460b      	mov	r3, r1
 800aa44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa48:	f7f5 fb92 	bl	8000170 <__adddf3>
 800aa4c:	4682      	mov	sl, r0
 800aa4e:	468b      	mov	fp, r1
 800aa50:	e7de      	b.n	800aa10 <_strtod_l+0x8b8>
 800aa52:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800aa56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800aa5a:	f04f 3aff 	mov.w	sl, #4294967295
 800aa5e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aa62:	e7d5      	b.n	800aa10 <_strtod_l+0x8b8>
 800aa64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800aa66:	ea13 0f0a 	tst.w	r3, sl
 800aa6a:	e7e1      	b.n	800aa30 <_strtod_l+0x8d8>
 800aa6c:	f7ff fb53 	bl	800a116 <sulp>
 800aa70:	4602      	mov	r2, r0
 800aa72:	460b      	mov	r3, r1
 800aa74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aa78:	f7f5 fb78 	bl	800016c <__aeabi_dsub>
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	2300      	movs	r3, #0
 800aa80:	4682      	mov	sl, r0
 800aa82:	468b      	mov	fp, r1
 800aa84:	f7f5 ff92 	bl	80009ac <__aeabi_dcmpeq>
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	d0c1      	beq.n	800aa10 <_strtod_l+0x8b8>
 800aa8c:	e615      	b.n	800a6ba <_strtod_l+0x562>
 800aa8e:	4641      	mov	r1, r8
 800aa90:	4620      	mov	r0, r4
 800aa92:	f001 fc95 	bl	800c3c0 <__ratio>
 800aa96:	2200      	movs	r2, #0
 800aa98:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800aa9c:	4606      	mov	r6, r0
 800aa9e:	460f      	mov	r7, r1
 800aaa0:	f7f5 ff98 	bl	80009d4 <__aeabi_dcmple>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	d06d      	beq.n	800ab84 <_strtod_l+0xa2c>
 800aaa8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d178      	bne.n	800aba0 <_strtod_l+0xa48>
 800aaae:	f1ba 0f00 	cmp.w	sl, #0
 800aab2:	d156      	bne.n	800ab62 <_strtod_l+0xa0a>
 800aab4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aab6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d158      	bne.n	800ab70 <_strtod_l+0xa18>
 800aabe:	2200      	movs	r2, #0
 800aac0:	4630      	mov	r0, r6
 800aac2:	4639      	mov	r1, r7
 800aac4:	4b5d      	ldr	r3, [pc, #372]	@ (800ac3c <_strtod_l+0xae4>)
 800aac6:	f7f5 ff7b 	bl	80009c0 <__aeabi_dcmplt>
 800aaca:	2800      	cmp	r0, #0
 800aacc:	d157      	bne.n	800ab7e <_strtod_l+0xa26>
 800aace:	4630      	mov	r0, r6
 800aad0:	4639      	mov	r1, r7
 800aad2:	2200      	movs	r2, #0
 800aad4:	4b5a      	ldr	r3, [pc, #360]	@ (800ac40 <_strtod_l+0xae8>)
 800aad6:	f7f5 fd01 	bl	80004dc <__aeabi_dmul>
 800aada:	4606      	mov	r6, r0
 800aadc:	460f      	mov	r7, r1
 800aade:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800aae2:	9606      	str	r6, [sp, #24]
 800aae4:	9307      	str	r3, [sp, #28]
 800aae6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aaea:	4d52      	ldr	r5, [pc, #328]	@ (800ac34 <_strtod_l+0xadc>)
 800aaec:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800aaf0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aaf2:	401d      	ands	r5, r3
 800aaf4:	4b53      	ldr	r3, [pc, #332]	@ (800ac44 <_strtod_l+0xaec>)
 800aaf6:	429d      	cmp	r5, r3
 800aaf8:	f040 80aa 	bne.w	800ac50 <_strtod_l+0xaf8>
 800aafc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800aafe:	4650      	mov	r0, sl
 800ab00:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800ab04:	4659      	mov	r1, fp
 800ab06:	f001 fb9b 	bl	800c240 <__ulp>
 800ab0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ab0e:	f7f5 fce5 	bl	80004dc <__aeabi_dmul>
 800ab12:	4652      	mov	r2, sl
 800ab14:	465b      	mov	r3, fp
 800ab16:	f7f5 fb2b 	bl	8000170 <__adddf3>
 800ab1a:	460b      	mov	r3, r1
 800ab1c:	4945      	ldr	r1, [pc, #276]	@ (800ac34 <_strtod_l+0xadc>)
 800ab1e:	4a4a      	ldr	r2, [pc, #296]	@ (800ac48 <_strtod_l+0xaf0>)
 800ab20:	4019      	ands	r1, r3
 800ab22:	4291      	cmp	r1, r2
 800ab24:	4682      	mov	sl, r0
 800ab26:	d942      	bls.n	800abae <_strtod_l+0xa56>
 800ab28:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ab2a:	4b43      	ldr	r3, [pc, #268]	@ (800ac38 <_strtod_l+0xae0>)
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d103      	bne.n	800ab38 <_strtod_l+0x9e0>
 800ab30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ab32:	3301      	adds	r3, #1
 800ab34:	f43f ad2b 	beq.w	800a58e <_strtod_l+0x436>
 800ab38:	f04f 3aff 	mov.w	sl, #4294967295
 800ab3c:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 800ac38 <_strtod_l+0xae0>
 800ab40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ab42:	9805      	ldr	r0, [sp, #20]
 800ab44:	f001 f84a 	bl	800bbdc <_Bfree>
 800ab48:	4649      	mov	r1, r9
 800ab4a:	9805      	ldr	r0, [sp, #20]
 800ab4c:	f001 f846 	bl	800bbdc <_Bfree>
 800ab50:	4641      	mov	r1, r8
 800ab52:	9805      	ldr	r0, [sp, #20]
 800ab54:	f001 f842 	bl	800bbdc <_Bfree>
 800ab58:	4621      	mov	r1, r4
 800ab5a:	9805      	ldr	r0, [sp, #20]
 800ab5c:	f001 f83e 	bl	800bbdc <_Bfree>
 800ab60:	e618      	b.n	800a794 <_strtod_l+0x63c>
 800ab62:	f1ba 0f01 	cmp.w	sl, #1
 800ab66:	d103      	bne.n	800ab70 <_strtod_l+0xa18>
 800ab68:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f43f ada5 	beq.w	800a6ba <_strtod_l+0x562>
 800ab70:	2200      	movs	r2, #0
 800ab72:	4b36      	ldr	r3, [pc, #216]	@ (800ac4c <_strtod_l+0xaf4>)
 800ab74:	2600      	movs	r6, #0
 800ab76:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ab7a:	4f30      	ldr	r7, [pc, #192]	@ (800ac3c <_strtod_l+0xae4>)
 800ab7c:	e7b3      	b.n	800aae6 <_strtod_l+0x98e>
 800ab7e:	2600      	movs	r6, #0
 800ab80:	4f2f      	ldr	r7, [pc, #188]	@ (800ac40 <_strtod_l+0xae8>)
 800ab82:	e7ac      	b.n	800aade <_strtod_l+0x986>
 800ab84:	4630      	mov	r0, r6
 800ab86:	4639      	mov	r1, r7
 800ab88:	4b2d      	ldr	r3, [pc, #180]	@ (800ac40 <_strtod_l+0xae8>)
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f7f5 fca6 	bl	80004dc <__aeabi_dmul>
 800ab90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab92:	4606      	mov	r6, r0
 800ab94:	460f      	mov	r7, r1
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d0a1      	beq.n	800aade <_strtod_l+0x986>
 800ab9a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800ab9e:	e7a2      	b.n	800aae6 <_strtod_l+0x98e>
 800aba0:	2200      	movs	r2, #0
 800aba2:	4b26      	ldr	r3, [pc, #152]	@ (800ac3c <_strtod_l+0xae4>)
 800aba4:	4616      	mov	r6, r2
 800aba6:	461f      	mov	r7, r3
 800aba8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800abac:	e79b      	b.n	800aae6 <_strtod_l+0x98e>
 800abae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800abb2:	9b08      	ldr	r3, [sp, #32]
 800abb4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d1c1      	bne.n	800ab40 <_strtod_l+0x9e8>
 800abbc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800abc0:	0d1b      	lsrs	r3, r3, #20
 800abc2:	051b      	lsls	r3, r3, #20
 800abc4:	429d      	cmp	r5, r3
 800abc6:	d1bb      	bne.n	800ab40 <_strtod_l+0x9e8>
 800abc8:	4630      	mov	r0, r6
 800abca:	4639      	mov	r1, r7
 800abcc:	f7f6 f832 	bl	8000c34 <__aeabi_d2lz>
 800abd0:	f7f5 fc56 	bl	8000480 <__aeabi_l2d>
 800abd4:	4602      	mov	r2, r0
 800abd6:	460b      	mov	r3, r1
 800abd8:	4630      	mov	r0, r6
 800abda:	4639      	mov	r1, r7
 800abdc:	f7f5 fac6 	bl	800016c <__aeabi_dsub>
 800abe0:	460b      	mov	r3, r1
 800abe2:	4602      	mov	r2, r0
 800abe4:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800abe8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800abec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800abee:	ea46 060a 	orr.w	r6, r6, sl
 800abf2:	431e      	orrs	r6, r3
 800abf4:	d069      	beq.n	800acca <_strtod_l+0xb72>
 800abf6:	a30a      	add	r3, pc, #40	@ (adr r3, 800ac20 <_strtod_l+0xac8>)
 800abf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abfc:	f7f5 fee0 	bl	80009c0 <__aeabi_dcmplt>
 800ac00:	2800      	cmp	r0, #0
 800ac02:	f47f accf 	bne.w	800a5a4 <_strtod_l+0x44c>
 800ac06:	a308      	add	r3, pc, #32	@ (adr r3, 800ac28 <_strtod_l+0xad0>)
 800ac08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ac10:	f7f5 fef4 	bl	80009fc <__aeabi_dcmpgt>
 800ac14:	2800      	cmp	r0, #0
 800ac16:	d093      	beq.n	800ab40 <_strtod_l+0x9e8>
 800ac18:	e4c4      	b.n	800a5a4 <_strtod_l+0x44c>
 800ac1a:	bf00      	nop
 800ac1c:	f3af 8000 	nop.w
 800ac20:	94a03595 	.word	0x94a03595
 800ac24:	3fdfffff 	.word	0x3fdfffff
 800ac28:	35afe535 	.word	0x35afe535
 800ac2c:	3fe00000 	.word	0x3fe00000
 800ac30:	000fffff 	.word	0x000fffff
 800ac34:	7ff00000 	.word	0x7ff00000
 800ac38:	7fefffff 	.word	0x7fefffff
 800ac3c:	3ff00000 	.word	0x3ff00000
 800ac40:	3fe00000 	.word	0x3fe00000
 800ac44:	7fe00000 	.word	0x7fe00000
 800ac48:	7c9fffff 	.word	0x7c9fffff
 800ac4c:	bff00000 	.word	0xbff00000
 800ac50:	9b08      	ldr	r3, [sp, #32]
 800ac52:	b323      	cbz	r3, 800ac9e <_strtod_l+0xb46>
 800ac54:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800ac58:	d821      	bhi.n	800ac9e <_strtod_l+0xb46>
 800ac5a:	a327      	add	r3, pc, #156	@ (adr r3, 800acf8 <_strtod_l+0xba0>)
 800ac5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac60:	4630      	mov	r0, r6
 800ac62:	4639      	mov	r1, r7
 800ac64:	f7f5 feb6 	bl	80009d4 <__aeabi_dcmple>
 800ac68:	b1a0      	cbz	r0, 800ac94 <_strtod_l+0xb3c>
 800ac6a:	4639      	mov	r1, r7
 800ac6c:	4630      	mov	r0, r6
 800ac6e:	f7f5 fee5 	bl	8000a3c <__aeabi_d2uiz>
 800ac72:	2801      	cmp	r0, #1
 800ac74:	bf38      	it	cc
 800ac76:	2001      	movcc	r0, #1
 800ac78:	f7f5 fbb6 	bl	80003e8 <__aeabi_ui2d>
 800ac7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ac7e:	4606      	mov	r6, r0
 800ac80:	460f      	mov	r7, r1
 800ac82:	b9fb      	cbnz	r3, 800acc4 <_strtod_l+0xb6c>
 800ac84:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ac88:	9014      	str	r0, [sp, #80]	@ 0x50
 800ac8a:	9315      	str	r3, [sp, #84]	@ 0x54
 800ac8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ac90:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ac94:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ac96:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ac9a:	1b5b      	subs	r3, r3, r5
 800ac9c:	9311      	str	r3, [sp, #68]	@ 0x44
 800ac9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aca2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800aca6:	f001 facb 	bl	800c240 <__ulp>
 800acaa:	4602      	mov	r2, r0
 800acac:	460b      	mov	r3, r1
 800acae:	4650      	mov	r0, sl
 800acb0:	4659      	mov	r1, fp
 800acb2:	f7f5 fc13 	bl	80004dc <__aeabi_dmul>
 800acb6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800acba:	f7f5 fa59 	bl	8000170 <__adddf3>
 800acbe:	4682      	mov	sl, r0
 800acc0:	468b      	mov	fp, r1
 800acc2:	e776      	b.n	800abb2 <_strtod_l+0xa5a>
 800acc4:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800acc8:	e7e0      	b.n	800ac8c <_strtod_l+0xb34>
 800acca:	a30d      	add	r3, pc, #52	@ (adr r3, 800ad00 <_strtod_l+0xba8>)
 800accc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acd0:	f7f5 fe76 	bl	80009c0 <__aeabi_dcmplt>
 800acd4:	e79e      	b.n	800ac14 <_strtod_l+0xabc>
 800acd6:	2300      	movs	r3, #0
 800acd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800acda:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800acdc:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800acde:	6013      	str	r3, [r2, #0]
 800ace0:	f7ff ba77 	b.w	800a1d2 <_strtod_l+0x7a>
 800ace4:	2a65      	cmp	r2, #101	@ 0x65
 800ace6:	f43f ab6e 	beq.w	800a3c6 <_strtod_l+0x26e>
 800acea:	2a45      	cmp	r2, #69	@ 0x45
 800acec:	f43f ab6b 	beq.w	800a3c6 <_strtod_l+0x26e>
 800acf0:	2301      	movs	r3, #1
 800acf2:	f7ff bba6 	b.w	800a442 <_strtod_l+0x2ea>
 800acf6:	bf00      	nop
 800acf8:	ffc00000 	.word	0xffc00000
 800acfc:	41dfffff 	.word	0x41dfffff
 800ad00:	94a03595 	.word	0x94a03595
 800ad04:	3fcfffff 	.word	0x3fcfffff

0800ad08 <strtof>:
 800ad08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad0c:	4d24      	ldr	r5, [pc, #144]	@ (800ada0 <strtof+0x98>)
 800ad0e:	460a      	mov	r2, r1
 800ad10:	4b24      	ldr	r3, [pc, #144]	@ (800ada4 <strtof+0x9c>)
 800ad12:	4601      	mov	r1, r0
 800ad14:	6828      	ldr	r0, [r5, #0]
 800ad16:	f7ff fa1f 	bl	800a158 <_strtod_l>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	4606      	mov	r6, r0
 800ad20:	460f      	mov	r7, r1
 800ad22:	f7f5 fe75 	bl	8000a10 <__aeabi_dcmpun>
 800ad26:	b168      	cbz	r0, 800ad44 <strtof+0x3c>
 800ad28:	2f00      	cmp	r7, #0
 800ad2a:	481f      	ldr	r0, [pc, #124]	@ (800ada8 <strtof+0xa0>)
 800ad2c:	da06      	bge.n	800ad3c <strtof+0x34>
 800ad2e:	f000 facf 	bl	800b2d0 <nanf>
 800ad32:	f100 4400 	add.w	r4, r0, #2147483648	@ 0x80000000
 800ad36:	4620      	mov	r0, r4
 800ad38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad3c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad40:	f000 bac6 	b.w	800b2d0 <nanf>
 800ad44:	4639      	mov	r1, r7
 800ad46:	4630      	mov	r0, r6
 800ad48:	f7f5 fe98 	bl	8000a7c <__aeabi_d2f>
 800ad4c:	f020 4800 	bic.w	r8, r0, #2147483648	@ 0x80000000
 800ad50:	4604      	mov	r4, r0
 800ad52:	4916      	ldr	r1, [pc, #88]	@ (800adac <strtof+0xa4>)
 800ad54:	4640      	mov	r0, r8
 800ad56:	f7f5 ff57 	bl	8000c08 <__aeabi_fcmpun>
 800ad5a:	b9b0      	cbnz	r0, 800ad8a <strtof+0x82>
 800ad5c:	4640      	mov	r0, r8
 800ad5e:	4913      	ldr	r1, [pc, #76]	@ (800adac <strtof+0xa4>)
 800ad60:	f7f5 ff34 	bl	8000bcc <__aeabi_fcmple>
 800ad64:	b988      	cbnz	r0, 800ad8a <strtof+0x82>
 800ad66:	f027 4900 	bic.w	r9, r7, #2147483648	@ 0x80000000
 800ad6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad6e:	4630      	mov	r0, r6
 800ad70:	4649      	mov	r1, r9
 800ad72:	4b0f      	ldr	r3, [pc, #60]	@ (800adb0 <strtof+0xa8>)
 800ad74:	f7f5 fe4c 	bl	8000a10 <__aeabi_dcmpun>
 800ad78:	b970      	cbnz	r0, 800ad98 <strtof+0x90>
 800ad7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad7e:	4630      	mov	r0, r6
 800ad80:	4649      	mov	r1, r9
 800ad82:	4b0b      	ldr	r3, [pc, #44]	@ (800adb0 <strtof+0xa8>)
 800ad84:	f7f5 fe26 	bl	80009d4 <__aeabi_dcmple>
 800ad88:	b930      	cbnz	r0, 800ad98 <strtof+0x90>
 800ad8a:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800ad8e:	d1d2      	bne.n	800ad36 <strtof+0x2e>
 800ad90:	4b08      	ldr	r3, [pc, #32]	@ (800adb4 <strtof+0xac>)
 800ad92:	403b      	ands	r3, r7
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d0ce      	beq.n	800ad36 <strtof+0x2e>
 800ad98:	2222      	movs	r2, #34	@ 0x22
 800ad9a:	682b      	ldr	r3, [r5, #0]
 800ad9c:	601a      	str	r2, [r3, #0]
 800ad9e:	e7ca      	b.n	800ad36 <strtof+0x2e>
 800ada0:	20000194 	.word	0x20000194
 800ada4:	20000028 	.word	0x20000028
 800ada8:	0800d896 	.word	0x0800d896
 800adac:	7f7fffff 	.word	0x7f7fffff
 800adb0:	7fefffff 	.word	0x7fefffff
 800adb4:	7ff00000 	.word	0x7ff00000

0800adb8 <_strtoul_l.constprop.0>:
 800adb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800adbc:	4686      	mov	lr, r0
 800adbe:	460d      	mov	r5, r1
 800adc0:	4e33      	ldr	r6, [pc, #204]	@ (800ae90 <_strtoul_l.constprop.0+0xd8>)
 800adc2:	4628      	mov	r0, r5
 800adc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adc8:	5d37      	ldrb	r7, [r6, r4]
 800adca:	f017 0708 	ands.w	r7, r7, #8
 800adce:	d1f8      	bne.n	800adc2 <_strtoul_l.constprop.0+0xa>
 800add0:	2c2d      	cmp	r4, #45	@ 0x2d
 800add2:	d12f      	bne.n	800ae34 <_strtoul_l.constprop.0+0x7c>
 800add4:	2701      	movs	r7, #1
 800add6:	782c      	ldrb	r4, [r5, #0]
 800add8:	1c85      	adds	r5, r0, #2
 800adda:	f033 0010 	bics.w	r0, r3, #16
 800adde:	d109      	bne.n	800adf4 <_strtoul_l.constprop.0+0x3c>
 800ade0:	2c30      	cmp	r4, #48	@ 0x30
 800ade2:	d12c      	bne.n	800ae3e <_strtoul_l.constprop.0+0x86>
 800ade4:	7828      	ldrb	r0, [r5, #0]
 800ade6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800adea:	2858      	cmp	r0, #88	@ 0x58
 800adec:	d127      	bne.n	800ae3e <_strtoul_l.constprop.0+0x86>
 800adee:	2310      	movs	r3, #16
 800adf0:	786c      	ldrb	r4, [r5, #1]
 800adf2:	3502      	adds	r5, #2
 800adf4:	f04f 38ff 	mov.w	r8, #4294967295
 800adf8:	fbb8 f8f3 	udiv	r8, r8, r3
 800adfc:	2600      	movs	r6, #0
 800adfe:	fb03 f908 	mul.w	r9, r3, r8
 800ae02:	4630      	mov	r0, r6
 800ae04:	ea6f 0909 	mvn.w	r9, r9
 800ae08:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800ae0c:	f1bc 0f09 	cmp.w	ip, #9
 800ae10:	d81c      	bhi.n	800ae4c <_strtoul_l.constprop.0+0x94>
 800ae12:	4664      	mov	r4, ip
 800ae14:	42a3      	cmp	r3, r4
 800ae16:	dd2a      	ble.n	800ae6e <_strtoul_l.constprop.0+0xb6>
 800ae18:	f1b6 3fff 	cmp.w	r6, #4294967295
 800ae1c:	d007      	beq.n	800ae2e <_strtoul_l.constprop.0+0x76>
 800ae1e:	4580      	cmp	r8, r0
 800ae20:	d322      	bcc.n	800ae68 <_strtoul_l.constprop.0+0xb0>
 800ae22:	d101      	bne.n	800ae28 <_strtoul_l.constprop.0+0x70>
 800ae24:	45a1      	cmp	r9, r4
 800ae26:	db1f      	blt.n	800ae68 <_strtoul_l.constprop.0+0xb0>
 800ae28:	2601      	movs	r6, #1
 800ae2a:	fb00 4003 	mla	r0, r0, r3, r4
 800ae2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ae32:	e7e9      	b.n	800ae08 <_strtoul_l.constprop.0+0x50>
 800ae34:	2c2b      	cmp	r4, #43	@ 0x2b
 800ae36:	bf04      	itt	eq
 800ae38:	782c      	ldrbeq	r4, [r5, #0]
 800ae3a:	1c85      	addeq	r5, r0, #2
 800ae3c:	e7cd      	b.n	800adda <_strtoul_l.constprop.0+0x22>
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d1d8      	bne.n	800adf4 <_strtoul_l.constprop.0+0x3c>
 800ae42:	2c30      	cmp	r4, #48	@ 0x30
 800ae44:	bf0c      	ite	eq
 800ae46:	2308      	moveq	r3, #8
 800ae48:	230a      	movne	r3, #10
 800ae4a:	e7d3      	b.n	800adf4 <_strtoul_l.constprop.0+0x3c>
 800ae4c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ae50:	f1bc 0f19 	cmp.w	ip, #25
 800ae54:	d801      	bhi.n	800ae5a <_strtoul_l.constprop.0+0xa2>
 800ae56:	3c37      	subs	r4, #55	@ 0x37
 800ae58:	e7dc      	b.n	800ae14 <_strtoul_l.constprop.0+0x5c>
 800ae5a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ae5e:	f1bc 0f19 	cmp.w	ip, #25
 800ae62:	d804      	bhi.n	800ae6e <_strtoul_l.constprop.0+0xb6>
 800ae64:	3c57      	subs	r4, #87	@ 0x57
 800ae66:	e7d5      	b.n	800ae14 <_strtoul_l.constprop.0+0x5c>
 800ae68:	f04f 36ff 	mov.w	r6, #4294967295
 800ae6c:	e7df      	b.n	800ae2e <_strtoul_l.constprop.0+0x76>
 800ae6e:	1c73      	adds	r3, r6, #1
 800ae70:	d106      	bne.n	800ae80 <_strtoul_l.constprop.0+0xc8>
 800ae72:	2322      	movs	r3, #34	@ 0x22
 800ae74:	4630      	mov	r0, r6
 800ae76:	f8ce 3000 	str.w	r3, [lr]
 800ae7a:	b932      	cbnz	r2, 800ae8a <_strtoul_l.constprop.0+0xd2>
 800ae7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae80:	b107      	cbz	r7, 800ae84 <_strtoul_l.constprop.0+0xcc>
 800ae82:	4240      	negs	r0, r0
 800ae84:	2a00      	cmp	r2, #0
 800ae86:	d0f9      	beq.n	800ae7c <_strtoul_l.constprop.0+0xc4>
 800ae88:	b106      	cbz	r6, 800ae8c <_strtoul_l.constprop.0+0xd4>
 800ae8a:	1e69      	subs	r1, r5, #1
 800ae8c:	6011      	str	r1, [r2, #0]
 800ae8e:	e7f5      	b.n	800ae7c <_strtoul_l.constprop.0+0xc4>
 800ae90:	0800d541 	.word	0x0800d541

0800ae94 <strtoul>:
 800ae94:	4613      	mov	r3, r2
 800ae96:	460a      	mov	r2, r1
 800ae98:	4601      	mov	r1, r0
 800ae9a:	4802      	ldr	r0, [pc, #8]	@ (800aea4 <strtoul+0x10>)
 800ae9c:	6800      	ldr	r0, [r0, #0]
 800ae9e:	f7ff bf8b 	b.w	800adb8 <_strtoul_l.constprop.0>
 800aea2:	bf00      	nop
 800aea4:	20000194 	.word	0x20000194

0800aea8 <std>:
 800aea8:	2300      	movs	r3, #0
 800aeaa:	b510      	push	{r4, lr}
 800aeac:	4604      	mov	r4, r0
 800aeae:	e9c0 3300 	strd	r3, r3, [r0]
 800aeb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aeb6:	6083      	str	r3, [r0, #8]
 800aeb8:	8181      	strh	r1, [r0, #12]
 800aeba:	6643      	str	r3, [r0, #100]	@ 0x64
 800aebc:	81c2      	strh	r2, [r0, #14]
 800aebe:	6183      	str	r3, [r0, #24]
 800aec0:	4619      	mov	r1, r3
 800aec2:	2208      	movs	r2, #8
 800aec4:	305c      	adds	r0, #92	@ 0x5c
 800aec6:	f000 f92d 	bl	800b124 <memset>
 800aeca:	4b0d      	ldr	r3, [pc, #52]	@ (800af00 <std+0x58>)
 800aecc:	6224      	str	r4, [r4, #32]
 800aece:	6263      	str	r3, [r4, #36]	@ 0x24
 800aed0:	4b0c      	ldr	r3, [pc, #48]	@ (800af04 <std+0x5c>)
 800aed2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aed4:	4b0c      	ldr	r3, [pc, #48]	@ (800af08 <std+0x60>)
 800aed6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aed8:	4b0c      	ldr	r3, [pc, #48]	@ (800af0c <std+0x64>)
 800aeda:	6323      	str	r3, [r4, #48]	@ 0x30
 800aedc:	4b0c      	ldr	r3, [pc, #48]	@ (800af10 <std+0x68>)
 800aede:	429c      	cmp	r4, r3
 800aee0:	d006      	beq.n	800aef0 <std+0x48>
 800aee2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aee6:	4294      	cmp	r4, r2
 800aee8:	d002      	beq.n	800aef0 <std+0x48>
 800aeea:	33d0      	adds	r3, #208	@ 0xd0
 800aeec:	429c      	cmp	r4, r3
 800aeee:	d105      	bne.n	800aefc <std+0x54>
 800aef0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aef8:	f000 b9ca 	b.w	800b290 <__retarget_lock_init_recursive>
 800aefc:	bd10      	pop	{r4, pc}
 800aefe:	bf00      	nop
 800af00:	0800b02d 	.word	0x0800b02d
 800af04:	0800b04f 	.word	0x0800b04f
 800af08:	0800b087 	.word	0x0800b087
 800af0c:	0800b0ab 	.word	0x0800b0ab
 800af10:	200013d0 	.word	0x200013d0

0800af14 <stdio_exit_handler>:
 800af14:	4a02      	ldr	r2, [pc, #8]	@ (800af20 <stdio_exit_handler+0xc>)
 800af16:	4903      	ldr	r1, [pc, #12]	@ (800af24 <stdio_exit_handler+0x10>)
 800af18:	4803      	ldr	r0, [pc, #12]	@ (800af28 <stdio_exit_handler+0x14>)
 800af1a:	f000 b869 	b.w	800aff0 <_fwalk_sglue>
 800af1e:	bf00      	nop
 800af20:	2000001c 	.word	0x2000001c
 800af24:	0800cb95 	.word	0x0800cb95
 800af28:	20000198 	.word	0x20000198

0800af2c <cleanup_stdio>:
 800af2c:	6841      	ldr	r1, [r0, #4]
 800af2e:	4b0c      	ldr	r3, [pc, #48]	@ (800af60 <cleanup_stdio+0x34>)
 800af30:	b510      	push	{r4, lr}
 800af32:	4299      	cmp	r1, r3
 800af34:	4604      	mov	r4, r0
 800af36:	d001      	beq.n	800af3c <cleanup_stdio+0x10>
 800af38:	f001 fe2c 	bl	800cb94 <_fflush_r>
 800af3c:	68a1      	ldr	r1, [r4, #8]
 800af3e:	4b09      	ldr	r3, [pc, #36]	@ (800af64 <cleanup_stdio+0x38>)
 800af40:	4299      	cmp	r1, r3
 800af42:	d002      	beq.n	800af4a <cleanup_stdio+0x1e>
 800af44:	4620      	mov	r0, r4
 800af46:	f001 fe25 	bl	800cb94 <_fflush_r>
 800af4a:	68e1      	ldr	r1, [r4, #12]
 800af4c:	4b06      	ldr	r3, [pc, #24]	@ (800af68 <cleanup_stdio+0x3c>)
 800af4e:	4299      	cmp	r1, r3
 800af50:	d004      	beq.n	800af5c <cleanup_stdio+0x30>
 800af52:	4620      	mov	r0, r4
 800af54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af58:	f001 be1c 	b.w	800cb94 <_fflush_r>
 800af5c:	bd10      	pop	{r4, pc}
 800af5e:	bf00      	nop
 800af60:	200013d0 	.word	0x200013d0
 800af64:	20001438 	.word	0x20001438
 800af68:	200014a0 	.word	0x200014a0

0800af6c <global_stdio_init.part.0>:
 800af6c:	b510      	push	{r4, lr}
 800af6e:	4b0b      	ldr	r3, [pc, #44]	@ (800af9c <global_stdio_init.part.0+0x30>)
 800af70:	4c0b      	ldr	r4, [pc, #44]	@ (800afa0 <global_stdio_init.part.0+0x34>)
 800af72:	4a0c      	ldr	r2, [pc, #48]	@ (800afa4 <global_stdio_init.part.0+0x38>)
 800af74:	4620      	mov	r0, r4
 800af76:	601a      	str	r2, [r3, #0]
 800af78:	2104      	movs	r1, #4
 800af7a:	2200      	movs	r2, #0
 800af7c:	f7ff ff94 	bl	800aea8 <std>
 800af80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800af84:	2201      	movs	r2, #1
 800af86:	2109      	movs	r1, #9
 800af88:	f7ff ff8e 	bl	800aea8 <std>
 800af8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800af90:	2202      	movs	r2, #2
 800af92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af96:	2112      	movs	r1, #18
 800af98:	f7ff bf86 	b.w	800aea8 <std>
 800af9c:	20001508 	.word	0x20001508
 800afa0:	200013d0 	.word	0x200013d0
 800afa4:	0800af15 	.word	0x0800af15

0800afa8 <__sfp_lock_acquire>:
 800afa8:	4801      	ldr	r0, [pc, #4]	@ (800afb0 <__sfp_lock_acquire+0x8>)
 800afaa:	f000 b972 	b.w	800b292 <__retarget_lock_acquire_recursive>
 800afae:	bf00      	nop
 800afb0:	20001511 	.word	0x20001511

0800afb4 <__sfp_lock_release>:
 800afb4:	4801      	ldr	r0, [pc, #4]	@ (800afbc <__sfp_lock_release+0x8>)
 800afb6:	f000 b96d 	b.w	800b294 <__retarget_lock_release_recursive>
 800afba:	bf00      	nop
 800afbc:	20001511 	.word	0x20001511

0800afc0 <__sinit>:
 800afc0:	b510      	push	{r4, lr}
 800afc2:	4604      	mov	r4, r0
 800afc4:	f7ff fff0 	bl	800afa8 <__sfp_lock_acquire>
 800afc8:	6a23      	ldr	r3, [r4, #32]
 800afca:	b11b      	cbz	r3, 800afd4 <__sinit+0x14>
 800afcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800afd0:	f7ff bff0 	b.w	800afb4 <__sfp_lock_release>
 800afd4:	4b04      	ldr	r3, [pc, #16]	@ (800afe8 <__sinit+0x28>)
 800afd6:	6223      	str	r3, [r4, #32]
 800afd8:	4b04      	ldr	r3, [pc, #16]	@ (800afec <__sinit+0x2c>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d1f5      	bne.n	800afcc <__sinit+0xc>
 800afe0:	f7ff ffc4 	bl	800af6c <global_stdio_init.part.0>
 800afe4:	e7f2      	b.n	800afcc <__sinit+0xc>
 800afe6:	bf00      	nop
 800afe8:	0800af2d 	.word	0x0800af2d
 800afec:	20001508 	.word	0x20001508

0800aff0 <_fwalk_sglue>:
 800aff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aff4:	4607      	mov	r7, r0
 800aff6:	4688      	mov	r8, r1
 800aff8:	4614      	mov	r4, r2
 800affa:	2600      	movs	r6, #0
 800affc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b000:	f1b9 0901 	subs.w	r9, r9, #1
 800b004:	d505      	bpl.n	800b012 <_fwalk_sglue+0x22>
 800b006:	6824      	ldr	r4, [r4, #0]
 800b008:	2c00      	cmp	r4, #0
 800b00a:	d1f7      	bne.n	800affc <_fwalk_sglue+0xc>
 800b00c:	4630      	mov	r0, r6
 800b00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b012:	89ab      	ldrh	r3, [r5, #12]
 800b014:	2b01      	cmp	r3, #1
 800b016:	d907      	bls.n	800b028 <_fwalk_sglue+0x38>
 800b018:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b01c:	3301      	adds	r3, #1
 800b01e:	d003      	beq.n	800b028 <_fwalk_sglue+0x38>
 800b020:	4629      	mov	r1, r5
 800b022:	4638      	mov	r0, r7
 800b024:	47c0      	blx	r8
 800b026:	4306      	orrs	r6, r0
 800b028:	3568      	adds	r5, #104	@ 0x68
 800b02a:	e7e9      	b.n	800b000 <_fwalk_sglue+0x10>

0800b02c <__sread>:
 800b02c:	b510      	push	{r4, lr}
 800b02e:	460c      	mov	r4, r1
 800b030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b034:	f000 f8de 	bl	800b1f4 <_read_r>
 800b038:	2800      	cmp	r0, #0
 800b03a:	bfab      	itete	ge
 800b03c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b03e:	89a3      	ldrhlt	r3, [r4, #12]
 800b040:	181b      	addge	r3, r3, r0
 800b042:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b046:	bfac      	ite	ge
 800b048:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b04a:	81a3      	strhlt	r3, [r4, #12]
 800b04c:	bd10      	pop	{r4, pc}

0800b04e <__swrite>:
 800b04e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b052:	461f      	mov	r7, r3
 800b054:	898b      	ldrh	r3, [r1, #12]
 800b056:	4605      	mov	r5, r0
 800b058:	05db      	lsls	r3, r3, #23
 800b05a:	460c      	mov	r4, r1
 800b05c:	4616      	mov	r6, r2
 800b05e:	d505      	bpl.n	800b06c <__swrite+0x1e>
 800b060:	2302      	movs	r3, #2
 800b062:	2200      	movs	r2, #0
 800b064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b068:	f000 f8b2 	bl	800b1d0 <_lseek_r>
 800b06c:	89a3      	ldrh	r3, [r4, #12]
 800b06e:	4632      	mov	r2, r6
 800b070:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b074:	81a3      	strh	r3, [r4, #12]
 800b076:	4628      	mov	r0, r5
 800b078:	463b      	mov	r3, r7
 800b07a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b07e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b082:	f000 b8c9 	b.w	800b218 <_write_r>

0800b086 <__sseek>:
 800b086:	b510      	push	{r4, lr}
 800b088:	460c      	mov	r4, r1
 800b08a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b08e:	f000 f89f 	bl	800b1d0 <_lseek_r>
 800b092:	1c43      	adds	r3, r0, #1
 800b094:	89a3      	ldrh	r3, [r4, #12]
 800b096:	bf15      	itete	ne
 800b098:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b09a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b09e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b0a2:	81a3      	strheq	r3, [r4, #12]
 800b0a4:	bf18      	it	ne
 800b0a6:	81a3      	strhne	r3, [r4, #12]
 800b0a8:	bd10      	pop	{r4, pc}

0800b0aa <__sclose>:
 800b0aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0ae:	f000 b87f 	b.w	800b1b0 <_close_r>

0800b0b2 <_vsniprintf_r>:
 800b0b2:	b530      	push	{r4, r5, lr}
 800b0b4:	4614      	mov	r4, r2
 800b0b6:	2c00      	cmp	r4, #0
 800b0b8:	4605      	mov	r5, r0
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	b09b      	sub	sp, #108	@ 0x6c
 800b0be:	da05      	bge.n	800b0cc <_vsniprintf_r+0x1a>
 800b0c0:	238b      	movs	r3, #139	@ 0x8b
 800b0c2:	6003      	str	r3, [r0, #0]
 800b0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c8:	b01b      	add	sp, #108	@ 0x6c
 800b0ca:	bd30      	pop	{r4, r5, pc}
 800b0cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b0d0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b0d4:	bf0c      	ite	eq
 800b0d6:	4623      	moveq	r3, r4
 800b0d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b0dc:	9302      	str	r3, [sp, #8]
 800b0de:	9305      	str	r3, [sp, #20]
 800b0e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b0e4:	9100      	str	r1, [sp, #0]
 800b0e6:	9104      	str	r1, [sp, #16]
 800b0e8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b0ec:	4669      	mov	r1, sp
 800b0ee:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b0f0:	f001 fa42 	bl	800c578 <_svfiprintf_r>
 800b0f4:	1c43      	adds	r3, r0, #1
 800b0f6:	bfbc      	itt	lt
 800b0f8:	238b      	movlt	r3, #139	@ 0x8b
 800b0fa:	602b      	strlt	r3, [r5, #0]
 800b0fc:	2c00      	cmp	r4, #0
 800b0fe:	d0e3      	beq.n	800b0c8 <_vsniprintf_r+0x16>
 800b100:	2200      	movs	r2, #0
 800b102:	9b00      	ldr	r3, [sp, #0]
 800b104:	701a      	strb	r2, [r3, #0]
 800b106:	e7df      	b.n	800b0c8 <_vsniprintf_r+0x16>

0800b108 <vsniprintf>:
 800b108:	b507      	push	{r0, r1, r2, lr}
 800b10a:	9300      	str	r3, [sp, #0]
 800b10c:	4613      	mov	r3, r2
 800b10e:	460a      	mov	r2, r1
 800b110:	4601      	mov	r1, r0
 800b112:	4803      	ldr	r0, [pc, #12]	@ (800b120 <vsniprintf+0x18>)
 800b114:	6800      	ldr	r0, [r0, #0]
 800b116:	f7ff ffcc 	bl	800b0b2 <_vsniprintf_r>
 800b11a:	b003      	add	sp, #12
 800b11c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b120:	20000194 	.word	0x20000194

0800b124 <memset>:
 800b124:	4603      	mov	r3, r0
 800b126:	4402      	add	r2, r0
 800b128:	4293      	cmp	r3, r2
 800b12a:	d100      	bne.n	800b12e <memset+0xa>
 800b12c:	4770      	bx	lr
 800b12e:	f803 1b01 	strb.w	r1, [r3], #1
 800b132:	e7f9      	b.n	800b128 <memset+0x4>

0800b134 <strncmp>:
 800b134:	b510      	push	{r4, lr}
 800b136:	b16a      	cbz	r2, 800b154 <strncmp+0x20>
 800b138:	3901      	subs	r1, #1
 800b13a:	1884      	adds	r4, r0, r2
 800b13c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b140:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b144:	429a      	cmp	r2, r3
 800b146:	d103      	bne.n	800b150 <strncmp+0x1c>
 800b148:	42a0      	cmp	r0, r4
 800b14a:	d001      	beq.n	800b150 <strncmp+0x1c>
 800b14c:	2a00      	cmp	r2, #0
 800b14e:	d1f5      	bne.n	800b13c <strncmp+0x8>
 800b150:	1ad0      	subs	r0, r2, r3
 800b152:	bd10      	pop	{r4, pc}
 800b154:	4610      	mov	r0, r2
 800b156:	e7fc      	b.n	800b152 <strncmp+0x1e>

0800b158 <__strtok_r>:
 800b158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b15a:	4604      	mov	r4, r0
 800b15c:	b908      	cbnz	r0, 800b162 <__strtok_r+0xa>
 800b15e:	6814      	ldr	r4, [r2, #0]
 800b160:	b144      	cbz	r4, 800b174 <__strtok_r+0x1c>
 800b162:	460f      	mov	r7, r1
 800b164:	4620      	mov	r0, r4
 800b166:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b16a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b16e:	b91e      	cbnz	r6, 800b178 <__strtok_r+0x20>
 800b170:	b965      	cbnz	r5, 800b18c <__strtok_r+0x34>
 800b172:	6015      	str	r5, [r2, #0]
 800b174:	2000      	movs	r0, #0
 800b176:	e005      	b.n	800b184 <__strtok_r+0x2c>
 800b178:	42b5      	cmp	r5, r6
 800b17a:	d1f6      	bne.n	800b16a <__strtok_r+0x12>
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d1f0      	bne.n	800b162 <__strtok_r+0xa>
 800b180:	6014      	str	r4, [r2, #0]
 800b182:	7003      	strb	r3, [r0, #0]
 800b184:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b186:	461c      	mov	r4, r3
 800b188:	e00c      	b.n	800b1a4 <__strtok_r+0x4c>
 800b18a:	b915      	cbnz	r5, 800b192 <__strtok_r+0x3a>
 800b18c:	460e      	mov	r6, r1
 800b18e:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b192:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b196:	42ab      	cmp	r3, r5
 800b198:	d1f7      	bne.n	800b18a <__strtok_r+0x32>
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d0f3      	beq.n	800b186 <__strtok_r+0x2e>
 800b19e:	2300      	movs	r3, #0
 800b1a0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b1a4:	6014      	str	r4, [r2, #0]
 800b1a6:	e7ed      	b.n	800b184 <__strtok_r+0x2c>

0800b1a8 <strtok_r>:
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	f7ff bfd5 	b.w	800b158 <__strtok_r>
	...

0800b1b0 <_close_r>:
 800b1b0:	b538      	push	{r3, r4, r5, lr}
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	4d05      	ldr	r5, [pc, #20]	@ (800b1cc <_close_r+0x1c>)
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	4608      	mov	r0, r1
 800b1ba:	602b      	str	r3, [r5, #0]
 800b1bc:	f7f5 ff21 	bl	8001002 <_close>
 800b1c0:	1c43      	adds	r3, r0, #1
 800b1c2:	d102      	bne.n	800b1ca <_close_r+0x1a>
 800b1c4:	682b      	ldr	r3, [r5, #0]
 800b1c6:	b103      	cbz	r3, 800b1ca <_close_r+0x1a>
 800b1c8:	6023      	str	r3, [r4, #0]
 800b1ca:	bd38      	pop	{r3, r4, r5, pc}
 800b1cc:	2000150c 	.word	0x2000150c

0800b1d0 <_lseek_r>:
 800b1d0:	b538      	push	{r3, r4, r5, lr}
 800b1d2:	4604      	mov	r4, r0
 800b1d4:	4608      	mov	r0, r1
 800b1d6:	4611      	mov	r1, r2
 800b1d8:	2200      	movs	r2, #0
 800b1da:	4d05      	ldr	r5, [pc, #20]	@ (800b1f0 <_lseek_r+0x20>)
 800b1dc:	602a      	str	r2, [r5, #0]
 800b1de:	461a      	mov	r2, r3
 800b1e0:	f7f5 ff33 	bl	800104a <_lseek>
 800b1e4:	1c43      	adds	r3, r0, #1
 800b1e6:	d102      	bne.n	800b1ee <_lseek_r+0x1e>
 800b1e8:	682b      	ldr	r3, [r5, #0]
 800b1ea:	b103      	cbz	r3, 800b1ee <_lseek_r+0x1e>
 800b1ec:	6023      	str	r3, [r4, #0]
 800b1ee:	bd38      	pop	{r3, r4, r5, pc}
 800b1f0:	2000150c 	.word	0x2000150c

0800b1f4 <_read_r>:
 800b1f4:	b538      	push	{r3, r4, r5, lr}
 800b1f6:	4604      	mov	r4, r0
 800b1f8:	4608      	mov	r0, r1
 800b1fa:	4611      	mov	r1, r2
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	4d05      	ldr	r5, [pc, #20]	@ (800b214 <_read_r+0x20>)
 800b200:	602a      	str	r2, [r5, #0]
 800b202:	461a      	mov	r2, r3
 800b204:	f7f5 fec4 	bl	8000f90 <_read>
 800b208:	1c43      	adds	r3, r0, #1
 800b20a:	d102      	bne.n	800b212 <_read_r+0x1e>
 800b20c:	682b      	ldr	r3, [r5, #0]
 800b20e:	b103      	cbz	r3, 800b212 <_read_r+0x1e>
 800b210:	6023      	str	r3, [r4, #0]
 800b212:	bd38      	pop	{r3, r4, r5, pc}
 800b214:	2000150c 	.word	0x2000150c

0800b218 <_write_r>:
 800b218:	b538      	push	{r3, r4, r5, lr}
 800b21a:	4604      	mov	r4, r0
 800b21c:	4608      	mov	r0, r1
 800b21e:	4611      	mov	r1, r2
 800b220:	2200      	movs	r2, #0
 800b222:	4d05      	ldr	r5, [pc, #20]	@ (800b238 <_write_r+0x20>)
 800b224:	602a      	str	r2, [r5, #0]
 800b226:	461a      	mov	r2, r3
 800b228:	f7f5 fecf 	bl	8000fca <_write>
 800b22c:	1c43      	adds	r3, r0, #1
 800b22e:	d102      	bne.n	800b236 <_write_r+0x1e>
 800b230:	682b      	ldr	r3, [r5, #0]
 800b232:	b103      	cbz	r3, 800b236 <_write_r+0x1e>
 800b234:	6023      	str	r3, [r4, #0]
 800b236:	bd38      	pop	{r3, r4, r5, pc}
 800b238:	2000150c 	.word	0x2000150c

0800b23c <__errno>:
 800b23c:	4b01      	ldr	r3, [pc, #4]	@ (800b244 <__errno+0x8>)
 800b23e:	6818      	ldr	r0, [r3, #0]
 800b240:	4770      	bx	lr
 800b242:	bf00      	nop
 800b244:	20000194 	.word	0x20000194

0800b248 <__libc_init_array>:
 800b248:	b570      	push	{r4, r5, r6, lr}
 800b24a:	2600      	movs	r6, #0
 800b24c:	4d0c      	ldr	r5, [pc, #48]	@ (800b280 <__libc_init_array+0x38>)
 800b24e:	4c0d      	ldr	r4, [pc, #52]	@ (800b284 <__libc_init_array+0x3c>)
 800b250:	1b64      	subs	r4, r4, r5
 800b252:	10a4      	asrs	r4, r4, #2
 800b254:	42a6      	cmp	r6, r4
 800b256:	d109      	bne.n	800b26c <__libc_init_array+0x24>
 800b258:	f002 f820 	bl	800d29c <_init>
 800b25c:	2600      	movs	r6, #0
 800b25e:	4d0a      	ldr	r5, [pc, #40]	@ (800b288 <__libc_init_array+0x40>)
 800b260:	4c0a      	ldr	r4, [pc, #40]	@ (800b28c <__libc_init_array+0x44>)
 800b262:	1b64      	subs	r4, r4, r5
 800b264:	10a4      	asrs	r4, r4, #2
 800b266:	42a6      	cmp	r6, r4
 800b268:	d105      	bne.n	800b276 <__libc_init_array+0x2e>
 800b26a:	bd70      	pop	{r4, r5, r6, pc}
 800b26c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b270:	4798      	blx	r3
 800b272:	3601      	adds	r6, #1
 800b274:	e7ee      	b.n	800b254 <__libc_init_array+0xc>
 800b276:	f855 3b04 	ldr.w	r3, [r5], #4
 800b27a:	4798      	blx	r3
 800b27c:	3601      	adds	r6, #1
 800b27e:	e7f2      	b.n	800b266 <__libc_init_array+0x1e>
 800b280:	0800d8a0 	.word	0x0800d8a0
 800b284:	0800d8a0 	.word	0x0800d8a0
 800b288:	0800d8a0 	.word	0x0800d8a0
 800b28c:	0800d8a4 	.word	0x0800d8a4

0800b290 <__retarget_lock_init_recursive>:
 800b290:	4770      	bx	lr

0800b292 <__retarget_lock_acquire_recursive>:
 800b292:	4770      	bx	lr

0800b294 <__retarget_lock_release_recursive>:
 800b294:	4770      	bx	lr

0800b296 <strcpy>:
 800b296:	4603      	mov	r3, r0
 800b298:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b29c:	f803 2b01 	strb.w	r2, [r3], #1
 800b2a0:	2a00      	cmp	r2, #0
 800b2a2:	d1f9      	bne.n	800b298 <strcpy+0x2>
 800b2a4:	4770      	bx	lr

0800b2a6 <memcpy>:
 800b2a6:	440a      	add	r2, r1
 800b2a8:	4291      	cmp	r1, r2
 800b2aa:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2ae:	d100      	bne.n	800b2b2 <memcpy+0xc>
 800b2b0:	4770      	bx	lr
 800b2b2:	b510      	push	{r4, lr}
 800b2b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2b8:	4291      	cmp	r1, r2
 800b2ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2be:	d1f9      	bne.n	800b2b4 <memcpy+0xe>
 800b2c0:	bd10      	pop	{r4, pc}
	...

0800b2c4 <nan>:
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	4901      	ldr	r1, [pc, #4]	@ (800b2cc <nan+0x8>)
 800b2c8:	4770      	bx	lr
 800b2ca:	bf00      	nop
 800b2cc:	7ff80000 	.word	0x7ff80000

0800b2d0 <nanf>:
 800b2d0:	4800      	ldr	r0, [pc, #0]	@ (800b2d4 <nanf+0x4>)
 800b2d2:	4770      	bx	lr
 800b2d4:	7fc00000 	.word	0x7fc00000

0800b2d8 <_free_r>:
 800b2d8:	b538      	push	{r3, r4, r5, lr}
 800b2da:	4605      	mov	r5, r0
 800b2dc:	2900      	cmp	r1, #0
 800b2de:	d040      	beq.n	800b362 <_free_r+0x8a>
 800b2e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2e4:	1f0c      	subs	r4, r1, #4
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	bfb8      	it	lt
 800b2ea:	18e4      	addlt	r4, r4, r3
 800b2ec:	f000 fc2a 	bl	800bb44 <__malloc_lock>
 800b2f0:	4a1c      	ldr	r2, [pc, #112]	@ (800b364 <_free_r+0x8c>)
 800b2f2:	6813      	ldr	r3, [r2, #0]
 800b2f4:	b933      	cbnz	r3, 800b304 <_free_r+0x2c>
 800b2f6:	6063      	str	r3, [r4, #4]
 800b2f8:	6014      	str	r4, [r2, #0]
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b300:	f000 bc26 	b.w	800bb50 <__malloc_unlock>
 800b304:	42a3      	cmp	r3, r4
 800b306:	d908      	bls.n	800b31a <_free_r+0x42>
 800b308:	6820      	ldr	r0, [r4, #0]
 800b30a:	1821      	adds	r1, r4, r0
 800b30c:	428b      	cmp	r3, r1
 800b30e:	bf01      	itttt	eq
 800b310:	6819      	ldreq	r1, [r3, #0]
 800b312:	685b      	ldreq	r3, [r3, #4]
 800b314:	1809      	addeq	r1, r1, r0
 800b316:	6021      	streq	r1, [r4, #0]
 800b318:	e7ed      	b.n	800b2f6 <_free_r+0x1e>
 800b31a:	461a      	mov	r2, r3
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	b10b      	cbz	r3, 800b324 <_free_r+0x4c>
 800b320:	42a3      	cmp	r3, r4
 800b322:	d9fa      	bls.n	800b31a <_free_r+0x42>
 800b324:	6811      	ldr	r1, [r2, #0]
 800b326:	1850      	adds	r0, r2, r1
 800b328:	42a0      	cmp	r0, r4
 800b32a:	d10b      	bne.n	800b344 <_free_r+0x6c>
 800b32c:	6820      	ldr	r0, [r4, #0]
 800b32e:	4401      	add	r1, r0
 800b330:	1850      	adds	r0, r2, r1
 800b332:	4283      	cmp	r3, r0
 800b334:	6011      	str	r1, [r2, #0]
 800b336:	d1e0      	bne.n	800b2fa <_free_r+0x22>
 800b338:	6818      	ldr	r0, [r3, #0]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	4408      	add	r0, r1
 800b33e:	6010      	str	r0, [r2, #0]
 800b340:	6053      	str	r3, [r2, #4]
 800b342:	e7da      	b.n	800b2fa <_free_r+0x22>
 800b344:	d902      	bls.n	800b34c <_free_r+0x74>
 800b346:	230c      	movs	r3, #12
 800b348:	602b      	str	r3, [r5, #0]
 800b34a:	e7d6      	b.n	800b2fa <_free_r+0x22>
 800b34c:	6820      	ldr	r0, [r4, #0]
 800b34e:	1821      	adds	r1, r4, r0
 800b350:	428b      	cmp	r3, r1
 800b352:	bf01      	itttt	eq
 800b354:	6819      	ldreq	r1, [r3, #0]
 800b356:	685b      	ldreq	r3, [r3, #4]
 800b358:	1809      	addeq	r1, r1, r0
 800b35a:	6021      	streq	r1, [r4, #0]
 800b35c:	6063      	str	r3, [r4, #4]
 800b35e:	6054      	str	r4, [r2, #4]
 800b360:	e7cb      	b.n	800b2fa <_free_r+0x22>
 800b362:	bd38      	pop	{r3, r4, r5, pc}
 800b364:	20001518 	.word	0x20001518

0800b368 <rshift>:
 800b368:	6903      	ldr	r3, [r0, #16]
 800b36a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b36e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b372:	f100 0414 	add.w	r4, r0, #20
 800b376:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b37a:	dd46      	ble.n	800b40a <rshift+0xa2>
 800b37c:	f011 011f 	ands.w	r1, r1, #31
 800b380:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b384:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b388:	d10c      	bne.n	800b3a4 <rshift+0x3c>
 800b38a:	4629      	mov	r1, r5
 800b38c:	f100 0710 	add.w	r7, r0, #16
 800b390:	42b1      	cmp	r1, r6
 800b392:	d335      	bcc.n	800b400 <rshift+0x98>
 800b394:	1a9b      	subs	r3, r3, r2
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	1eea      	subs	r2, r5, #3
 800b39a:	4296      	cmp	r6, r2
 800b39c:	bf38      	it	cc
 800b39e:	2300      	movcc	r3, #0
 800b3a0:	4423      	add	r3, r4
 800b3a2:	e015      	b.n	800b3d0 <rshift+0x68>
 800b3a4:	46a1      	mov	r9, r4
 800b3a6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b3aa:	f1c1 0820 	rsb	r8, r1, #32
 800b3ae:	40cf      	lsrs	r7, r1
 800b3b0:	f105 0e04 	add.w	lr, r5, #4
 800b3b4:	4576      	cmp	r6, lr
 800b3b6:	46f4      	mov	ip, lr
 800b3b8:	d816      	bhi.n	800b3e8 <rshift+0x80>
 800b3ba:	1a9a      	subs	r2, r3, r2
 800b3bc:	0092      	lsls	r2, r2, #2
 800b3be:	3a04      	subs	r2, #4
 800b3c0:	3501      	adds	r5, #1
 800b3c2:	42ae      	cmp	r6, r5
 800b3c4:	bf38      	it	cc
 800b3c6:	2200      	movcc	r2, #0
 800b3c8:	18a3      	adds	r3, r4, r2
 800b3ca:	50a7      	str	r7, [r4, r2]
 800b3cc:	b107      	cbz	r7, 800b3d0 <rshift+0x68>
 800b3ce:	3304      	adds	r3, #4
 800b3d0:	42a3      	cmp	r3, r4
 800b3d2:	eba3 0204 	sub.w	r2, r3, r4
 800b3d6:	bf08      	it	eq
 800b3d8:	2300      	moveq	r3, #0
 800b3da:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b3de:	6102      	str	r2, [r0, #16]
 800b3e0:	bf08      	it	eq
 800b3e2:	6143      	streq	r3, [r0, #20]
 800b3e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3e8:	f8dc c000 	ldr.w	ip, [ip]
 800b3ec:	fa0c fc08 	lsl.w	ip, ip, r8
 800b3f0:	ea4c 0707 	orr.w	r7, ip, r7
 800b3f4:	f849 7b04 	str.w	r7, [r9], #4
 800b3f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b3fc:	40cf      	lsrs	r7, r1
 800b3fe:	e7d9      	b.n	800b3b4 <rshift+0x4c>
 800b400:	f851 cb04 	ldr.w	ip, [r1], #4
 800b404:	f847 cf04 	str.w	ip, [r7, #4]!
 800b408:	e7c2      	b.n	800b390 <rshift+0x28>
 800b40a:	4623      	mov	r3, r4
 800b40c:	e7e0      	b.n	800b3d0 <rshift+0x68>

0800b40e <__hexdig_fun>:
 800b40e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800b412:	2b09      	cmp	r3, #9
 800b414:	d802      	bhi.n	800b41c <__hexdig_fun+0xe>
 800b416:	3820      	subs	r0, #32
 800b418:	b2c0      	uxtb	r0, r0
 800b41a:	4770      	bx	lr
 800b41c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800b420:	2b05      	cmp	r3, #5
 800b422:	d801      	bhi.n	800b428 <__hexdig_fun+0x1a>
 800b424:	3847      	subs	r0, #71	@ 0x47
 800b426:	e7f7      	b.n	800b418 <__hexdig_fun+0xa>
 800b428:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800b42c:	2b05      	cmp	r3, #5
 800b42e:	d801      	bhi.n	800b434 <__hexdig_fun+0x26>
 800b430:	3827      	subs	r0, #39	@ 0x27
 800b432:	e7f1      	b.n	800b418 <__hexdig_fun+0xa>
 800b434:	2000      	movs	r0, #0
 800b436:	4770      	bx	lr

0800b438 <__gethex>:
 800b438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b43c:	468a      	mov	sl, r1
 800b43e:	4690      	mov	r8, r2
 800b440:	b085      	sub	sp, #20
 800b442:	9302      	str	r3, [sp, #8]
 800b444:	680b      	ldr	r3, [r1, #0]
 800b446:	9001      	str	r0, [sp, #4]
 800b448:	1c9c      	adds	r4, r3, #2
 800b44a:	46a1      	mov	r9, r4
 800b44c:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b450:	2830      	cmp	r0, #48	@ 0x30
 800b452:	d0fa      	beq.n	800b44a <__gethex+0x12>
 800b454:	eba9 0303 	sub.w	r3, r9, r3
 800b458:	f1a3 0b02 	sub.w	fp, r3, #2
 800b45c:	f7ff ffd7 	bl	800b40e <__hexdig_fun>
 800b460:	4605      	mov	r5, r0
 800b462:	2800      	cmp	r0, #0
 800b464:	d168      	bne.n	800b538 <__gethex+0x100>
 800b466:	2201      	movs	r2, #1
 800b468:	4648      	mov	r0, r9
 800b46a:	499f      	ldr	r1, [pc, #636]	@ (800b6e8 <__gethex+0x2b0>)
 800b46c:	f7ff fe62 	bl	800b134 <strncmp>
 800b470:	4607      	mov	r7, r0
 800b472:	2800      	cmp	r0, #0
 800b474:	d167      	bne.n	800b546 <__gethex+0x10e>
 800b476:	f899 0001 	ldrb.w	r0, [r9, #1]
 800b47a:	4626      	mov	r6, r4
 800b47c:	f7ff ffc7 	bl	800b40e <__hexdig_fun>
 800b480:	2800      	cmp	r0, #0
 800b482:	d062      	beq.n	800b54a <__gethex+0x112>
 800b484:	4623      	mov	r3, r4
 800b486:	7818      	ldrb	r0, [r3, #0]
 800b488:	4699      	mov	r9, r3
 800b48a:	2830      	cmp	r0, #48	@ 0x30
 800b48c:	f103 0301 	add.w	r3, r3, #1
 800b490:	d0f9      	beq.n	800b486 <__gethex+0x4e>
 800b492:	f7ff ffbc 	bl	800b40e <__hexdig_fun>
 800b496:	fab0 f580 	clz	r5, r0
 800b49a:	f04f 0b01 	mov.w	fp, #1
 800b49e:	096d      	lsrs	r5, r5, #5
 800b4a0:	464a      	mov	r2, r9
 800b4a2:	4616      	mov	r6, r2
 800b4a4:	7830      	ldrb	r0, [r6, #0]
 800b4a6:	3201      	adds	r2, #1
 800b4a8:	f7ff ffb1 	bl	800b40e <__hexdig_fun>
 800b4ac:	2800      	cmp	r0, #0
 800b4ae:	d1f8      	bne.n	800b4a2 <__gethex+0x6a>
 800b4b0:	2201      	movs	r2, #1
 800b4b2:	4630      	mov	r0, r6
 800b4b4:	498c      	ldr	r1, [pc, #560]	@ (800b6e8 <__gethex+0x2b0>)
 800b4b6:	f7ff fe3d 	bl	800b134 <strncmp>
 800b4ba:	2800      	cmp	r0, #0
 800b4bc:	d13f      	bne.n	800b53e <__gethex+0x106>
 800b4be:	b944      	cbnz	r4, 800b4d2 <__gethex+0x9a>
 800b4c0:	1c74      	adds	r4, r6, #1
 800b4c2:	4622      	mov	r2, r4
 800b4c4:	4616      	mov	r6, r2
 800b4c6:	7830      	ldrb	r0, [r6, #0]
 800b4c8:	3201      	adds	r2, #1
 800b4ca:	f7ff ffa0 	bl	800b40e <__hexdig_fun>
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d1f8      	bne.n	800b4c4 <__gethex+0x8c>
 800b4d2:	1ba4      	subs	r4, r4, r6
 800b4d4:	00a7      	lsls	r7, r4, #2
 800b4d6:	7833      	ldrb	r3, [r6, #0]
 800b4d8:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800b4dc:	2b50      	cmp	r3, #80	@ 0x50
 800b4de:	d13e      	bne.n	800b55e <__gethex+0x126>
 800b4e0:	7873      	ldrb	r3, [r6, #1]
 800b4e2:	2b2b      	cmp	r3, #43	@ 0x2b
 800b4e4:	d033      	beq.n	800b54e <__gethex+0x116>
 800b4e6:	2b2d      	cmp	r3, #45	@ 0x2d
 800b4e8:	d034      	beq.n	800b554 <__gethex+0x11c>
 800b4ea:	2400      	movs	r4, #0
 800b4ec:	1c71      	adds	r1, r6, #1
 800b4ee:	7808      	ldrb	r0, [r1, #0]
 800b4f0:	f7ff ff8d 	bl	800b40e <__hexdig_fun>
 800b4f4:	1e43      	subs	r3, r0, #1
 800b4f6:	b2db      	uxtb	r3, r3
 800b4f8:	2b18      	cmp	r3, #24
 800b4fa:	d830      	bhi.n	800b55e <__gethex+0x126>
 800b4fc:	f1a0 0210 	sub.w	r2, r0, #16
 800b500:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b504:	f7ff ff83 	bl	800b40e <__hexdig_fun>
 800b508:	f100 3cff 	add.w	ip, r0, #4294967295
 800b50c:	fa5f fc8c 	uxtb.w	ip, ip
 800b510:	f1bc 0f18 	cmp.w	ip, #24
 800b514:	f04f 030a 	mov.w	r3, #10
 800b518:	d91e      	bls.n	800b558 <__gethex+0x120>
 800b51a:	b104      	cbz	r4, 800b51e <__gethex+0xe6>
 800b51c:	4252      	negs	r2, r2
 800b51e:	4417      	add	r7, r2
 800b520:	f8ca 1000 	str.w	r1, [sl]
 800b524:	b1ed      	cbz	r5, 800b562 <__gethex+0x12a>
 800b526:	f1bb 0f00 	cmp.w	fp, #0
 800b52a:	bf0c      	ite	eq
 800b52c:	2506      	moveq	r5, #6
 800b52e:	2500      	movne	r5, #0
 800b530:	4628      	mov	r0, r5
 800b532:	b005      	add	sp, #20
 800b534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b538:	2500      	movs	r5, #0
 800b53a:	462c      	mov	r4, r5
 800b53c:	e7b0      	b.n	800b4a0 <__gethex+0x68>
 800b53e:	2c00      	cmp	r4, #0
 800b540:	d1c7      	bne.n	800b4d2 <__gethex+0x9a>
 800b542:	4627      	mov	r7, r4
 800b544:	e7c7      	b.n	800b4d6 <__gethex+0x9e>
 800b546:	464e      	mov	r6, r9
 800b548:	462f      	mov	r7, r5
 800b54a:	2501      	movs	r5, #1
 800b54c:	e7c3      	b.n	800b4d6 <__gethex+0x9e>
 800b54e:	2400      	movs	r4, #0
 800b550:	1cb1      	adds	r1, r6, #2
 800b552:	e7cc      	b.n	800b4ee <__gethex+0xb6>
 800b554:	2401      	movs	r4, #1
 800b556:	e7fb      	b.n	800b550 <__gethex+0x118>
 800b558:	fb03 0002 	mla	r0, r3, r2, r0
 800b55c:	e7ce      	b.n	800b4fc <__gethex+0xc4>
 800b55e:	4631      	mov	r1, r6
 800b560:	e7de      	b.n	800b520 <__gethex+0xe8>
 800b562:	4629      	mov	r1, r5
 800b564:	eba6 0309 	sub.w	r3, r6, r9
 800b568:	3b01      	subs	r3, #1
 800b56a:	2b07      	cmp	r3, #7
 800b56c:	dc0a      	bgt.n	800b584 <__gethex+0x14c>
 800b56e:	9801      	ldr	r0, [sp, #4]
 800b570:	f000 faf4 	bl	800bb5c <_Balloc>
 800b574:	4604      	mov	r4, r0
 800b576:	b940      	cbnz	r0, 800b58a <__gethex+0x152>
 800b578:	4602      	mov	r2, r0
 800b57a:	21e4      	movs	r1, #228	@ 0xe4
 800b57c:	4b5b      	ldr	r3, [pc, #364]	@ (800b6ec <__gethex+0x2b4>)
 800b57e:	485c      	ldr	r0, [pc, #368]	@ (800b6f0 <__gethex+0x2b8>)
 800b580:	f001 fb68 	bl	800cc54 <__assert_func>
 800b584:	3101      	adds	r1, #1
 800b586:	105b      	asrs	r3, r3, #1
 800b588:	e7ef      	b.n	800b56a <__gethex+0x132>
 800b58a:	2300      	movs	r3, #0
 800b58c:	f100 0a14 	add.w	sl, r0, #20
 800b590:	4655      	mov	r5, sl
 800b592:	469b      	mov	fp, r3
 800b594:	45b1      	cmp	r9, r6
 800b596:	d337      	bcc.n	800b608 <__gethex+0x1d0>
 800b598:	f845 bb04 	str.w	fp, [r5], #4
 800b59c:	eba5 050a 	sub.w	r5, r5, sl
 800b5a0:	10ad      	asrs	r5, r5, #2
 800b5a2:	6125      	str	r5, [r4, #16]
 800b5a4:	4658      	mov	r0, fp
 800b5a6:	f000 fbcb 	bl	800bd40 <__hi0bits>
 800b5aa:	016d      	lsls	r5, r5, #5
 800b5ac:	f8d8 6000 	ldr.w	r6, [r8]
 800b5b0:	1a2d      	subs	r5, r5, r0
 800b5b2:	42b5      	cmp	r5, r6
 800b5b4:	dd54      	ble.n	800b660 <__gethex+0x228>
 800b5b6:	1bad      	subs	r5, r5, r6
 800b5b8:	4629      	mov	r1, r5
 800b5ba:	4620      	mov	r0, r4
 800b5bc:	f000 ff53 	bl	800c466 <__any_on>
 800b5c0:	4681      	mov	r9, r0
 800b5c2:	b178      	cbz	r0, 800b5e4 <__gethex+0x1ac>
 800b5c4:	f04f 0901 	mov.w	r9, #1
 800b5c8:	1e6b      	subs	r3, r5, #1
 800b5ca:	1159      	asrs	r1, r3, #5
 800b5cc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b5d0:	f003 021f 	and.w	r2, r3, #31
 800b5d4:	fa09 f202 	lsl.w	r2, r9, r2
 800b5d8:	420a      	tst	r2, r1
 800b5da:	d003      	beq.n	800b5e4 <__gethex+0x1ac>
 800b5dc:	454b      	cmp	r3, r9
 800b5de:	dc36      	bgt.n	800b64e <__gethex+0x216>
 800b5e0:	f04f 0902 	mov.w	r9, #2
 800b5e4:	4629      	mov	r1, r5
 800b5e6:	4620      	mov	r0, r4
 800b5e8:	f7ff febe 	bl	800b368 <rshift>
 800b5ec:	442f      	add	r7, r5
 800b5ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b5f2:	42bb      	cmp	r3, r7
 800b5f4:	da42      	bge.n	800b67c <__gethex+0x244>
 800b5f6:	4621      	mov	r1, r4
 800b5f8:	9801      	ldr	r0, [sp, #4]
 800b5fa:	f000 faef 	bl	800bbdc <_Bfree>
 800b5fe:	2300      	movs	r3, #0
 800b600:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b602:	25a3      	movs	r5, #163	@ 0xa3
 800b604:	6013      	str	r3, [r2, #0]
 800b606:	e793      	b.n	800b530 <__gethex+0xf8>
 800b608:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800b60c:	2a2e      	cmp	r2, #46	@ 0x2e
 800b60e:	d012      	beq.n	800b636 <__gethex+0x1fe>
 800b610:	2b20      	cmp	r3, #32
 800b612:	d104      	bne.n	800b61e <__gethex+0x1e6>
 800b614:	f845 bb04 	str.w	fp, [r5], #4
 800b618:	f04f 0b00 	mov.w	fp, #0
 800b61c:	465b      	mov	r3, fp
 800b61e:	7830      	ldrb	r0, [r6, #0]
 800b620:	9303      	str	r3, [sp, #12]
 800b622:	f7ff fef4 	bl	800b40e <__hexdig_fun>
 800b626:	9b03      	ldr	r3, [sp, #12]
 800b628:	f000 000f 	and.w	r0, r0, #15
 800b62c:	4098      	lsls	r0, r3
 800b62e:	ea4b 0b00 	orr.w	fp, fp, r0
 800b632:	3304      	adds	r3, #4
 800b634:	e7ae      	b.n	800b594 <__gethex+0x15c>
 800b636:	45b1      	cmp	r9, r6
 800b638:	d8ea      	bhi.n	800b610 <__gethex+0x1d8>
 800b63a:	2201      	movs	r2, #1
 800b63c:	4630      	mov	r0, r6
 800b63e:	492a      	ldr	r1, [pc, #168]	@ (800b6e8 <__gethex+0x2b0>)
 800b640:	9303      	str	r3, [sp, #12]
 800b642:	f7ff fd77 	bl	800b134 <strncmp>
 800b646:	9b03      	ldr	r3, [sp, #12]
 800b648:	2800      	cmp	r0, #0
 800b64a:	d1e1      	bne.n	800b610 <__gethex+0x1d8>
 800b64c:	e7a2      	b.n	800b594 <__gethex+0x15c>
 800b64e:	4620      	mov	r0, r4
 800b650:	1ea9      	subs	r1, r5, #2
 800b652:	f000 ff08 	bl	800c466 <__any_on>
 800b656:	2800      	cmp	r0, #0
 800b658:	d0c2      	beq.n	800b5e0 <__gethex+0x1a8>
 800b65a:	f04f 0903 	mov.w	r9, #3
 800b65e:	e7c1      	b.n	800b5e4 <__gethex+0x1ac>
 800b660:	da09      	bge.n	800b676 <__gethex+0x23e>
 800b662:	1b75      	subs	r5, r6, r5
 800b664:	4621      	mov	r1, r4
 800b666:	462a      	mov	r2, r5
 800b668:	9801      	ldr	r0, [sp, #4]
 800b66a:	f000 fccd 	bl	800c008 <__lshift>
 800b66e:	4604      	mov	r4, r0
 800b670:	1b7f      	subs	r7, r7, r5
 800b672:	f100 0a14 	add.w	sl, r0, #20
 800b676:	f04f 0900 	mov.w	r9, #0
 800b67a:	e7b8      	b.n	800b5ee <__gethex+0x1b6>
 800b67c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b680:	42bd      	cmp	r5, r7
 800b682:	dd6f      	ble.n	800b764 <__gethex+0x32c>
 800b684:	1bed      	subs	r5, r5, r7
 800b686:	42ae      	cmp	r6, r5
 800b688:	dc34      	bgt.n	800b6f4 <__gethex+0x2bc>
 800b68a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b68e:	2b02      	cmp	r3, #2
 800b690:	d022      	beq.n	800b6d8 <__gethex+0x2a0>
 800b692:	2b03      	cmp	r3, #3
 800b694:	d024      	beq.n	800b6e0 <__gethex+0x2a8>
 800b696:	2b01      	cmp	r3, #1
 800b698:	d115      	bne.n	800b6c6 <__gethex+0x28e>
 800b69a:	42ae      	cmp	r6, r5
 800b69c:	d113      	bne.n	800b6c6 <__gethex+0x28e>
 800b69e:	2e01      	cmp	r6, #1
 800b6a0:	d10b      	bne.n	800b6ba <__gethex+0x282>
 800b6a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b6a6:	9a02      	ldr	r2, [sp, #8]
 800b6a8:	2562      	movs	r5, #98	@ 0x62
 800b6aa:	6013      	str	r3, [r2, #0]
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	6123      	str	r3, [r4, #16]
 800b6b0:	f8ca 3000 	str.w	r3, [sl]
 800b6b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6b6:	601c      	str	r4, [r3, #0]
 800b6b8:	e73a      	b.n	800b530 <__gethex+0xf8>
 800b6ba:	4620      	mov	r0, r4
 800b6bc:	1e71      	subs	r1, r6, #1
 800b6be:	f000 fed2 	bl	800c466 <__any_on>
 800b6c2:	2800      	cmp	r0, #0
 800b6c4:	d1ed      	bne.n	800b6a2 <__gethex+0x26a>
 800b6c6:	4621      	mov	r1, r4
 800b6c8:	9801      	ldr	r0, [sp, #4]
 800b6ca:	f000 fa87 	bl	800bbdc <_Bfree>
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b6d2:	2550      	movs	r5, #80	@ 0x50
 800b6d4:	6013      	str	r3, [r2, #0]
 800b6d6:	e72b      	b.n	800b530 <__gethex+0xf8>
 800b6d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d1f3      	bne.n	800b6c6 <__gethex+0x28e>
 800b6de:	e7e0      	b.n	800b6a2 <__gethex+0x26a>
 800b6e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d1dd      	bne.n	800b6a2 <__gethex+0x26a>
 800b6e6:	e7ee      	b.n	800b6c6 <__gethex+0x28e>
 800b6e8:	0800d4de 	.word	0x0800d4de
 800b6ec:	0800d649 	.word	0x0800d649
 800b6f0:	0800d65a 	.word	0x0800d65a
 800b6f4:	1e6f      	subs	r7, r5, #1
 800b6f6:	f1b9 0f00 	cmp.w	r9, #0
 800b6fa:	d130      	bne.n	800b75e <__gethex+0x326>
 800b6fc:	b127      	cbz	r7, 800b708 <__gethex+0x2d0>
 800b6fe:	4639      	mov	r1, r7
 800b700:	4620      	mov	r0, r4
 800b702:	f000 feb0 	bl	800c466 <__any_on>
 800b706:	4681      	mov	r9, r0
 800b708:	2301      	movs	r3, #1
 800b70a:	4629      	mov	r1, r5
 800b70c:	1b76      	subs	r6, r6, r5
 800b70e:	2502      	movs	r5, #2
 800b710:	117a      	asrs	r2, r7, #5
 800b712:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b716:	f007 071f 	and.w	r7, r7, #31
 800b71a:	40bb      	lsls	r3, r7
 800b71c:	4213      	tst	r3, r2
 800b71e:	4620      	mov	r0, r4
 800b720:	bf18      	it	ne
 800b722:	f049 0902 	orrne.w	r9, r9, #2
 800b726:	f7ff fe1f 	bl	800b368 <rshift>
 800b72a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b72e:	f1b9 0f00 	cmp.w	r9, #0
 800b732:	d047      	beq.n	800b7c4 <__gethex+0x38c>
 800b734:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b738:	2b02      	cmp	r3, #2
 800b73a:	d015      	beq.n	800b768 <__gethex+0x330>
 800b73c:	2b03      	cmp	r3, #3
 800b73e:	d017      	beq.n	800b770 <__gethex+0x338>
 800b740:	2b01      	cmp	r3, #1
 800b742:	d109      	bne.n	800b758 <__gethex+0x320>
 800b744:	f019 0f02 	tst.w	r9, #2
 800b748:	d006      	beq.n	800b758 <__gethex+0x320>
 800b74a:	f8da 3000 	ldr.w	r3, [sl]
 800b74e:	ea49 0903 	orr.w	r9, r9, r3
 800b752:	f019 0f01 	tst.w	r9, #1
 800b756:	d10e      	bne.n	800b776 <__gethex+0x33e>
 800b758:	f045 0510 	orr.w	r5, r5, #16
 800b75c:	e032      	b.n	800b7c4 <__gethex+0x38c>
 800b75e:	f04f 0901 	mov.w	r9, #1
 800b762:	e7d1      	b.n	800b708 <__gethex+0x2d0>
 800b764:	2501      	movs	r5, #1
 800b766:	e7e2      	b.n	800b72e <__gethex+0x2f6>
 800b768:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b76a:	f1c3 0301 	rsb	r3, r3, #1
 800b76e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b770:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b772:	2b00      	cmp	r3, #0
 800b774:	d0f0      	beq.n	800b758 <__gethex+0x320>
 800b776:	f04f 0c00 	mov.w	ip, #0
 800b77a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b77e:	f104 0314 	add.w	r3, r4, #20
 800b782:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b786:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b78a:	4618      	mov	r0, r3
 800b78c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b790:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b794:	d01b      	beq.n	800b7ce <__gethex+0x396>
 800b796:	3201      	adds	r2, #1
 800b798:	6002      	str	r2, [r0, #0]
 800b79a:	2d02      	cmp	r5, #2
 800b79c:	f104 0314 	add.w	r3, r4, #20
 800b7a0:	d13c      	bne.n	800b81c <__gethex+0x3e4>
 800b7a2:	f8d8 2000 	ldr.w	r2, [r8]
 800b7a6:	3a01      	subs	r2, #1
 800b7a8:	42b2      	cmp	r2, r6
 800b7aa:	d109      	bne.n	800b7c0 <__gethex+0x388>
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	1171      	asrs	r1, r6, #5
 800b7b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b7b4:	f006 061f 	and.w	r6, r6, #31
 800b7b8:	fa02 f606 	lsl.w	r6, r2, r6
 800b7bc:	421e      	tst	r6, r3
 800b7be:	d13a      	bne.n	800b836 <__gethex+0x3fe>
 800b7c0:	f045 0520 	orr.w	r5, r5, #32
 800b7c4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b7c6:	601c      	str	r4, [r3, #0]
 800b7c8:	9b02      	ldr	r3, [sp, #8]
 800b7ca:	601f      	str	r7, [r3, #0]
 800b7cc:	e6b0      	b.n	800b530 <__gethex+0xf8>
 800b7ce:	4299      	cmp	r1, r3
 800b7d0:	f843 cc04 	str.w	ip, [r3, #-4]
 800b7d4:	d8d9      	bhi.n	800b78a <__gethex+0x352>
 800b7d6:	68a3      	ldr	r3, [r4, #8]
 800b7d8:	459b      	cmp	fp, r3
 800b7da:	db17      	blt.n	800b80c <__gethex+0x3d4>
 800b7dc:	6861      	ldr	r1, [r4, #4]
 800b7de:	9801      	ldr	r0, [sp, #4]
 800b7e0:	3101      	adds	r1, #1
 800b7e2:	f000 f9bb 	bl	800bb5c <_Balloc>
 800b7e6:	4681      	mov	r9, r0
 800b7e8:	b918      	cbnz	r0, 800b7f2 <__gethex+0x3ba>
 800b7ea:	4602      	mov	r2, r0
 800b7ec:	2184      	movs	r1, #132	@ 0x84
 800b7ee:	4b19      	ldr	r3, [pc, #100]	@ (800b854 <__gethex+0x41c>)
 800b7f0:	e6c5      	b.n	800b57e <__gethex+0x146>
 800b7f2:	6922      	ldr	r2, [r4, #16]
 800b7f4:	f104 010c 	add.w	r1, r4, #12
 800b7f8:	3202      	adds	r2, #2
 800b7fa:	0092      	lsls	r2, r2, #2
 800b7fc:	300c      	adds	r0, #12
 800b7fe:	f7ff fd52 	bl	800b2a6 <memcpy>
 800b802:	4621      	mov	r1, r4
 800b804:	9801      	ldr	r0, [sp, #4]
 800b806:	f000 f9e9 	bl	800bbdc <_Bfree>
 800b80a:	464c      	mov	r4, r9
 800b80c:	6923      	ldr	r3, [r4, #16]
 800b80e:	1c5a      	adds	r2, r3, #1
 800b810:	6122      	str	r2, [r4, #16]
 800b812:	2201      	movs	r2, #1
 800b814:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b818:	615a      	str	r2, [r3, #20]
 800b81a:	e7be      	b.n	800b79a <__gethex+0x362>
 800b81c:	6922      	ldr	r2, [r4, #16]
 800b81e:	455a      	cmp	r2, fp
 800b820:	dd0b      	ble.n	800b83a <__gethex+0x402>
 800b822:	2101      	movs	r1, #1
 800b824:	4620      	mov	r0, r4
 800b826:	f7ff fd9f 	bl	800b368 <rshift>
 800b82a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b82e:	3701      	adds	r7, #1
 800b830:	42bb      	cmp	r3, r7
 800b832:	f6ff aee0 	blt.w	800b5f6 <__gethex+0x1be>
 800b836:	2501      	movs	r5, #1
 800b838:	e7c2      	b.n	800b7c0 <__gethex+0x388>
 800b83a:	f016 061f 	ands.w	r6, r6, #31
 800b83e:	d0fa      	beq.n	800b836 <__gethex+0x3fe>
 800b840:	4453      	add	r3, sl
 800b842:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b846:	f000 fa7b 	bl	800bd40 <__hi0bits>
 800b84a:	f1c6 0620 	rsb	r6, r6, #32
 800b84e:	42b0      	cmp	r0, r6
 800b850:	dbe7      	blt.n	800b822 <__gethex+0x3ea>
 800b852:	e7f0      	b.n	800b836 <__gethex+0x3fe>
 800b854:	0800d649 	.word	0x0800d649

0800b858 <L_shift>:
 800b858:	f1c2 0208 	rsb	r2, r2, #8
 800b85c:	0092      	lsls	r2, r2, #2
 800b85e:	b570      	push	{r4, r5, r6, lr}
 800b860:	f1c2 0620 	rsb	r6, r2, #32
 800b864:	6843      	ldr	r3, [r0, #4]
 800b866:	6804      	ldr	r4, [r0, #0]
 800b868:	fa03 f506 	lsl.w	r5, r3, r6
 800b86c:	432c      	orrs	r4, r5
 800b86e:	40d3      	lsrs	r3, r2
 800b870:	6004      	str	r4, [r0, #0]
 800b872:	f840 3f04 	str.w	r3, [r0, #4]!
 800b876:	4288      	cmp	r0, r1
 800b878:	d3f4      	bcc.n	800b864 <L_shift+0xc>
 800b87a:	bd70      	pop	{r4, r5, r6, pc}

0800b87c <__match>:
 800b87c:	b530      	push	{r4, r5, lr}
 800b87e:	6803      	ldr	r3, [r0, #0]
 800b880:	3301      	adds	r3, #1
 800b882:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b886:	b914      	cbnz	r4, 800b88e <__match+0x12>
 800b888:	6003      	str	r3, [r0, #0]
 800b88a:	2001      	movs	r0, #1
 800b88c:	bd30      	pop	{r4, r5, pc}
 800b88e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b892:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b896:	2d19      	cmp	r5, #25
 800b898:	bf98      	it	ls
 800b89a:	3220      	addls	r2, #32
 800b89c:	42a2      	cmp	r2, r4
 800b89e:	d0f0      	beq.n	800b882 <__match+0x6>
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	e7f3      	b.n	800b88c <__match+0x10>

0800b8a4 <__hexnan>:
 800b8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a8:	2500      	movs	r5, #0
 800b8aa:	680b      	ldr	r3, [r1, #0]
 800b8ac:	4682      	mov	sl, r0
 800b8ae:	115e      	asrs	r6, r3, #5
 800b8b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b8b4:	f013 031f 	ands.w	r3, r3, #31
 800b8b8:	bf18      	it	ne
 800b8ba:	3604      	addne	r6, #4
 800b8bc:	1f37      	subs	r7, r6, #4
 800b8be:	4690      	mov	r8, r2
 800b8c0:	46b9      	mov	r9, r7
 800b8c2:	463c      	mov	r4, r7
 800b8c4:	46ab      	mov	fp, r5
 800b8c6:	b087      	sub	sp, #28
 800b8c8:	6801      	ldr	r1, [r0, #0]
 800b8ca:	9301      	str	r3, [sp, #4]
 800b8cc:	f846 5c04 	str.w	r5, [r6, #-4]
 800b8d0:	9502      	str	r5, [sp, #8]
 800b8d2:	784a      	ldrb	r2, [r1, #1]
 800b8d4:	1c4b      	adds	r3, r1, #1
 800b8d6:	9303      	str	r3, [sp, #12]
 800b8d8:	b342      	cbz	r2, 800b92c <__hexnan+0x88>
 800b8da:	4610      	mov	r0, r2
 800b8dc:	9105      	str	r1, [sp, #20]
 800b8de:	9204      	str	r2, [sp, #16]
 800b8e0:	f7ff fd95 	bl	800b40e <__hexdig_fun>
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d151      	bne.n	800b98c <__hexnan+0xe8>
 800b8e8:	9a04      	ldr	r2, [sp, #16]
 800b8ea:	9905      	ldr	r1, [sp, #20]
 800b8ec:	2a20      	cmp	r2, #32
 800b8ee:	d818      	bhi.n	800b922 <__hexnan+0x7e>
 800b8f0:	9b02      	ldr	r3, [sp, #8]
 800b8f2:	459b      	cmp	fp, r3
 800b8f4:	dd13      	ble.n	800b91e <__hexnan+0x7a>
 800b8f6:	454c      	cmp	r4, r9
 800b8f8:	d206      	bcs.n	800b908 <__hexnan+0x64>
 800b8fa:	2d07      	cmp	r5, #7
 800b8fc:	dc04      	bgt.n	800b908 <__hexnan+0x64>
 800b8fe:	462a      	mov	r2, r5
 800b900:	4649      	mov	r1, r9
 800b902:	4620      	mov	r0, r4
 800b904:	f7ff ffa8 	bl	800b858 <L_shift>
 800b908:	4544      	cmp	r4, r8
 800b90a:	d952      	bls.n	800b9b2 <__hexnan+0x10e>
 800b90c:	2300      	movs	r3, #0
 800b90e:	f1a4 0904 	sub.w	r9, r4, #4
 800b912:	f844 3c04 	str.w	r3, [r4, #-4]
 800b916:	461d      	mov	r5, r3
 800b918:	464c      	mov	r4, r9
 800b91a:	f8cd b008 	str.w	fp, [sp, #8]
 800b91e:	9903      	ldr	r1, [sp, #12]
 800b920:	e7d7      	b.n	800b8d2 <__hexnan+0x2e>
 800b922:	2a29      	cmp	r2, #41	@ 0x29
 800b924:	d157      	bne.n	800b9d6 <__hexnan+0x132>
 800b926:	3102      	adds	r1, #2
 800b928:	f8ca 1000 	str.w	r1, [sl]
 800b92c:	f1bb 0f00 	cmp.w	fp, #0
 800b930:	d051      	beq.n	800b9d6 <__hexnan+0x132>
 800b932:	454c      	cmp	r4, r9
 800b934:	d206      	bcs.n	800b944 <__hexnan+0xa0>
 800b936:	2d07      	cmp	r5, #7
 800b938:	dc04      	bgt.n	800b944 <__hexnan+0xa0>
 800b93a:	462a      	mov	r2, r5
 800b93c:	4649      	mov	r1, r9
 800b93e:	4620      	mov	r0, r4
 800b940:	f7ff ff8a 	bl	800b858 <L_shift>
 800b944:	4544      	cmp	r4, r8
 800b946:	d936      	bls.n	800b9b6 <__hexnan+0x112>
 800b948:	4623      	mov	r3, r4
 800b94a:	f1a8 0204 	sub.w	r2, r8, #4
 800b94e:	f853 1b04 	ldr.w	r1, [r3], #4
 800b952:	429f      	cmp	r7, r3
 800b954:	f842 1f04 	str.w	r1, [r2, #4]!
 800b958:	d2f9      	bcs.n	800b94e <__hexnan+0xaa>
 800b95a:	1b3b      	subs	r3, r7, r4
 800b95c:	f023 0303 	bic.w	r3, r3, #3
 800b960:	3304      	adds	r3, #4
 800b962:	3401      	adds	r4, #1
 800b964:	3e03      	subs	r6, #3
 800b966:	42b4      	cmp	r4, r6
 800b968:	bf88      	it	hi
 800b96a:	2304      	movhi	r3, #4
 800b96c:	2200      	movs	r2, #0
 800b96e:	4443      	add	r3, r8
 800b970:	f843 2b04 	str.w	r2, [r3], #4
 800b974:	429f      	cmp	r7, r3
 800b976:	d2fb      	bcs.n	800b970 <__hexnan+0xcc>
 800b978:	683b      	ldr	r3, [r7, #0]
 800b97a:	b91b      	cbnz	r3, 800b984 <__hexnan+0xe0>
 800b97c:	4547      	cmp	r7, r8
 800b97e:	d128      	bne.n	800b9d2 <__hexnan+0x12e>
 800b980:	2301      	movs	r3, #1
 800b982:	603b      	str	r3, [r7, #0]
 800b984:	2005      	movs	r0, #5
 800b986:	b007      	add	sp, #28
 800b988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b98c:	3501      	adds	r5, #1
 800b98e:	2d08      	cmp	r5, #8
 800b990:	f10b 0b01 	add.w	fp, fp, #1
 800b994:	dd06      	ble.n	800b9a4 <__hexnan+0x100>
 800b996:	4544      	cmp	r4, r8
 800b998:	d9c1      	bls.n	800b91e <__hexnan+0x7a>
 800b99a:	2300      	movs	r3, #0
 800b99c:	2501      	movs	r5, #1
 800b99e:	f844 3c04 	str.w	r3, [r4, #-4]
 800b9a2:	3c04      	subs	r4, #4
 800b9a4:	6822      	ldr	r2, [r4, #0]
 800b9a6:	f000 000f 	and.w	r0, r0, #15
 800b9aa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b9ae:	6020      	str	r0, [r4, #0]
 800b9b0:	e7b5      	b.n	800b91e <__hexnan+0x7a>
 800b9b2:	2508      	movs	r5, #8
 800b9b4:	e7b3      	b.n	800b91e <__hexnan+0x7a>
 800b9b6:	9b01      	ldr	r3, [sp, #4]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d0dd      	beq.n	800b978 <__hexnan+0xd4>
 800b9bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c0:	f1c3 0320 	rsb	r3, r3, #32
 800b9c4:	40da      	lsrs	r2, r3
 800b9c6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b9ca:	4013      	ands	r3, r2
 800b9cc:	f846 3c04 	str.w	r3, [r6, #-4]
 800b9d0:	e7d2      	b.n	800b978 <__hexnan+0xd4>
 800b9d2:	3f04      	subs	r7, #4
 800b9d4:	e7d0      	b.n	800b978 <__hexnan+0xd4>
 800b9d6:	2004      	movs	r0, #4
 800b9d8:	e7d5      	b.n	800b986 <__hexnan+0xe2>
	...

0800b9dc <sbrk_aligned>:
 800b9dc:	b570      	push	{r4, r5, r6, lr}
 800b9de:	4e0f      	ldr	r6, [pc, #60]	@ (800ba1c <sbrk_aligned+0x40>)
 800b9e0:	460c      	mov	r4, r1
 800b9e2:	6831      	ldr	r1, [r6, #0]
 800b9e4:	4605      	mov	r5, r0
 800b9e6:	b911      	cbnz	r1, 800b9ee <sbrk_aligned+0x12>
 800b9e8:	f001 f916 	bl	800cc18 <_sbrk_r>
 800b9ec:	6030      	str	r0, [r6, #0]
 800b9ee:	4621      	mov	r1, r4
 800b9f0:	4628      	mov	r0, r5
 800b9f2:	f001 f911 	bl	800cc18 <_sbrk_r>
 800b9f6:	1c43      	adds	r3, r0, #1
 800b9f8:	d103      	bne.n	800ba02 <sbrk_aligned+0x26>
 800b9fa:	f04f 34ff 	mov.w	r4, #4294967295
 800b9fe:	4620      	mov	r0, r4
 800ba00:	bd70      	pop	{r4, r5, r6, pc}
 800ba02:	1cc4      	adds	r4, r0, #3
 800ba04:	f024 0403 	bic.w	r4, r4, #3
 800ba08:	42a0      	cmp	r0, r4
 800ba0a:	d0f8      	beq.n	800b9fe <sbrk_aligned+0x22>
 800ba0c:	1a21      	subs	r1, r4, r0
 800ba0e:	4628      	mov	r0, r5
 800ba10:	f001 f902 	bl	800cc18 <_sbrk_r>
 800ba14:	3001      	adds	r0, #1
 800ba16:	d1f2      	bne.n	800b9fe <sbrk_aligned+0x22>
 800ba18:	e7ef      	b.n	800b9fa <sbrk_aligned+0x1e>
 800ba1a:	bf00      	nop
 800ba1c:	20001514 	.word	0x20001514

0800ba20 <_malloc_r>:
 800ba20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba24:	1ccd      	adds	r5, r1, #3
 800ba26:	f025 0503 	bic.w	r5, r5, #3
 800ba2a:	3508      	adds	r5, #8
 800ba2c:	2d0c      	cmp	r5, #12
 800ba2e:	bf38      	it	cc
 800ba30:	250c      	movcc	r5, #12
 800ba32:	2d00      	cmp	r5, #0
 800ba34:	4606      	mov	r6, r0
 800ba36:	db01      	blt.n	800ba3c <_malloc_r+0x1c>
 800ba38:	42a9      	cmp	r1, r5
 800ba3a:	d904      	bls.n	800ba46 <_malloc_r+0x26>
 800ba3c:	230c      	movs	r3, #12
 800ba3e:	6033      	str	r3, [r6, #0]
 800ba40:	2000      	movs	r0, #0
 800ba42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bb1c <_malloc_r+0xfc>
 800ba4a:	f000 f87b 	bl	800bb44 <__malloc_lock>
 800ba4e:	f8d8 3000 	ldr.w	r3, [r8]
 800ba52:	461c      	mov	r4, r3
 800ba54:	bb44      	cbnz	r4, 800baa8 <_malloc_r+0x88>
 800ba56:	4629      	mov	r1, r5
 800ba58:	4630      	mov	r0, r6
 800ba5a:	f7ff ffbf 	bl	800b9dc <sbrk_aligned>
 800ba5e:	1c43      	adds	r3, r0, #1
 800ba60:	4604      	mov	r4, r0
 800ba62:	d158      	bne.n	800bb16 <_malloc_r+0xf6>
 800ba64:	f8d8 4000 	ldr.w	r4, [r8]
 800ba68:	4627      	mov	r7, r4
 800ba6a:	2f00      	cmp	r7, #0
 800ba6c:	d143      	bne.n	800baf6 <_malloc_r+0xd6>
 800ba6e:	2c00      	cmp	r4, #0
 800ba70:	d04b      	beq.n	800bb0a <_malloc_r+0xea>
 800ba72:	6823      	ldr	r3, [r4, #0]
 800ba74:	4639      	mov	r1, r7
 800ba76:	4630      	mov	r0, r6
 800ba78:	eb04 0903 	add.w	r9, r4, r3
 800ba7c:	f001 f8cc 	bl	800cc18 <_sbrk_r>
 800ba80:	4581      	cmp	r9, r0
 800ba82:	d142      	bne.n	800bb0a <_malloc_r+0xea>
 800ba84:	6821      	ldr	r1, [r4, #0]
 800ba86:	4630      	mov	r0, r6
 800ba88:	1a6d      	subs	r5, r5, r1
 800ba8a:	4629      	mov	r1, r5
 800ba8c:	f7ff ffa6 	bl	800b9dc <sbrk_aligned>
 800ba90:	3001      	adds	r0, #1
 800ba92:	d03a      	beq.n	800bb0a <_malloc_r+0xea>
 800ba94:	6823      	ldr	r3, [r4, #0]
 800ba96:	442b      	add	r3, r5
 800ba98:	6023      	str	r3, [r4, #0]
 800ba9a:	f8d8 3000 	ldr.w	r3, [r8]
 800ba9e:	685a      	ldr	r2, [r3, #4]
 800baa0:	bb62      	cbnz	r2, 800bafc <_malloc_r+0xdc>
 800baa2:	f8c8 7000 	str.w	r7, [r8]
 800baa6:	e00f      	b.n	800bac8 <_malloc_r+0xa8>
 800baa8:	6822      	ldr	r2, [r4, #0]
 800baaa:	1b52      	subs	r2, r2, r5
 800baac:	d420      	bmi.n	800baf0 <_malloc_r+0xd0>
 800baae:	2a0b      	cmp	r2, #11
 800bab0:	d917      	bls.n	800bae2 <_malloc_r+0xc2>
 800bab2:	1961      	adds	r1, r4, r5
 800bab4:	42a3      	cmp	r3, r4
 800bab6:	6025      	str	r5, [r4, #0]
 800bab8:	bf18      	it	ne
 800baba:	6059      	strne	r1, [r3, #4]
 800babc:	6863      	ldr	r3, [r4, #4]
 800babe:	bf08      	it	eq
 800bac0:	f8c8 1000 	streq.w	r1, [r8]
 800bac4:	5162      	str	r2, [r4, r5]
 800bac6:	604b      	str	r3, [r1, #4]
 800bac8:	4630      	mov	r0, r6
 800baca:	f000 f841 	bl	800bb50 <__malloc_unlock>
 800bace:	f104 000b 	add.w	r0, r4, #11
 800bad2:	1d23      	adds	r3, r4, #4
 800bad4:	f020 0007 	bic.w	r0, r0, #7
 800bad8:	1ac2      	subs	r2, r0, r3
 800bada:	bf1c      	itt	ne
 800badc:	1a1b      	subne	r3, r3, r0
 800bade:	50a3      	strne	r3, [r4, r2]
 800bae0:	e7af      	b.n	800ba42 <_malloc_r+0x22>
 800bae2:	6862      	ldr	r2, [r4, #4]
 800bae4:	42a3      	cmp	r3, r4
 800bae6:	bf0c      	ite	eq
 800bae8:	f8c8 2000 	streq.w	r2, [r8]
 800baec:	605a      	strne	r2, [r3, #4]
 800baee:	e7eb      	b.n	800bac8 <_malloc_r+0xa8>
 800baf0:	4623      	mov	r3, r4
 800baf2:	6864      	ldr	r4, [r4, #4]
 800baf4:	e7ae      	b.n	800ba54 <_malloc_r+0x34>
 800baf6:	463c      	mov	r4, r7
 800baf8:	687f      	ldr	r7, [r7, #4]
 800bafa:	e7b6      	b.n	800ba6a <_malloc_r+0x4a>
 800bafc:	461a      	mov	r2, r3
 800bafe:	685b      	ldr	r3, [r3, #4]
 800bb00:	42a3      	cmp	r3, r4
 800bb02:	d1fb      	bne.n	800bafc <_malloc_r+0xdc>
 800bb04:	2300      	movs	r3, #0
 800bb06:	6053      	str	r3, [r2, #4]
 800bb08:	e7de      	b.n	800bac8 <_malloc_r+0xa8>
 800bb0a:	230c      	movs	r3, #12
 800bb0c:	4630      	mov	r0, r6
 800bb0e:	6033      	str	r3, [r6, #0]
 800bb10:	f000 f81e 	bl	800bb50 <__malloc_unlock>
 800bb14:	e794      	b.n	800ba40 <_malloc_r+0x20>
 800bb16:	6005      	str	r5, [r0, #0]
 800bb18:	e7d6      	b.n	800bac8 <_malloc_r+0xa8>
 800bb1a:	bf00      	nop
 800bb1c:	20001518 	.word	0x20001518

0800bb20 <__ascii_mbtowc>:
 800bb20:	b082      	sub	sp, #8
 800bb22:	b901      	cbnz	r1, 800bb26 <__ascii_mbtowc+0x6>
 800bb24:	a901      	add	r1, sp, #4
 800bb26:	b142      	cbz	r2, 800bb3a <__ascii_mbtowc+0x1a>
 800bb28:	b14b      	cbz	r3, 800bb3e <__ascii_mbtowc+0x1e>
 800bb2a:	7813      	ldrb	r3, [r2, #0]
 800bb2c:	600b      	str	r3, [r1, #0]
 800bb2e:	7812      	ldrb	r2, [r2, #0]
 800bb30:	1e10      	subs	r0, r2, #0
 800bb32:	bf18      	it	ne
 800bb34:	2001      	movne	r0, #1
 800bb36:	b002      	add	sp, #8
 800bb38:	4770      	bx	lr
 800bb3a:	4610      	mov	r0, r2
 800bb3c:	e7fb      	b.n	800bb36 <__ascii_mbtowc+0x16>
 800bb3e:	f06f 0001 	mvn.w	r0, #1
 800bb42:	e7f8      	b.n	800bb36 <__ascii_mbtowc+0x16>

0800bb44 <__malloc_lock>:
 800bb44:	4801      	ldr	r0, [pc, #4]	@ (800bb4c <__malloc_lock+0x8>)
 800bb46:	f7ff bba4 	b.w	800b292 <__retarget_lock_acquire_recursive>
 800bb4a:	bf00      	nop
 800bb4c:	20001510 	.word	0x20001510

0800bb50 <__malloc_unlock>:
 800bb50:	4801      	ldr	r0, [pc, #4]	@ (800bb58 <__malloc_unlock+0x8>)
 800bb52:	f7ff bb9f 	b.w	800b294 <__retarget_lock_release_recursive>
 800bb56:	bf00      	nop
 800bb58:	20001510 	.word	0x20001510

0800bb5c <_Balloc>:
 800bb5c:	b570      	push	{r4, r5, r6, lr}
 800bb5e:	69c6      	ldr	r6, [r0, #28]
 800bb60:	4604      	mov	r4, r0
 800bb62:	460d      	mov	r5, r1
 800bb64:	b976      	cbnz	r6, 800bb84 <_Balloc+0x28>
 800bb66:	2010      	movs	r0, #16
 800bb68:	f001 f8a6 	bl	800ccb8 <malloc>
 800bb6c:	4602      	mov	r2, r0
 800bb6e:	61e0      	str	r0, [r4, #28]
 800bb70:	b920      	cbnz	r0, 800bb7c <_Balloc+0x20>
 800bb72:	216b      	movs	r1, #107	@ 0x6b
 800bb74:	4b17      	ldr	r3, [pc, #92]	@ (800bbd4 <_Balloc+0x78>)
 800bb76:	4818      	ldr	r0, [pc, #96]	@ (800bbd8 <_Balloc+0x7c>)
 800bb78:	f001 f86c 	bl	800cc54 <__assert_func>
 800bb7c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb80:	6006      	str	r6, [r0, #0]
 800bb82:	60c6      	str	r6, [r0, #12]
 800bb84:	69e6      	ldr	r6, [r4, #28]
 800bb86:	68f3      	ldr	r3, [r6, #12]
 800bb88:	b183      	cbz	r3, 800bbac <_Balloc+0x50>
 800bb8a:	69e3      	ldr	r3, [r4, #28]
 800bb8c:	68db      	ldr	r3, [r3, #12]
 800bb8e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb92:	b9b8      	cbnz	r0, 800bbc4 <_Balloc+0x68>
 800bb94:	2101      	movs	r1, #1
 800bb96:	fa01 f605 	lsl.w	r6, r1, r5
 800bb9a:	1d72      	adds	r2, r6, #5
 800bb9c:	4620      	mov	r0, r4
 800bb9e:	0092      	lsls	r2, r2, #2
 800bba0:	f001 f876 	bl	800cc90 <_calloc_r>
 800bba4:	b160      	cbz	r0, 800bbc0 <_Balloc+0x64>
 800bba6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bbaa:	e00e      	b.n	800bbca <_Balloc+0x6e>
 800bbac:	2221      	movs	r2, #33	@ 0x21
 800bbae:	2104      	movs	r1, #4
 800bbb0:	4620      	mov	r0, r4
 800bbb2:	f001 f86d 	bl	800cc90 <_calloc_r>
 800bbb6:	69e3      	ldr	r3, [r4, #28]
 800bbb8:	60f0      	str	r0, [r6, #12]
 800bbba:	68db      	ldr	r3, [r3, #12]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d1e4      	bne.n	800bb8a <_Balloc+0x2e>
 800bbc0:	2000      	movs	r0, #0
 800bbc2:	bd70      	pop	{r4, r5, r6, pc}
 800bbc4:	6802      	ldr	r2, [r0, #0]
 800bbc6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bbca:	2300      	movs	r3, #0
 800bbcc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bbd0:	e7f7      	b.n	800bbc2 <_Balloc+0x66>
 800bbd2:	bf00      	nop
 800bbd4:	0800d6ba 	.word	0x0800d6ba
 800bbd8:	0800d6d1 	.word	0x0800d6d1

0800bbdc <_Bfree>:
 800bbdc:	b570      	push	{r4, r5, r6, lr}
 800bbde:	69c6      	ldr	r6, [r0, #28]
 800bbe0:	4605      	mov	r5, r0
 800bbe2:	460c      	mov	r4, r1
 800bbe4:	b976      	cbnz	r6, 800bc04 <_Bfree+0x28>
 800bbe6:	2010      	movs	r0, #16
 800bbe8:	f001 f866 	bl	800ccb8 <malloc>
 800bbec:	4602      	mov	r2, r0
 800bbee:	61e8      	str	r0, [r5, #28]
 800bbf0:	b920      	cbnz	r0, 800bbfc <_Bfree+0x20>
 800bbf2:	218f      	movs	r1, #143	@ 0x8f
 800bbf4:	4b08      	ldr	r3, [pc, #32]	@ (800bc18 <_Bfree+0x3c>)
 800bbf6:	4809      	ldr	r0, [pc, #36]	@ (800bc1c <_Bfree+0x40>)
 800bbf8:	f001 f82c 	bl	800cc54 <__assert_func>
 800bbfc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bc00:	6006      	str	r6, [r0, #0]
 800bc02:	60c6      	str	r6, [r0, #12]
 800bc04:	b13c      	cbz	r4, 800bc16 <_Bfree+0x3a>
 800bc06:	69eb      	ldr	r3, [r5, #28]
 800bc08:	6862      	ldr	r2, [r4, #4]
 800bc0a:	68db      	ldr	r3, [r3, #12]
 800bc0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bc10:	6021      	str	r1, [r4, #0]
 800bc12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bc16:	bd70      	pop	{r4, r5, r6, pc}
 800bc18:	0800d6ba 	.word	0x0800d6ba
 800bc1c:	0800d6d1 	.word	0x0800d6d1

0800bc20 <__multadd>:
 800bc20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc24:	4607      	mov	r7, r0
 800bc26:	460c      	mov	r4, r1
 800bc28:	461e      	mov	r6, r3
 800bc2a:	2000      	movs	r0, #0
 800bc2c:	690d      	ldr	r5, [r1, #16]
 800bc2e:	f101 0c14 	add.w	ip, r1, #20
 800bc32:	f8dc 3000 	ldr.w	r3, [ip]
 800bc36:	3001      	adds	r0, #1
 800bc38:	b299      	uxth	r1, r3
 800bc3a:	fb02 6101 	mla	r1, r2, r1, r6
 800bc3e:	0c1e      	lsrs	r6, r3, #16
 800bc40:	0c0b      	lsrs	r3, r1, #16
 800bc42:	fb02 3306 	mla	r3, r2, r6, r3
 800bc46:	b289      	uxth	r1, r1
 800bc48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc4c:	4285      	cmp	r5, r0
 800bc4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bc52:	f84c 1b04 	str.w	r1, [ip], #4
 800bc56:	dcec      	bgt.n	800bc32 <__multadd+0x12>
 800bc58:	b30e      	cbz	r6, 800bc9e <__multadd+0x7e>
 800bc5a:	68a3      	ldr	r3, [r4, #8]
 800bc5c:	42ab      	cmp	r3, r5
 800bc5e:	dc19      	bgt.n	800bc94 <__multadd+0x74>
 800bc60:	6861      	ldr	r1, [r4, #4]
 800bc62:	4638      	mov	r0, r7
 800bc64:	3101      	adds	r1, #1
 800bc66:	f7ff ff79 	bl	800bb5c <_Balloc>
 800bc6a:	4680      	mov	r8, r0
 800bc6c:	b928      	cbnz	r0, 800bc7a <__multadd+0x5a>
 800bc6e:	4602      	mov	r2, r0
 800bc70:	21ba      	movs	r1, #186	@ 0xba
 800bc72:	4b0c      	ldr	r3, [pc, #48]	@ (800bca4 <__multadd+0x84>)
 800bc74:	480c      	ldr	r0, [pc, #48]	@ (800bca8 <__multadd+0x88>)
 800bc76:	f000 ffed 	bl	800cc54 <__assert_func>
 800bc7a:	6922      	ldr	r2, [r4, #16]
 800bc7c:	f104 010c 	add.w	r1, r4, #12
 800bc80:	3202      	adds	r2, #2
 800bc82:	0092      	lsls	r2, r2, #2
 800bc84:	300c      	adds	r0, #12
 800bc86:	f7ff fb0e 	bl	800b2a6 <memcpy>
 800bc8a:	4621      	mov	r1, r4
 800bc8c:	4638      	mov	r0, r7
 800bc8e:	f7ff ffa5 	bl	800bbdc <_Bfree>
 800bc92:	4644      	mov	r4, r8
 800bc94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc98:	3501      	adds	r5, #1
 800bc9a:	615e      	str	r6, [r3, #20]
 800bc9c:	6125      	str	r5, [r4, #16]
 800bc9e:	4620      	mov	r0, r4
 800bca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bca4:	0800d649 	.word	0x0800d649
 800bca8:	0800d6d1 	.word	0x0800d6d1

0800bcac <__s2b>:
 800bcac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcb0:	4615      	mov	r5, r2
 800bcb2:	2209      	movs	r2, #9
 800bcb4:	461f      	mov	r7, r3
 800bcb6:	3308      	adds	r3, #8
 800bcb8:	460c      	mov	r4, r1
 800bcba:	fb93 f3f2 	sdiv	r3, r3, r2
 800bcbe:	4606      	mov	r6, r0
 800bcc0:	2201      	movs	r2, #1
 800bcc2:	2100      	movs	r1, #0
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	db09      	blt.n	800bcdc <__s2b+0x30>
 800bcc8:	4630      	mov	r0, r6
 800bcca:	f7ff ff47 	bl	800bb5c <_Balloc>
 800bcce:	b940      	cbnz	r0, 800bce2 <__s2b+0x36>
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	21d3      	movs	r1, #211	@ 0xd3
 800bcd4:	4b18      	ldr	r3, [pc, #96]	@ (800bd38 <__s2b+0x8c>)
 800bcd6:	4819      	ldr	r0, [pc, #100]	@ (800bd3c <__s2b+0x90>)
 800bcd8:	f000 ffbc 	bl	800cc54 <__assert_func>
 800bcdc:	0052      	lsls	r2, r2, #1
 800bcde:	3101      	adds	r1, #1
 800bce0:	e7f0      	b.n	800bcc4 <__s2b+0x18>
 800bce2:	9b08      	ldr	r3, [sp, #32]
 800bce4:	2d09      	cmp	r5, #9
 800bce6:	6143      	str	r3, [r0, #20]
 800bce8:	f04f 0301 	mov.w	r3, #1
 800bcec:	6103      	str	r3, [r0, #16]
 800bcee:	dd16      	ble.n	800bd1e <__s2b+0x72>
 800bcf0:	f104 0909 	add.w	r9, r4, #9
 800bcf4:	46c8      	mov	r8, r9
 800bcf6:	442c      	add	r4, r5
 800bcf8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bcfc:	4601      	mov	r1, r0
 800bcfe:	220a      	movs	r2, #10
 800bd00:	4630      	mov	r0, r6
 800bd02:	3b30      	subs	r3, #48	@ 0x30
 800bd04:	f7ff ff8c 	bl	800bc20 <__multadd>
 800bd08:	45a0      	cmp	r8, r4
 800bd0a:	d1f5      	bne.n	800bcf8 <__s2b+0x4c>
 800bd0c:	f1a5 0408 	sub.w	r4, r5, #8
 800bd10:	444c      	add	r4, r9
 800bd12:	1b2d      	subs	r5, r5, r4
 800bd14:	1963      	adds	r3, r4, r5
 800bd16:	42bb      	cmp	r3, r7
 800bd18:	db04      	blt.n	800bd24 <__s2b+0x78>
 800bd1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd1e:	2509      	movs	r5, #9
 800bd20:	340a      	adds	r4, #10
 800bd22:	e7f6      	b.n	800bd12 <__s2b+0x66>
 800bd24:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bd28:	4601      	mov	r1, r0
 800bd2a:	220a      	movs	r2, #10
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	3b30      	subs	r3, #48	@ 0x30
 800bd30:	f7ff ff76 	bl	800bc20 <__multadd>
 800bd34:	e7ee      	b.n	800bd14 <__s2b+0x68>
 800bd36:	bf00      	nop
 800bd38:	0800d649 	.word	0x0800d649
 800bd3c:	0800d6d1 	.word	0x0800d6d1

0800bd40 <__hi0bits>:
 800bd40:	4603      	mov	r3, r0
 800bd42:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800bd46:	bf3a      	itte	cc
 800bd48:	0403      	lslcc	r3, r0, #16
 800bd4a:	2010      	movcc	r0, #16
 800bd4c:	2000      	movcs	r0, #0
 800bd4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bd52:	bf3c      	itt	cc
 800bd54:	021b      	lslcc	r3, r3, #8
 800bd56:	3008      	addcc	r0, #8
 800bd58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd5c:	bf3c      	itt	cc
 800bd5e:	011b      	lslcc	r3, r3, #4
 800bd60:	3004      	addcc	r0, #4
 800bd62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bd66:	bf3c      	itt	cc
 800bd68:	009b      	lslcc	r3, r3, #2
 800bd6a:	3002      	addcc	r0, #2
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	db05      	blt.n	800bd7c <__hi0bits+0x3c>
 800bd70:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800bd74:	f100 0001 	add.w	r0, r0, #1
 800bd78:	bf08      	it	eq
 800bd7a:	2020      	moveq	r0, #32
 800bd7c:	4770      	bx	lr

0800bd7e <__lo0bits>:
 800bd7e:	6803      	ldr	r3, [r0, #0]
 800bd80:	4602      	mov	r2, r0
 800bd82:	f013 0007 	ands.w	r0, r3, #7
 800bd86:	d00b      	beq.n	800bda0 <__lo0bits+0x22>
 800bd88:	07d9      	lsls	r1, r3, #31
 800bd8a:	d421      	bmi.n	800bdd0 <__lo0bits+0x52>
 800bd8c:	0798      	lsls	r0, r3, #30
 800bd8e:	bf49      	itett	mi
 800bd90:	085b      	lsrmi	r3, r3, #1
 800bd92:	089b      	lsrpl	r3, r3, #2
 800bd94:	2001      	movmi	r0, #1
 800bd96:	6013      	strmi	r3, [r2, #0]
 800bd98:	bf5c      	itt	pl
 800bd9a:	2002      	movpl	r0, #2
 800bd9c:	6013      	strpl	r3, [r2, #0]
 800bd9e:	4770      	bx	lr
 800bda0:	b299      	uxth	r1, r3
 800bda2:	b909      	cbnz	r1, 800bda8 <__lo0bits+0x2a>
 800bda4:	2010      	movs	r0, #16
 800bda6:	0c1b      	lsrs	r3, r3, #16
 800bda8:	b2d9      	uxtb	r1, r3
 800bdaa:	b909      	cbnz	r1, 800bdb0 <__lo0bits+0x32>
 800bdac:	3008      	adds	r0, #8
 800bdae:	0a1b      	lsrs	r3, r3, #8
 800bdb0:	0719      	lsls	r1, r3, #28
 800bdb2:	bf04      	itt	eq
 800bdb4:	091b      	lsreq	r3, r3, #4
 800bdb6:	3004      	addeq	r0, #4
 800bdb8:	0799      	lsls	r1, r3, #30
 800bdba:	bf04      	itt	eq
 800bdbc:	089b      	lsreq	r3, r3, #2
 800bdbe:	3002      	addeq	r0, #2
 800bdc0:	07d9      	lsls	r1, r3, #31
 800bdc2:	d403      	bmi.n	800bdcc <__lo0bits+0x4e>
 800bdc4:	085b      	lsrs	r3, r3, #1
 800bdc6:	f100 0001 	add.w	r0, r0, #1
 800bdca:	d003      	beq.n	800bdd4 <__lo0bits+0x56>
 800bdcc:	6013      	str	r3, [r2, #0]
 800bdce:	4770      	bx	lr
 800bdd0:	2000      	movs	r0, #0
 800bdd2:	4770      	bx	lr
 800bdd4:	2020      	movs	r0, #32
 800bdd6:	4770      	bx	lr

0800bdd8 <__i2b>:
 800bdd8:	b510      	push	{r4, lr}
 800bdda:	460c      	mov	r4, r1
 800bddc:	2101      	movs	r1, #1
 800bdde:	f7ff febd 	bl	800bb5c <_Balloc>
 800bde2:	4602      	mov	r2, r0
 800bde4:	b928      	cbnz	r0, 800bdf2 <__i2b+0x1a>
 800bde6:	f240 1145 	movw	r1, #325	@ 0x145
 800bdea:	4b04      	ldr	r3, [pc, #16]	@ (800bdfc <__i2b+0x24>)
 800bdec:	4804      	ldr	r0, [pc, #16]	@ (800be00 <__i2b+0x28>)
 800bdee:	f000 ff31 	bl	800cc54 <__assert_func>
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	6144      	str	r4, [r0, #20]
 800bdf6:	6103      	str	r3, [r0, #16]
 800bdf8:	bd10      	pop	{r4, pc}
 800bdfa:	bf00      	nop
 800bdfc:	0800d649 	.word	0x0800d649
 800be00:	0800d6d1 	.word	0x0800d6d1

0800be04 <__multiply>:
 800be04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be08:	4614      	mov	r4, r2
 800be0a:	690a      	ldr	r2, [r1, #16]
 800be0c:	6923      	ldr	r3, [r4, #16]
 800be0e:	460f      	mov	r7, r1
 800be10:	429a      	cmp	r2, r3
 800be12:	bfa2      	ittt	ge
 800be14:	4623      	movge	r3, r4
 800be16:	460c      	movge	r4, r1
 800be18:	461f      	movge	r7, r3
 800be1a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800be1e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800be22:	68a3      	ldr	r3, [r4, #8]
 800be24:	6861      	ldr	r1, [r4, #4]
 800be26:	eb0a 0609 	add.w	r6, sl, r9
 800be2a:	42b3      	cmp	r3, r6
 800be2c:	b085      	sub	sp, #20
 800be2e:	bfb8      	it	lt
 800be30:	3101      	addlt	r1, #1
 800be32:	f7ff fe93 	bl	800bb5c <_Balloc>
 800be36:	b930      	cbnz	r0, 800be46 <__multiply+0x42>
 800be38:	4602      	mov	r2, r0
 800be3a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800be3e:	4b43      	ldr	r3, [pc, #268]	@ (800bf4c <__multiply+0x148>)
 800be40:	4843      	ldr	r0, [pc, #268]	@ (800bf50 <__multiply+0x14c>)
 800be42:	f000 ff07 	bl	800cc54 <__assert_func>
 800be46:	f100 0514 	add.w	r5, r0, #20
 800be4a:	462b      	mov	r3, r5
 800be4c:	2200      	movs	r2, #0
 800be4e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800be52:	4543      	cmp	r3, r8
 800be54:	d321      	bcc.n	800be9a <__multiply+0x96>
 800be56:	f107 0114 	add.w	r1, r7, #20
 800be5a:	f104 0214 	add.w	r2, r4, #20
 800be5e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800be62:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800be66:	9302      	str	r3, [sp, #8]
 800be68:	1b13      	subs	r3, r2, r4
 800be6a:	3b15      	subs	r3, #21
 800be6c:	f023 0303 	bic.w	r3, r3, #3
 800be70:	3304      	adds	r3, #4
 800be72:	f104 0715 	add.w	r7, r4, #21
 800be76:	42ba      	cmp	r2, r7
 800be78:	bf38      	it	cc
 800be7a:	2304      	movcc	r3, #4
 800be7c:	9301      	str	r3, [sp, #4]
 800be7e:	9b02      	ldr	r3, [sp, #8]
 800be80:	9103      	str	r1, [sp, #12]
 800be82:	428b      	cmp	r3, r1
 800be84:	d80c      	bhi.n	800bea0 <__multiply+0x9c>
 800be86:	2e00      	cmp	r6, #0
 800be88:	dd03      	ble.n	800be92 <__multiply+0x8e>
 800be8a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d05a      	beq.n	800bf48 <__multiply+0x144>
 800be92:	6106      	str	r6, [r0, #16]
 800be94:	b005      	add	sp, #20
 800be96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be9a:	f843 2b04 	str.w	r2, [r3], #4
 800be9e:	e7d8      	b.n	800be52 <__multiply+0x4e>
 800bea0:	f8b1 a000 	ldrh.w	sl, [r1]
 800bea4:	f1ba 0f00 	cmp.w	sl, #0
 800bea8:	d023      	beq.n	800bef2 <__multiply+0xee>
 800beaa:	46a9      	mov	r9, r5
 800beac:	f04f 0c00 	mov.w	ip, #0
 800beb0:	f104 0e14 	add.w	lr, r4, #20
 800beb4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800beb8:	f8d9 3000 	ldr.w	r3, [r9]
 800bebc:	fa1f fb87 	uxth.w	fp, r7
 800bec0:	b29b      	uxth	r3, r3
 800bec2:	fb0a 330b 	mla	r3, sl, fp, r3
 800bec6:	4463      	add	r3, ip
 800bec8:	f8d9 c000 	ldr.w	ip, [r9]
 800becc:	0c3f      	lsrs	r7, r7, #16
 800bece:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800bed2:	fb0a c707 	mla	r7, sl, r7, ip
 800bed6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800beda:	b29b      	uxth	r3, r3
 800bedc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bee0:	4572      	cmp	r2, lr
 800bee2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800bee6:	f849 3b04 	str.w	r3, [r9], #4
 800beea:	d8e3      	bhi.n	800beb4 <__multiply+0xb0>
 800beec:	9b01      	ldr	r3, [sp, #4]
 800beee:	f845 c003 	str.w	ip, [r5, r3]
 800bef2:	9b03      	ldr	r3, [sp, #12]
 800bef4:	3104      	adds	r1, #4
 800bef6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800befa:	f1b9 0f00 	cmp.w	r9, #0
 800befe:	d021      	beq.n	800bf44 <__multiply+0x140>
 800bf00:	46ae      	mov	lr, r5
 800bf02:	f04f 0a00 	mov.w	sl, #0
 800bf06:	682b      	ldr	r3, [r5, #0]
 800bf08:	f104 0c14 	add.w	ip, r4, #20
 800bf0c:	f8bc b000 	ldrh.w	fp, [ip]
 800bf10:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	fb09 770b 	mla	r7, r9, fp, r7
 800bf1a:	4457      	add	r7, sl
 800bf1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800bf20:	f84e 3b04 	str.w	r3, [lr], #4
 800bf24:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bf28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf2c:	f8be 3000 	ldrh.w	r3, [lr]
 800bf30:	4562      	cmp	r2, ip
 800bf32:	fb09 330a 	mla	r3, r9, sl, r3
 800bf36:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800bf3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bf3e:	d8e5      	bhi.n	800bf0c <__multiply+0x108>
 800bf40:	9f01      	ldr	r7, [sp, #4]
 800bf42:	51eb      	str	r3, [r5, r7]
 800bf44:	3504      	adds	r5, #4
 800bf46:	e79a      	b.n	800be7e <__multiply+0x7a>
 800bf48:	3e01      	subs	r6, #1
 800bf4a:	e79c      	b.n	800be86 <__multiply+0x82>
 800bf4c:	0800d649 	.word	0x0800d649
 800bf50:	0800d6d1 	.word	0x0800d6d1

0800bf54 <__pow5mult>:
 800bf54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf58:	4615      	mov	r5, r2
 800bf5a:	f012 0203 	ands.w	r2, r2, #3
 800bf5e:	4607      	mov	r7, r0
 800bf60:	460e      	mov	r6, r1
 800bf62:	d007      	beq.n	800bf74 <__pow5mult+0x20>
 800bf64:	4c25      	ldr	r4, [pc, #148]	@ (800bffc <__pow5mult+0xa8>)
 800bf66:	3a01      	subs	r2, #1
 800bf68:	2300      	movs	r3, #0
 800bf6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bf6e:	f7ff fe57 	bl	800bc20 <__multadd>
 800bf72:	4606      	mov	r6, r0
 800bf74:	10ad      	asrs	r5, r5, #2
 800bf76:	d03d      	beq.n	800bff4 <__pow5mult+0xa0>
 800bf78:	69fc      	ldr	r4, [r7, #28]
 800bf7a:	b97c      	cbnz	r4, 800bf9c <__pow5mult+0x48>
 800bf7c:	2010      	movs	r0, #16
 800bf7e:	f000 fe9b 	bl	800ccb8 <malloc>
 800bf82:	4602      	mov	r2, r0
 800bf84:	61f8      	str	r0, [r7, #28]
 800bf86:	b928      	cbnz	r0, 800bf94 <__pow5mult+0x40>
 800bf88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bf8c:	4b1c      	ldr	r3, [pc, #112]	@ (800c000 <__pow5mult+0xac>)
 800bf8e:	481d      	ldr	r0, [pc, #116]	@ (800c004 <__pow5mult+0xb0>)
 800bf90:	f000 fe60 	bl	800cc54 <__assert_func>
 800bf94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bf98:	6004      	str	r4, [r0, #0]
 800bf9a:	60c4      	str	r4, [r0, #12]
 800bf9c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bfa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bfa4:	b94c      	cbnz	r4, 800bfba <__pow5mult+0x66>
 800bfa6:	f240 2171 	movw	r1, #625	@ 0x271
 800bfaa:	4638      	mov	r0, r7
 800bfac:	f7ff ff14 	bl	800bdd8 <__i2b>
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	4604      	mov	r4, r0
 800bfb4:	f8c8 0008 	str.w	r0, [r8, #8]
 800bfb8:	6003      	str	r3, [r0, #0]
 800bfba:	f04f 0900 	mov.w	r9, #0
 800bfbe:	07eb      	lsls	r3, r5, #31
 800bfc0:	d50a      	bpl.n	800bfd8 <__pow5mult+0x84>
 800bfc2:	4631      	mov	r1, r6
 800bfc4:	4622      	mov	r2, r4
 800bfc6:	4638      	mov	r0, r7
 800bfc8:	f7ff ff1c 	bl	800be04 <__multiply>
 800bfcc:	4680      	mov	r8, r0
 800bfce:	4631      	mov	r1, r6
 800bfd0:	4638      	mov	r0, r7
 800bfd2:	f7ff fe03 	bl	800bbdc <_Bfree>
 800bfd6:	4646      	mov	r6, r8
 800bfd8:	106d      	asrs	r5, r5, #1
 800bfda:	d00b      	beq.n	800bff4 <__pow5mult+0xa0>
 800bfdc:	6820      	ldr	r0, [r4, #0]
 800bfde:	b938      	cbnz	r0, 800bff0 <__pow5mult+0x9c>
 800bfe0:	4622      	mov	r2, r4
 800bfe2:	4621      	mov	r1, r4
 800bfe4:	4638      	mov	r0, r7
 800bfe6:	f7ff ff0d 	bl	800be04 <__multiply>
 800bfea:	6020      	str	r0, [r4, #0]
 800bfec:	f8c0 9000 	str.w	r9, [r0]
 800bff0:	4604      	mov	r4, r0
 800bff2:	e7e4      	b.n	800bfbe <__pow5mult+0x6a>
 800bff4:	4630      	mov	r0, r6
 800bff6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bffa:	bf00      	nop
 800bffc:	0800d72c 	.word	0x0800d72c
 800c000:	0800d6ba 	.word	0x0800d6ba
 800c004:	0800d6d1 	.word	0x0800d6d1

0800c008 <__lshift>:
 800c008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c00c:	460c      	mov	r4, r1
 800c00e:	4607      	mov	r7, r0
 800c010:	4691      	mov	r9, r2
 800c012:	6923      	ldr	r3, [r4, #16]
 800c014:	6849      	ldr	r1, [r1, #4]
 800c016:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c01a:	68a3      	ldr	r3, [r4, #8]
 800c01c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c020:	f108 0601 	add.w	r6, r8, #1
 800c024:	42b3      	cmp	r3, r6
 800c026:	db0b      	blt.n	800c040 <__lshift+0x38>
 800c028:	4638      	mov	r0, r7
 800c02a:	f7ff fd97 	bl	800bb5c <_Balloc>
 800c02e:	4605      	mov	r5, r0
 800c030:	b948      	cbnz	r0, 800c046 <__lshift+0x3e>
 800c032:	4602      	mov	r2, r0
 800c034:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c038:	4b27      	ldr	r3, [pc, #156]	@ (800c0d8 <__lshift+0xd0>)
 800c03a:	4828      	ldr	r0, [pc, #160]	@ (800c0dc <__lshift+0xd4>)
 800c03c:	f000 fe0a 	bl	800cc54 <__assert_func>
 800c040:	3101      	adds	r1, #1
 800c042:	005b      	lsls	r3, r3, #1
 800c044:	e7ee      	b.n	800c024 <__lshift+0x1c>
 800c046:	2300      	movs	r3, #0
 800c048:	f100 0114 	add.w	r1, r0, #20
 800c04c:	f100 0210 	add.w	r2, r0, #16
 800c050:	4618      	mov	r0, r3
 800c052:	4553      	cmp	r3, sl
 800c054:	db33      	blt.n	800c0be <__lshift+0xb6>
 800c056:	6920      	ldr	r0, [r4, #16]
 800c058:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c05c:	f104 0314 	add.w	r3, r4, #20
 800c060:	f019 091f 	ands.w	r9, r9, #31
 800c064:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c068:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c06c:	d02b      	beq.n	800c0c6 <__lshift+0xbe>
 800c06e:	468a      	mov	sl, r1
 800c070:	2200      	movs	r2, #0
 800c072:	f1c9 0e20 	rsb	lr, r9, #32
 800c076:	6818      	ldr	r0, [r3, #0]
 800c078:	fa00 f009 	lsl.w	r0, r0, r9
 800c07c:	4310      	orrs	r0, r2
 800c07e:	f84a 0b04 	str.w	r0, [sl], #4
 800c082:	f853 2b04 	ldr.w	r2, [r3], #4
 800c086:	459c      	cmp	ip, r3
 800c088:	fa22 f20e 	lsr.w	r2, r2, lr
 800c08c:	d8f3      	bhi.n	800c076 <__lshift+0x6e>
 800c08e:	ebac 0304 	sub.w	r3, ip, r4
 800c092:	3b15      	subs	r3, #21
 800c094:	f023 0303 	bic.w	r3, r3, #3
 800c098:	3304      	adds	r3, #4
 800c09a:	f104 0015 	add.w	r0, r4, #21
 800c09e:	4584      	cmp	ip, r0
 800c0a0:	bf38      	it	cc
 800c0a2:	2304      	movcc	r3, #4
 800c0a4:	50ca      	str	r2, [r1, r3]
 800c0a6:	b10a      	cbz	r2, 800c0ac <__lshift+0xa4>
 800c0a8:	f108 0602 	add.w	r6, r8, #2
 800c0ac:	3e01      	subs	r6, #1
 800c0ae:	4638      	mov	r0, r7
 800c0b0:	4621      	mov	r1, r4
 800c0b2:	612e      	str	r6, [r5, #16]
 800c0b4:	f7ff fd92 	bl	800bbdc <_Bfree>
 800c0b8:	4628      	mov	r0, r5
 800c0ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0be:	f842 0f04 	str.w	r0, [r2, #4]!
 800c0c2:	3301      	adds	r3, #1
 800c0c4:	e7c5      	b.n	800c052 <__lshift+0x4a>
 800c0c6:	3904      	subs	r1, #4
 800c0c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0cc:	459c      	cmp	ip, r3
 800c0ce:	f841 2f04 	str.w	r2, [r1, #4]!
 800c0d2:	d8f9      	bhi.n	800c0c8 <__lshift+0xc0>
 800c0d4:	e7ea      	b.n	800c0ac <__lshift+0xa4>
 800c0d6:	bf00      	nop
 800c0d8:	0800d649 	.word	0x0800d649
 800c0dc:	0800d6d1 	.word	0x0800d6d1

0800c0e0 <__mcmp>:
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	690a      	ldr	r2, [r1, #16]
 800c0e4:	6900      	ldr	r0, [r0, #16]
 800c0e6:	b530      	push	{r4, r5, lr}
 800c0e8:	1a80      	subs	r0, r0, r2
 800c0ea:	d10e      	bne.n	800c10a <__mcmp+0x2a>
 800c0ec:	3314      	adds	r3, #20
 800c0ee:	3114      	adds	r1, #20
 800c0f0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c0f4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c0f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c0fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c100:	4295      	cmp	r5, r2
 800c102:	d003      	beq.n	800c10c <__mcmp+0x2c>
 800c104:	d205      	bcs.n	800c112 <__mcmp+0x32>
 800c106:	f04f 30ff 	mov.w	r0, #4294967295
 800c10a:	bd30      	pop	{r4, r5, pc}
 800c10c:	42a3      	cmp	r3, r4
 800c10e:	d3f3      	bcc.n	800c0f8 <__mcmp+0x18>
 800c110:	e7fb      	b.n	800c10a <__mcmp+0x2a>
 800c112:	2001      	movs	r0, #1
 800c114:	e7f9      	b.n	800c10a <__mcmp+0x2a>
	...

0800c118 <__mdiff>:
 800c118:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c11c:	4689      	mov	r9, r1
 800c11e:	4606      	mov	r6, r0
 800c120:	4611      	mov	r1, r2
 800c122:	4648      	mov	r0, r9
 800c124:	4614      	mov	r4, r2
 800c126:	f7ff ffdb 	bl	800c0e0 <__mcmp>
 800c12a:	1e05      	subs	r5, r0, #0
 800c12c:	d112      	bne.n	800c154 <__mdiff+0x3c>
 800c12e:	4629      	mov	r1, r5
 800c130:	4630      	mov	r0, r6
 800c132:	f7ff fd13 	bl	800bb5c <_Balloc>
 800c136:	4602      	mov	r2, r0
 800c138:	b928      	cbnz	r0, 800c146 <__mdiff+0x2e>
 800c13a:	f240 2137 	movw	r1, #567	@ 0x237
 800c13e:	4b3e      	ldr	r3, [pc, #248]	@ (800c238 <__mdiff+0x120>)
 800c140:	483e      	ldr	r0, [pc, #248]	@ (800c23c <__mdiff+0x124>)
 800c142:	f000 fd87 	bl	800cc54 <__assert_func>
 800c146:	2301      	movs	r3, #1
 800c148:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c14c:	4610      	mov	r0, r2
 800c14e:	b003      	add	sp, #12
 800c150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c154:	bfbc      	itt	lt
 800c156:	464b      	movlt	r3, r9
 800c158:	46a1      	movlt	r9, r4
 800c15a:	4630      	mov	r0, r6
 800c15c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c160:	bfba      	itte	lt
 800c162:	461c      	movlt	r4, r3
 800c164:	2501      	movlt	r5, #1
 800c166:	2500      	movge	r5, #0
 800c168:	f7ff fcf8 	bl	800bb5c <_Balloc>
 800c16c:	4602      	mov	r2, r0
 800c16e:	b918      	cbnz	r0, 800c178 <__mdiff+0x60>
 800c170:	f240 2145 	movw	r1, #581	@ 0x245
 800c174:	4b30      	ldr	r3, [pc, #192]	@ (800c238 <__mdiff+0x120>)
 800c176:	e7e3      	b.n	800c140 <__mdiff+0x28>
 800c178:	f100 0b14 	add.w	fp, r0, #20
 800c17c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c180:	f109 0310 	add.w	r3, r9, #16
 800c184:	60c5      	str	r5, [r0, #12]
 800c186:	f04f 0c00 	mov.w	ip, #0
 800c18a:	f109 0514 	add.w	r5, r9, #20
 800c18e:	46d9      	mov	r9, fp
 800c190:	6926      	ldr	r6, [r4, #16]
 800c192:	f104 0e14 	add.w	lr, r4, #20
 800c196:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c19a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c19e:	9301      	str	r3, [sp, #4]
 800c1a0:	9b01      	ldr	r3, [sp, #4]
 800c1a2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c1a6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c1aa:	b281      	uxth	r1, r0
 800c1ac:	9301      	str	r3, [sp, #4]
 800c1ae:	fa1f f38a 	uxth.w	r3, sl
 800c1b2:	1a5b      	subs	r3, r3, r1
 800c1b4:	0c00      	lsrs	r0, r0, #16
 800c1b6:	4463      	add	r3, ip
 800c1b8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c1bc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c1c6:	4576      	cmp	r6, lr
 800c1c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c1cc:	f849 3b04 	str.w	r3, [r9], #4
 800c1d0:	d8e6      	bhi.n	800c1a0 <__mdiff+0x88>
 800c1d2:	1b33      	subs	r3, r6, r4
 800c1d4:	3b15      	subs	r3, #21
 800c1d6:	f023 0303 	bic.w	r3, r3, #3
 800c1da:	3415      	adds	r4, #21
 800c1dc:	3304      	adds	r3, #4
 800c1de:	42a6      	cmp	r6, r4
 800c1e0:	bf38      	it	cc
 800c1e2:	2304      	movcc	r3, #4
 800c1e4:	441d      	add	r5, r3
 800c1e6:	445b      	add	r3, fp
 800c1e8:	461e      	mov	r6, r3
 800c1ea:	462c      	mov	r4, r5
 800c1ec:	4544      	cmp	r4, r8
 800c1ee:	d30e      	bcc.n	800c20e <__mdiff+0xf6>
 800c1f0:	f108 0103 	add.w	r1, r8, #3
 800c1f4:	1b49      	subs	r1, r1, r5
 800c1f6:	f021 0103 	bic.w	r1, r1, #3
 800c1fa:	3d03      	subs	r5, #3
 800c1fc:	45a8      	cmp	r8, r5
 800c1fe:	bf38      	it	cc
 800c200:	2100      	movcc	r1, #0
 800c202:	440b      	add	r3, r1
 800c204:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c208:	b199      	cbz	r1, 800c232 <__mdiff+0x11a>
 800c20a:	6117      	str	r7, [r2, #16]
 800c20c:	e79e      	b.n	800c14c <__mdiff+0x34>
 800c20e:	46e6      	mov	lr, ip
 800c210:	f854 1b04 	ldr.w	r1, [r4], #4
 800c214:	fa1f fc81 	uxth.w	ip, r1
 800c218:	44f4      	add	ip, lr
 800c21a:	0c08      	lsrs	r0, r1, #16
 800c21c:	4471      	add	r1, lr
 800c21e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c222:	b289      	uxth	r1, r1
 800c224:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c228:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c22c:	f846 1b04 	str.w	r1, [r6], #4
 800c230:	e7dc      	b.n	800c1ec <__mdiff+0xd4>
 800c232:	3f01      	subs	r7, #1
 800c234:	e7e6      	b.n	800c204 <__mdiff+0xec>
 800c236:	bf00      	nop
 800c238:	0800d649 	.word	0x0800d649
 800c23c:	0800d6d1 	.word	0x0800d6d1

0800c240 <__ulp>:
 800c240:	4b0e      	ldr	r3, [pc, #56]	@ (800c27c <__ulp+0x3c>)
 800c242:	400b      	ands	r3, r1
 800c244:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c248:	2b00      	cmp	r3, #0
 800c24a:	dc08      	bgt.n	800c25e <__ulp+0x1e>
 800c24c:	425b      	negs	r3, r3
 800c24e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c252:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c256:	da04      	bge.n	800c262 <__ulp+0x22>
 800c258:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c25c:	4113      	asrs	r3, r2
 800c25e:	2200      	movs	r2, #0
 800c260:	e008      	b.n	800c274 <__ulp+0x34>
 800c262:	f1a2 0314 	sub.w	r3, r2, #20
 800c266:	2b1e      	cmp	r3, #30
 800c268:	bfd6      	itet	le
 800c26a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c26e:	2201      	movgt	r2, #1
 800c270:	40da      	lsrle	r2, r3
 800c272:	2300      	movs	r3, #0
 800c274:	4619      	mov	r1, r3
 800c276:	4610      	mov	r0, r2
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop
 800c27c:	7ff00000 	.word	0x7ff00000

0800c280 <__b2d>:
 800c280:	6902      	ldr	r2, [r0, #16]
 800c282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c284:	f100 0614 	add.w	r6, r0, #20
 800c288:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800c28c:	f852 4c04 	ldr.w	r4, [r2, #-4]
 800c290:	4f1e      	ldr	r7, [pc, #120]	@ (800c30c <__b2d+0x8c>)
 800c292:	4620      	mov	r0, r4
 800c294:	f7ff fd54 	bl	800bd40 <__hi0bits>
 800c298:	4603      	mov	r3, r0
 800c29a:	f1c0 0020 	rsb	r0, r0, #32
 800c29e:	2b0a      	cmp	r3, #10
 800c2a0:	f1a2 0504 	sub.w	r5, r2, #4
 800c2a4:	6008      	str	r0, [r1, #0]
 800c2a6:	dc12      	bgt.n	800c2ce <__b2d+0x4e>
 800c2a8:	42ae      	cmp	r6, r5
 800c2aa:	bf2c      	ite	cs
 800c2ac:	2200      	movcs	r2, #0
 800c2ae:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800c2b2:	f1c3 0c0b 	rsb	ip, r3, #11
 800c2b6:	3315      	adds	r3, #21
 800c2b8:	fa24 fe0c 	lsr.w	lr, r4, ip
 800c2bc:	fa04 f303 	lsl.w	r3, r4, r3
 800c2c0:	fa22 f20c 	lsr.w	r2, r2, ip
 800c2c4:	ea4e 0107 	orr.w	r1, lr, r7
 800c2c8:	431a      	orrs	r2, r3
 800c2ca:	4610      	mov	r0, r2
 800c2cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2ce:	42ae      	cmp	r6, r5
 800c2d0:	bf36      	itet	cc
 800c2d2:	f1a2 0508 	subcc.w	r5, r2, #8
 800c2d6:	2200      	movcs	r2, #0
 800c2d8:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 800c2dc:	3b0b      	subs	r3, #11
 800c2de:	d012      	beq.n	800c306 <__b2d+0x86>
 800c2e0:	f1c3 0720 	rsb	r7, r3, #32
 800c2e4:	fa22 f107 	lsr.w	r1, r2, r7
 800c2e8:	409c      	lsls	r4, r3
 800c2ea:	430c      	orrs	r4, r1
 800c2ec:	42b5      	cmp	r5, r6
 800c2ee:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800c2f2:	bf94      	ite	ls
 800c2f4:	2400      	movls	r4, #0
 800c2f6:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 800c2fa:	409a      	lsls	r2, r3
 800c2fc:	40fc      	lsrs	r4, r7
 800c2fe:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800c302:	4322      	orrs	r2, r4
 800c304:	e7e1      	b.n	800c2ca <__b2d+0x4a>
 800c306:	ea44 0107 	orr.w	r1, r4, r7
 800c30a:	e7de      	b.n	800c2ca <__b2d+0x4a>
 800c30c:	3ff00000 	.word	0x3ff00000

0800c310 <__d2b>:
 800c310:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800c314:	2101      	movs	r1, #1
 800c316:	4690      	mov	r8, r2
 800c318:	4699      	mov	r9, r3
 800c31a:	9e08      	ldr	r6, [sp, #32]
 800c31c:	f7ff fc1e 	bl	800bb5c <_Balloc>
 800c320:	4604      	mov	r4, r0
 800c322:	b930      	cbnz	r0, 800c332 <__d2b+0x22>
 800c324:	4602      	mov	r2, r0
 800c326:	f240 310f 	movw	r1, #783	@ 0x30f
 800c32a:	4b23      	ldr	r3, [pc, #140]	@ (800c3b8 <__d2b+0xa8>)
 800c32c:	4823      	ldr	r0, [pc, #140]	@ (800c3bc <__d2b+0xac>)
 800c32e:	f000 fc91 	bl	800cc54 <__assert_func>
 800c332:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c336:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c33a:	b10d      	cbz	r5, 800c340 <__d2b+0x30>
 800c33c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c340:	9301      	str	r3, [sp, #4]
 800c342:	f1b8 0300 	subs.w	r3, r8, #0
 800c346:	d024      	beq.n	800c392 <__d2b+0x82>
 800c348:	4668      	mov	r0, sp
 800c34a:	9300      	str	r3, [sp, #0]
 800c34c:	f7ff fd17 	bl	800bd7e <__lo0bits>
 800c350:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c354:	b1d8      	cbz	r0, 800c38e <__d2b+0x7e>
 800c356:	f1c0 0320 	rsb	r3, r0, #32
 800c35a:	fa02 f303 	lsl.w	r3, r2, r3
 800c35e:	430b      	orrs	r3, r1
 800c360:	40c2      	lsrs	r2, r0
 800c362:	6163      	str	r3, [r4, #20]
 800c364:	9201      	str	r2, [sp, #4]
 800c366:	9b01      	ldr	r3, [sp, #4]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	bf0c      	ite	eq
 800c36c:	2201      	moveq	r2, #1
 800c36e:	2202      	movne	r2, #2
 800c370:	61a3      	str	r3, [r4, #24]
 800c372:	6122      	str	r2, [r4, #16]
 800c374:	b1ad      	cbz	r5, 800c3a2 <__d2b+0x92>
 800c376:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c37a:	4405      	add	r5, r0
 800c37c:	6035      	str	r5, [r6, #0]
 800c37e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c384:	6018      	str	r0, [r3, #0]
 800c386:	4620      	mov	r0, r4
 800c388:	b002      	add	sp, #8
 800c38a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c38e:	6161      	str	r1, [r4, #20]
 800c390:	e7e9      	b.n	800c366 <__d2b+0x56>
 800c392:	a801      	add	r0, sp, #4
 800c394:	f7ff fcf3 	bl	800bd7e <__lo0bits>
 800c398:	9b01      	ldr	r3, [sp, #4]
 800c39a:	2201      	movs	r2, #1
 800c39c:	6163      	str	r3, [r4, #20]
 800c39e:	3020      	adds	r0, #32
 800c3a0:	e7e7      	b.n	800c372 <__d2b+0x62>
 800c3a2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c3a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c3aa:	6030      	str	r0, [r6, #0]
 800c3ac:	6918      	ldr	r0, [r3, #16]
 800c3ae:	f7ff fcc7 	bl	800bd40 <__hi0bits>
 800c3b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c3b6:	e7e4      	b.n	800c382 <__d2b+0x72>
 800c3b8:	0800d649 	.word	0x0800d649
 800c3bc:	0800d6d1 	.word	0x0800d6d1

0800c3c0 <__ratio>:
 800c3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3c4:	b085      	sub	sp, #20
 800c3c6:	e9cd 1000 	strd	r1, r0, [sp]
 800c3ca:	a902      	add	r1, sp, #8
 800c3cc:	f7ff ff58 	bl	800c280 <__b2d>
 800c3d0:	468b      	mov	fp, r1
 800c3d2:	4606      	mov	r6, r0
 800c3d4:	460f      	mov	r7, r1
 800c3d6:	9800      	ldr	r0, [sp, #0]
 800c3d8:	a903      	add	r1, sp, #12
 800c3da:	f7ff ff51 	bl	800c280 <__b2d>
 800c3de:	460d      	mov	r5, r1
 800c3e0:	9b01      	ldr	r3, [sp, #4]
 800c3e2:	4689      	mov	r9, r1
 800c3e4:	6919      	ldr	r1, [r3, #16]
 800c3e6:	9b00      	ldr	r3, [sp, #0]
 800c3e8:	4604      	mov	r4, r0
 800c3ea:	691b      	ldr	r3, [r3, #16]
 800c3ec:	4630      	mov	r0, r6
 800c3ee:	1ac9      	subs	r1, r1, r3
 800c3f0:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c3f4:	1a9b      	subs	r3, r3, r2
 800c3f6:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	bfcd      	iteet	gt
 800c3fe:	463a      	movgt	r2, r7
 800c400:	462a      	movle	r2, r5
 800c402:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c406:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c40a:	bfd8      	it	le
 800c40c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c410:	464b      	mov	r3, r9
 800c412:	4622      	mov	r2, r4
 800c414:	4659      	mov	r1, fp
 800c416:	f7f4 f98b 	bl	8000730 <__aeabi_ddiv>
 800c41a:	b005      	add	sp, #20
 800c41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c420 <__copybits>:
 800c420:	3901      	subs	r1, #1
 800c422:	b570      	push	{r4, r5, r6, lr}
 800c424:	1149      	asrs	r1, r1, #5
 800c426:	6914      	ldr	r4, [r2, #16]
 800c428:	3101      	adds	r1, #1
 800c42a:	f102 0314 	add.w	r3, r2, #20
 800c42e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c432:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c436:	1f05      	subs	r5, r0, #4
 800c438:	42a3      	cmp	r3, r4
 800c43a:	d30c      	bcc.n	800c456 <__copybits+0x36>
 800c43c:	1aa3      	subs	r3, r4, r2
 800c43e:	3b11      	subs	r3, #17
 800c440:	f023 0303 	bic.w	r3, r3, #3
 800c444:	3211      	adds	r2, #17
 800c446:	42a2      	cmp	r2, r4
 800c448:	bf88      	it	hi
 800c44a:	2300      	movhi	r3, #0
 800c44c:	4418      	add	r0, r3
 800c44e:	2300      	movs	r3, #0
 800c450:	4288      	cmp	r0, r1
 800c452:	d305      	bcc.n	800c460 <__copybits+0x40>
 800c454:	bd70      	pop	{r4, r5, r6, pc}
 800c456:	f853 6b04 	ldr.w	r6, [r3], #4
 800c45a:	f845 6f04 	str.w	r6, [r5, #4]!
 800c45e:	e7eb      	b.n	800c438 <__copybits+0x18>
 800c460:	f840 3b04 	str.w	r3, [r0], #4
 800c464:	e7f4      	b.n	800c450 <__copybits+0x30>

0800c466 <__any_on>:
 800c466:	f100 0214 	add.w	r2, r0, #20
 800c46a:	6900      	ldr	r0, [r0, #16]
 800c46c:	114b      	asrs	r3, r1, #5
 800c46e:	4298      	cmp	r0, r3
 800c470:	b510      	push	{r4, lr}
 800c472:	db11      	blt.n	800c498 <__any_on+0x32>
 800c474:	dd0a      	ble.n	800c48c <__any_on+0x26>
 800c476:	f011 011f 	ands.w	r1, r1, #31
 800c47a:	d007      	beq.n	800c48c <__any_on+0x26>
 800c47c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c480:	fa24 f001 	lsr.w	r0, r4, r1
 800c484:	fa00 f101 	lsl.w	r1, r0, r1
 800c488:	428c      	cmp	r4, r1
 800c48a:	d10b      	bne.n	800c4a4 <__any_on+0x3e>
 800c48c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c490:	4293      	cmp	r3, r2
 800c492:	d803      	bhi.n	800c49c <__any_on+0x36>
 800c494:	2000      	movs	r0, #0
 800c496:	bd10      	pop	{r4, pc}
 800c498:	4603      	mov	r3, r0
 800c49a:	e7f7      	b.n	800c48c <__any_on+0x26>
 800c49c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c4a0:	2900      	cmp	r1, #0
 800c4a2:	d0f5      	beq.n	800c490 <__any_on+0x2a>
 800c4a4:	2001      	movs	r0, #1
 800c4a6:	e7f6      	b.n	800c496 <__any_on+0x30>

0800c4a8 <__ascii_wctomb>:
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	4608      	mov	r0, r1
 800c4ac:	b141      	cbz	r1, 800c4c0 <__ascii_wctomb+0x18>
 800c4ae:	2aff      	cmp	r2, #255	@ 0xff
 800c4b0:	d904      	bls.n	800c4bc <__ascii_wctomb+0x14>
 800c4b2:	228a      	movs	r2, #138	@ 0x8a
 800c4b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4b8:	601a      	str	r2, [r3, #0]
 800c4ba:	4770      	bx	lr
 800c4bc:	2001      	movs	r0, #1
 800c4be:	700a      	strb	r2, [r1, #0]
 800c4c0:	4770      	bx	lr

0800c4c2 <__ssputs_r>:
 800c4c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4c6:	461f      	mov	r7, r3
 800c4c8:	688e      	ldr	r6, [r1, #8]
 800c4ca:	4682      	mov	sl, r0
 800c4cc:	42be      	cmp	r6, r7
 800c4ce:	460c      	mov	r4, r1
 800c4d0:	4690      	mov	r8, r2
 800c4d2:	680b      	ldr	r3, [r1, #0]
 800c4d4:	d82d      	bhi.n	800c532 <__ssputs_r+0x70>
 800c4d6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c4da:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c4de:	d026      	beq.n	800c52e <__ssputs_r+0x6c>
 800c4e0:	6965      	ldr	r5, [r4, #20]
 800c4e2:	6909      	ldr	r1, [r1, #16]
 800c4e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4e8:	eba3 0901 	sub.w	r9, r3, r1
 800c4ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4f0:	1c7b      	adds	r3, r7, #1
 800c4f2:	444b      	add	r3, r9
 800c4f4:	106d      	asrs	r5, r5, #1
 800c4f6:	429d      	cmp	r5, r3
 800c4f8:	bf38      	it	cc
 800c4fa:	461d      	movcc	r5, r3
 800c4fc:	0553      	lsls	r3, r2, #21
 800c4fe:	d527      	bpl.n	800c550 <__ssputs_r+0x8e>
 800c500:	4629      	mov	r1, r5
 800c502:	f7ff fa8d 	bl	800ba20 <_malloc_r>
 800c506:	4606      	mov	r6, r0
 800c508:	b360      	cbz	r0, 800c564 <__ssputs_r+0xa2>
 800c50a:	464a      	mov	r2, r9
 800c50c:	6921      	ldr	r1, [r4, #16]
 800c50e:	f7fe feca 	bl	800b2a6 <memcpy>
 800c512:	89a3      	ldrh	r3, [r4, #12]
 800c514:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c518:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c51c:	81a3      	strh	r3, [r4, #12]
 800c51e:	6126      	str	r6, [r4, #16]
 800c520:	444e      	add	r6, r9
 800c522:	6026      	str	r6, [r4, #0]
 800c524:	463e      	mov	r6, r7
 800c526:	6165      	str	r5, [r4, #20]
 800c528:	eba5 0509 	sub.w	r5, r5, r9
 800c52c:	60a5      	str	r5, [r4, #8]
 800c52e:	42be      	cmp	r6, r7
 800c530:	d900      	bls.n	800c534 <__ssputs_r+0x72>
 800c532:	463e      	mov	r6, r7
 800c534:	4632      	mov	r2, r6
 800c536:	4641      	mov	r1, r8
 800c538:	6820      	ldr	r0, [r4, #0]
 800c53a:	f000 fb53 	bl	800cbe4 <memmove>
 800c53e:	2000      	movs	r0, #0
 800c540:	68a3      	ldr	r3, [r4, #8]
 800c542:	1b9b      	subs	r3, r3, r6
 800c544:	60a3      	str	r3, [r4, #8]
 800c546:	6823      	ldr	r3, [r4, #0]
 800c548:	4433      	add	r3, r6
 800c54a:	6023      	str	r3, [r4, #0]
 800c54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c550:	462a      	mov	r2, r5
 800c552:	f000 fbb9 	bl	800ccc8 <_realloc_r>
 800c556:	4606      	mov	r6, r0
 800c558:	2800      	cmp	r0, #0
 800c55a:	d1e0      	bne.n	800c51e <__ssputs_r+0x5c>
 800c55c:	4650      	mov	r0, sl
 800c55e:	6921      	ldr	r1, [r4, #16]
 800c560:	f7fe feba 	bl	800b2d8 <_free_r>
 800c564:	230c      	movs	r3, #12
 800c566:	f8ca 3000 	str.w	r3, [sl]
 800c56a:	89a3      	ldrh	r3, [r4, #12]
 800c56c:	f04f 30ff 	mov.w	r0, #4294967295
 800c570:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c574:	81a3      	strh	r3, [r4, #12]
 800c576:	e7e9      	b.n	800c54c <__ssputs_r+0x8a>

0800c578 <_svfiprintf_r>:
 800c578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c57c:	4698      	mov	r8, r3
 800c57e:	898b      	ldrh	r3, [r1, #12]
 800c580:	4607      	mov	r7, r0
 800c582:	061b      	lsls	r3, r3, #24
 800c584:	460d      	mov	r5, r1
 800c586:	4614      	mov	r4, r2
 800c588:	b09d      	sub	sp, #116	@ 0x74
 800c58a:	d510      	bpl.n	800c5ae <_svfiprintf_r+0x36>
 800c58c:	690b      	ldr	r3, [r1, #16]
 800c58e:	b973      	cbnz	r3, 800c5ae <_svfiprintf_r+0x36>
 800c590:	2140      	movs	r1, #64	@ 0x40
 800c592:	f7ff fa45 	bl	800ba20 <_malloc_r>
 800c596:	6028      	str	r0, [r5, #0]
 800c598:	6128      	str	r0, [r5, #16]
 800c59a:	b930      	cbnz	r0, 800c5aa <_svfiprintf_r+0x32>
 800c59c:	230c      	movs	r3, #12
 800c59e:	603b      	str	r3, [r7, #0]
 800c5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a4:	b01d      	add	sp, #116	@ 0x74
 800c5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5aa:	2340      	movs	r3, #64	@ 0x40
 800c5ac:	616b      	str	r3, [r5, #20]
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5b2:	2320      	movs	r3, #32
 800c5b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c5b8:	2330      	movs	r3, #48	@ 0x30
 800c5ba:	f04f 0901 	mov.w	r9, #1
 800c5be:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5c2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800c75c <_svfiprintf_r+0x1e4>
 800c5c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c5ca:	4623      	mov	r3, r4
 800c5cc:	469a      	mov	sl, r3
 800c5ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5d2:	b10a      	cbz	r2, 800c5d8 <_svfiprintf_r+0x60>
 800c5d4:	2a25      	cmp	r2, #37	@ 0x25
 800c5d6:	d1f9      	bne.n	800c5cc <_svfiprintf_r+0x54>
 800c5d8:	ebba 0b04 	subs.w	fp, sl, r4
 800c5dc:	d00b      	beq.n	800c5f6 <_svfiprintf_r+0x7e>
 800c5de:	465b      	mov	r3, fp
 800c5e0:	4622      	mov	r2, r4
 800c5e2:	4629      	mov	r1, r5
 800c5e4:	4638      	mov	r0, r7
 800c5e6:	f7ff ff6c 	bl	800c4c2 <__ssputs_r>
 800c5ea:	3001      	adds	r0, #1
 800c5ec:	f000 80a7 	beq.w	800c73e <_svfiprintf_r+0x1c6>
 800c5f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c5f2:	445a      	add	r2, fp
 800c5f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800c5f6:	f89a 3000 	ldrb.w	r3, [sl]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	f000 809f 	beq.w	800c73e <_svfiprintf_r+0x1c6>
 800c600:	2300      	movs	r3, #0
 800c602:	f04f 32ff 	mov.w	r2, #4294967295
 800c606:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c60a:	f10a 0a01 	add.w	sl, sl, #1
 800c60e:	9304      	str	r3, [sp, #16]
 800c610:	9307      	str	r3, [sp, #28]
 800c612:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c616:	931a      	str	r3, [sp, #104]	@ 0x68
 800c618:	4654      	mov	r4, sl
 800c61a:	2205      	movs	r2, #5
 800c61c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c620:	484e      	ldr	r0, [pc, #312]	@ (800c75c <_svfiprintf_r+0x1e4>)
 800c622:	f000 fb09 	bl	800cc38 <memchr>
 800c626:	9a04      	ldr	r2, [sp, #16]
 800c628:	b9d8      	cbnz	r0, 800c662 <_svfiprintf_r+0xea>
 800c62a:	06d0      	lsls	r0, r2, #27
 800c62c:	bf44      	itt	mi
 800c62e:	2320      	movmi	r3, #32
 800c630:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c634:	0711      	lsls	r1, r2, #28
 800c636:	bf44      	itt	mi
 800c638:	232b      	movmi	r3, #43	@ 0x2b
 800c63a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c63e:	f89a 3000 	ldrb.w	r3, [sl]
 800c642:	2b2a      	cmp	r3, #42	@ 0x2a
 800c644:	d015      	beq.n	800c672 <_svfiprintf_r+0xfa>
 800c646:	4654      	mov	r4, sl
 800c648:	2000      	movs	r0, #0
 800c64a:	f04f 0c0a 	mov.w	ip, #10
 800c64e:	9a07      	ldr	r2, [sp, #28]
 800c650:	4621      	mov	r1, r4
 800c652:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c656:	3b30      	subs	r3, #48	@ 0x30
 800c658:	2b09      	cmp	r3, #9
 800c65a:	d94b      	bls.n	800c6f4 <_svfiprintf_r+0x17c>
 800c65c:	b1b0      	cbz	r0, 800c68c <_svfiprintf_r+0x114>
 800c65e:	9207      	str	r2, [sp, #28]
 800c660:	e014      	b.n	800c68c <_svfiprintf_r+0x114>
 800c662:	eba0 0308 	sub.w	r3, r0, r8
 800c666:	fa09 f303 	lsl.w	r3, r9, r3
 800c66a:	4313      	orrs	r3, r2
 800c66c:	46a2      	mov	sl, r4
 800c66e:	9304      	str	r3, [sp, #16]
 800c670:	e7d2      	b.n	800c618 <_svfiprintf_r+0xa0>
 800c672:	9b03      	ldr	r3, [sp, #12]
 800c674:	1d19      	adds	r1, r3, #4
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	9103      	str	r1, [sp, #12]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	bfbb      	ittet	lt
 800c67e:	425b      	neglt	r3, r3
 800c680:	f042 0202 	orrlt.w	r2, r2, #2
 800c684:	9307      	strge	r3, [sp, #28]
 800c686:	9307      	strlt	r3, [sp, #28]
 800c688:	bfb8      	it	lt
 800c68a:	9204      	strlt	r2, [sp, #16]
 800c68c:	7823      	ldrb	r3, [r4, #0]
 800c68e:	2b2e      	cmp	r3, #46	@ 0x2e
 800c690:	d10a      	bne.n	800c6a8 <_svfiprintf_r+0x130>
 800c692:	7863      	ldrb	r3, [r4, #1]
 800c694:	2b2a      	cmp	r3, #42	@ 0x2a
 800c696:	d132      	bne.n	800c6fe <_svfiprintf_r+0x186>
 800c698:	9b03      	ldr	r3, [sp, #12]
 800c69a:	3402      	adds	r4, #2
 800c69c:	1d1a      	adds	r2, r3, #4
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	9203      	str	r2, [sp, #12]
 800c6a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c6a6:	9305      	str	r3, [sp, #20]
 800c6a8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800c760 <_svfiprintf_r+0x1e8>
 800c6ac:	2203      	movs	r2, #3
 800c6ae:	4650      	mov	r0, sl
 800c6b0:	7821      	ldrb	r1, [r4, #0]
 800c6b2:	f000 fac1 	bl	800cc38 <memchr>
 800c6b6:	b138      	cbz	r0, 800c6c8 <_svfiprintf_r+0x150>
 800c6b8:	2240      	movs	r2, #64	@ 0x40
 800c6ba:	9b04      	ldr	r3, [sp, #16]
 800c6bc:	eba0 000a 	sub.w	r0, r0, sl
 800c6c0:	4082      	lsls	r2, r0
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	3401      	adds	r4, #1
 800c6c6:	9304      	str	r3, [sp, #16]
 800c6c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6cc:	2206      	movs	r2, #6
 800c6ce:	4825      	ldr	r0, [pc, #148]	@ (800c764 <_svfiprintf_r+0x1ec>)
 800c6d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c6d4:	f000 fab0 	bl	800cc38 <memchr>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	d036      	beq.n	800c74a <_svfiprintf_r+0x1d2>
 800c6dc:	4b22      	ldr	r3, [pc, #136]	@ (800c768 <_svfiprintf_r+0x1f0>)
 800c6de:	bb1b      	cbnz	r3, 800c728 <_svfiprintf_r+0x1b0>
 800c6e0:	9b03      	ldr	r3, [sp, #12]
 800c6e2:	3307      	adds	r3, #7
 800c6e4:	f023 0307 	bic.w	r3, r3, #7
 800c6e8:	3308      	adds	r3, #8
 800c6ea:	9303      	str	r3, [sp, #12]
 800c6ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6ee:	4433      	add	r3, r6
 800c6f0:	9309      	str	r3, [sp, #36]	@ 0x24
 800c6f2:	e76a      	b.n	800c5ca <_svfiprintf_r+0x52>
 800c6f4:	460c      	mov	r4, r1
 800c6f6:	2001      	movs	r0, #1
 800c6f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6fc:	e7a8      	b.n	800c650 <_svfiprintf_r+0xd8>
 800c6fe:	2300      	movs	r3, #0
 800c700:	f04f 0c0a 	mov.w	ip, #10
 800c704:	4619      	mov	r1, r3
 800c706:	3401      	adds	r4, #1
 800c708:	9305      	str	r3, [sp, #20]
 800c70a:	4620      	mov	r0, r4
 800c70c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c710:	3a30      	subs	r2, #48	@ 0x30
 800c712:	2a09      	cmp	r2, #9
 800c714:	d903      	bls.n	800c71e <_svfiprintf_r+0x1a6>
 800c716:	2b00      	cmp	r3, #0
 800c718:	d0c6      	beq.n	800c6a8 <_svfiprintf_r+0x130>
 800c71a:	9105      	str	r1, [sp, #20]
 800c71c:	e7c4      	b.n	800c6a8 <_svfiprintf_r+0x130>
 800c71e:	4604      	mov	r4, r0
 800c720:	2301      	movs	r3, #1
 800c722:	fb0c 2101 	mla	r1, ip, r1, r2
 800c726:	e7f0      	b.n	800c70a <_svfiprintf_r+0x192>
 800c728:	ab03      	add	r3, sp, #12
 800c72a:	9300      	str	r3, [sp, #0]
 800c72c:	462a      	mov	r2, r5
 800c72e:	4638      	mov	r0, r7
 800c730:	4b0e      	ldr	r3, [pc, #56]	@ (800c76c <_svfiprintf_r+0x1f4>)
 800c732:	a904      	add	r1, sp, #16
 800c734:	f3af 8000 	nop.w
 800c738:	1c42      	adds	r2, r0, #1
 800c73a:	4606      	mov	r6, r0
 800c73c:	d1d6      	bne.n	800c6ec <_svfiprintf_r+0x174>
 800c73e:	89ab      	ldrh	r3, [r5, #12]
 800c740:	065b      	lsls	r3, r3, #25
 800c742:	f53f af2d 	bmi.w	800c5a0 <_svfiprintf_r+0x28>
 800c746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c748:	e72c      	b.n	800c5a4 <_svfiprintf_r+0x2c>
 800c74a:	ab03      	add	r3, sp, #12
 800c74c:	9300      	str	r3, [sp, #0]
 800c74e:	462a      	mov	r2, r5
 800c750:	4638      	mov	r0, r7
 800c752:	4b06      	ldr	r3, [pc, #24]	@ (800c76c <_svfiprintf_r+0x1f4>)
 800c754:	a904      	add	r1, sp, #16
 800c756:	f000 f87d 	bl	800c854 <_printf_i>
 800c75a:	e7ed      	b.n	800c738 <_svfiprintf_r+0x1c0>
 800c75c:	0800d828 	.word	0x0800d828
 800c760:	0800d82e 	.word	0x0800d82e
 800c764:	0800d832 	.word	0x0800d832
 800c768:	00000000 	.word	0x00000000
 800c76c:	0800c4c3 	.word	0x0800c4c3

0800c770 <_printf_common>:
 800c770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c774:	4616      	mov	r6, r2
 800c776:	4698      	mov	r8, r3
 800c778:	688a      	ldr	r2, [r1, #8]
 800c77a:	690b      	ldr	r3, [r1, #16]
 800c77c:	4607      	mov	r7, r0
 800c77e:	4293      	cmp	r3, r2
 800c780:	bfb8      	it	lt
 800c782:	4613      	movlt	r3, r2
 800c784:	6033      	str	r3, [r6, #0]
 800c786:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c78a:	460c      	mov	r4, r1
 800c78c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c790:	b10a      	cbz	r2, 800c796 <_printf_common+0x26>
 800c792:	3301      	adds	r3, #1
 800c794:	6033      	str	r3, [r6, #0]
 800c796:	6823      	ldr	r3, [r4, #0]
 800c798:	0699      	lsls	r1, r3, #26
 800c79a:	bf42      	ittt	mi
 800c79c:	6833      	ldrmi	r3, [r6, #0]
 800c79e:	3302      	addmi	r3, #2
 800c7a0:	6033      	strmi	r3, [r6, #0]
 800c7a2:	6825      	ldr	r5, [r4, #0]
 800c7a4:	f015 0506 	ands.w	r5, r5, #6
 800c7a8:	d106      	bne.n	800c7b8 <_printf_common+0x48>
 800c7aa:	f104 0a19 	add.w	sl, r4, #25
 800c7ae:	68e3      	ldr	r3, [r4, #12]
 800c7b0:	6832      	ldr	r2, [r6, #0]
 800c7b2:	1a9b      	subs	r3, r3, r2
 800c7b4:	42ab      	cmp	r3, r5
 800c7b6:	dc2b      	bgt.n	800c810 <_printf_common+0xa0>
 800c7b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c7bc:	6822      	ldr	r2, [r4, #0]
 800c7be:	3b00      	subs	r3, #0
 800c7c0:	bf18      	it	ne
 800c7c2:	2301      	movne	r3, #1
 800c7c4:	0692      	lsls	r2, r2, #26
 800c7c6:	d430      	bmi.n	800c82a <_printf_common+0xba>
 800c7c8:	4641      	mov	r1, r8
 800c7ca:	4638      	mov	r0, r7
 800c7cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c7d0:	47c8      	blx	r9
 800c7d2:	3001      	adds	r0, #1
 800c7d4:	d023      	beq.n	800c81e <_printf_common+0xae>
 800c7d6:	6823      	ldr	r3, [r4, #0]
 800c7d8:	6922      	ldr	r2, [r4, #16]
 800c7da:	f003 0306 	and.w	r3, r3, #6
 800c7de:	2b04      	cmp	r3, #4
 800c7e0:	bf14      	ite	ne
 800c7e2:	2500      	movne	r5, #0
 800c7e4:	6833      	ldreq	r3, [r6, #0]
 800c7e6:	f04f 0600 	mov.w	r6, #0
 800c7ea:	bf08      	it	eq
 800c7ec:	68e5      	ldreq	r5, [r4, #12]
 800c7ee:	f104 041a 	add.w	r4, r4, #26
 800c7f2:	bf08      	it	eq
 800c7f4:	1aed      	subeq	r5, r5, r3
 800c7f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c7fa:	bf08      	it	eq
 800c7fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c800:	4293      	cmp	r3, r2
 800c802:	bfc4      	itt	gt
 800c804:	1a9b      	subgt	r3, r3, r2
 800c806:	18ed      	addgt	r5, r5, r3
 800c808:	42b5      	cmp	r5, r6
 800c80a:	d11a      	bne.n	800c842 <_printf_common+0xd2>
 800c80c:	2000      	movs	r0, #0
 800c80e:	e008      	b.n	800c822 <_printf_common+0xb2>
 800c810:	2301      	movs	r3, #1
 800c812:	4652      	mov	r2, sl
 800c814:	4641      	mov	r1, r8
 800c816:	4638      	mov	r0, r7
 800c818:	47c8      	blx	r9
 800c81a:	3001      	adds	r0, #1
 800c81c:	d103      	bne.n	800c826 <_printf_common+0xb6>
 800c81e:	f04f 30ff 	mov.w	r0, #4294967295
 800c822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c826:	3501      	adds	r5, #1
 800c828:	e7c1      	b.n	800c7ae <_printf_common+0x3e>
 800c82a:	2030      	movs	r0, #48	@ 0x30
 800c82c:	18e1      	adds	r1, r4, r3
 800c82e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c832:	1c5a      	adds	r2, r3, #1
 800c834:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c838:	4422      	add	r2, r4
 800c83a:	3302      	adds	r3, #2
 800c83c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c840:	e7c2      	b.n	800c7c8 <_printf_common+0x58>
 800c842:	2301      	movs	r3, #1
 800c844:	4622      	mov	r2, r4
 800c846:	4641      	mov	r1, r8
 800c848:	4638      	mov	r0, r7
 800c84a:	47c8      	blx	r9
 800c84c:	3001      	adds	r0, #1
 800c84e:	d0e6      	beq.n	800c81e <_printf_common+0xae>
 800c850:	3601      	adds	r6, #1
 800c852:	e7d9      	b.n	800c808 <_printf_common+0x98>

0800c854 <_printf_i>:
 800c854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c858:	7e0f      	ldrb	r7, [r1, #24]
 800c85a:	4691      	mov	r9, r2
 800c85c:	2f78      	cmp	r7, #120	@ 0x78
 800c85e:	4680      	mov	r8, r0
 800c860:	460c      	mov	r4, r1
 800c862:	469a      	mov	sl, r3
 800c864:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c866:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c86a:	d807      	bhi.n	800c87c <_printf_i+0x28>
 800c86c:	2f62      	cmp	r7, #98	@ 0x62
 800c86e:	d80a      	bhi.n	800c886 <_printf_i+0x32>
 800c870:	2f00      	cmp	r7, #0
 800c872:	f000 80d3 	beq.w	800ca1c <_printf_i+0x1c8>
 800c876:	2f58      	cmp	r7, #88	@ 0x58
 800c878:	f000 80ba 	beq.w	800c9f0 <_printf_i+0x19c>
 800c87c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c880:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c884:	e03a      	b.n	800c8fc <_printf_i+0xa8>
 800c886:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c88a:	2b15      	cmp	r3, #21
 800c88c:	d8f6      	bhi.n	800c87c <_printf_i+0x28>
 800c88e:	a101      	add	r1, pc, #4	@ (adr r1, 800c894 <_printf_i+0x40>)
 800c890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c894:	0800c8ed 	.word	0x0800c8ed
 800c898:	0800c901 	.word	0x0800c901
 800c89c:	0800c87d 	.word	0x0800c87d
 800c8a0:	0800c87d 	.word	0x0800c87d
 800c8a4:	0800c87d 	.word	0x0800c87d
 800c8a8:	0800c87d 	.word	0x0800c87d
 800c8ac:	0800c901 	.word	0x0800c901
 800c8b0:	0800c87d 	.word	0x0800c87d
 800c8b4:	0800c87d 	.word	0x0800c87d
 800c8b8:	0800c87d 	.word	0x0800c87d
 800c8bc:	0800c87d 	.word	0x0800c87d
 800c8c0:	0800ca03 	.word	0x0800ca03
 800c8c4:	0800c92b 	.word	0x0800c92b
 800c8c8:	0800c9bd 	.word	0x0800c9bd
 800c8cc:	0800c87d 	.word	0x0800c87d
 800c8d0:	0800c87d 	.word	0x0800c87d
 800c8d4:	0800ca25 	.word	0x0800ca25
 800c8d8:	0800c87d 	.word	0x0800c87d
 800c8dc:	0800c92b 	.word	0x0800c92b
 800c8e0:	0800c87d 	.word	0x0800c87d
 800c8e4:	0800c87d 	.word	0x0800c87d
 800c8e8:	0800c9c5 	.word	0x0800c9c5
 800c8ec:	6833      	ldr	r3, [r6, #0]
 800c8ee:	1d1a      	adds	r2, r3, #4
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	6032      	str	r2, [r6, #0]
 800c8f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c8f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c8fc:	2301      	movs	r3, #1
 800c8fe:	e09e      	b.n	800ca3e <_printf_i+0x1ea>
 800c900:	6833      	ldr	r3, [r6, #0]
 800c902:	6820      	ldr	r0, [r4, #0]
 800c904:	1d19      	adds	r1, r3, #4
 800c906:	6031      	str	r1, [r6, #0]
 800c908:	0606      	lsls	r6, r0, #24
 800c90a:	d501      	bpl.n	800c910 <_printf_i+0xbc>
 800c90c:	681d      	ldr	r5, [r3, #0]
 800c90e:	e003      	b.n	800c918 <_printf_i+0xc4>
 800c910:	0645      	lsls	r5, r0, #25
 800c912:	d5fb      	bpl.n	800c90c <_printf_i+0xb8>
 800c914:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c918:	2d00      	cmp	r5, #0
 800c91a:	da03      	bge.n	800c924 <_printf_i+0xd0>
 800c91c:	232d      	movs	r3, #45	@ 0x2d
 800c91e:	426d      	negs	r5, r5
 800c920:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c924:	230a      	movs	r3, #10
 800c926:	4859      	ldr	r0, [pc, #356]	@ (800ca8c <_printf_i+0x238>)
 800c928:	e011      	b.n	800c94e <_printf_i+0xfa>
 800c92a:	6821      	ldr	r1, [r4, #0]
 800c92c:	6833      	ldr	r3, [r6, #0]
 800c92e:	0608      	lsls	r0, r1, #24
 800c930:	f853 5b04 	ldr.w	r5, [r3], #4
 800c934:	d402      	bmi.n	800c93c <_printf_i+0xe8>
 800c936:	0649      	lsls	r1, r1, #25
 800c938:	bf48      	it	mi
 800c93a:	b2ad      	uxthmi	r5, r5
 800c93c:	2f6f      	cmp	r7, #111	@ 0x6f
 800c93e:	6033      	str	r3, [r6, #0]
 800c940:	bf14      	ite	ne
 800c942:	230a      	movne	r3, #10
 800c944:	2308      	moveq	r3, #8
 800c946:	4851      	ldr	r0, [pc, #324]	@ (800ca8c <_printf_i+0x238>)
 800c948:	2100      	movs	r1, #0
 800c94a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c94e:	6866      	ldr	r6, [r4, #4]
 800c950:	2e00      	cmp	r6, #0
 800c952:	bfa8      	it	ge
 800c954:	6821      	ldrge	r1, [r4, #0]
 800c956:	60a6      	str	r6, [r4, #8]
 800c958:	bfa4      	itt	ge
 800c95a:	f021 0104 	bicge.w	r1, r1, #4
 800c95e:	6021      	strge	r1, [r4, #0]
 800c960:	b90d      	cbnz	r5, 800c966 <_printf_i+0x112>
 800c962:	2e00      	cmp	r6, #0
 800c964:	d04b      	beq.n	800c9fe <_printf_i+0x1aa>
 800c966:	4616      	mov	r6, r2
 800c968:	fbb5 f1f3 	udiv	r1, r5, r3
 800c96c:	fb03 5711 	mls	r7, r3, r1, r5
 800c970:	5dc7      	ldrb	r7, [r0, r7]
 800c972:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c976:	462f      	mov	r7, r5
 800c978:	42bb      	cmp	r3, r7
 800c97a:	460d      	mov	r5, r1
 800c97c:	d9f4      	bls.n	800c968 <_printf_i+0x114>
 800c97e:	2b08      	cmp	r3, #8
 800c980:	d10b      	bne.n	800c99a <_printf_i+0x146>
 800c982:	6823      	ldr	r3, [r4, #0]
 800c984:	07df      	lsls	r7, r3, #31
 800c986:	d508      	bpl.n	800c99a <_printf_i+0x146>
 800c988:	6923      	ldr	r3, [r4, #16]
 800c98a:	6861      	ldr	r1, [r4, #4]
 800c98c:	4299      	cmp	r1, r3
 800c98e:	bfde      	ittt	le
 800c990:	2330      	movle	r3, #48	@ 0x30
 800c992:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c996:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c99a:	1b92      	subs	r2, r2, r6
 800c99c:	6122      	str	r2, [r4, #16]
 800c99e:	464b      	mov	r3, r9
 800c9a0:	4621      	mov	r1, r4
 800c9a2:	4640      	mov	r0, r8
 800c9a4:	f8cd a000 	str.w	sl, [sp]
 800c9a8:	aa03      	add	r2, sp, #12
 800c9aa:	f7ff fee1 	bl	800c770 <_printf_common>
 800c9ae:	3001      	adds	r0, #1
 800c9b0:	d14a      	bne.n	800ca48 <_printf_i+0x1f4>
 800c9b2:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b6:	b004      	add	sp, #16
 800c9b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9bc:	6823      	ldr	r3, [r4, #0]
 800c9be:	f043 0320 	orr.w	r3, r3, #32
 800c9c2:	6023      	str	r3, [r4, #0]
 800c9c4:	2778      	movs	r7, #120	@ 0x78
 800c9c6:	4832      	ldr	r0, [pc, #200]	@ (800ca90 <_printf_i+0x23c>)
 800c9c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c9cc:	6823      	ldr	r3, [r4, #0]
 800c9ce:	6831      	ldr	r1, [r6, #0]
 800c9d0:	061f      	lsls	r7, r3, #24
 800c9d2:	f851 5b04 	ldr.w	r5, [r1], #4
 800c9d6:	d402      	bmi.n	800c9de <_printf_i+0x18a>
 800c9d8:	065f      	lsls	r7, r3, #25
 800c9da:	bf48      	it	mi
 800c9dc:	b2ad      	uxthmi	r5, r5
 800c9de:	6031      	str	r1, [r6, #0]
 800c9e0:	07d9      	lsls	r1, r3, #31
 800c9e2:	bf44      	itt	mi
 800c9e4:	f043 0320 	orrmi.w	r3, r3, #32
 800c9e8:	6023      	strmi	r3, [r4, #0]
 800c9ea:	b11d      	cbz	r5, 800c9f4 <_printf_i+0x1a0>
 800c9ec:	2310      	movs	r3, #16
 800c9ee:	e7ab      	b.n	800c948 <_printf_i+0xf4>
 800c9f0:	4826      	ldr	r0, [pc, #152]	@ (800ca8c <_printf_i+0x238>)
 800c9f2:	e7e9      	b.n	800c9c8 <_printf_i+0x174>
 800c9f4:	6823      	ldr	r3, [r4, #0]
 800c9f6:	f023 0320 	bic.w	r3, r3, #32
 800c9fa:	6023      	str	r3, [r4, #0]
 800c9fc:	e7f6      	b.n	800c9ec <_printf_i+0x198>
 800c9fe:	4616      	mov	r6, r2
 800ca00:	e7bd      	b.n	800c97e <_printf_i+0x12a>
 800ca02:	6833      	ldr	r3, [r6, #0]
 800ca04:	6825      	ldr	r5, [r4, #0]
 800ca06:	1d18      	adds	r0, r3, #4
 800ca08:	6961      	ldr	r1, [r4, #20]
 800ca0a:	6030      	str	r0, [r6, #0]
 800ca0c:	062e      	lsls	r6, r5, #24
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	d501      	bpl.n	800ca16 <_printf_i+0x1c2>
 800ca12:	6019      	str	r1, [r3, #0]
 800ca14:	e002      	b.n	800ca1c <_printf_i+0x1c8>
 800ca16:	0668      	lsls	r0, r5, #25
 800ca18:	d5fb      	bpl.n	800ca12 <_printf_i+0x1be>
 800ca1a:	8019      	strh	r1, [r3, #0]
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	4616      	mov	r6, r2
 800ca20:	6123      	str	r3, [r4, #16]
 800ca22:	e7bc      	b.n	800c99e <_printf_i+0x14a>
 800ca24:	6833      	ldr	r3, [r6, #0]
 800ca26:	2100      	movs	r1, #0
 800ca28:	1d1a      	adds	r2, r3, #4
 800ca2a:	6032      	str	r2, [r6, #0]
 800ca2c:	681e      	ldr	r6, [r3, #0]
 800ca2e:	6862      	ldr	r2, [r4, #4]
 800ca30:	4630      	mov	r0, r6
 800ca32:	f000 f901 	bl	800cc38 <memchr>
 800ca36:	b108      	cbz	r0, 800ca3c <_printf_i+0x1e8>
 800ca38:	1b80      	subs	r0, r0, r6
 800ca3a:	6060      	str	r0, [r4, #4]
 800ca3c:	6863      	ldr	r3, [r4, #4]
 800ca3e:	6123      	str	r3, [r4, #16]
 800ca40:	2300      	movs	r3, #0
 800ca42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ca46:	e7aa      	b.n	800c99e <_printf_i+0x14a>
 800ca48:	4632      	mov	r2, r6
 800ca4a:	4649      	mov	r1, r9
 800ca4c:	4640      	mov	r0, r8
 800ca4e:	6923      	ldr	r3, [r4, #16]
 800ca50:	47d0      	blx	sl
 800ca52:	3001      	adds	r0, #1
 800ca54:	d0ad      	beq.n	800c9b2 <_printf_i+0x15e>
 800ca56:	6823      	ldr	r3, [r4, #0]
 800ca58:	079b      	lsls	r3, r3, #30
 800ca5a:	d413      	bmi.n	800ca84 <_printf_i+0x230>
 800ca5c:	68e0      	ldr	r0, [r4, #12]
 800ca5e:	9b03      	ldr	r3, [sp, #12]
 800ca60:	4298      	cmp	r0, r3
 800ca62:	bfb8      	it	lt
 800ca64:	4618      	movlt	r0, r3
 800ca66:	e7a6      	b.n	800c9b6 <_printf_i+0x162>
 800ca68:	2301      	movs	r3, #1
 800ca6a:	4632      	mov	r2, r6
 800ca6c:	4649      	mov	r1, r9
 800ca6e:	4640      	mov	r0, r8
 800ca70:	47d0      	blx	sl
 800ca72:	3001      	adds	r0, #1
 800ca74:	d09d      	beq.n	800c9b2 <_printf_i+0x15e>
 800ca76:	3501      	adds	r5, #1
 800ca78:	68e3      	ldr	r3, [r4, #12]
 800ca7a:	9903      	ldr	r1, [sp, #12]
 800ca7c:	1a5b      	subs	r3, r3, r1
 800ca7e:	42ab      	cmp	r3, r5
 800ca80:	dcf2      	bgt.n	800ca68 <_printf_i+0x214>
 800ca82:	e7eb      	b.n	800ca5c <_printf_i+0x208>
 800ca84:	2500      	movs	r5, #0
 800ca86:	f104 0619 	add.w	r6, r4, #25
 800ca8a:	e7f5      	b.n	800ca78 <_printf_i+0x224>
 800ca8c:	0800d839 	.word	0x0800d839
 800ca90:	0800d84a 	.word	0x0800d84a

0800ca94 <__sflush_r>:
 800ca94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ca98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca9a:	0716      	lsls	r6, r2, #28
 800ca9c:	4605      	mov	r5, r0
 800ca9e:	460c      	mov	r4, r1
 800caa0:	d454      	bmi.n	800cb4c <__sflush_r+0xb8>
 800caa2:	684b      	ldr	r3, [r1, #4]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	dc02      	bgt.n	800caae <__sflush_r+0x1a>
 800caa8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800caaa:	2b00      	cmp	r3, #0
 800caac:	dd48      	ble.n	800cb40 <__sflush_r+0xac>
 800caae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cab0:	2e00      	cmp	r6, #0
 800cab2:	d045      	beq.n	800cb40 <__sflush_r+0xac>
 800cab4:	2300      	movs	r3, #0
 800cab6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800caba:	682f      	ldr	r7, [r5, #0]
 800cabc:	6a21      	ldr	r1, [r4, #32]
 800cabe:	602b      	str	r3, [r5, #0]
 800cac0:	d030      	beq.n	800cb24 <__sflush_r+0x90>
 800cac2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cac4:	89a3      	ldrh	r3, [r4, #12]
 800cac6:	0759      	lsls	r1, r3, #29
 800cac8:	d505      	bpl.n	800cad6 <__sflush_r+0x42>
 800caca:	6863      	ldr	r3, [r4, #4]
 800cacc:	1ad2      	subs	r2, r2, r3
 800cace:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cad0:	b10b      	cbz	r3, 800cad6 <__sflush_r+0x42>
 800cad2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cad4:	1ad2      	subs	r2, r2, r3
 800cad6:	2300      	movs	r3, #0
 800cad8:	4628      	mov	r0, r5
 800cada:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cadc:	6a21      	ldr	r1, [r4, #32]
 800cade:	47b0      	blx	r6
 800cae0:	1c43      	adds	r3, r0, #1
 800cae2:	89a3      	ldrh	r3, [r4, #12]
 800cae4:	d106      	bne.n	800caf4 <__sflush_r+0x60>
 800cae6:	6829      	ldr	r1, [r5, #0]
 800cae8:	291d      	cmp	r1, #29
 800caea:	d82b      	bhi.n	800cb44 <__sflush_r+0xb0>
 800caec:	4a28      	ldr	r2, [pc, #160]	@ (800cb90 <__sflush_r+0xfc>)
 800caee:	410a      	asrs	r2, r1
 800caf0:	07d6      	lsls	r6, r2, #31
 800caf2:	d427      	bmi.n	800cb44 <__sflush_r+0xb0>
 800caf4:	2200      	movs	r2, #0
 800caf6:	6062      	str	r2, [r4, #4]
 800caf8:	6922      	ldr	r2, [r4, #16]
 800cafa:	04d9      	lsls	r1, r3, #19
 800cafc:	6022      	str	r2, [r4, #0]
 800cafe:	d504      	bpl.n	800cb0a <__sflush_r+0x76>
 800cb00:	1c42      	adds	r2, r0, #1
 800cb02:	d101      	bne.n	800cb08 <__sflush_r+0x74>
 800cb04:	682b      	ldr	r3, [r5, #0]
 800cb06:	b903      	cbnz	r3, 800cb0a <__sflush_r+0x76>
 800cb08:	6560      	str	r0, [r4, #84]	@ 0x54
 800cb0a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cb0c:	602f      	str	r7, [r5, #0]
 800cb0e:	b1b9      	cbz	r1, 800cb40 <__sflush_r+0xac>
 800cb10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cb14:	4299      	cmp	r1, r3
 800cb16:	d002      	beq.n	800cb1e <__sflush_r+0x8a>
 800cb18:	4628      	mov	r0, r5
 800cb1a:	f7fe fbdd 	bl	800b2d8 <_free_r>
 800cb1e:	2300      	movs	r3, #0
 800cb20:	6363      	str	r3, [r4, #52]	@ 0x34
 800cb22:	e00d      	b.n	800cb40 <__sflush_r+0xac>
 800cb24:	2301      	movs	r3, #1
 800cb26:	4628      	mov	r0, r5
 800cb28:	47b0      	blx	r6
 800cb2a:	4602      	mov	r2, r0
 800cb2c:	1c50      	adds	r0, r2, #1
 800cb2e:	d1c9      	bne.n	800cac4 <__sflush_r+0x30>
 800cb30:	682b      	ldr	r3, [r5, #0]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d0c6      	beq.n	800cac4 <__sflush_r+0x30>
 800cb36:	2b1d      	cmp	r3, #29
 800cb38:	d001      	beq.n	800cb3e <__sflush_r+0xaa>
 800cb3a:	2b16      	cmp	r3, #22
 800cb3c:	d11d      	bne.n	800cb7a <__sflush_r+0xe6>
 800cb3e:	602f      	str	r7, [r5, #0]
 800cb40:	2000      	movs	r0, #0
 800cb42:	e021      	b.n	800cb88 <__sflush_r+0xf4>
 800cb44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb48:	b21b      	sxth	r3, r3
 800cb4a:	e01a      	b.n	800cb82 <__sflush_r+0xee>
 800cb4c:	690f      	ldr	r7, [r1, #16]
 800cb4e:	2f00      	cmp	r7, #0
 800cb50:	d0f6      	beq.n	800cb40 <__sflush_r+0xac>
 800cb52:	0793      	lsls	r3, r2, #30
 800cb54:	bf18      	it	ne
 800cb56:	2300      	movne	r3, #0
 800cb58:	680e      	ldr	r6, [r1, #0]
 800cb5a:	bf08      	it	eq
 800cb5c:	694b      	ldreq	r3, [r1, #20]
 800cb5e:	1bf6      	subs	r6, r6, r7
 800cb60:	600f      	str	r7, [r1, #0]
 800cb62:	608b      	str	r3, [r1, #8]
 800cb64:	2e00      	cmp	r6, #0
 800cb66:	ddeb      	ble.n	800cb40 <__sflush_r+0xac>
 800cb68:	4633      	mov	r3, r6
 800cb6a:	463a      	mov	r2, r7
 800cb6c:	4628      	mov	r0, r5
 800cb6e:	6a21      	ldr	r1, [r4, #32]
 800cb70:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800cb74:	47e0      	blx	ip
 800cb76:	2800      	cmp	r0, #0
 800cb78:	dc07      	bgt.n	800cb8a <__sflush_r+0xf6>
 800cb7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb82:	f04f 30ff 	mov.w	r0, #4294967295
 800cb86:	81a3      	strh	r3, [r4, #12]
 800cb88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb8a:	4407      	add	r7, r0
 800cb8c:	1a36      	subs	r6, r6, r0
 800cb8e:	e7e9      	b.n	800cb64 <__sflush_r+0xd0>
 800cb90:	dfbffffe 	.word	0xdfbffffe

0800cb94 <_fflush_r>:
 800cb94:	b538      	push	{r3, r4, r5, lr}
 800cb96:	690b      	ldr	r3, [r1, #16]
 800cb98:	4605      	mov	r5, r0
 800cb9a:	460c      	mov	r4, r1
 800cb9c:	b913      	cbnz	r3, 800cba4 <_fflush_r+0x10>
 800cb9e:	2500      	movs	r5, #0
 800cba0:	4628      	mov	r0, r5
 800cba2:	bd38      	pop	{r3, r4, r5, pc}
 800cba4:	b118      	cbz	r0, 800cbae <_fflush_r+0x1a>
 800cba6:	6a03      	ldr	r3, [r0, #32]
 800cba8:	b90b      	cbnz	r3, 800cbae <_fflush_r+0x1a>
 800cbaa:	f7fe fa09 	bl	800afc0 <__sinit>
 800cbae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d0f3      	beq.n	800cb9e <_fflush_r+0xa>
 800cbb6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cbb8:	07d0      	lsls	r0, r2, #31
 800cbba:	d404      	bmi.n	800cbc6 <_fflush_r+0x32>
 800cbbc:	0599      	lsls	r1, r3, #22
 800cbbe:	d402      	bmi.n	800cbc6 <_fflush_r+0x32>
 800cbc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbc2:	f7fe fb66 	bl	800b292 <__retarget_lock_acquire_recursive>
 800cbc6:	4628      	mov	r0, r5
 800cbc8:	4621      	mov	r1, r4
 800cbca:	f7ff ff63 	bl	800ca94 <__sflush_r>
 800cbce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cbd0:	4605      	mov	r5, r0
 800cbd2:	07da      	lsls	r2, r3, #31
 800cbd4:	d4e4      	bmi.n	800cba0 <_fflush_r+0xc>
 800cbd6:	89a3      	ldrh	r3, [r4, #12]
 800cbd8:	059b      	lsls	r3, r3, #22
 800cbda:	d4e1      	bmi.n	800cba0 <_fflush_r+0xc>
 800cbdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbde:	f7fe fb59 	bl	800b294 <__retarget_lock_release_recursive>
 800cbe2:	e7dd      	b.n	800cba0 <_fflush_r+0xc>

0800cbe4 <memmove>:
 800cbe4:	4288      	cmp	r0, r1
 800cbe6:	b510      	push	{r4, lr}
 800cbe8:	eb01 0402 	add.w	r4, r1, r2
 800cbec:	d902      	bls.n	800cbf4 <memmove+0x10>
 800cbee:	4284      	cmp	r4, r0
 800cbf0:	4623      	mov	r3, r4
 800cbf2:	d807      	bhi.n	800cc04 <memmove+0x20>
 800cbf4:	1e43      	subs	r3, r0, #1
 800cbf6:	42a1      	cmp	r1, r4
 800cbf8:	d008      	beq.n	800cc0c <memmove+0x28>
 800cbfa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cbfe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cc02:	e7f8      	b.n	800cbf6 <memmove+0x12>
 800cc04:	4601      	mov	r1, r0
 800cc06:	4402      	add	r2, r0
 800cc08:	428a      	cmp	r2, r1
 800cc0a:	d100      	bne.n	800cc0e <memmove+0x2a>
 800cc0c:	bd10      	pop	{r4, pc}
 800cc0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cc12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cc16:	e7f7      	b.n	800cc08 <memmove+0x24>

0800cc18 <_sbrk_r>:
 800cc18:	b538      	push	{r3, r4, r5, lr}
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	4d05      	ldr	r5, [pc, #20]	@ (800cc34 <_sbrk_r+0x1c>)
 800cc1e:	4604      	mov	r4, r0
 800cc20:	4608      	mov	r0, r1
 800cc22:	602b      	str	r3, [r5, #0]
 800cc24:	f7f4 fa1e 	bl	8001064 <_sbrk>
 800cc28:	1c43      	adds	r3, r0, #1
 800cc2a:	d102      	bne.n	800cc32 <_sbrk_r+0x1a>
 800cc2c:	682b      	ldr	r3, [r5, #0]
 800cc2e:	b103      	cbz	r3, 800cc32 <_sbrk_r+0x1a>
 800cc30:	6023      	str	r3, [r4, #0]
 800cc32:	bd38      	pop	{r3, r4, r5, pc}
 800cc34:	2000150c 	.word	0x2000150c

0800cc38 <memchr>:
 800cc38:	4603      	mov	r3, r0
 800cc3a:	b510      	push	{r4, lr}
 800cc3c:	b2c9      	uxtb	r1, r1
 800cc3e:	4402      	add	r2, r0
 800cc40:	4293      	cmp	r3, r2
 800cc42:	4618      	mov	r0, r3
 800cc44:	d101      	bne.n	800cc4a <memchr+0x12>
 800cc46:	2000      	movs	r0, #0
 800cc48:	e003      	b.n	800cc52 <memchr+0x1a>
 800cc4a:	7804      	ldrb	r4, [r0, #0]
 800cc4c:	3301      	adds	r3, #1
 800cc4e:	428c      	cmp	r4, r1
 800cc50:	d1f6      	bne.n	800cc40 <memchr+0x8>
 800cc52:	bd10      	pop	{r4, pc}

0800cc54 <__assert_func>:
 800cc54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc56:	4614      	mov	r4, r2
 800cc58:	461a      	mov	r2, r3
 800cc5a:	4b09      	ldr	r3, [pc, #36]	@ (800cc80 <__assert_func+0x2c>)
 800cc5c:	4605      	mov	r5, r0
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	68d8      	ldr	r0, [r3, #12]
 800cc62:	b954      	cbnz	r4, 800cc7a <__assert_func+0x26>
 800cc64:	4b07      	ldr	r3, [pc, #28]	@ (800cc84 <__assert_func+0x30>)
 800cc66:	461c      	mov	r4, r3
 800cc68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc6c:	9100      	str	r1, [sp, #0]
 800cc6e:	462b      	mov	r3, r5
 800cc70:	4905      	ldr	r1, [pc, #20]	@ (800cc88 <__assert_func+0x34>)
 800cc72:	f000 f857 	bl	800cd24 <fiprintf>
 800cc76:	f000 f867 	bl	800cd48 <abort>
 800cc7a:	4b04      	ldr	r3, [pc, #16]	@ (800cc8c <__assert_func+0x38>)
 800cc7c:	e7f4      	b.n	800cc68 <__assert_func+0x14>
 800cc7e:	bf00      	nop
 800cc80:	20000194 	.word	0x20000194
 800cc84:	0800d896 	.word	0x0800d896
 800cc88:	0800d868 	.word	0x0800d868
 800cc8c:	0800d85b 	.word	0x0800d85b

0800cc90 <_calloc_r>:
 800cc90:	b570      	push	{r4, r5, r6, lr}
 800cc92:	fba1 5402 	umull	r5, r4, r1, r2
 800cc96:	b93c      	cbnz	r4, 800cca8 <_calloc_r+0x18>
 800cc98:	4629      	mov	r1, r5
 800cc9a:	f7fe fec1 	bl	800ba20 <_malloc_r>
 800cc9e:	4606      	mov	r6, r0
 800cca0:	b928      	cbnz	r0, 800ccae <_calloc_r+0x1e>
 800cca2:	2600      	movs	r6, #0
 800cca4:	4630      	mov	r0, r6
 800cca6:	bd70      	pop	{r4, r5, r6, pc}
 800cca8:	220c      	movs	r2, #12
 800ccaa:	6002      	str	r2, [r0, #0]
 800ccac:	e7f9      	b.n	800cca2 <_calloc_r+0x12>
 800ccae:	462a      	mov	r2, r5
 800ccb0:	4621      	mov	r1, r4
 800ccb2:	f7fe fa37 	bl	800b124 <memset>
 800ccb6:	e7f5      	b.n	800cca4 <_calloc_r+0x14>

0800ccb8 <malloc>:
 800ccb8:	4b02      	ldr	r3, [pc, #8]	@ (800ccc4 <malloc+0xc>)
 800ccba:	4601      	mov	r1, r0
 800ccbc:	6818      	ldr	r0, [r3, #0]
 800ccbe:	f7fe beaf 	b.w	800ba20 <_malloc_r>
 800ccc2:	bf00      	nop
 800ccc4:	20000194 	.word	0x20000194

0800ccc8 <_realloc_r>:
 800ccc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cccc:	4680      	mov	r8, r0
 800ccce:	4615      	mov	r5, r2
 800ccd0:	460c      	mov	r4, r1
 800ccd2:	b921      	cbnz	r1, 800ccde <_realloc_r+0x16>
 800ccd4:	4611      	mov	r1, r2
 800ccd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ccda:	f7fe bea1 	b.w	800ba20 <_malloc_r>
 800ccde:	b92a      	cbnz	r2, 800ccec <_realloc_r+0x24>
 800cce0:	f7fe fafa 	bl	800b2d8 <_free_r>
 800cce4:	2400      	movs	r4, #0
 800cce6:	4620      	mov	r0, r4
 800cce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccec:	f000 f833 	bl	800cd56 <_malloc_usable_size_r>
 800ccf0:	4285      	cmp	r5, r0
 800ccf2:	4606      	mov	r6, r0
 800ccf4:	d802      	bhi.n	800ccfc <_realloc_r+0x34>
 800ccf6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ccfa:	d8f4      	bhi.n	800cce6 <_realloc_r+0x1e>
 800ccfc:	4629      	mov	r1, r5
 800ccfe:	4640      	mov	r0, r8
 800cd00:	f7fe fe8e 	bl	800ba20 <_malloc_r>
 800cd04:	4607      	mov	r7, r0
 800cd06:	2800      	cmp	r0, #0
 800cd08:	d0ec      	beq.n	800cce4 <_realloc_r+0x1c>
 800cd0a:	42b5      	cmp	r5, r6
 800cd0c:	462a      	mov	r2, r5
 800cd0e:	4621      	mov	r1, r4
 800cd10:	bf28      	it	cs
 800cd12:	4632      	movcs	r2, r6
 800cd14:	f7fe fac7 	bl	800b2a6 <memcpy>
 800cd18:	4621      	mov	r1, r4
 800cd1a:	4640      	mov	r0, r8
 800cd1c:	f7fe fadc 	bl	800b2d8 <_free_r>
 800cd20:	463c      	mov	r4, r7
 800cd22:	e7e0      	b.n	800cce6 <_realloc_r+0x1e>

0800cd24 <fiprintf>:
 800cd24:	b40e      	push	{r1, r2, r3}
 800cd26:	b503      	push	{r0, r1, lr}
 800cd28:	4601      	mov	r1, r0
 800cd2a:	ab03      	add	r3, sp, #12
 800cd2c:	4805      	ldr	r0, [pc, #20]	@ (800cd44 <fiprintf+0x20>)
 800cd2e:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd32:	6800      	ldr	r0, [r0, #0]
 800cd34:	9301      	str	r3, [sp, #4]
 800cd36:	f000 f83d 	bl	800cdb4 <_vfiprintf_r>
 800cd3a:	b002      	add	sp, #8
 800cd3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd40:	b003      	add	sp, #12
 800cd42:	4770      	bx	lr
 800cd44:	20000194 	.word	0x20000194

0800cd48 <abort>:
 800cd48:	2006      	movs	r0, #6
 800cd4a:	b508      	push	{r3, lr}
 800cd4c:	f000 fa06 	bl	800d15c <raise>
 800cd50:	2001      	movs	r0, #1
 800cd52:	f7f4 f912 	bl	8000f7a <_exit>

0800cd56 <_malloc_usable_size_r>:
 800cd56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd5a:	1f18      	subs	r0, r3, #4
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	bfbc      	itt	lt
 800cd60:	580b      	ldrlt	r3, [r1, r0]
 800cd62:	18c0      	addlt	r0, r0, r3
 800cd64:	4770      	bx	lr

0800cd66 <__sfputc_r>:
 800cd66:	6893      	ldr	r3, [r2, #8]
 800cd68:	b410      	push	{r4}
 800cd6a:	3b01      	subs	r3, #1
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	6093      	str	r3, [r2, #8]
 800cd70:	da07      	bge.n	800cd82 <__sfputc_r+0x1c>
 800cd72:	6994      	ldr	r4, [r2, #24]
 800cd74:	42a3      	cmp	r3, r4
 800cd76:	db01      	blt.n	800cd7c <__sfputc_r+0x16>
 800cd78:	290a      	cmp	r1, #10
 800cd7a:	d102      	bne.n	800cd82 <__sfputc_r+0x1c>
 800cd7c:	bc10      	pop	{r4}
 800cd7e:	f000 b931 	b.w	800cfe4 <__swbuf_r>
 800cd82:	6813      	ldr	r3, [r2, #0]
 800cd84:	1c58      	adds	r0, r3, #1
 800cd86:	6010      	str	r0, [r2, #0]
 800cd88:	7019      	strb	r1, [r3, #0]
 800cd8a:	4608      	mov	r0, r1
 800cd8c:	bc10      	pop	{r4}
 800cd8e:	4770      	bx	lr

0800cd90 <__sfputs_r>:
 800cd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd92:	4606      	mov	r6, r0
 800cd94:	460f      	mov	r7, r1
 800cd96:	4614      	mov	r4, r2
 800cd98:	18d5      	adds	r5, r2, r3
 800cd9a:	42ac      	cmp	r4, r5
 800cd9c:	d101      	bne.n	800cda2 <__sfputs_r+0x12>
 800cd9e:	2000      	movs	r0, #0
 800cda0:	e007      	b.n	800cdb2 <__sfputs_r+0x22>
 800cda2:	463a      	mov	r2, r7
 800cda4:	4630      	mov	r0, r6
 800cda6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdaa:	f7ff ffdc 	bl	800cd66 <__sfputc_r>
 800cdae:	1c43      	adds	r3, r0, #1
 800cdb0:	d1f3      	bne.n	800cd9a <__sfputs_r+0xa>
 800cdb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cdb4 <_vfiprintf_r>:
 800cdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb8:	460d      	mov	r5, r1
 800cdba:	4614      	mov	r4, r2
 800cdbc:	4698      	mov	r8, r3
 800cdbe:	4606      	mov	r6, r0
 800cdc0:	b09d      	sub	sp, #116	@ 0x74
 800cdc2:	b118      	cbz	r0, 800cdcc <_vfiprintf_r+0x18>
 800cdc4:	6a03      	ldr	r3, [r0, #32]
 800cdc6:	b90b      	cbnz	r3, 800cdcc <_vfiprintf_r+0x18>
 800cdc8:	f7fe f8fa 	bl	800afc0 <__sinit>
 800cdcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdce:	07d9      	lsls	r1, r3, #31
 800cdd0:	d405      	bmi.n	800cdde <_vfiprintf_r+0x2a>
 800cdd2:	89ab      	ldrh	r3, [r5, #12]
 800cdd4:	059a      	lsls	r2, r3, #22
 800cdd6:	d402      	bmi.n	800cdde <_vfiprintf_r+0x2a>
 800cdd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cdda:	f7fe fa5a 	bl	800b292 <__retarget_lock_acquire_recursive>
 800cdde:	89ab      	ldrh	r3, [r5, #12]
 800cde0:	071b      	lsls	r3, r3, #28
 800cde2:	d501      	bpl.n	800cde8 <_vfiprintf_r+0x34>
 800cde4:	692b      	ldr	r3, [r5, #16]
 800cde6:	b99b      	cbnz	r3, 800ce10 <_vfiprintf_r+0x5c>
 800cde8:	4629      	mov	r1, r5
 800cdea:	4630      	mov	r0, r6
 800cdec:	f000 f938 	bl	800d060 <__swsetup_r>
 800cdf0:	b170      	cbz	r0, 800ce10 <_vfiprintf_r+0x5c>
 800cdf2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cdf4:	07dc      	lsls	r4, r3, #31
 800cdf6:	d504      	bpl.n	800ce02 <_vfiprintf_r+0x4e>
 800cdf8:	f04f 30ff 	mov.w	r0, #4294967295
 800cdfc:	b01d      	add	sp, #116	@ 0x74
 800cdfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce02:	89ab      	ldrh	r3, [r5, #12]
 800ce04:	0598      	lsls	r0, r3, #22
 800ce06:	d4f7      	bmi.n	800cdf8 <_vfiprintf_r+0x44>
 800ce08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ce0a:	f7fe fa43 	bl	800b294 <__retarget_lock_release_recursive>
 800ce0e:	e7f3      	b.n	800cdf8 <_vfiprintf_r+0x44>
 800ce10:	2300      	movs	r3, #0
 800ce12:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce14:	2320      	movs	r3, #32
 800ce16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ce1a:	2330      	movs	r3, #48	@ 0x30
 800ce1c:	f04f 0901 	mov.w	r9, #1
 800ce20:	f8cd 800c 	str.w	r8, [sp, #12]
 800ce24:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800cfd0 <_vfiprintf_r+0x21c>
 800ce28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ce2c:	4623      	mov	r3, r4
 800ce2e:	469a      	mov	sl, r3
 800ce30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce34:	b10a      	cbz	r2, 800ce3a <_vfiprintf_r+0x86>
 800ce36:	2a25      	cmp	r2, #37	@ 0x25
 800ce38:	d1f9      	bne.n	800ce2e <_vfiprintf_r+0x7a>
 800ce3a:	ebba 0b04 	subs.w	fp, sl, r4
 800ce3e:	d00b      	beq.n	800ce58 <_vfiprintf_r+0xa4>
 800ce40:	465b      	mov	r3, fp
 800ce42:	4622      	mov	r2, r4
 800ce44:	4629      	mov	r1, r5
 800ce46:	4630      	mov	r0, r6
 800ce48:	f7ff ffa2 	bl	800cd90 <__sfputs_r>
 800ce4c:	3001      	adds	r0, #1
 800ce4e:	f000 80a7 	beq.w	800cfa0 <_vfiprintf_r+0x1ec>
 800ce52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ce54:	445a      	add	r2, fp
 800ce56:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce58:	f89a 3000 	ldrb.w	r3, [sl]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	f000 809f 	beq.w	800cfa0 <_vfiprintf_r+0x1ec>
 800ce62:	2300      	movs	r3, #0
 800ce64:	f04f 32ff 	mov.w	r2, #4294967295
 800ce68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce6c:	f10a 0a01 	add.w	sl, sl, #1
 800ce70:	9304      	str	r3, [sp, #16]
 800ce72:	9307      	str	r3, [sp, #28]
 800ce74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ce78:	931a      	str	r3, [sp, #104]	@ 0x68
 800ce7a:	4654      	mov	r4, sl
 800ce7c:	2205      	movs	r2, #5
 800ce7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce82:	4853      	ldr	r0, [pc, #332]	@ (800cfd0 <_vfiprintf_r+0x21c>)
 800ce84:	f7ff fed8 	bl	800cc38 <memchr>
 800ce88:	9a04      	ldr	r2, [sp, #16]
 800ce8a:	b9d8      	cbnz	r0, 800cec4 <_vfiprintf_r+0x110>
 800ce8c:	06d1      	lsls	r1, r2, #27
 800ce8e:	bf44      	itt	mi
 800ce90:	2320      	movmi	r3, #32
 800ce92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ce96:	0713      	lsls	r3, r2, #28
 800ce98:	bf44      	itt	mi
 800ce9a:	232b      	movmi	r3, #43	@ 0x2b
 800ce9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cea0:	f89a 3000 	ldrb.w	r3, [sl]
 800cea4:	2b2a      	cmp	r3, #42	@ 0x2a
 800cea6:	d015      	beq.n	800ced4 <_vfiprintf_r+0x120>
 800cea8:	4654      	mov	r4, sl
 800ceaa:	2000      	movs	r0, #0
 800ceac:	f04f 0c0a 	mov.w	ip, #10
 800ceb0:	9a07      	ldr	r2, [sp, #28]
 800ceb2:	4621      	mov	r1, r4
 800ceb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ceb8:	3b30      	subs	r3, #48	@ 0x30
 800ceba:	2b09      	cmp	r3, #9
 800cebc:	d94b      	bls.n	800cf56 <_vfiprintf_r+0x1a2>
 800cebe:	b1b0      	cbz	r0, 800ceee <_vfiprintf_r+0x13a>
 800cec0:	9207      	str	r2, [sp, #28]
 800cec2:	e014      	b.n	800ceee <_vfiprintf_r+0x13a>
 800cec4:	eba0 0308 	sub.w	r3, r0, r8
 800cec8:	fa09 f303 	lsl.w	r3, r9, r3
 800cecc:	4313      	orrs	r3, r2
 800cece:	46a2      	mov	sl, r4
 800ced0:	9304      	str	r3, [sp, #16]
 800ced2:	e7d2      	b.n	800ce7a <_vfiprintf_r+0xc6>
 800ced4:	9b03      	ldr	r3, [sp, #12]
 800ced6:	1d19      	adds	r1, r3, #4
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	9103      	str	r1, [sp, #12]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	bfbb      	ittet	lt
 800cee0:	425b      	neglt	r3, r3
 800cee2:	f042 0202 	orrlt.w	r2, r2, #2
 800cee6:	9307      	strge	r3, [sp, #28]
 800cee8:	9307      	strlt	r3, [sp, #28]
 800ceea:	bfb8      	it	lt
 800ceec:	9204      	strlt	r2, [sp, #16]
 800ceee:	7823      	ldrb	r3, [r4, #0]
 800cef0:	2b2e      	cmp	r3, #46	@ 0x2e
 800cef2:	d10a      	bne.n	800cf0a <_vfiprintf_r+0x156>
 800cef4:	7863      	ldrb	r3, [r4, #1]
 800cef6:	2b2a      	cmp	r3, #42	@ 0x2a
 800cef8:	d132      	bne.n	800cf60 <_vfiprintf_r+0x1ac>
 800cefa:	9b03      	ldr	r3, [sp, #12]
 800cefc:	3402      	adds	r4, #2
 800cefe:	1d1a      	adds	r2, r3, #4
 800cf00:	681b      	ldr	r3, [r3, #0]
 800cf02:	9203      	str	r2, [sp, #12]
 800cf04:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cf08:	9305      	str	r3, [sp, #20]
 800cf0a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800cfd4 <_vfiprintf_r+0x220>
 800cf0e:	2203      	movs	r2, #3
 800cf10:	4650      	mov	r0, sl
 800cf12:	7821      	ldrb	r1, [r4, #0]
 800cf14:	f7ff fe90 	bl	800cc38 <memchr>
 800cf18:	b138      	cbz	r0, 800cf2a <_vfiprintf_r+0x176>
 800cf1a:	2240      	movs	r2, #64	@ 0x40
 800cf1c:	9b04      	ldr	r3, [sp, #16]
 800cf1e:	eba0 000a 	sub.w	r0, r0, sl
 800cf22:	4082      	lsls	r2, r0
 800cf24:	4313      	orrs	r3, r2
 800cf26:	3401      	adds	r4, #1
 800cf28:	9304      	str	r3, [sp, #16]
 800cf2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf2e:	2206      	movs	r2, #6
 800cf30:	4829      	ldr	r0, [pc, #164]	@ (800cfd8 <_vfiprintf_r+0x224>)
 800cf32:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cf36:	f7ff fe7f 	bl	800cc38 <memchr>
 800cf3a:	2800      	cmp	r0, #0
 800cf3c:	d03f      	beq.n	800cfbe <_vfiprintf_r+0x20a>
 800cf3e:	4b27      	ldr	r3, [pc, #156]	@ (800cfdc <_vfiprintf_r+0x228>)
 800cf40:	bb1b      	cbnz	r3, 800cf8a <_vfiprintf_r+0x1d6>
 800cf42:	9b03      	ldr	r3, [sp, #12]
 800cf44:	3307      	adds	r3, #7
 800cf46:	f023 0307 	bic.w	r3, r3, #7
 800cf4a:	3308      	adds	r3, #8
 800cf4c:	9303      	str	r3, [sp, #12]
 800cf4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf50:	443b      	add	r3, r7
 800cf52:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf54:	e76a      	b.n	800ce2c <_vfiprintf_r+0x78>
 800cf56:	460c      	mov	r4, r1
 800cf58:	2001      	movs	r0, #1
 800cf5a:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf5e:	e7a8      	b.n	800ceb2 <_vfiprintf_r+0xfe>
 800cf60:	2300      	movs	r3, #0
 800cf62:	f04f 0c0a 	mov.w	ip, #10
 800cf66:	4619      	mov	r1, r3
 800cf68:	3401      	adds	r4, #1
 800cf6a:	9305      	str	r3, [sp, #20]
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf72:	3a30      	subs	r2, #48	@ 0x30
 800cf74:	2a09      	cmp	r2, #9
 800cf76:	d903      	bls.n	800cf80 <_vfiprintf_r+0x1cc>
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d0c6      	beq.n	800cf0a <_vfiprintf_r+0x156>
 800cf7c:	9105      	str	r1, [sp, #20]
 800cf7e:	e7c4      	b.n	800cf0a <_vfiprintf_r+0x156>
 800cf80:	4604      	mov	r4, r0
 800cf82:	2301      	movs	r3, #1
 800cf84:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf88:	e7f0      	b.n	800cf6c <_vfiprintf_r+0x1b8>
 800cf8a:	ab03      	add	r3, sp, #12
 800cf8c:	9300      	str	r3, [sp, #0]
 800cf8e:	462a      	mov	r2, r5
 800cf90:	4630      	mov	r0, r6
 800cf92:	4b13      	ldr	r3, [pc, #76]	@ (800cfe0 <_vfiprintf_r+0x22c>)
 800cf94:	a904      	add	r1, sp, #16
 800cf96:	f3af 8000 	nop.w
 800cf9a:	4607      	mov	r7, r0
 800cf9c:	1c78      	adds	r0, r7, #1
 800cf9e:	d1d6      	bne.n	800cf4e <_vfiprintf_r+0x19a>
 800cfa0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cfa2:	07d9      	lsls	r1, r3, #31
 800cfa4:	d405      	bmi.n	800cfb2 <_vfiprintf_r+0x1fe>
 800cfa6:	89ab      	ldrh	r3, [r5, #12]
 800cfa8:	059a      	lsls	r2, r3, #22
 800cfaa:	d402      	bmi.n	800cfb2 <_vfiprintf_r+0x1fe>
 800cfac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cfae:	f7fe f971 	bl	800b294 <__retarget_lock_release_recursive>
 800cfb2:	89ab      	ldrh	r3, [r5, #12]
 800cfb4:	065b      	lsls	r3, r3, #25
 800cfb6:	f53f af1f 	bmi.w	800cdf8 <_vfiprintf_r+0x44>
 800cfba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cfbc:	e71e      	b.n	800cdfc <_vfiprintf_r+0x48>
 800cfbe:	ab03      	add	r3, sp, #12
 800cfc0:	9300      	str	r3, [sp, #0]
 800cfc2:	462a      	mov	r2, r5
 800cfc4:	4630      	mov	r0, r6
 800cfc6:	4b06      	ldr	r3, [pc, #24]	@ (800cfe0 <_vfiprintf_r+0x22c>)
 800cfc8:	a904      	add	r1, sp, #16
 800cfca:	f7ff fc43 	bl	800c854 <_printf_i>
 800cfce:	e7e4      	b.n	800cf9a <_vfiprintf_r+0x1e6>
 800cfd0:	0800d828 	.word	0x0800d828
 800cfd4:	0800d82e 	.word	0x0800d82e
 800cfd8:	0800d832 	.word	0x0800d832
 800cfdc:	00000000 	.word	0x00000000
 800cfe0:	0800cd91 	.word	0x0800cd91

0800cfe4 <__swbuf_r>:
 800cfe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfe6:	460e      	mov	r6, r1
 800cfe8:	4614      	mov	r4, r2
 800cfea:	4605      	mov	r5, r0
 800cfec:	b118      	cbz	r0, 800cff6 <__swbuf_r+0x12>
 800cfee:	6a03      	ldr	r3, [r0, #32]
 800cff0:	b90b      	cbnz	r3, 800cff6 <__swbuf_r+0x12>
 800cff2:	f7fd ffe5 	bl	800afc0 <__sinit>
 800cff6:	69a3      	ldr	r3, [r4, #24]
 800cff8:	60a3      	str	r3, [r4, #8]
 800cffa:	89a3      	ldrh	r3, [r4, #12]
 800cffc:	071a      	lsls	r2, r3, #28
 800cffe:	d501      	bpl.n	800d004 <__swbuf_r+0x20>
 800d000:	6923      	ldr	r3, [r4, #16]
 800d002:	b943      	cbnz	r3, 800d016 <__swbuf_r+0x32>
 800d004:	4621      	mov	r1, r4
 800d006:	4628      	mov	r0, r5
 800d008:	f000 f82a 	bl	800d060 <__swsetup_r>
 800d00c:	b118      	cbz	r0, 800d016 <__swbuf_r+0x32>
 800d00e:	f04f 37ff 	mov.w	r7, #4294967295
 800d012:	4638      	mov	r0, r7
 800d014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d016:	6823      	ldr	r3, [r4, #0]
 800d018:	6922      	ldr	r2, [r4, #16]
 800d01a:	b2f6      	uxtb	r6, r6
 800d01c:	1a98      	subs	r0, r3, r2
 800d01e:	6963      	ldr	r3, [r4, #20]
 800d020:	4637      	mov	r7, r6
 800d022:	4283      	cmp	r3, r0
 800d024:	dc05      	bgt.n	800d032 <__swbuf_r+0x4e>
 800d026:	4621      	mov	r1, r4
 800d028:	4628      	mov	r0, r5
 800d02a:	f7ff fdb3 	bl	800cb94 <_fflush_r>
 800d02e:	2800      	cmp	r0, #0
 800d030:	d1ed      	bne.n	800d00e <__swbuf_r+0x2a>
 800d032:	68a3      	ldr	r3, [r4, #8]
 800d034:	3b01      	subs	r3, #1
 800d036:	60a3      	str	r3, [r4, #8]
 800d038:	6823      	ldr	r3, [r4, #0]
 800d03a:	1c5a      	adds	r2, r3, #1
 800d03c:	6022      	str	r2, [r4, #0]
 800d03e:	701e      	strb	r6, [r3, #0]
 800d040:	6962      	ldr	r2, [r4, #20]
 800d042:	1c43      	adds	r3, r0, #1
 800d044:	429a      	cmp	r2, r3
 800d046:	d004      	beq.n	800d052 <__swbuf_r+0x6e>
 800d048:	89a3      	ldrh	r3, [r4, #12]
 800d04a:	07db      	lsls	r3, r3, #31
 800d04c:	d5e1      	bpl.n	800d012 <__swbuf_r+0x2e>
 800d04e:	2e0a      	cmp	r6, #10
 800d050:	d1df      	bne.n	800d012 <__swbuf_r+0x2e>
 800d052:	4621      	mov	r1, r4
 800d054:	4628      	mov	r0, r5
 800d056:	f7ff fd9d 	bl	800cb94 <_fflush_r>
 800d05a:	2800      	cmp	r0, #0
 800d05c:	d0d9      	beq.n	800d012 <__swbuf_r+0x2e>
 800d05e:	e7d6      	b.n	800d00e <__swbuf_r+0x2a>

0800d060 <__swsetup_r>:
 800d060:	b538      	push	{r3, r4, r5, lr}
 800d062:	4b29      	ldr	r3, [pc, #164]	@ (800d108 <__swsetup_r+0xa8>)
 800d064:	4605      	mov	r5, r0
 800d066:	6818      	ldr	r0, [r3, #0]
 800d068:	460c      	mov	r4, r1
 800d06a:	b118      	cbz	r0, 800d074 <__swsetup_r+0x14>
 800d06c:	6a03      	ldr	r3, [r0, #32]
 800d06e:	b90b      	cbnz	r3, 800d074 <__swsetup_r+0x14>
 800d070:	f7fd ffa6 	bl	800afc0 <__sinit>
 800d074:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d078:	0719      	lsls	r1, r3, #28
 800d07a:	d422      	bmi.n	800d0c2 <__swsetup_r+0x62>
 800d07c:	06da      	lsls	r2, r3, #27
 800d07e:	d407      	bmi.n	800d090 <__swsetup_r+0x30>
 800d080:	2209      	movs	r2, #9
 800d082:	602a      	str	r2, [r5, #0]
 800d084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d088:	f04f 30ff 	mov.w	r0, #4294967295
 800d08c:	81a3      	strh	r3, [r4, #12]
 800d08e:	e033      	b.n	800d0f8 <__swsetup_r+0x98>
 800d090:	0758      	lsls	r0, r3, #29
 800d092:	d512      	bpl.n	800d0ba <__swsetup_r+0x5a>
 800d094:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d096:	b141      	cbz	r1, 800d0aa <__swsetup_r+0x4a>
 800d098:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d09c:	4299      	cmp	r1, r3
 800d09e:	d002      	beq.n	800d0a6 <__swsetup_r+0x46>
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	f7fe f919 	bl	800b2d8 <_free_r>
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	6363      	str	r3, [r4, #52]	@ 0x34
 800d0aa:	89a3      	ldrh	r3, [r4, #12]
 800d0ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d0b0:	81a3      	strh	r3, [r4, #12]
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	6063      	str	r3, [r4, #4]
 800d0b6:	6923      	ldr	r3, [r4, #16]
 800d0b8:	6023      	str	r3, [r4, #0]
 800d0ba:	89a3      	ldrh	r3, [r4, #12]
 800d0bc:	f043 0308 	orr.w	r3, r3, #8
 800d0c0:	81a3      	strh	r3, [r4, #12]
 800d0c2:	6923      	ldr	r3, [r4, #16]
 800d0c4:	b94b      	cbnz	r3, 800d0da <__swsetup_r+0x7a>
 800d0c6:	89a3      	ldrh	r3, [r4, #12]
 800d0c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d0cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d0d0:	d003      	beq.n	800d0da <__swsetup_r+0x7a>
 800d0d2:	4621      	mov	r1, r4
 800d0d4:	4628      	mov	r0, r5
 800d0d6:	f000 f882 	bl	800d1de <__smakebuf_r>
 800d0da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0de:	f013 0201 	ands.w	r2, r3, #1
 800d0e2:	d00a      	beq.n	800d0fa <__swsetup_r+0x9a>
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	60a2      	str	r2, [r4, #8]
 800d0e8:	6962      	ldr	r2, [r4, #20]
 800d0ea:	4252      	negs	r2, r2
 800d0ec:	61a2      	str	r2, [r4, #24]
 800d0ee:	6922      	ldr	r2, [r4, #16]
 800d0f0:	b942      	cbnz	r2, 800d104 <__swsetup_r+0xa4>
 800d0f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d0f6:	d1c5      	bne.n	800d084 <__swsetup_r+0x24>
 800d0f8:	bd38      	pop	{r3, r4, r5, pc}
 800d0fa:	0799      	lsls	r1, r3, #30
 800d0fc:	bf58      	it	pl
 800d0fe:	6962      	ldrpl	r2, [r4, #20]
 800d100:	60a2      	str	r2, [r4, #8]
 800d102:	e7f4      	b.n	800d0ee <__swsetup_r+0x8e>
 800d104:	2000      	movs	r0, #0
 800d106:	e7f7      	b.n	800d0f8 <__swsetup_r+0x98>
 800d108:	20000194 	.word	0x20000194

0800d10c <_raise_r>:
 800d10c:	291f      	cmp	r1, #31
 800d10e:	b538      	push	{r3, r4, r5, lr}
 800d110:	4605      	mov	r5, r0
 800d112:	460c      	mov	r4, r1
 800d114:	d904      	bls.n	800d120 <_raise_r+0x14>
 800d116:	2316      	movs	r3, #22
 800d118:	6003      	str	r3, [r0, #0]
 800d11a:	f04f 30ff 	mov.w	r0, #4294967295
 800d11e:	bd38      	pop	{r3, r4, r5, pc}
 800d120:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d122:	b112      	cbz	r2, 800d12a <_raise_r+0x1e>
 800d124:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d128:	b94b      	cbnz	r3, 800d13e <_raise_r+0x32>
 800d12a:	4628      	mov	r0, r5
 800d12c:	f000 f830 	bl	800d190 <_getpid_r>
 800d130:	4622      	mov	r2, r4
 800d132:	4601      	mov	r1, r0
 800d134:	4628      	mov	r0, r5
 800d136:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d13a:	f000 b817 	b.w	800d16c <_kill_r>
 800d13e:	2b01      	cmp	r3, #1
 800d140:	d00a      	beq.n	800d158 <_raise_r+0x4c>
 800d142:	1c59      	adds	r1, r3, #1
 800d144:	d103      	bne.n	800d14e <_raise_r+0x42>
 800d146:	2316      	movs	r3, #22
 800d148:	6003      	str	r3, [r0, #0]
 800d14a:	2001      	movs	r0, #1
 800d14c:	e7e7      	b.n	800d11e <_raise_r+0x12>
 800d14e:	2100      	movs	r1, #0
 800d150:	4620      	mov	r0, r4
 800d152:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d156:	4798      	blx	r3
 800d158:	2000      	movs	r0, #0
 800d15a:	e7e0      	b.n	800d11e <_raise_r+0x12>

0800d15c <raise>:
 800d15c:	4b02      	ldr	r3, [pc, #8]	@ (800d168 <raise+0xc>)
 800d15e:	4601      	mov	r1, r0
 800d160:	6818      	ldr	r0, [r3, #0]
 800d162:	f7ff bfd3 	b.w	800d10c <_raise_r>
 800d166:	bf00      	nop
 800d168:	20000194 	.word	0x20000194

0800d16c <_kill_r>:
 800d16c:	b538      	push	{r3, r4, r5, lr}
 800d16e:	2300      	movs	r3, #0
 800d170:	4d06      	ldr	r5, [pc, #24]	@ (800d18c <_kill_r+0x20>)
 800d172:	4604      	mov	r4, r0
 800d174:	4608      	mov	r0, r1
 800d176:	4611      	mov	r1, r2
 800d178:	602b      	str	r3, [r5, #0]
 800d17a:	f7f3 feee 	bl	8000f5a <_kill>
 800d17e:	1c43      	adds	r3, r0, #1
 800d180:	d102      	bne.n	800d188 <_kill_r+0x1c>
 800d182:	682b      	ldr	r3, [r5, #0]
 800d184:	b103      	cbz	r3, 800d188 <_kill_r+0x1c>
 800d186:	6023      	str	r3, [r4, #0]
 800d188:	bd38      	pop	{r3, r4, r5, pc}
 800d18a:	bf00      	nop
 800d18c:	2000150c 	.word	0x2000150c

0800d190 <_getpid_r>:
 800d190:	f7f3 bedc 	b.w	8000f4c <_getpid>

0800d194 <__swhatbuf_r>:
 800d194:	b570      	push	{r4, r5, r6, lr}
 800d196:	460c      	mov	r4, r1
 800d198:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d19c:	4615      	mov	r5, r2
 800d19e:	2900      	cmp	r1, #0
 800d1a0:	461e      	mov	r6, r3
 800d1a2:	b096      	sub	sp, #88	@ 0x58
 800d1a4:	da0c      	bge.n	800d1c0 <__swhatbuf_r+0x2c>
 800d1a6:	89a3      	ldrh	r3, [r4, #12]
 800d1a8:	2100      	movs	r1, #0
 800d1aa:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d1ae:	bf14      	ite	ne
 800d1b0:	2340      	movne	r3, #64	@ 0x40
 800d1b2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d1b6:	2000      	movs	r0, #0
 800d1b8:	6031      	str	r1, [r6, #0]
 800d1ba:	602b      	str	r3, [r5, #0]
 800d1bc:	b016      	add	sp, #88	@ 0x58
 800d1be:	bd70      	pop	{r4, r5, r6, pc}
 800d1c0:	466a      	mov	r2, sp
 800d1c2:	f000 f849 	bl	800d258 <_fstat_r>
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	dbed      	blt.n	800d1a6 <__swhatbuf_r+0x12>
 800d1ca:	9901      	ldr	r1, [sp, #4]
 800d1cc:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d1d0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d1d4:	4259      	negs	r1, r3
 800d1d6:	4159      	adcs	r1, r3
 800d1d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d1dc:	e7eb      	b.n	800d1b6 <__swhatbuf_r+0x22>

0800d1de <__smakebuf_r>:
 800d1de:	898b      	ldrh	r3, [r1, #12]
 800d1e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d1e2:	079d      	lsls	r5, r3, #30
 800d1e4:	4606      	mov	r6, r0
 800d1e6:	460c      	mov	r4, r1
 800d1e8:	d507      	bpl.n	800d1fa <__smakebuf_r+0x1c>
 800d1ea:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d1ee:	6023      	str	r3, [r4, #0]
 800d1f0:	6123      	str	r3, [r4, #16]
 800d1f2:	2301      	movs	r3, #1
 800d1f4:	6163      	str	r3, [r4, #20]
 800d1f6:	b003      	add	sp, #12
 800d1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1fa:	466a      	mov	r2, sp
 800d1fc:	ab01      	add	r3, sp, #4
 800d1fe:	f7ff ffc9 	bl	800d194 <__swhatbuf_r>
 800d202:	9f00      	ldr	r7, [sp, #0]
 800d204:	4605      	mov	r5, r0
 800d206:	4639      	mov	r1, r7
 800d208:	4630      	mov	r0, r6
 800d20a:	f7fe fc09 	bl	800ba20 <_malloc_r>
 800d20e:	b948      	cbnz	r0, 800d224 <__smakebuf_r+0x46>
 800d210:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d214:	059a      	lsls	r2, r3, #22
 800d216:	d4ee      	bmi.n	800d1f6 <__smakebuf_r+0x18>
 800d218:	f023 0303 	bic.w	r3, r3, #3
 800d21c:	f043 0302 	orr.w	r3, r3, #2
 800d220:	81a3      	strh	r3, [r4, #12]
 800d222:	e7e2      	b.n	800d1ea <__smakebuf_r+0xc>
 800d224:	89a3      	ldrh	r3, [r4, #12]
 800d226:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d22a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d22e:	81a3      	strh	r3, [r4, #12]
 800d230:	9b01      	ldr	r3, [sp, #4]
 800d232:	6020      	str	r0, [r4, #0]
 800d234:	b15b      	cbz	r3, 800d24e <__smakebuf_r+0x70>
 800d236:	4630      	mov	r0, r6
 800d238:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d23c:	f000 f81e 	bl	800d27c <_isatty_r>
 800d240:	b128      	cbz	r0, 800d24e <__smakebuf_r+0x70>
 800d242:	89a3      	ldrh	r3, [r4, #12]
 800d244:	f023 0303 	bic.w	r3, r3, #3
 800d248:	f043 0301 	orr.w	r3, r3, #1
 800d24c:	81a3      	strh	r3, [r4, #12]
 800d24e:	89a3      	ldrh	r3, [r4, #12]
 800d250:	431d      	orrs	r5, r3
 800d252:	81a5      	strh	r5, [r4, #12]
 800d254:	e7cf      	b.n	800d1f6 <__smakebuf_r+0x18>
	...

0800d258 <_fstat_r>:
 800d258:	b538      	push	{r3, r4, r5, lr}
 800d25a:	2300      	movs	r3, #0
 800d25c:	4d06      	ldr	r5, [pc, #24]	@ (800d278 <_fstat_r+0x20>)
 800d25e:	4604      	mov	r4, r0
 800d260:	4608      	mov	r0, r1
 800d262:	4611      	mov	r1, r2
 800d264:	602b      	str	r3, [r5, #0]
 800d266:	f7f3 fed7 	bl	8001018 <_fstat>
 800d26a:	1c43      	adds	r3, r0, #1
 800d26c:	d102      	bne.n	800d274 <_fstat_r+0x1c>
 800d26e:	682b      	ldr	r3, [r5, #0]
 800d270:	b103      	cbz	r3, 800d274 <_fstat_r+0x1c>
 800d272:	6023      	str	r3, [r4, #0]
 800d274:	bd38      	pop	{r3, r4, r5, pc}
 800d276:	bf00      	nop
 800d278:	2000150c 	.word	0x2000150c

0800d27c <_isatty_r>:
 800d27c:	b538      	push	{r3, r4, r5, lr}
 800d27e:	2300      	movs	r3, #0
 800d280:	4d05      	ldr	r5, [pc, #20]	@ (800d298 <_isatty_r+0x1c>)
 800d282:	4604      	mov	r4, r0
 800d284:	4608      	mov	r0, r1
 800d286:	602b      	str	r3, [r5, #0]
 800d288:	f7f3 fed5 	bl	8001036 <_isatty>
 800d28c:	1c43      	adds	r3, r0, #1
 800d28e:	d102      	bne.n	800d296 <_isatty_r+0x1a>
 800d290:	682b      	ldr	r3, [r5, #0]
 800d292:	b103      	cbz	r3, 800d296 <_isatty_r+0x1a>
 800d294:	6023      	str	r3, [r4, #0]
 800d296:	bd38      	pop	{r3, r4, r5, pc}
 800d298:	2000150c 	.word	0x2000150c

0800d29c <_init>:
 800d29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d29e:	bf00      	nop
 800d2a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2a2:	bc08      	pop	{r3}
 800d2a4:	469e      	mov	lr, r3
 800d2a6:	4770      	bx	lr

0800d2a8 <_fini>:
 800d2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2aa:	bf00      	nop
 800d2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2ae:	bc08      	pop	{r3}
 800d2b0:	469e      	mov	lr, r3
 800d2b2:	4770      	bx	lr
